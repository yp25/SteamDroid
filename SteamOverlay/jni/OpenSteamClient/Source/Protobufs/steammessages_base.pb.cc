// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_base.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "steammessages_base.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace Sc {

void protobuf_ShutdownFile_steammessages_5fbase_2eproto() {
  delete CMsgProtoBufHeader::default_instance_;
  delete CMsgMulti::default_instance_;
  delete CMsgAuthTicket::default_instance_;
  delete CCDDBAppDetailCommon::default_instance_;
  delete CMsgAppRights::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_steammessages_5fbase_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_steammessages_5fbase_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  CMsgProtoBufHeader::default_instance_ = new CMsgProtoBufHeader();
  CMsgMulti::default_instance_ = new CMsgMulti();
  CMsgAuthTicket::default_instance_ = new CMsgAuthTicket();
  CCDDBAppDetailCommon::default_instance_ = new CCDDBAppDetailCommon();
  CMsgAppRights::default_instance_ = new CMsgAppRights();
  CMsgProtoBufHeader::default_instance_->InitAsDefaultInstance();
  CMsgMulti::default_instance_->InitAsDefaultInstance();
  CMsgAuthTicket::default_instance_->InitAsDefaultInstance();
  CCDDBAppDetailCommon::default_instance_->InitAsDefaultInstance();
  CMsgAppRights::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_steammessages_5fbase_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_steammessages_5fbase_2eproto_once_);
void protobuf_AddDesc_steammessages_5fbase_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_steammessages_5fbase_2eproto_once_,
                 &protobuf_AddDesc_steammessages_5fbase_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_steammessages_5fbase_2eproto {
  StaticDescriptorInitializer_steammessages_5fbase_2eproto() {
    protobuf_AddDesc_steammessages_5fbase_2eproto();
  }
} static_descriptor_initializer_steammessages_5fbase_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int CMsgProtoBufHeader::kSteamidFieldNumber;
const int CMsgProtoBufHeader::kClientSessionidFieldNumber;
const int CMsgProtoBufHeader::kRoutingAppidFieldNumber;
const int CMsgProtoBufHeader::kJobidSourceFieldNumber;
const int CMsgProtoBufHeader::kJobidTargetFieldNumber;
const int CMsgProtoBufHeader::kTargetJobNameFieldNumber;
const int CMsgProtoBufHeader::kEresultFieldNumber;
const int CMsgProtoBufHeader::kErrorMessageFieldNumber;
const int CMsgProtoBufHeader::kIpFieldNumber;
const int CMsgProtoBufHeader::kAuthAccountFlagsFieldNumber;
const int CMsgProtoBufHeader::kTransportErrorFieldNumber;
const int CMsgProtoBufHeader::kMessageidFieldNumber;
const int CMsgProtoBufHeader::kPublisheridFieldNumber;
#endif  // !_MSC_VER

CMsgProtoBufHeader::CMsgProtoBufHeader()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgProtoBufHeader::InitAsDefaultInstance() {
}

CMsgProtoBufHeader::CMsgProtoBufHeader(const CMsgProtoBufHeader& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgProtoBufHeader::SharedCtor() {
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
  client_sessionid_ = 0;
  routing_appid_ = 0u;
  jobid_source_ = GOOGLE_ULONGLONG(18446744073709551615);
  jobid_target_ = GOOGLE_ULONGLONG(18446744073709551615);
  target_job_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  eresult_ = 2;
  error_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = 0u;
  auth_account_flags_ = 0u;
  transport_error_ = 1;
  messageid_ = GOOGLE_ULONGLONG(18446744073709551615);
  publisherid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgProtoBufHeader::~CMsgProtoBufHeader() {
  SharedDtor();
}

void CMsgProtoBufHeader::SharedDtor() {
  if (target_job_name_ != &::google::protobuf::internal::kEmptyString) {
    delete target_job_name_;
  }
  if (error_message_ != &::google::protobuf::internal::kEmptyString) {
    delete error_message_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgProtoBufHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgProtoBufHeader& CMsgProtoBufHeader::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fbase_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fbase_2eproto();
#endif
  return *default_instance_;
}

CMsgProtoBufHeader* CMsgProtoBufHeader::default_instance_ = NULL;

CMsgProtoBufHeader* CMsgProtoBufHeader::New() const {
  return new CMsgProtoBufHeader;
}

void CMsgProtoBufHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steamid_ = GOOGLE_ULONGLONG(0);
    client_sessionid_ = 0;
    routing_appid_ = 0u;
    jobid_source_ = GOOGLE_ULONGLONG(18446744073709551615);
    jobid_target_ = GOOGLE_ULONGLONG(18446744073709551615);
    if (has_target_job_name()) {
      if (target_job_name_ != &::google::protobuf::internal::kEmptyString) {
        target_job_name_->clear();
      }
    }
    eresult_ = 2;
    if (has_error_message()) {
      if (error_message_ != &::google::protobuf::internal::kEmptyString) {
        error_message_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    ip_ = 0u;
    auth_account_flags_ = 0u;
    transport_error_ = 1;
    messageid_ = GOOGLE_ULONGLONG(18446744073709551615);
    publisherid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgProtoBufHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
          set_has_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_client_sessionid;
        break;
      }

      // optional int32 client_sessionid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_sessionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_sessionid_)));
          set_has_client_sessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_routing_appid;
        break;
      }

      // optional uint32 routing_appid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_routing_appid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &routing_appid_)));
          set_has_routing_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_jobid_source;
        break;
      }

      // optional fixed64 jobid_source = 10 [default = 18446744073709551615];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_jobid_source:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &jobid_source_)));
          set_has_jobid_source();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_jobid_target;
        break;
      }

      // optional fixed64 jobid_target = 11 [default = 18446744073709551615];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_jobid_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &jobid_target_)));
          set_has_jobid_target();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_target_job_name;
        break;
      }

      // optional string target_job_name = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_job_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_job_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_eresult;
        break;
      }

      // optional int32 eresult = 13 [default = 2];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eresult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_error_message;
        break;
      }

      // optional string error_message = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_ip;
        break;
      }

      // optional uint32 ip = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_auth_account_flags;
        break;
      }

      // optional uint32 auth_account_flags = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auth_account_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &auth_account_flags_)));
          set_has_auth_account_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_transport_error;
        break;
      }

      // optional int32 transport_error = 17 [default = 1];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transport_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transport_error_)));
          set_has_transport_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_messageid;
        break;
      }

      // optional uint64 messageid = 18 [default = 18446744073709551615];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_messageid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &messageid_)));
          set_has_messageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_publisherid;
        break;
      }

      // optional uint32 publisherid = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_publisherid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &publisherid_)));
          set_has_publisherid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgProtoBufHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional int32 client_sessionid = 2;
  if (has_client_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->client_sessionid(), output);
  }

  // optional uint32 routing_appid = 3;
  if (has_routing_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->routing_appid(), output);
  }

  // optional fixed64 jobid_source = 10 [default = 18446744073709551615];
  if (has_jobid_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(10, this->jobid_source(), output);
  }

  // optional fixed64 jobid_target = 11 [default = 18446744073709551615];
  if (has_jobid_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(11, this->jobid_target(), output);
  }

  // optional string target_job_name = 12;
  if (has_target_job_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->target_job_name(), output);
  }

  // optional int32 eresult = 13 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->eresult(), output);
  }

  // optional string error_message = 14;
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->error_message(), output);
  }

  // optional uint32 ip = 15;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->ip(), output);
  }

  // optional uint32 auth_account_flags = 16;
  if (has_auth_account_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->auth_account_flags(), output);
  }

  // optional int32 transport_error = 17 [default = 1];
  if (has_transport_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->transport_error(), output);
  }

  // optional uint64 messageid = 18 [default = 18446744073709551615];
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->messageid(), output);
  }

  // optional uint32 publisherid = 19;
  if (has_publisherid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->publisherid(), output);
  }

}

int CMsgProtoBufHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional int32 client_sessionid = 2;
    if (has_client_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_sessionid());
    }

    // optional uint32 routing_appid = 3;
    if (has_routing_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->routing_appid());
    }

    // optional fixed64 jobid_source = 10 [default = 18446744073709551615];
    if (has_jobid_source()) {
      total_size += 1 + 8;
    }

    // optional fixed64 jobid_target = 11 [default = 18446744073709551615];
    if (has_jobid_target()) {
      total_size += 1 + 8;
    }

    // optional string target_job_name = 12;
    if (has_target_job_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target_job_name());
    }

    // optional int32 eresult = 13 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional string error_message = 14;
    if (has_error_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_message());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 ip = 15;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip());
    }

    // optional uint32 auth_account_flags = 16;
    if (has_auth_account_flags()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->auth_account_flags());
    }

    // optional int32 transport_error = 17 [default = 1];
    if (has_transport_error()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transport_error());
    }

    // optional uint64 messageid = 18 [default = 18446744073709551615];
    if (has_messageid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->messageid());
    }

    // optional uint32 publisherid = 19;
    if (has_publisherid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->publisherid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgProtoBufHeader::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgProtoBufHeader*>(&from));
}

void CMsgProtoBufHeader::MergeFrom(const CMsgProtoBufHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
    if (from.has_client_sessionid()) {
      set_client_sessionid(from.client_sessionid());
    }
    if (from.has_routing_appid()) {
      set_routing_appid(from.routing_appid());
    }
    if (from.has_jobid_source()) {
      set_jobid_source(from.jobid_source());
    }
    if (from.has_jobid_target()) {
      set_jobid_target(from.jobid_target());
    }
    if (from.has_target_job_name()) {
      set_target_job_name(from.target_job_name());
    }
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_error_message()) {
      set_error_message(from.error_message());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_auth_account_flags()) {
      set_auth_account_flags(from.auth_account_flags());
    }
    if (from.has_transport_error()) {
      set_transport_error(from.transport_error());
    }
    if (from.has_messageid()) {
      set_messageid(from.messageid());
    }
    if (from.has_publisherid()) {
      set_publisherid(from.publisherid());
    }
  }
}

void CMsgProtoBufHeader::CopyFrom(const CMsgProtoBufHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgProtoBufHeader::IsInitialized() const {

  return true;
}

void CMsgProtoBufHeader::Swap(CMsgProtoBufHeader* other) {
  if (other != this) {
    std::swap(steamid_, other->steamid_);
    std::swap(client_sessionid_, other->client_sessionid_);
    std::swap(routing_appid_, other->routing_appid_);
    std::swap(jobid_source_, other->jobid_source_);
    std::swap(jobid_target_, other->jobid_target_);
    std::swap(target_job_name_, other->target_job_name_);
    std::swap(eresult_, other->eresult_);
    std::swap(error_message_, other->error_message_);
    std::swap(ip_, other->ip_);
    std::swap(auth_account_flags_, other->auth_account_flags_);
    std::swap(transport_error_, other->transport_error_);
    std::swap(messageid_, other->messageid_);
    std::swap(publisherid_, other->publisherid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgProtoBufHeader::GetTypeName() const {
  return "Sc.CMsgProtoBufHeader";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgMulti::kSizeUnzippedFieldNumber;
const int CMsgMulti::kMessageBodyFieldNumber;
#endif  // !_MSC_VER

CMsgMulti::CMsgMulti()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgMulti::InitAsDefaultInstance() {
}

CMsgMulti::CMsgMulti(const CMsgMulti& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgMulti::SharedCtor() {
  _cached_size_ = 0;
  size_unzipped_ = 0u;
  message_body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgMulti::~CMsgMulti() {
  SharedDtor();
}

void CMsgMulti::SharedDtor() {
  if (message_body_ != &::google::protobuf::internal::kEmptyString) {
    delete message_body_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgMulti::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgMulti& CMsgMulti::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fbase_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fbase_2eproto();
#endif
  return *default_instance_;
}

CMsgMulti* CMsgMulti::default_instance_ = NULL;

CMsgMulti* CMsgMulti::New() const {
  return new CMsgMulti;
}

void CMsgMulti::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    size_unzipped_ = 0u;
    if (has_message_body()) {
      if (message_body_ != &::google::protobuf::internal::kEmptyString) {
        message_body_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgMulti::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 size_unzipped = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_unzipped_)));
          set_has_size_unzipped();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message_body;
        break;
      }

      // optional bytes message_body = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgMulti::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 size_unzipped = 1;
  if (has_size_unzipped()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->size_unzipped(), output);
  }

  // optional bytes message_body = 2;
  if (has_message_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->message_body(), output);
  }

}

int CMsgMulti::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 size_unzipped = 1;
    if (has_size_unzipped()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size_unzipped());
    }

    // optional bytes message_body = 2;
    if (has_message_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->message_body());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgMulti::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgMulti*>(&from));
}

void CMsgMulti::MergeFrom(const CMsgMulti& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_size_unzipped()) {
      set_size_unzipped(from.size_unzipped());
    }
    if (from.has_message_body()) {
      set_message_body(from.message_body());
    }
  }
}

void CMsgMulti::CopyFrom(const CMsgMulti& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMulti::IsInitialized() const {

  return true;
}

void CMsgMulti::Swap(CMsgMulti* other) {
  if (other != this) {
    std::swap(size_unzipped_, other->size_unzipped_);
    std::swap(message_body_, other->message_body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgMulti::GetTypeName() const {
  return "Sc.CMsgMulti";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgAuthTicket::kEstateFieldNumber;
const int CMsgAuthTicket::kEresultFieldNumber;
const int CMsgAuthTicket::kSteamidFieldNumber;
const int CMsgAuthTicket::kGameidFieldNumber;
const int CMsgAuthTicket::kHSteamPipeFieldNumber;
const int CMsgAuthTicket::kTicketCrcFieldNumber;
const int CMsgAuthTicket::kTicketFieldNumber;
#endif  // !_MSC_VER

CMsgAuthTicket::CMsgAuthTicket()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgAuthTicket::InitAsDefaultInstance() {
}

CMsgAuthTicket::CMsgAuthTicket(const CMsgAuthTicket& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgAuthTicket::SharedCtor() {
  _cached_size_ = 0;
  estate_ = 0u;
  eresult_ = 2u;
  steamid_ = GOOGLE_ULONGLONG(0);
  gameid_ = GOOGLE_ULONGLONG(0);
  h_steam_pipe_ = 0u;
  ticket_crc_ = 0u;
  ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgAuthTicket::~CMsgAuthTicket() {
  SharedDtor();
}

void CMsgAuthTicket::SharedDtor() {
  if (ticket_ != &::google::protobuf::internal::kEmptyString) {
    delete ticket_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgAuthTicket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgAuthTicket& CMsgAuthTicket::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fbase_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fbase_2eproto();
#endif
  return *default_instance_;
}

CMsgAuthTicket* CMsgAuthTicket::default_instance_ = NULL;

CMsgAuthTicket* CMsgAuthTicket::New() const {
  return new CMsgAuthTicket;
}

void CMsgAuthTicket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    estate_ = 0u;
    eresult_ = 2u;
    steamid_ = GOOGLE_ULONGLONG(0);
    gameid_ = GOOGLE_ULONGLONG(0);
    h_steam_pipe_ = 0u;
    ticket_crc_ = 0u;
    if (has_ticket()) {
      if (ticket_ != &::google::protobuf::internal::kEmptyString) {
        ticket_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgAuthTicket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 estate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &estate_)));
          set_has_estate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_eresult;
        break;
      }

      // optional uint32 eresult = 2 [default = 2];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eresult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_steamid;
        break;
      }

      // optional fixed64 steamid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
          set_has_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_gameid;
        break;
      }

      // optional fixed64 gameid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_gameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_h_steam_pipe;
        break;
      }

      // optional uint32 h_steam_pipe = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_h_steam_pipe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &h_steam_pipe_)));
          set_has_h_steam_pipe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ticket_crc;
        break;
      }

      // optional uint32 ticket_crc = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ticket_crc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ticket_crc_)));
          set_has_ticket_crc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ticket;
        break;
      }

      // optional bytes ticket = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ticket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ticket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgAuthTicket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 estate = 1;
  if (has_estate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->estate(), output);
  }

  // optional uint32 eresult = 2 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->eresult(), output);
  }

  // optional fixed64 steamid = 3;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->steamid(), output);
  }

  // optional fixed64 gameid = 4;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->gameid(), output);
  }

  // optional uint32 h_steam_pipe = 5;
  if (has_h_steam_pipe()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->h_steam_pipe(), output);
  }

  // optional uint32 ticket_crc = 6;
  if (has_ticket_crc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ticket_crc(), output);
  }

  // optional bytes ticket = 7;
  if (has_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->ticket(), output);
  }

}

int CMsgAuthTicket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 estate = 1;
    if (has_estate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->estate());
    }

    // optional uint32 eresult = 2 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

    // optional fixed64 steamid = 3;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional fixed64 gameid = 4;
    if (has_gameid()) {
      total_size += 1 + 8;
    }

    // optional uint32 h_steam_pipe = 5;
    if (has_h_steam_pipe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->h_steam_pipe());
    }

    // optional uint32 ticket_crc = 6;
    if (has_ticket_crc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ticket_crc());
    }

    // optional bytes ticket = 7;
    if (has_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ticket());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAuthTicket::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgAuthTicket*>(&from));
}

void CMsgAuthTicket::MergeFrom(const CMsgAuthTicket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_estate()) {
      set_estate(from.estate());
    }
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_h_steam_pipe()) {
      set_h_steam_pipe(from.h_steam_pipe());
    }
    if (from.has_ticket_crc()) {
      set_ticket_crc(from.ticket_crc());
    }
    if (from.has_ticket()) {
      set_ticket(from.ticket());
    }
  }
}

void CMsgAuthTicket::CopyFrom(const CMsgAuthTicket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAuthTicket::IsInitialized() const {

  return true;
}

void CMsgAuthTicket::Swap(CMsgAuthTicket* other) {
  if (other != this) {
    std::swap(estate_, other->estate_);
    std::swap(eresult_, other->eresult_);
    std::swap(steamid_, other->steamid_);
    std::swap(gameid_, other->gameid_);
    std::swap(h_steam_pipe_, other->h_steam_pipe_);
    std::swap(ticket_crc_, other->ticket_crc_);
    std::swap(ticket_, other->ticket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgAuthTicket::GetTypeName() const {
  return "Sc.CMsgAuthTicket";
}


// ===================================================================

#ifndef _MSC_VER
const int CCDDBAppDetailCommon::kAppidFieldNumber;
const int CCDDBAppDetailCommon::kNameFieldNumber;
const int CCDDBAppDetailCommon::kIconFieldNumber;
const int CCDDBAppDetailCommon::kLogoFieldNumber;
const int CCDDBAppDetailCommon::kLogoSmallFieldNumber;
const int CCDDBAppDetailCommon::kToolFieldNumber;
const int CCDDBAppDetailCommon::kDemoFieldNumber;
const int CCDDBAppDetailCommon::kMediaFieldNumber;
const int CCDDBAppDetailCommon::kCommunityVisibleStatsFieldNumber;
const int CCDDBAppDetailCommon::kFriendlyNameFieldNumber;
const int CCDDBAppDetailCommon::kPropagationFieldNumber;
#endif  // !_MSC_VER

CCDDBAppDetailCommon::CCDDBAppDetailCommon()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CCDDBAppDetailCommon::InitAsDefaultInstance() {
}

CCDDBAppDetailCommon::CCDDBAppDetailCommon(const CCDDBAppDetailCommon& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CCDDBAppDetailCommon::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  logo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  logo_small_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tool_ = false;
  demo_ = false;
  media_ = false;
  community_visible_stats_ = false;
  friendly_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  propagation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCDDBAppDetailCommon::~CCDDBAppDetailCommon() {
  SharedDtor();
}

void CCDDBAppDetailCommon::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (logo_ != &::google::protobuf::internal::kEmptyString) {
    delete logo_;
  }
  if (logo_small_ != &::google::protobuf::internal::kEmptyString) {
    delete logo_small_;
  }
  if (friendly_name_ != &::google::protobuf::internal::kEmptyString) {
    delete friendly_name_;
  }
  if (propagation_ != &::google::protobuf::internal::kEmptyString) {
    delete propagation_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CCDDBAppDetailCommon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CCDDBAppDetailCommon& CCDDBAppDetailCommon::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fbase_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fbase_2eproto();
#endif
  return *default_instance_;
}

CCDDBAppDetailCommon* CCDDBAppDetailCommon::default_instance_ = NULL;

CCDDBAppDetailCommon* CCDDBAppDetailCommon::New() const {
  return new CCDDBAppDetailCommon;
}

void CCDDBAppDetailCommon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    appid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
    if (has_logo()) {
      if (logo_ != &::google::protobuf::internal::kEmptyString) {
        logo_->clear();
      }
    }
    if (has_logo_small()) {
      if (logo_small_ != &::google::protobuf::internal::kEmptyString) {
        logo_small_->clear();
      }
    }
    tool_ = false;
    demo_ = false;
    media_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    community_visible_stats_ = false;
    if (has_friendly_name()) {
      if (friendly_name_ != &::google::protobuf::internal::kEmptyString) {
        friendly_name_->clear();
      }
    }
    if (has_propagation()) {
      if (propagation_ != &::google::protobuf::internal::kEmptyString) {
        propagation_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CCDDBAppDetailCommon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_icon;
        break;
      }

      // optional string icon = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_logo;
        break;
      }

      // optional string logo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_logo_small;
        break;
      }

      // optional string logo_small = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logo_small:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logo_small()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_tool;
        break;
      }

      // optional bool tool = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tool_)));
          set_has_tool();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_demo;
        break;
      }

      // optional bool demo = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_demo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &demo_)));
          set_has_demo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_media;
        break;
      }

      // optional bool media = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_media:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &media_)));
          set_has_media();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_community_visible_stats;
        break;
      }

      // optional bool community_visible_stats = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_community_visible_stats:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &community_visible_stats_)));
          set_has_community_visible_stats();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_friendly_name;
        break;
      }

      // optional string friendly_name = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friendly_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_friendly_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_propagation;
        break;
      }

      // optional string propagation = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_propagation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_propagation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCDDBAppDetailCommon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 appid = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional string icon = 3;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->icon(), output);
  }

  // optional string logo = 4;
  if (has_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->logo(), output);
  }

  // optional string logo_small = 5;
  if (has_logo_small()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->logo_small(), output);
  }

  // optional bool tool = 6;
  if (has_tool()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->tool(), output);
  }

  // optional bool demo = 7;
  if (has_demo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->demo(), output);
  }

  // optional bool media = 8;
  if (has_media()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->media(), output);
  }

  // optional bool community_visible_stats = 9;
  if (has_community_visible_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->community_visible_stats(), output);
  }

  // optional string friendly_name = 10;
  if (has_friendly_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->friendly_name(), output);
  }

  // optional string propagation = 11;
  if (has_propagation()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->propagation(), output);
  }

}

int CCDDBAppDetailCommon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string icon = 3;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

    // optional string logo = 4;
    if (has_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logo());
    }

    // optional string logo_small = 5;
    if (has_logo_small()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logo_small());
    }

    // optional bool tool = 6;
    if (has_tool()) {
      total_size += 1 + 1;
    }

    // optional bool demo = 7;
    if (has_demo()) {
      total_size += 1 + 1;
    }

    // optional bool media = 8;
    if (has_media()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool community_visible_stats = 9;
    if (has_community_visible_stats()) {
      total_size += 1 + 1;
    }

    // optional string friendly_name = 10;
    if (has_friendly_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->friendly_name());
    }

    // optional string propagation = 11;
    if (has_propagation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->propagation());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCDDBAppDetailCommon::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CCDDBAppDetailCommon*>(&from));
}

void CCDDBAppDetailCommon::MergeFrom(const CCDDBAppDetailCommon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_logo()) {
      set_logo(from.logo());
    }
    if (from.has_logo_small()) {
      set_logo_small(from.logo_small());
    }
    if (from.has_tool()) {
      set_tool(from.tool());
    }
    if (from.has_demo()) {
      set_demo(from.demo());
    }
    if (from.has_media()) {
      set_media(from.media());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_community_visible_stats()) {
      set_community_visible_stats(from.community_visible_stats());
    }
    if (from.has_friendly_name()) {
      set_friendly_name(from.friendly_name());
    }
    if (from.has_propagation()) {
      set_propagation(from.propagation());
    }
  }
}

void CCDDBAppDetailCommon::CopyFrom(const CCDDBAppDetailCommon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCDDBAppDetailCommon::IsInitialized() const {

  return true;
}

void CCDDBAppDetailCommon::Swap(CCDDBAppDetailCommon* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(name_, other->name_);
    std::swap(icon_, other->icon_);
    std::swap(logo_, other->logo_);
    std::swap(logo_small_, other->logo_small_);
    std::swap(tool_, other->tool_);
    std::swap(demo_, other->demo_);
    std::swap(media_, other->media_);
    std::swap(community_visible_stats_, other->community_visible_stats_);
    std::swap(friendly_name_, other->friendly_name_);
    std::swap(propagation_, other->propagation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CCDDBAppDetailCommon::GetTypeName() const {
  return "Sc.CCDDBAppDetailCommon";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgAppRights::kEditInfoFieldNumber;
const int CMsgAppRights::kPublishFieldNumber;
const int CMsgAppRights::kViewErrorDataFieldNumber;
const int CMsgAppRights::kDownloadFieldNumber;
const int CMsgAppRights::kUploadCdkeysFieldNumber;
const int CMsgAppRights::kGenerateCdkeysFieldNumber;
const int CMsgAppRights::kViewFinancialsFieldNumber;
const int CMsgAppRights::kManageCegFieldNumber;
const int CMsgAppRights::kManageSigningFieldNumber;
const int CMsgAppRights::kManageCdkeysFieldNumber;
const int CMsgAppRights::kEditMarketingFieldNumber;
const int CMsgAppRights::kEconomySupportFieldNumber;
const int CMsgAppRights::kEconomySupportSupervisorFieldNumber;
#endif  // !_MSC_VER

CMsgAppRights::CMsgAppRights()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgAppRights::InitAsDefaultInstance() {
}

CMsgAppRights::CMsgAppRights(const CMsgAppRights& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgAppRights::SharedCtor() {
  _cached_size_ = 0;
  edit_info_ = false;
  publish_ = false;
  view_error_data_ = false;
  download_ = false;
  upload_cdkeys_ = false;
  generate_cdkeys_ = false;
  view_financials_ = false;
  manage_ceg_ = false;
  manage_signing_ = false;
  manage_cdkeys_ = false;
  edit_marketing_ = false;
  economy_support_ = false;
  economy_support_supervisor_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgAppRights::~CMsgAppRights() {
  SharedDtor();
}

void CMsgAppRights::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgAppRights::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgAppRights& CMsgAppRights::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fbase_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fbase_2eproto();
#endif
  return *default_instance_;
}

CMsgAppRights* CMsgAppRights::default_instance_ = NULL;

CMsgAppRights* CMsgAppRights::New() const {
  return new CMsgAppRights;
}

void CMsgAppRights::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    edit_info_ = false;
    publish_ = false;
    view_error_data_ = false;
    download_ = false;
    upload_cdkeys_ = false;
    generate_cdkeys_ = false;
    view_financials_ = false;
    manage_ceg_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    manage_signing_ = false;
    manage_cdkeys_ = false;
    edit_marketing_ = false;
    economy_support_ = false;
    economy_support_supervisor_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgAppRights::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool edit_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &edit_info_)));
          set_has_edit_info();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_publish;
        break;
      }

      // optional bool publish = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_publish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &publish_)));
          set_has_publish();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_view_error_data;
        break;
      }

      // optional bool view_error_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_view_error_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &view_error_data_)));
          set_has_view_error_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_download;
        break;
      }

      // optional bool download = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_download:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &download_)));
          set_has_download();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_upload_cdkeys;
        break;
      }

      // optional bool upload_cdkeys = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upload_cdkeys:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &upload_cdkeys_)));
          set_has_upload_cdkeys();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_generate_cdkeys;
        break;
      }

      // optional bool generate_cdkeys = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_generate_cdkeys:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &generate_cdkeys_)));
          set_has_generate_cdkeys();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_view_financials;
        break;
      }

      // optional bool view_financials = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_view_financials:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &view_financials_)));
          set_has_view_financials();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_manage_ceg;
        break;
      }

      // optional bool manage_ceg = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_manage_ceg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &manage_ceg_)));
          set_has_manage_ceg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_manage_signing;
        break;
      }

      // optional bool manage_signing = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_manage_signing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &manage_signing_)));
          set_has_manage_signing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_manage_cdkeys;
        break;
      }

      // optional bool manage_cdkeys = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_manage_cdkeys:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &manage_cdkeys_)));
          set_has_manage_cdkeys();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_edit_marketing;
        break;
      }

      // optional bool edit_marketing = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_edit_marketing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &edit_marketing_)));
          set_has_edit_marketing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_economy_support;
        break;
      }

      // optional bool economy_support = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_economy_support:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &economy_support_)));
          set_has_economy_support();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_economy_support_supervisor;
        break;
      }

      // optional bool economy_support_supervisor = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_economy_support_supervisor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &economy_support_supervisor_)));
          set_has_economy_support_supervisor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgAppRights::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool edit_info = 1;
  if (has_edit_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->edit_info(), output);
  }

  // optional bool publish = 2;
  if (has_publish()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->publish(), output);
  }

  // optional bool view_error_data = 3;
  if (has_view_error_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->view_error_data(), output);
  }

  // optional bool download = 4;
  if (has_download()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->download(), output);
  }

  // optional bool upload_cdkeys = 5;
  if (has_upload_cdkeys()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->upload_cdkeys(), output);
  }

  // optional bool generate_cdkeys = 6;
  if (has_generate_cdkeys()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->generate_cdkeys(), output);
  }

  // optional bool view_financials = 7;
  if (has_view_financials()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->view_financials(), output);
  }

  // optional bool manage_ceg = 8;
  if (has_manage_ceg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->manage_ceg(), output);
  }

  // optional bool manage_signing = 9;
  if (has_manage_signing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->manage_signing(), output);
  }

  // optional bool manage_cdkeys = 10;
  if (has_manage_cdkeys()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->manage_cdkeys(), output);
  }

  // optional bool edit_marketing = 11;
  if (has_edit_marketing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->edit_marketing(), output);
  }

  // optional bool economy_support = 12;
  if (has_economy_support()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->economy_support(), output);
  }

  // optional bool economy_support_supervisor = 13;
  if (has_economy_support_supervisor()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->economy_support_supervisor(), output);
  }

}

int CMsgAppRights::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool edit_info = 1;
    if (has_edit_info()) {
      total_size += 1 + 1;
    }

    // optional bool publish = 2;
    if (has_publish()) {
      total_size += 1 + 1;
    }

    // optional bool view_error_data = 3;
    if (has_view_error_data()) {
      total_size += 1 + 1;
    }

    // optional bool download = 4;
    if (has_download()) {
      total_size += 1 + 1;
    }

    // optional bool upload_cdkeys = 5;
    if (has_upload_cdkeys()) {
      total_size += 1 + 1;
    }

    // optional bool generate_cdkeys = 6;
    if (has_generate_cdkeys()) {
      total_size += 1 + 1;
    }

    // optional bool view_financials = 7;
    if (has_view_financials()) {
      total_size += 1 + 1;
    }

    // optional bool manage_ceg = 8;
    if (has_manage_ceg()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool manage_signing = 9;
    if (has_manage_signing()) {
      total_size += 1 + 1;
    }

    // optional bool manage_cdkeys = 10;
    if (has_manage_cdkeys()) {
      total_size += 1 + 1;
    }

    // optional bool edit_marketing = 11;
    if (has_edit_marketing()) {
      total_size += 1 + 1;
    }

    // optional bool economy_support = 12;
    if (has_economy_support()) {
      total_size += 1 + 1;
    }

    // optional bool economy_support_supervisor = 13;
    if (has_economy_support_supervisor()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAppRights::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgAppRights*>(&from));
}

void CMsgAppRights::MergeFrom(const CMsgAppRights& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_edit_info()) {
      set_edit_info(from.edit_info());
    }
    if (from.has_publish()) {
      set_publish(from.publish());
    }
    if (from.has_view_error_data()) {
      set_view_error_data(from.view_error_data());
    }
    if (from.has_download()) {
      set_download(from.download());
    }
    if (from.has_upload_cdkeys()) {
      set_upload_cdkeys(from.upload_cdkeys());
    }
    if (from.has_generate_cdkeys()) {
      set_generate_cdkeys(from.generate_cdkeys());
    }
    if (from.has_view_financials()) {
      set_view_financials(from.view_financials());
    }
    if (from.has_manage_ceg()) {
      set_manage_ceg(from.manage_ceg());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_manage_signing()) {
      set_manage_signing(from.manage_signing());
    }
    if (from.has_manage_cdkeys()) {
      set_manage_cdkeys(from.manage_cdkeys());
    }
    if (from.has_edit_marketing()) {
      set_edit_marketing(from.edit_marketing());
    }
    if (from.has_economy_support()) {
      set_economy_support(from.economy_support());
    }
    if (from.has_economy_support_supervisor()) {
      set_economy_support_supervisor(from.economy_support_supervisor());
    }
  }
}

void CMsgAppRights::CopyFrom(const CMsgAppRights& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAppRights::IsInitialized() const {

  return true;
}

void CMsgAppRights::Swap(CMsgAppRights* other) {
  if (other != this) {
    std::swap(edit_info_, other->edit_info_);
    std::swap(publish_, other->publish_);
    std::swap(view_error_data_, other->view_error_data_);
    std::swap(download_, other->download_);
    std::swap(upload_cdkeys_, other->upload_cdkeys_);
    std::swap(generate_cdkeys_, other->generate_cdkeys_);
    std::swap(view_financials_, other->view_financials_);
    std::swap(manage_ceg_, other->manage_ceg_);
    std::swap(manage_signing_, other->manage_signing_);
    std::swap(manage_cdkeys_, other->manage_cdkeys_);
    std::swap(edit_marketing_, other->edit_marketing_);
    std::swap(economy_support_, other->economy_support_);
    std::swap(economy_support_supervisor_, other->economy_support_supervisor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgAppRights::GetTypeName() const {
  return "Sc.CMsgAppRights";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Sc

// @@protoc_insertion_point(global_scope)

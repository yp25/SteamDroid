// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_clientserver.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "steammessages_clientserver.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace Sc {

void protobuf_ShutdownFile_steammessages_5fclientserver_2eproto() {
  delete CMsgClientHeartBeat::default_instance_;
  delete CMsgClientSubscribeToPersonaFeed::default_instance_;
  delete CMsgClientSubscribeToPersonaFeed_PersonaFeed::default_instance_;
  delete CMsgClientUDSP2PSessionStarted::default_instance_;
  delete CMsgClientUDSP2PSessionEnded::default_instance_;
  delete CMsgClientRegisterAuthTicketWithCM::default_instance_;
  delete CMsgClientTicketAuthComplete::default_instance_;
  delete CMsgClientLogon::default_instance_;
  delete CMsgClientLogonResponse::default_instance_;
  delete CMsgClientRequestWebAPIAuthenticateUserNonce::default_instance_;
  delete CMsgClientRequestWebAPIAuthenticateUserNonceResponse::default_instance_;
  delete CMsgClientLogOff::default_instance_;
  delete CMsgClientLoggedOff::default_instance_;
  delete CMsgClientCMList::default_instance_;
  delete CMsgClientP2PConnectionInfo::default_instance_;
  delete CMsgClientP2PConnectionFailInfo::default_instance_;
  delete CMsgClientGetAppOwnershipTicket::default_instance_;
  delete CMsgClientGetAppOwnershipTicketResponse::default_instance_;
  delete CMsgClientSessionToken::default_instance_;
  delete CMsgClientGameConnectTokens::default_instance_;
  delete CMsgGSServerType::default_instance_;
  delete CMsgGSStatusReply::default_instance_;
  delete CMsgGSPlayerList::default_instance_;
  delete CMsgGSPlayerList_Player::default_instance_;
  delete CMsgGSUserPlaying::default_instance_;
  delete CMsgGSDisconnectNotice::default_instance_;
  delete CMsgClientGamesPlayed::default_instance_;
  delete CMsgClientGamesPlayed_GamePlayed::default_instance_;
  delete CMsgGSApprove::default_instance_;
  delete CMsgGSDeny::default_instance_;
  delete CMsgGSKick::default_instance_;
  delete CMsgClientAuthList::default_instance_;
  delete CMsgClientAuthListAck::default_instance_;
  delete CMsgClientFriendsList::default_instance_;
  delete CMsgClientFriendsList_Friend::default_instance_;
  delete CMsgClientFriendsGroupsList::default_instance_;
  delete CMsgClientFriendsGroupsList_FriendGroup::default_instance_;
  delete CMsgClientFriendsGroupsList_FriendGroupsMembership::default_instance_;
  delete CMsgClientPlayerNicknameList::default_instance_;
  delete CMsgClientPlayerNicknameList_PlayerNickname::default_instance_;
  delete CMsgClientSetPlayerNickname::default_instance_;
  delete CMsgClientSetPlayerNicknameResponse::default_instance_;
  delete CMsgClientLicenseList::default_instance_;
  delete CMsgClientLicenseList_License::default_instance_;
  delete CMsgClientLBSSetScore::default_instance_;
  delete CMsgClientLBSSetScoreResponse::default_instance_;
  delete CMsgClientLBSSetUGC::default_instance_;
  delete CMsgClientLBSSetUGCResponse::default_instance_;
  delete CMsgClientLBSFindOrCreateLB::default_instance_;
  delete CMsgClientLBSFindOrCreateLBResponse::default_instance_;
  delete CMsgClientLBSGetLBEntries::default_instance_;
  delete CMsgClientLBSGetLBEntriesResponse::default_instance_;
  delete CMsgClientLBSGetLBEntriesResponse_Entry::default_instance_;
  delete CMsgClientAccountInfo::default_instance_;
  delete CMsgClientAppMinutesPlayedData::default_instance_;
  delete CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::default_instance_;
  delete CMsgClientIsLimitedAccount::default_instance_;
  delete CMsgClientRequestFriendData::default_instance_;
  delete CMsgClientChangeStatus::default_instance_;
  delete CMsgPersonaChangeResponse::default_instance_;
  delete CMsgClientPersonaState::default_instance_;
  delete CMsgClientPersonaState_Friend::default_instance_;
  delete CMsgClientFriendProfileInfo::default_instance_;
  delete CMsgClientFriendProfileInfoResponse::default_instance_;
  delete CMsgClientServerList::default_instance_;
  delete CMsgClientServerList_Server::default_instance_;
  delete CMsgClientRequestedClientStats::default_instance_;
  delete CMsgClientRequestedClientStats_StatsToSend::default_instance_;
  delete CMsgClientStat2::default_instance_;
  delete CMsgClientStat2_StatDetail::default_instance_;
  delete CMsgClientMMSCreateLobby::default_instance_;
  delete CMsgClientMMSCreateLobbyResponse::default_instance_;
  delete CMsgClientMMSJoinLobby::default_instance_;
  delete CMsgClientMMSJoinLobbyResponse::default_instance_;
  delete CMsgClientMMSJoinLobbyResponse_Member::default_instance_;
  delete CMsgClientMMSLeaveLobby::default_instance_;
  delete CMsgClientMMSLeaveLobbyResponse::default_instance_;
  delete CMsgClientMMSGetLobbyList::default_instance_;
  delete CMsgClientMMSGetLobbyList_Filter::default_instance_;
  delete CMsgClientMMSGetLobbyListResponse::default_instance_;
  delete CMsgClientMMSGetLobbyListResponse_Lobby::default_instance_;
  delete CMsgClientMMSSetLobbyData::default_instance_;
  delete CMsgClientMMSSetLobbyDataResponse::default_instance_;
  delete CMsgClientMMSGetLobbyData::default_instance_;
  delete CMsgClientMMSLobbyData::default_instance_;
  delete CMsgClientMMSLobbyData_Member::default_instance_;
  delete CMsgClientMMSSendLobbyChatMsg::default_instance_;
  delete CMsgClientMMSLobbyChatMsg::default_instance_;
  delete CMsgClientMMSSetLobbyOwner::default_instance_;
  delete CMsgClientMMSSetLobbyOwnerResponse::default_instance_;
  delete CMsgClientMMSSetLobbyLinked::default_instance_;
  delete CMsgClientMMSSetLobbyGameServer::default_instance_;
  delete CMsgClientMMSLobbyGameServerSet::default_instance_;
  delete CMsgClientMMSUserJoinedLobby::default_instance_;
  delete CMsgClientMMSUserLeftLobby::default_instance_;
  delete CMsgClientMMSInviteToLobby::default_instance_;
  delete CMsgClientUDSInviteToGame::default_instance_;
  delete CMsgClientChatInvite::default_instance_;
  delete CMsgClientConnectionStats::default_instance_;
  delete CMsgClientConnectionStats_Stats_Logon::default_instance_;
  delete CMsgClientConnectionStats_Stats_UDP::default_instance_;
  delete CMsgClientConnectionStats_Stats_VConn::default_instance_;
  delete CMsgClientServersAvailable::default_instance_;
  delete CMsgClientServersAvailable_Server_Types_Available::default_instance_;
  delete CMsgClientGetUserStats::default_instance_;
  delete CMsgClientGetUserStatsResponse::default_instance_;
  delete CMsgClientGetUserStatsResponse_Stats::default_instance_;
  delete CMsgClientGetUserStatsResponse_Achievement_Blocks::default_instance_;
  delete CMsgClientStoreUserStatsResponse::default_instance_;
  delete CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::default_instance_;
  delete CMsgClientStoreUserStats2::default_instance_;
  delete CMsgClientStoreUserStats2_Stats::default_instance_;
  delete CMsgClientStatsUpdated::default_instance_;
  delete CMsgClientStatsUpdated_Updated_Stats::default_instance_;
  delete CMsgClientStoreUserStats::default_instance_;
  delete CMsgClientStoreUserStats_Stats_To_Store::default_instance_;
  delete CMsgClientGetClientDetails::default_instance_;
  delete CMsgClientReportOverlayDetourFailure::default_instance_;
  delete CMsgClientGetClientDetailsResponse::default_instance_;
  delete CMsgClientGetClientDetailsResponse_Game::default_instance_;
  delete CMsgClientGetClientAppList::default_instance_;
  delete CMsgClientGetClientAppListResponse::default_instance_;
  delete CMsgClientGetClientAppListResponse_App::default_instance_;
  delete CMsgClientGetClientAppListResponse_App_DLC::default_instance_;
  delete CMsgClientInstallClientApp::default_instance_;
  delete CMsgClientInstallClientAppResponse::default_instance_;
  delete CMsgClientUninstallClientApp::default_instance_;
  delete CMsgClientUninstallClientAppResponse::default_instance_;
  delete CMsgClientSetClientAppUpdateState::default_instance_;
  delete CMsgClientSetClientAppUpdateStateResponse::default_instance_;
  delete CMsgClientUFSUploadFileRequest::default_instance_;
  delete CMsgClientUFSUploadFileResponse::default_instance_;
  delete CMsgClientUFSFileChunk::default_instance_;
  delete CMsgClientUFSTransferHeartbeat::default_instance_;
  delete CMsgClientUFSUploadFileFinished::default_instance_;
  delete CMsgClientUFSDeleteFileRequest::default_instance_;
  delete CMsgClientUFSDeleteFileResponse::default_instance_;
  delete CMsgClientUFSGetFileListForApp::default_instance_;
  delete CMsgClientUFSGetFileListForAppResponse::default_instance_;
  delete CMsgClientUFSGetFileListForAppResponse_File::default_instance_;
  delete CMsgClientUFSDownloadRequest::default_instance_;
  delete CMsgClientUFSDownloadResponse::default_instance_;
  delete CMsgClientUFSLoginRequest::default_instance_;
  delete CMsgClientUFSLoginResponse::default_instance_;
  delete CMsgClientRequestEncryptedAppTicket::default_instance_;
  delete CMsgClientRequestEncryptedAppTicketResponse::default_instance_;
  delete CMsgClientRequestOAuthTokenForApp::default_instance_;
  delete CMsgClientRequestOAuthTokenForAppResponse::default_instance_;
  delete CMsgClientWalletInfoUpdate::default_instance_;
  delete CMsgClientAppInfoUpdate::default_instance_;
  delete CMsgClientAppInfoChanges::default_instance_;
  delete CMsgClientAppInfoRequest::default_instance_;
  delete CMsgClientAppInfoRequest_App::default_instance_;
  delete CMsgClientAppInfoResponse::default_instance_;
  delete CMsgClientAppInfoResponse_App::default_instance_;
  delete CMsgClientAppInfoResponse_App_Section::default_instance_;
  delete CMsgClientPackageInfoRequest::default_instance_;
  delete CMsgClientPackageInfoResponse::default_instance_;
  delete CMsgClientPackageInfoResponse_Package::default_instance_;
  delete CMsgPICSChangesSinceRequest::default_instance_;
  delete CMsgPICSChangesSinceResponse::default_instance_;
  delete CMsgPICSChangesSinceResponse_PackageChange::default_instance_;
  delete CMsgPICSChangesSinceResponse_AppChange::default_instance_;
  delete CMsgPICSProductInfoRequest::default_instance_;
  delete CMsgPICSProductInfoRequest_AppInfo::default_instance_;
  delete CMsgPICSProductInfoRequest_PackageInfo::default_instance_;
  delete CMsgPICSProductInfoResponse::default_instance_;
  delete CMsgPICSProductInfoResponse_AppInfo::default_instance_;
  delete CMsgPICSProductInfoResponse_PackageInfo::default_instance_;
  delete CMsgPICSAccessTokenRequest::default_instance_;
  delete CMsgPICSAccessTokenResponse::default_instance_;
  delete CMsgPICSAccessTokenResponse_PackageToken::default_instance_;
  delete CMsgPICSAccessTokenResponse_AppToken::default_instance_;
  delete CMsgClientUFSGetUGCDetails::default_instance_;
  delete CMsgClientUFSGetUGCDetailsResponse::default_instance_;
  delete CMsgClientUFSGetSingleFileInfo::default_instance_;
  delete CMsgClientUFSGetSingleFileInfoResponse::default_instance_;
  delete CMsgClientUFSShareFile::default_instance_;
  delete CMsgClientUFSShareFileResponse::default_instance_;
  delete CMsgClientNewLoginKey::default_instance_;
  delete CMsgClientNewLoginKeyAccepted::default_instance_;
  delete CMsgClientAMGetClanOfficers::default_instance_;
  delete CMsgClientAMGetClanOfficersResponse::default_instance_;
  delete CMsgClientAMGetPersonaNameHistory::default_instance_;
  delete CMsgClientAMGetPersonaNameHistory_IdInstance::default_instance_;
  delete CMsgClientAMGetPersonaNameHistoryResponse::default_instance_;
  delete CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::default_instance_;
  delete CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::default_instance_;
  delete CMsgClientDeregisterWithServer::default_instance_;
  delete CMsgClientClanState::default_instance_;
  delete CMsgClientClanState_NameInfo::default_instance_;
  delete CMsgClientClanState_UserCounts::default_instance_;
  delete CMsgClientClanState_Event::default_instance_;
  delete CMsgClientFriendMsg::default_instance_;
  delete CMsgClientFriendMsgIncoming::default_instance_;
  delete CMsgClientAddFriend::default_instance_;
  delete CMsgClientAddFriendResponse::default_instance_;
  delete CMsgClientRemoveFriend::default_instance_;
  delete CMsgClientHideFriend::default_instance_;
  delete CMsgClientUCMAddScreenshot::default_instance_;
  delete CMsgClientUCMAddScreenshot_Tag::default_instance_;
  delete CMsgClientUCMAddScreenshotResponse::default_instance_;
  delete CMsgClientUCMDeleteScreenshot::default_instance_;
  delete CMsgClientUCMDeleteScreenshotResponse::default_instance_;
  delete CMsgClientUCMPublishFile::default_instance_;
  delete CMsgClientUCMPublishFileResponse::default_instance_;
  delete CMsgClientUCMUpdatePublishedFile::default_instance_;
  delete CMsgClientUCMUpdatePublishedFileResponse::default_instance_;
  delete CMsgClientUCMGetPublishedFileDetails::default_instance_;
  delete CMsgClientUCMGetPublishedFileDetailsResponse::default_instance_;
  delete CMsgClientUCMDeletePublishedFile::default_instance_;
  delete CMsgClientUCMDeletePublishedFileResponse::default_instance_;
  delete CMsgClientUCMEnumerateUserPublishedFiles::default_instance_;
  delete CMsgClientUCMEnumerateUserPublishedFilesResponse::default_instance_;
  delete CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId::default_instance_;
  delete CMsgClientUCMSubscribePublishedFile::default_instance_;
  delete CMsgClientUCMSubscribePublishedFileResponse::default_instance_;
  delete CMsgClientUCMEnumerateUserSubscribedFiles::default_instance_;
  delete CMsgClientUCMEnumerateUserSubscribedFilesResponse::default_instance_;
  delete CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId::default_instance_;
  delete CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates::default_instance_;
  delete CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse::default_instance_;
  delete CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId::default_instance_;
  delete CMsgClientUCMUnsubscribePublishedFile::default_instance_;
  delete CMsgClientUCMUnsubscribePublishedFileResponse::default_instance_;
  delete CMsgClientUCMPublishedFileSubscribed::default_instance_;
  delete CMsgClientUCMPublishedFileUnsubscribed::default_instance_;
  delete CMsgClientUCMPublishedFileDeleted::default_instance_;
  delete CMsgClientUCMGetPublishedFilesForUser::default_instance_;
  delete CMsgClientUCMGetPublishedFilesForUserResponse::default_instance_;
  delete CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId::default_instance_;
  delete CMsgClientUCMSetUserPublishedFileAction::default_instance_;
  delete CMsgClientUCMSetUserPublishedFileActionResponse::default_instance_;
  delete CMsgClientUCMEnumeratePublishedFilesByUserAction::default_instance_;
  delete CMsgClientUCMEnumeratePublishedFilesByUserActionResponse::default_instance_;
  delete CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId::default_instance_;
  delete CMsgClientScreenshotsChanged::default_instance_;
  delete CMsgClientUpdateUserGameInfo::default_instance_;
  delete CMsgClientRichPresenceUpload::default_instance_;
  delete CMsgClientRichPresenceRequest::default_instance_;
  delete CMsgClientRichPresenceInfo::default_instance_;
  delete CMsgClientRichPresenceInfo_RichPresence::default_instance_;
  delete CMsgClientCheckFileSignature::default_instance_;
  delete CMsgClientCheckFileSignatureResponse::default_instance_;
  delete CMsgClientReadMachineAuth::default_instance_;
  delete CMsgClientReadMachineAuthResponse::default_instance_;
  delete CMsgClientUpdateMachineAuth::default_instance_;
  delete CMsgClientUpdateMachineAuthResponse::default_instance_;
  delete CMsgClientRequestMachineAuth::default_instance_;
  delete CMsgClientRequestMachineAuthResponse::default_instance_;
  delete CMsgClientChangeSteamGuardOptions::default_instance_;
  delete CMsgClientChangeSteamGuardOptionsResponse::default_instance_;
  delete CMsgClientCreateFriendsGroup::default_instance_;
  delete CMsgClientCreateFriendsGroupResponse::default_instance_;
  delete CMsgClientDeleteFriendsGroup::default_instance_;
  delete CMsgClientDeleteFriendsGroupResponse::default_instance_;
  delete CMsgClientRenameFriendsGroup::default_instance_;
  delete CMsgClientRenameFriendsGroupResponse::default_instance_;
  delete CMsgClientAddFriendToGroup::default_instance_;
  delete CMsgClientAddFriendToGroupResponse::default_instance_;
  delete CMsgClientRemoveFriendFromGroup::default_instance_;
  delete CMsgClientRemoveFriendFromGroupResponse::default_instance_;
  delete CMsgClientRegisterKey::default_instance_;
  delete CMsgClientPurchaseResponse::default_instance_;
  delete CMsgClientActivateOEMLicense::default_instance_;
  delete CMsgClientPurchaseWithMachineID::default_instance_;
  delete CMsgTrading_InitiateTradeRequest::default_instance_;
  delete CMsgTrading_InitiateTradeResponse::default_instance_;
  delete CMsgTrading_CancelTradeRequest::default_instance_;
  delete CMsgTrading_StartSession::default_instance_;
  delete CMsgClientMDSInitDepotBuildRequest::default_instance_;
  delete CMsgClientMDSInitDepotBuildResponse::default_instance_;
  delete CMsgClientMDSLoginRequest::default_instance_;
  delete CMsgClientMDSLoginResponse::default_instance_;
  delete CMsgClientMDSUploadDepotChunks::default_instance_;
  delete CMsgClientMDSUploadDepotChunks_ChunkUploadData::default_instance_;
  delete CMsgClientMDSUploadDepotChunksResponse::default_instance_;
  delete CMsgClientMDSUploadRateTest::default_instance_;
  delete CMsgClientMDSUploadRateTestResponse::default_instance_;
  delete CMsgClientMDSTransmitManifestDataChunk::default_instance_;
  delete CMsgClientMDSUploadManifestRequest::default_instance_;
  delete CMsgClientMDSUploadManifestResponse::default_instance_;
  delete CMsgClientMDSGetDepotManifest::default_instance_;
  delete CMsgClientMDSGetDepotManifestResponse::default_instance_;
  delete CMsgClientMDSGetDepotManifestChunk::default_instance_;
  delete CMsgClientMDSRegisterAppBuild::default_instance_;
  delete CMsgClientMDSRegisterAppBuildResponse::default_instance_;
  delete CMsgMDSSetAppBuildLive::default_instance_;
  delete CMsgMDSSetAppBuildLiveResponse::default_instance_;
  delete CMsgClientMDSSignInstallScript::default_instance_;
  delete CMsgClientMDSSignInstallScriptResponse::default_instance_;
  delete CMsgClientEmailChange::default_instance_;
  delete CMsgClientEmailChangeResponse::default_instance_;
  delete CMsgClientGetCDNAuthToken::default_instance_;
  delete CMsgClientGetDepotDecryptionKey::default_instance_;
  delete CMsgClientGetDepotDecryptionKeyResponse::default_instance_;
  delete CMsgClientGetAppBetaPasswords::default_instance_;
  delete CMsgClientGetAppBetaPasswordsResponse::default_instance_;
  delete CMsgClientGetAppBetaPasswordsResponse_BetaPassword::default_instance_;
  delete CMsgClientUpdateAppJobReport::default_instance_;
  delete CMsgClientGetCDNAuthTokenResponse::default_instance_;
  delete CMsgDownloadRateStatistics::default_instance_;
  delete CMsgDownloadRateStatistics_StatsInfo::default_instance_;
  delete CMsgClientRequestAccountData::default_instance_;
  delete CMsgClientRequestAccountDataResponse::default_instance_;
  delete CMsgClientUGSGetGlobalStats::default_instance_;
  delete CMsgClientUGSGetGlobalStatsResponse::default_instance_;
  delete CMsgClientUGSGetGlobalStatsResponse_Day::default_instance_;
  delete CMsgClientUGSGetGlobalStatsResponse_Day_Stat::default_instance_;
  delete CMsgGameServerData::default_instance_;
  delete CMsgGameServerData_Player::default_instance_;
  delete CMsgGameServerRemove::default_instance_;
  delete CMsgClientGMSServerQuery::default_instance_;
  delete CMsgGMSClientServerQueryResponse::default_instance_;
  delete CMsgGMSClientServerQueryResponse_Server::default_instance_;
  delete CMsgGameServerOutOfDate::default_instance_;
  delete CMsgClientRedeemGuestPass::default_instance_;
  delete CMsgClientRedeemGuestPassResponse::default_instance_;
  delete CMsgClientGetClanActivityCounts::default_instance_;
  delete CMsgClientGetClanActivityCountsResponse::default_instance_;
  delete CMsgClientOGSReportString::default_instance_;
  delete CMsgClientOGSReportBug::default_instance_;
  delete CMsgGSAssociateWithClan::default_instance_;
  delete CMsgGSAssociateWithClanResponse::default_instance_;
  delete CMsgGSComputeNewPlayerCompatibility::default_instance_;
  delete CMsgGSComputeNewPlayerCompatibilityResponse::default_instance_;
  delete CMsgClientSentLogs::default_instance_;
  delete CMsgGCClient::default_instance_;
  delete CMsgClientRequestFreeLicense::default_instance_;
  delete CMsgClientRequestFreeLicenseResponse::default_instance_;
  delete CMsgDRMDownloadRequestWithCrashData::default_instance_;
  delete CMsgDRMDownloadResponse::default_instance_;
  delete CMsgDRMFinalResult::default_instance_;
  delete CMsgClientDPCheckSpecialSurvey::default_instance_;
  delete CMsgClientDPCheckSpecialSurveyResponse::default_instance_;
  delete CMsgClientDPSendSpecialSurveyResponse::default_instance_;
  delete CMsgClientDPSendSpecialSurveyResponseReply::default_instance_;
  delete CMsgClientRequestForgottenPasswordEmail::default_instance_;
  delete CMsgClientRequestForgottenPasswordEmailResponse::default_instance_;
  delete CMsgClientItemAnnouncements::default_instance_;
  delete CMsgClientRequestItemAnnouncements::default_instance_;
  delete CMsgClientCommentNotifications::default_instance_;
  delete CMsgClientRequestCommentNotifications::default_instance_;
  delete CMsgClientOfflineMessageNotification::default_instance_;
  delete CMsgClientRequestOfflineMessageCount::default_instance_;
  delete CMsgClientFSGetFriendMessageHistory::default_instance_;
  delete CMsgClientFSGetFriendMessageHistoryResponse::default_instance_;
  delete CMsgClientFSGetFriendMessageHistoryResponse_FriendMessage::default_instance_;
  delete CMsgClientFSGetFriendMessageHistoryForOfflineMessages::default_instance_;
  delete CMsgClientFSGetFriendsSteamLevels::default_instance_;
  delete CMsgClientFSGetFriendsSteamLevelsResponse::default_instance_;
  delete CMsgClientFSGetFriendsSteamLevelsResponse_Friend::default_instance_;
  delete CMsgClientEmailAddrInfo::default_instance_;
  delete CMsgCREEnumeratePublishedFiles::default_instance_;
  delete CMsgCREEnumeratePublishedFilesResponse::default_instance_;
  delete CMsgCREEnumeratePublishedFilesResponse_PublishedFileId::default_instance_;
  delete CMsgCRERankByVote::default_instance_;
  delete CMsgCRERankByVoteResponse::default_instance_;
  delete CMsgCRERankByVoteResponse_PublishedFileId::default_instance_;
  delete CMsgCRERankByTrend::default_instance_;
  delete CMsgCRERankByTrendResponse::default_instance_;
  delete CMsgCRERankByTrendResponse_PublishedFileId::default_instance_;
  delete CMsgCREItemVoteSummary::default_instance_;
  delete CMsgCREItemVoteSummary_PublishedFileId::default_instance_;
  delete CMsgCREItemVoteSummaryResponse::default_instance_;
  delete CMsgCREItemVoteSummaryResponse_ItemVoteSummary::default_instance_;
  delete CMsgCREUpdateUserPublishedItemVote::default_instance_;
  delete CMsgCREUpdateUserPublishedItemVoteResponse::default_instance_;
  delete CMsgCREGetUserPublishedItemVoteDetails::default_instance_;
  delete CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::default_instance_;
  delete CMsgCREGetUserPublishedItemVoteDetailsResponse::default_instance_;
  delete CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::default_instance_;
  delete CMsgGameServerPingSample::default_instance_;
  delete CMsgGameServerPingSample_Sample::default_instance_;
  delete CMsgFSGetFollowerCount::default_instance_;
  delete CMsgFSGetFollowerCountResponse::default_instance_;
  delete CMsgFSGetIsFollowing::default_instance_;
  delete CMsgFSGetIsFollowingResponse::default_instance_;
  delete CMsgFSEnumerateFollowingList::default_instance_;
  delete CMsgFSEnumerateFollowingListResponse::default_instance_;
  delete CMsgDPGetNumberOfCurrentPlayers::default_instance_;
  delete CMsgDPGetNumberOfCurrentPlayersResponse::default_instance_;
  delete CMsgClientFriendUserStatusPublished::default_instance_;
  delete CMsgClientServiceMethod::default_instance_;
  delete CMsgClientServiceMethodResponse::default_instance_;
  delete CMsgClientUIMode::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_steammessages_5fclientserver_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_steammessages_5fclientserver_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::Sc::protobuf_AddDesc_steammessages_5fbase_2eproto();
  ::Sc::protobuf_AddDesc_encrypted_5fapp_5fticket_2eproto();
  CMsgClientHeartBeat::default_instance_ = new CMsgClientHeartBeat();
  CMsgClientSubscribeToPersonaFeed::default_instance_ = new CMsgClientSubscribeToPersonaFeed();
  CMsgClientSubscribeToPersonaFeed_PersonaFeed::default_instance_ = new CMsgClientSubscribeToPersonaFeed_PersonaFeed();
  CMsgClientUDSP2PSessionStarted::default_instance_ = new CMsgClientUDSP2PSessionStarted();
  CMsgClientUDSP2PSessionEnded::default_instance_ = new CMsgClientUDSP2PSessionEnded();
  CMsgClientRegisterAuthTicketWithCM::default_instance_ = new CMsgClientRegisterAuthTicketWithCM();
  CMsgClientTicketAuthComplete::default_instance_ = new CMsgClientTicketAuthComplete();
  CMsgClientLogon::default_instance_ = new CMsgClientLogon();
  CMsgClientLogonResponse::default_instance_ = new CMsgClientLogonResponse();
  CMsgClientRequestWebAPIAuthenticateUserNonce::default_instance_ = new CMsgClientRequestWebAPIAuthenticateUserNonce();
  CMsgClientRequestWebAPIAuthenticateUserNonceResponse::default_instance_ = new CMsgClientRequestWebAPIAuthenticateUserNonceResponse();
  CMsgClientLogOff::default_instance_ = new CMsgClientLogOff();
  CMsgClientLoggedOff::default_instance_ = new CMsgClientLoggedOff();
  CMsgClientCMList::default_instance_ = new CMsgClientCMList();
  CMsgClientP2PConnectionInfo::default_instance_ = new CMsgClientP2PConnectionInfo();
  CMsgClientP2PConnectionFailInfo::default_instance_ = new CMsgClientP2PConnectionFailInfo();
  CMsgClientGetAppOwnershipTicket::default_instance_ = new CMsgClientGetAppOwnershipTicket();
  CMsgClientGetAppOwnershipTicketResponse::default_instance_ = new CMsgClientGetAppOwnershipTicketResponse();
  CMsgClientSessionToken::default_instance_ = new CMsgClientSessionToken();
  CMsgClientGameConnectTokens::default_instance_ = new CMsgClientGameConnectTokens();
  CMsgGSServerType::default_instance_ = new CMsgGSServerType();
  CMsgGSStatusReply::default_instance_ = new CMsgGSStatusReply();
  CMsgGSPlayerList::default_instance_ = new CMsgGSPlayerList();
  CMsgGSPlayerList_Player::default_instance_ = new CMsgGSPlayerList_Player();
  CMsgGSUserPlaying::default_instance_ = new CMsgGSUserPlaying();
  CMsgGSDisconnectNotice::default_instance_ = new CMsgGSDisconnectNotice();
  CMsgClientGamesPlayed::default_instance_ = new CMsgClientGamesPlayed();
  CMsgClientGamesPlayed_GamePlayed::default_instance_ = new CMsgClientGamesPlayed_GamePlayed();
  CMsgGSApprove::default_instance_ = new CMsgGSApprove();
  CMsgGSDeny::default_instance_ = new CMsgGSDeny();
  CMsgGSKick::default_instance_ = new CMsgGSKick();
  CMsgClientAuthList::default_instance_ = new CMsgClientAuthList();
  CMsgClientAuthListAck::default_instance_ = new CMsgClientAuthListAck();
  CMsgClientFriendsList::default_instance_ = new CMsgClientFriendsList();
  CMsgClientFriendsList_Friend::default_instance_ = new CMsgClientFriendsList_Friend();
  CMsgClientFriendsGroupsList::default_instance_ = new CMsgClientFriendsGroupsList();
  CMsgClientFriendsGroupsList_FriendGroup::default_instance_ = new CMsgClientFriendsGroupsList_FriendGroup();
  CMsgClientFriendsGroupsList_FriendGroupsMembership::default_instance_ = new CMsgClientFriendsGroupsList_FriendGroupsMembership();
  CMsgClientPlayerNicknameList::default_instance_ = new CMsgClientPlayerNicknameList();
  CMsgClientPlayerNicknameList_PlayerNickname::default_instance_ = new CMsgClientPlayerNicknameList_PlayerNickname();
  CMsgClientSetPlayerNickname::default_instance_ = new CMsgClientSetPlayerNickname();
  CMsgClientSetPlayerNicknameResponse::default_instance_ = new CMsgClientSetPlayerNicknameResponse();
  CMsgClientLicenseList::default_instance_ = new CMsgClientLicenseList();
  CMsgClientLicenseList_License::default_instance_ = new CMsgClientLicenseList_License();
  CMsgClientLBSSetScore::default_instance_ = new CMsgClientLBSSetScore();
  CMsgClientLBSSetScoreResponse::default_instance_ = new CMsgClientLBSSetScoreResponse();
  CMsgClientLBSSetUGC::default_instance_ = new CMsgClientLBSSetUGC();
  CMsgClientLBSSetUGCResponse::default_instance_ = new CMsgClientLBSSetUGCResponse();
  CMsgClientLBSFindOrCreateLB::default_instance_ = new CMsgClientLBSFindOrCreateLB();
  CMsgClientLBSFindOrCreateLBResponse::default_instance_ = new CMsgClientLBSFindOrCreateLBResponse();
  CMsgClientLBSGetLBEntries::default_instance_ = new CMsgClientLBSGetLBEntries();
  CMsgClientLBSGetLBEntriesResponse::default_instance_ = new CMsgClientLBSGetLBEntriesResponse();
  CMsgClientLBSGetLBEntriesResponse_Entry::default_instance_ = new CMsgClientLBSGetLBEntriesResponse_Entry();
  CMsgClientAccountInfo::default_instance_ = new CMsgClientAccountInfo();
  CMsgClientAppMinutesPlayedData::default_instance_ = new CMsgClientAppMinutesPlayedData();
  CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::default_instance_ = new CMsgClientAppMinutesPlayedData_AppMinutesPlayedData();
  CMsgClientIsLimitedAccount::default_instance_ = new CMsgClientIsLimitedAccount();
  CMsgClientRequestFriendData::default_instance_ = new CMsgClientRequestFriendData();
  CMsgClientChangeStatus::default_instance_ = new CMsgClientChangeStatus();
  CMsgPersonaChangeResponse::default_instance_ = new CMsgPersonaChangeResponse();
  CMsgClientPersonaState::default_instance_ = new CMsgClientPersonaState();
  CMsgClientPersonaState_Friend::default_instance_ = new CMsgClientPersonaState_Friend();
  CMsgClientFriendProfileInfo::default_instance_ = new CMsgClientFriendProfileInfo();
  CMsgClientFriendProfileInfoResponse::default_instance_ = new CMsgClientFriendProfileInfoResponse();
  CMsgClientServerList::default_instance_ = new CMsgClientServerList();
  CMsgClientServerList_Server::default_instance_ = new CMsgClientServerList_Server();
  CMsgClientRequestedClientStats::default_instance_ = new CMsgClientRequestedClientStats();
  CMsgClientRequestedClientStats_StatsToSend::default_instance_ = new CMsgClientRequestedClientStats_StatsToSend();
  CMsgClientStat2::default_instance_ = new CMsgClientStat2();
  CMsgClientStat2_StatDetail::default_instance_ = new CMsgClientStat2_StatDetail();
  CMsgClientMMSCreateLobby::default_instance_ = new CMsgClientMMSCreateLobby();
  CMsgClientMMSCreateLobbyResponse::default_instance_ = new CMsgClientMMSCreateLobbyResponse();
  CMsgClientMMSJoinLobby::default_instance_ = new CMsgClientMMSJoinLobby();
  CMsgClientMMSJoinLobbyResponse::default_instance_ = new CMsgClientMMSJoinLobbyResponse();
  CMsgClientMMSJoinLobbyResponse_Member::default_instance_ = new CMsgClientMMSJoinLobbyResponse_Member();
  CMsgClientMMSLeaveLobby::default_instance_ = new CMsgClientMMSLeaveLobby();
  CMsgClientMMSLeaveLobbyResponse::default_instance_ = new CMsgClientMMSLeaveLobbyResponse();
  CMsgClientMMSGetLobbyList::default_instance_ = new CMsgClientMMSGetLobbyList();
  CMsgClientMMSGetLobbyList_Filter::default_instance_ = new CMsgClientMMSGetLobbyList_Filter();
  CMsgClientMMSGetLobbyListResponse::default_instance_ = new CMsgClientMMSGetLobbyListResponse();
  CMsgClientMMSGetLobbyListResponse_Lobby::default_instance_ = new CMsgClientMMSGetLobbyListResponse_Lobby();
  CMsgClientMMSSetLobbyData::default_instance_ = new CMsgClientMMSSetLobbyData();
  CMsgClientMMSSetLobbyDataResponse::default_instance_ = new CMsgClientMMSSetLobbyDataResponse();
  CMsgClientMMSGetLobbyData::default_instance_ = new CMsgClientMMSGetLobbyData();
  CMsgClientMMSLobbyData::default_instance_ = new CMsgClientMMSLobbyData();
  CMsgClientMMSLobbyData_Member::default_instance_ = new CMsgClientMMSLobbyData_Member();
  CMsgClientMMSSendLobbyChatMsg::default_instance_ = new CMsgClientMMSSendLobbyChatMsg();
  CMsgClientMMSLobbyChatMsg::default_instance_ = new CMsgClientMMSLobbyChatMsg();
  CMsgClientMMSSetLobbyOwner::default_instance_ = new CMsgClientMMSSetLobbyOwner();
  CMsgClientMMSSetLobbyOwnerResponse::default_instance_ = new CMsgClientMMSSetLobbyOwnerResponse();
  CMsgClientMMSSetLobbyLinked::default_instance_ = new CMsgClientMMSSetLobbyLinked();
  CMsgClientMMSSetLobbyGameServer::default_instance_ = new CMsgClientMMSSetLobbyGameServer();
  CMsgClientMMSLobbyGameServerSet::default_instance_ = new CMsgClientMMSLobbyGameServerSet();
  CMsgClientMMSUserJoinedLobby::default_instance_ = new CMsgClientMMSUserJoinedLobby();
  CMsgClientMMSUserLeftLobby::default_instance_ = new CMsgClientMMSUserLeftLobby();
  CMsgClientMMSInviteToLobby::default_instance_ = new CMsgClientMMSInviteToLobby();
  CMsgClientUDSInviteToGame::default_instance_ = new CMsgClientUDSInviteToGame();
  CMsgClientChatInvite::default_instance_ = new CMsgClientChatInvite();
  CMsgClientConnectionStats::default_instance_ = new CMsgClientConnectionStats();
  CMsgClientConnectionStats_Stats_Logon::default_instance_ = new CMsgClientConnectionStats_Stats_Logon();
  CMsgClientConnectionStats_Stats_UDP::default_instance_ = new CMsgClientConnectionStats_Stats_UDP();
  CMsgClientConnectionStats_Stats_VConn::default_instance_ = new CMsgClientConnectionStats_Stats_VConn();
  CMsgClientServersAvailable::default_instance_ = new CMsgClientServersAvailable();
  CMsgClientServersAvailable_Server_Types_Available::default_instance_ = new CMsgClientServersAvailable_Server_Types_Available();
  CMsgClientGetUserStats::default_instance_ = new CMsgClientGetUserStats();
  CMsgClientGetUserStatsResponse::default_instance_ = new CMsgClientGetUserStatsResponse();
  CMsgClientGetUserStatsResponse_Stats::default_instance_ = new CMsgClientGetUserStatsResponse_Stats();
  CMsgClientGetUserStatsResponse_Achievement_Blocks::default_instance_ = new CMsgClientGetUserStatsResponse_Achievement_Blocks();
  CMsgClientStoreUserStatsResponse::default_instance_ = new CMsgClientStoreUserStatsResponse();
  CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::default_instance_ = new CMsgClientStoreUserStatsResponse_Stats_Failed_Validation();
  CMsgClientStoreUserStats2::default_instance_ = new CMsgClientStoreUserStats2();
  CMsgClientStoreUserStats2_Stats::default_instance_ = new CMsgClientStoreUserStats2_Stats();
  CMsgClientStatsUpdated::default_instance_ = new CMsgClientStatsUpdated();
  CMsgClientStatsUpdated_Updated_Stats::default_instance_ = new CMsgClientStatsUpdated_Updated_Stats();
  CMsgClientStoreUserStats::default_instance_ = new CMsgClientStoreUserStats();
  CMsgClientStoreUserStats_Stats_To_Store::default_instance_ = new CMsgClientStoreUserStats_Stats_To_Store();
  CMsgClientGetClientDetails::default_instance_ = new CMsgClientGetClientDetails();
  CMsgClientReportOverlayDetourFailure::default_instance_ = new CMsgClientReportOverlayDetourFailure();
  CMsgClientGetClientDetailsResponse::default_instance_ = new CMsgClientGetClientDetailsResponse();
  CMsgClientGetClientDetailsResponse_Game::default_instance_ = new CMsgClientGetClientDetailsResponse_Game();
  CMsgClientGetClientAppList::default_instance_ = new CMsgClientGetClientAppList();
  CMsgClientGetClientAppListResponse::default_instance_ = new CMsgClientGetClientAppListResponse();
  CMsgClientGetClientAppListResponse_App::default_instance_ = new CMsgClientGetClientAppListResponse_App();
  CMsgClientGetClientAppListResponse_App_DLC::default_instance_ = new CMsgClientGetClientAppListResponse_App_DLC();
  CMsgClientInstallClientApp::default_instance_ = new CMsgClientInstallClientApp();
  CMsgClientInstallClientAppResponse::default_instance_ = new CMsgClientInstallClientAppResponse();
  CMsgClientUninstallClientApp::default_instance_ = new CMsgClientUninstallClientApp();
  CMsgClientUninstallClientAppResponse::default_instance_ = new CMsgClientUninstallClientAppResponse();
  CMsgClientSetClientAppUpdateState::default_instance_ = new CMsgClientSetClientAppUpdateState();
  CMsgClientSetClientAppUpdateStateResponse::default_instance_ = new CMsgClientSetClientAppUpdateStateResponse();
  CMsgClientUFSUploadFileRequest::default_instance_ = new CMsgClientUFSUploadFileRequest();
  CMsgClientUFSUploadFileResponse::default_instance_ = new CMsgClientUFSUploadFileResponse();
  CMsgClientUFSFileChunk::default_instance_ = new CMsgClientUFSFileChunk();
  CMsgClientUFSTransferHeartbeat::default_instance_ = new CMsgClientUFSTransferHeartbeat();
  CMsgClientUFSUploadFileFinished::default_instance_ = new CMsgClientUFSUploadFileFinished();
  CMsgClientUFSDeleteFileRequest::default_instance_ = new CMsgClientUFSDeleteFileRequest();
  CMsgClientUFSDeleteFileResponse::default_instance_ = new CMsgClientUFSDeleteFileResponse();
  CMsgClientUFSGetFileListForApp::default_instance_ = new CMsgClientUFSGetFileListForApp();
  CMsgClientUFSGetFileListForAppResponse::default_instance_ = new CMsgClientUFSGetFileListForAppResponse();
  CMsgClientUFSGetFileListForAppResponse_File::default_instance_ = new CMsgClientUFSGetFileListForAppResponse_File();
  CMsgClientUFSDownloadRequest::default_instance_ = new CMsgClientUFSDownloadRequest();
  CMsgClientUFSDownloadResponse::default_instance_ = new CMsgClientUFSDownloadResponse();
  CMsgClientUFSLoginRequest::default_instance_ = new CMsgClientUFSLoginRequest();
  CMsgClientUFSLoginResponse::default_instance_ = new CMsgClientUFSLoginResponse();
  CMsgClientRequestEncryptedAppTicket::default_instance_ = new CMsgClientRequestEncryptedAppTicket();
  CMsgClientRequestEncryptedAppTicketResponse::default_instance_ = new CMsgClientRequestEncryptedAppTicketResponse();
  CMsgClientRequestOAuthTokenForApp::default_instance_ = new CMsgClientRequestOAuthTokenForApp();
  CMsgClientRequestOAuthTokenForAppResponse::default_instance_ = new CMsgClientRequestOAuthTokenForAppResponse();
  CMsgClientWalletInfoUpdate::default_instance_ = new CMsgClientWalletInfoUpdate();
  CMsgClientAppInfoUpdate::default_instance_ = new CMsgClientAppInfoUpdate();
  CMsgClientAppInfoChanges::default_instance_ = new CMsgClientAppInfoChanges();
  CMsgClientAppInfoRequest::default_instance_ = new CMsgClientAppInfoRequest();
  CMsgClientAppInfoRequest_App::default_instance_ = new CMsgClientAppInfoRequest_App();
  CMsgClientAppInfoResponse::default_instance_ = new CMsgClientAppInfoResponse();
  CMsgClientAppInfoResponse_App::default_instance_ = new CMsgClientAppInfoResponse_App();
  CMsgClientAppInfoResponse_App_Section::default_instance_ = new CMsgClientAppInfoResponse_App_Section();
  CMsgClientPackageInfoRequest::default_instance_ = new CMsgClientPackageInfoRequest();
  CMsgClientPackageInfoResponse::default_instance_ = new CMsgClientPackageInfoResponse();
  CMsgClientPackageInfoResponse_Package::default_instance_ = new CMsgClientPackageInfoResponse_Package();
  CMsgPICSChangesSinceRequest::default_instance_ = new CMsgPICSChangesSinceRequest();
  CMsgPICSChangesSinceResponse::default_instance_ = new CMsgPICSChangesSinceResponse();
  CMsgPICSChangesSinceResponse_PackageChange::default_instance_ = new CMsgPICSChangesSinceResponse_PackageChange();
  CMsgPICSChangesSinceResponse_AppChange::default_instance_ = new CMsgPICSChangesSinceResponse_AppChange();
  CMsgPICSProductInfoRequest::default_instance_ = new CMsgPICSProductInfoRequest();
  CMsgPICSProductInfoRequest_AppInfo::default_instance_ = new CMsgPICSProductInfoRequest_AppInfo();
  CMsgPICSProductInfoRequest_PackageInfo::default_instance_ = new CMsgPICSProductInfoRequest_PackageInfo();
  CMsgPICSProductInfoResponse::default_instance_ = new CMsgPICSProductInfoResponse();
  CMsgPICSProductInfoResponse_AppInfo::default_instance_ = new CMsgPICSProductInfoResponse_AppInfo();
  CMsgPICSProductInfoResponse_PackageInfo::default_instance_ = new CMsgPICSProductInfoResponse_PackageInfo();
  CMsgPICSAccessTokenRequest::default_instance_ = new CMsgPICSAccessTokenRequest();
  CMsgPICSAccessTokenResponse::default_instance_ = new CMsgPICSAccessTokenResponse();
  CMsgPICSAccessTokenResponse_PackageToken::default_instance_ = new CMsgPICSAccessTokenResponse_PackageToken();
  CMsgPICSAccessTokenResponse_AppToken::default_instance_ = new CMsgPICSAccessTokenResponse_AppToken();
  CMsgClientUFSGetUGCDetails::default_instance_ = new CMsgClientUFSGetUGCDetails();
  CMsgClientUFSGetUGCDetailsResponse::default_instance_ = new CMsgClientUFSGetUGCDetailsResponse();
  CMsgClientUFSGetSingleFileInfo::default_instance_ = new CMsgClientUFSGetSingleFileInfo();
  CMsgClientUFSGetSingleFileInfoResponse::default_instance_ = new CMsgClientUFSGetSingleFileInfoResponse();
  CMsgClientUFSShareFile::default_instance_ = new CMsgClientUFSShareFile();
  CMsgClientUFSShareFileResponse::default_instance_ = new CMsgClientUFSShareFileResponse();
  CMsgClientNewLoginKey::default_instance_ = new CMsgClientNewLoginKey();
  CMsgClientNewLoginKeyAccepted::default_instance_ = new CMsgClientNewLoginKeyAccepted();
  CMsgClientAMGetClanOfficers::default_instance_ = new CMsgClientAMGetClanOfficers();
  CMsgClientAMGetClanOfficersResponse::default_instance_ = new CMsgClientAMGetClanOfficersResponse();
  CMsgClientAMGetPersonaNameHistory::default_instance_ = new CMsgClientAMGetPersonaNameHistory();
  CMsgClientAMGetPersonaNameHistory_IdInstance::default_instance_ = new CMsgClientAMGetPersonaNameHistory_IdInstance();
  CMsgClientAMGetPersonaNameHistoryResponse::default_instance_ = new CMsgClientAMGetPersonaNameHistoryResponse();
  CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::default_instance_ = new CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance();
  CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::default_instance_ = new CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance();
  CMsgClientDeregisterWithServer::default_instance_ = new CMsgClientDeregisterWithServer();
  CMsgClientClanState::default_instance_ = new CMsgClientClanState();
  CMsgClientClanState_NameInfo::default_instance_ = new CMsgClientClanState_NameInfo();
  CMsgClientClanState_UserCounts::default_instance_ = new CMsgClientClanState_UserCounts();
  CMsgClientClanState_Event::default_instance_ = new CMsgClientClanState_Event();
  CMsgClientFriendMsg::default_instance_ = new CMsgClientFriendMsg();
  CMsgClientFriendMsgIncoming::default_instance_ = new CMsgClientFriendMsgIncoming();
  CMsgClientAddFriend::default_instance_ = new CMsgClientAddFriend();
  CMsgClientAddFriendResponse::default_instance_ = new CMsgClientAddFriendResponse();
  CMsgClientRemoveFriend::default_instance_ = new CMsgClientRemoveFriend();
  CMsgClientHideFriend::default_instance_ = new CMsgClientHideFriend();
  CMsgClientUCMAddScreenshot::default_instance_ = new CMsgClientUCMAddScreenshot();
  CMsgClientUCMAddScreenshot_Tag::default_instance_ = new CMsgClientUCMAddScreenshot_Tag();
  CMsgClientUCMAddScreenshotResponse::default_instance_ = new CMsgClientUCMAddScreenshotResponse();
  CMsgClientUCMDeleteScreenshot::default_instance_ = new CMsgClientUCMDeleteScreenshot();
  CMsgClientUCMDeleteScreenshotResponse::default_instance_ = new CMsgClientUCMDeleteScreenshotResponse();
  CMsgClientUCMPublishFile::default_instance_ = new CMsgClientUCMPublishFile();
  CMsgClientUCMPublishFileResponse::default_instance_ = new CMsgClientUCMPublishFileResponse();
  CMsgClientUCMUpdatePublishedFile::default_instance_ = new CMsgClientUCMUpdatePublishedFile();
  CMsgClientUCMUpdatePublishedFileResponse::default_instance_ = new CMsgClientUCMUpdatePublishedFileResponse();
  CMsgClientUCMGetPublishedFileDetails::default_instance_ = new CMsgClientUCMGetPublishedFileDetails();
  CMsgClientUCMGetPublishedFileDetailsResponse::default_instance_ = new CMsgClientUCMGetPublishedFileDetailsResponse();
  CMsgClientUCMDeletePublishedFile::default_instance_ = new CMsgClientUCMDeletePublishedFile();
  CMsgClientUCMDeletePublishedFileResponse::default_instance_ = new CMsgClientUCMDeletePublishedFileResponse();
  CMsgClientUCMEnumerateUserPublishedFiles::default_instance_ = new CMsgClientUCMEnumerateUserPublishedFiles();
  CMsgClientUCMEnumerateUserPublishedFilesResponse::default_instance_ = new CMsgClientUCMEnumerateUserPublishedFilesResponse();
  CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId::default_instance_ = new CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId();
  CMsgClientUCMSubscribePublishedFile::default_instance_ = new CMsgClientUCMSubscribePublishedFile();
  CMsgClientUCMSubscribePublishedFileResponse::default_instance_ = new CMsgClientUCMSubscribePublishedFileResponse();
  CMsgClientUCMEnumerateUserSubscribedFiles::default_instance_ = new CMsgClientUCMEnumerateUserSubscribedFiles();
  CMsgClientUCMEnumerateUserSubscribedFilesResponse::default_instance_ = new CMsgClientUCMEnumerateUserSubscribedFilesResponse();
  CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId::default_instance_ = new CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId();
  CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates::default_instance_ = new CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates();
  CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse::default_instance_ = new CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse();
  CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId::default_instance_ = new CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId();
  CMsgClientUCMUnsubscribePublishedFile::default_instance_ = new CMsgClientUCMUnsubscribePublishedFile();
  CMsgClientUCMUnsubscribePublishedFileResponse::default_instance_ = new CMsgClientUCMUnsubscribePublishedFileResponse();
  CMsgClientUCMPublishedFileSubscribed::default_instance_ = new CMsgClientUCMPublishedFileSubscribed();
  CMsgClientUCMPublishedFileUnsubscribed::default_instance_ = new CMsgClientUCMPublishedFileUnsubscribed();
  CMsgClientUCMPublishedFileDeleted::default_instance_ = new CMsgClientUCMPublishedFileDeleted();
  CMsgClientUCMGetPublishedFilesForUser::default_instance_ = new CMsgClientUCMGetPublishedFilesForUser();
  CMsgClientUCMGetPublishedFilesForUserResponse::default_instance_ = new CMsgClientUCMGetPublishedFilesForUserResponse();
  CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId::default_instance_ = new CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId();
  CMsgClientUCMSetUserPublishedFileAction::default_instance_ = new CMsgClientUCMSetUserPublishedFileAction();
  CMsgClientUCMSetUserPublishedFileActionResponse::default_instance_ = new CMsgClientUCMSetUserPublishedFileActionResponse();
  CMsgClientUCMEnumeratePublishedFilesByUserAction::default_instance_ = new CMsgClientUCMEnumeratePublishedFilesByUserAction();
  CMsgClientUCMEnumeratePublishedFilesByUserActionResponse::default_instance_ = new CMsgClientUCMEnumeratePublishedFilesByUserActionResponse();
  CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId::default_instance_ = new CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId();
  CMsgClientScreenshotsChanged::default_instance_ = new CMsgClientScreenshotsChanged();
  CMsgClientUpdateUserGameInfo::default_instance_ = new CMsgClientUpdateUserGameInfo();
  CMsgClientRichPresenceUpload::default_instance_ = new CMsgClientRichPresenceUpload();
  CMsgClientRichPresenceRequest::default_instance_ = new CMsgClientRichPresenceRequest();
  CMsgClientRichPresenceInfo::default_instance_ = new CMsgClientRichPresenceInfo();
  CMsgClientRichPresenceInfo_RichPresence::default_instance_ = new CMsgClientRichPresenceInfo_RichPresence();
  CMsgClientCheckFileSignature::default_instance_ = new CMsgClientCheckFileSignature();
  CMsgClientCheckFileSignatureResponse::default_instance_ = new CMsgClientCheckFileSignatureResponse();
  CMsgClientReadMachineAuth::default_instance_ = new CMsgClientReadMachineAuth();
  CMsgClientReadMachineAuthResponse::default_instance_ = new CMsgClientReadMachineAuthResponse();
  CMsgClientUpdateMachineAuth::default_instance_ = new CMsgClientUpdateMachineAuth();
  CMsgClientUpdateMachineAuthResponse::default_instance_ = new CMsgClientUpdateMachineAuthResponse();
  CMsgClientRequestMachineAuth::default_instance_ = new CMsgClientRequestMachineAuth();
  CMsgClientRequestMachineAuthResponse::default_instance_ = new CMsgClientRequestMachineAuthResponse();
  CMsgClientChangeSteamGuardOptions::default_instance_ = new CMsgClientChangeSteamGuardOptions();
  CMsgClientChangeSteamGuardOptionsResponse::default_instance_ = new CMsgClientChangeSteamGuardOptionsResponse();
  CMsgClientCreateFriendsGroup::default_instance_ = new CMsgClientCreateFriendsGroup();
  CMsgClientCreateFriendsGroupResponse::default_instance_ = new CMsgClientCreateFriendsGroupResponse();
  CMsgClientDeleteFriendsGroup::default_instance_ = new CMsgClientDeleteFriendsGroup();
  CMsgClientDeleteFriendsGroupResponse::default_instance_ = new CMsgClientDeleteFriendsGroupResponse();
  CMsgClientRenameFriendsGroup::default_instance_ = new CMsgClientRenameFriendsGroup();
  CMsgClientRenameFriendsGroupResponse::default_instance_ = new CMsgClientRenameFriendsGroupResponse();
  CMsgClientAddFriendToGroup::default_instance_ = new CMsgClientAddFriendToGroup();
  CMsgClientAddFriendToGroupResponse::default_instance_ = new CMsgClientAddFriendToGroupResponse();
  CMsgClientRemoveFriendFromGroup::default_instance_ = new CMsgClientRemoveFriendFromGroup();
  CMsgClientRemoveFriendFromGroupResponse::default_instance_ = new CMsgClientRemoveFriendFromGroupResponse();
  CMsgClientRegisterKey::default_instance_ = new CMsgClientRegisterKey();
  CMsgClientPurchaseResponse::default_instance_ = new CMsgClientPurchaseResponse();
  CMsgClientActivateOEMLicense::default_instance_ = new CMsgClientActivateOEMLicense();
  CMsgClientPurchaseWithMachineID::default_instance_ = new CMsgClientPurchaseWithMachineID();
  CMsgTrading_InitiateTradeRequest::default_instance_ = new CMsgTrading_InitiateTradeRequest();
  CMsgTrading_InitiateTradeResponse::default_instance_ = new CMsgTrading_InitiateTradeResponse();
  CMsgTrading_CancelTradeRequest::default_instance_ = new CMsgTrading_CancelTradeRequest();
  CMsgTrading_StartSession::default_instance_ = new CMsgTrading_StartSession();
  CMsgClientMDSInitDepotBuildRequest::default_instance_ = new CMsgClientMDSInitDepotBuildRequest();
  CMsgClientMDSInitDepotBuildResponse::default_instance_ = new CMsgClientMDSInitDepotBuildResponse();
  CMsgClientMDSLoginRequest::default_instance_ = new CMsgClientMDSLoginRequest();
  CMsgClientMDSLoginResponse::default_instance_ = new CMsgClientMDSLoginResponse();
  CMsgClientMDSUploadDepotChunks::default_instance_ = new CMsgClientMDSUploadDepotChunks();
  CMsgClientMDSUploadDepotChunks_ChunkUploadData::default_instance_ = new CMsgClientMDSUploadDepotChunks_ChunkUploadData();
  CMsgClientMDSUploadDepotChunksResponse::default_instance_ = new CMsgClientMDSUploadDepotChunksResponse();
  CMsgClientMDSUploadRateTest::default_instance_ = new CMsgClientMDSUploadRateTest();
  CMsgClientMDSUploadRateTestResponse::default_instance_ = new CMsgClientMDSUploadRateTestResponse();
  CMsgClientMDSTransmitManifestDataChunk::default_instance_ = new CMsgClientMDSTransmitManifestDataChunk();
  CMsgClientMDSUploadManifestRequest::default_instance_ = new CMsgClientMDSUploadManifestRequest();
  CMsgClientMDSUploadManifestResponse::default_instance_ = new CMsgClientMDSUploadManifestResponse();
  CMsgClientMDSGetDepotManifest::default_instance_ = new CMsgClientMDSGetDepotManifest();
  CMsgClientMDSGetDepotManifestResponse::default_instance_ = new CMsgClientMDSGetDepotManifestResponse();
  CMsgClientMDSGetDepotManifestChunk::default_instance_ = new CMsgClientMDSGetDepotManifestChunk();
  CMsgClientMDSRegisterAppBuild::default_instance_ = new CMsgClientMDSRegisterAppBuild();
  CMsgClientMDSRegisterAppBuildResponse::default_instance_ = new CMsgClientMDSRegisterAppBuildResponse();
  CMsgMDSSetAppBuildLive::default_instance_ = new CMsgMDSSetAppBuildLive();
  CMsgMDSSetAppBuildLiveResponse::default_instance_ = new CMsgMDSSetAppBuildLiveResponse();
  CMsgClientMDSSignInstallScript::default_instance_ = new CMsgClientMDSSignInstallScript();
  CMsgClientMDSSignInstallScriptResponse::default_instance_ = new CMsgClientMDSSignInstallScriptResponse();
  CMsgClientEmailChange::default_instance_ = new CMsgClientEmailChange();
  CMsgClientEmailChangeResponse::default_instance_ = new CMsgClientEmailChangeResponse();
  CMsgClientGetCDNAuthToken::default_instance_ = new CMsgClientGetCDNAuthToken();
  CMsgClientGetDepotDecryptionKey::default_instance_ = new CMsgClientGetDepotDecryptionKey();
  CMsgClientGetDepotDecryptionKeyResponse::default_instance_ = new CMsgClientGetDepotDecryptionKeyResponse();
  CMsgClientGetAppBetaPasswords::default_instance_ = new CMsgClientGetAppBetaPasswords();
  CMsgClientGetAppBetaPasswordsResponse::default_instance_ = new CMsgClientGetAppBetaPasswordsResponse();
  CMsgClientGetAppBetaPasswordsResponse_BetaPassword::default_instance_ = new CMsgClientGetAppBetaPasswordsResponse_BetaPassword();
  CMsgClientUpdateAppJobReport::default_instance_ = new CMsgClientUpdateAppJobReport();
  CMsgClientGetCDNAuthTokenResponse::default_instance_ = new CMsgClientGetCDNAuthTokenResponse();
  CMsgDownloadRateStatistics::default_instance_ = new CMsgDownloadRateStatistics();
  CMsgDownloadRateStatistics_StatsInfo::default_instance_ = new CMsgDownloadRateStatistics_StatsInfo();
  CMsgClientRequestAccountData::default_instance_ = new CMsgClientRequestAccountData();
  CMsgClientRequestAccountDataResponse::default_instance_ = new CMsgClientRequestAccountDataResponse();
  CMsgClientUGSGetGlobalStats::default_instance_ = new CMsgClientUGSGetGlobalStats();
  CMsgClientUGSGetGlobalStatsResponse::default_instance_ = new CMsgClientUGSGetGlobalStatsResponse();
  CMsgClientUGSGetGlobalStatsResponse_Day::default_instance_ = new CMsgClientUGSGetGlobalStatsResponse_Day();
  CMsgClientUGSGetGlobalStatsResponse_Day_Stat::default_instance_ = new CMsgClientUGSGetGlobalStatsResponse_Day_Stat();
  CMsgGameServerData::default_instance_ = new CMsgGameServerData();
  CMsgGameServerData_Player::default_instance_ = new CMsgGameServerData_Player();
  CMsgGameServerRemove::default_instance_ = new CMsgGameServerRemove();
  CMsgClientGMSServerQuery::default_instance_ = new CMsgClientGMSServerQuery();
  CMsgGMSClientServerQueryResponse::default_instance_ = new CMsgGMSClientServerQueryResponse();
  CMsgGMSClientServerQueryResponse_Server::default_instance_ = new CMsgGMSClientServerQueryResponse_Server();
  CMsgGameServerOutOfDate::default_instance_ = new CMsgGameServerOutOfDate();
  CMsgClientRedeemGuestPass::default_instance_ = new CMsgClientRedeemGuestPass();
  CMsgClientRedeemGuestPassResponse::default_instance_ = new CMsgClientRedeemGuestPassResponse();
  CMsgClientGetClanActivityCounts::default_instance_ = new CMsgClientGetClanActivityCounts();
  CMsgClientGetClanActivityCountsResponse::default_instance_ = new CMsgClientGetClanActivityCountsResponse();
  CMsgClientOGSReportString::default_instance_ = new CMsgClientOGSReportString();
  CMsgClientOGSReportBug::default_instance_ = new CMsgClientOGSReportBug();
  CMsgGSAssociateWithClan::default_instance_ = new CMsgGSAssociateWithClan();
  CMsgGSAssociateWithClanResponse::default_instance_ = new CMsgGSAssociateWithClanResponse();
  CMsgGSComputeNewPlayerCompatibility::default_instance_ = new CMsgGSComputeNewPlayerCompatibility();
  CMsgGSComputeNewPlayerCompatibilityResponse::default_instance_ = new CMsgGSComputeNewPlayerCompatibilityResponse();
  CMsgClientSentLogs::default_instance_ = new CMsgClientSentLogs();
  CMsgGCClient::default_instance_ = new CMsgGCClient();
  CMsgClientRequestFreeLicense::default_instance_ = new CMsgClientRequestFreeLicense();
  CMsgClientRequestFreeLicenseResponse::default_instance_ = new CMsgClientRequestFreeLicenseResponse();
  CMsgDRMDownloadRequestWithCrashData::default_instance_ = new CMsgDRMDownloadRequestWithCrashData();
  CMsgDRMDownloadResponse::default_instance_ = new CMsgDRMDownloadResponse();
  CMsgDRMFinalResult::default_instance_ = new CMsgDRMFinalResult();
  CMsgClientDPCheckSpecialSurvey::default_instance_ = new CMsgClientDPCheckSpecialSurvey();
  CMsgClientDPCheckSpecialSurveyResponse::default_instance_ = new CMsgClientDPCheckSpecialSurveyResponse();
  CMsgClientDPSendSpecialSurveyResponse::default_instance_ = new CMsgClientDPSendSpecialSurveyResponse();
  CMsgClientDPSendSpecialSurveyResponseReply::default_instance_ = new CMsgClientDPSendSpecialSurveyResponseReply();
  CMsgClientRequestForgottenPasswordEmail::default_instance_ = new CMsgClientRequestForgottenPasswordEmail();
  CMsgClientRequestForgottenPasswordEmailResponse::default_instance_ = new CMsgClientRequestForgottenPasswordEmailResponse();
  CMsgClientItemAnnouncements::default_instance_ = new CMsgClientItemAnnouncements();
  CMsgClientRequestItemAnnouncements::default_instance_ = new CMsgClientRequestItemAnnouncements();
  CMsgClientCommentNotifications::default_instance_ = new CMsgClientCommentNotifications();
  CMsgClientRequestCommentNotifications::default_instance_ = new CMsgClientRequestCommentNotifications();
  CMsgClientOfflineMessageNotification::default_instance_ = new CMsgClientOfflineMessageNotification();
  CMsgClientRequestOfflineMessageCount::default_instance_ = new CMsgClientRequestOfflineMessageCount();
  CMsgClientFSGetFriendMessageHistory::default_instance_ = new CMsgClientFSGetFriendMessageHistory();
  CMsgClientFSGetFriendMessageHistoryResponse::default_instance_ = new CMsgClientFSGetFriendMessageHistoryResponse();
  CMsgClientFSGetFriendMessageHistoryResponse_FriendMessage::default_instance_ = new CMsgClientFSGetFriendMessageHistoryResponse_FriendMessage();
  CMsgClientFSGetFriendMessageHistoryForOfflineMessages::default_instance_ = new CMsgClientFSGetFriendMessageHistoryForOfflineMessages();
  CMsgClientFSGetFriendsSteamLevels::default_instance_ = new CMsgClientFSGetFriendsSteamLevels();
  CMsgClientFSGetFriendsSteamLevelsResponse::default_instance_ = new CMsgClientFSGetFriendsSteamLevelsResponse();
  CMsgClientFSGetFriendsSteamLevelsResponse_Friend::default_instance_ = new CMsgClientFSGetFriendsSteamLevelsResponse_Friend();
  CMsgClientEmailAddrInfo::default_instance_ = new CMsgClientEmailAddrInfo();
  CMsgCREEnumeratePublishedFiles::default_instance_ = new CMsgCREEnumeratePublishedFiles();
  CMsgCREEnumeratePublishedFilesResponse::default_instance_ = new CMsgCREEnumeratePublishedFilesResponse();
  CMsgCREEnumeratePublishedFilesResponse_PublishedFileId::default_instance_ = new CMsgCREEnumeratePublishedFilesResponse_PublishedFileId();
  CMsgCRERankByVote::default_instance_ = new CMsgCRERankByVote();
  CMsgCRERankByVoteResponse::default_instance_ = new CMsgCRERankByVoteResponse();
  CMsgCRERankByVoteResponse_PublishedFileId::default_instance_ = new CMsgCRERankByVoteResponse_PublishedFileId();
  CMsgCRERankByTrend::default_instance_ = new CMsgCRERankByTrend();
  CMsgCRERankByTrendResponse::default_instance_ = new CMsgCRERankByTrendResponse();
  CMsgCRERankByTrendResponse_PublishedFileId::default_instance_ = new CMsgCRERankByTrendResponse_PublishedFileId();
  CMsgCREItemVoteSummary::default_instance_ = new CMsgCREItemVoteSummary();
  CMsgCREItemVoteSummary_PublishedFileId::default_instance_ = new CMsgCREItemVoteSummary_PublishedFileId();
  CMsgCREItemVoteSummaryResponse::default_instance_ = new CMsgCREItemVoteSummaryResponse();
  CMsgCREItemVoteSummaryResponse_ItemVoteSummary::default_instance_ = new CMsgCREItemVoteSummaryResponse_ItemVoteSummary();
  CMsgCREUpdateUserPublishedItemVote::default_instance_ = new CMsgCREUpdateUserPublishedItemVote();
  CMsgCREUpdateUserPublishedItemVoteResponse::default_instance_ = new CMsgCREUpdateUserPublishedItemVoteResponse();
  CMsgCREGetUserPublishedItemVoteDetails::default_instance_ = new CMsgCREGetUserPublishedItemVoteDetails();
  CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::default_instance_ = new CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId();
  CMsgCREGetUserPublishedItemVoteDetailsResponse::default_instance_ = new CMsgCREGetUserPublishedItemVoteDetailsResponse();
  CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::default_instance_ = new CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail();
  CMsgGameServerPingSample::default_instance_ = new CMsgGameServerPingSample();
  CMsgGameServerPingSample_Sample::default_instance_ = new CMsgGameServerPingSample_Sample();
  CMsgFSGetFollowerCount::default_instance_ = new CMsgFSGetFollowerCount();
  CMsgFSGetFollowerCountResponse::default_instance_ = new CMsgFSGetFollowerCountResponse();
  CMsgFSGetIsFollowing::default_instance_ = new CMsgFSGetIsFollowing();
  CMsgFSGetIsFollowingResponse::default_instance_ = new CMsgFSGetIsFollowingResponse();
  CMsgFSEnumerateFollowingList::default_instance_ = new CMsgFSEnumerateFollowingList();
  CMsgFSEnumerateFollowingListResponse::default_instance_ = new CMsgFSEnumerateFollowingListResponse();
  CMsgDPGetNumberOfCurrentPlayers::default_instance_ = new CMsgDPGetNumberOfCurrentPlayers();
  CMsgDPGetNumberOfCurrentPlayersResponse::default_instance_ = new CMsgDPGetNumberOfCurrentPlayersResponse();
  CMsgClientFriendUserStatusPublished::default_instance_ = new CMsgClientFriendUserStatusPublished();
  CMsgClientServiceMethod::default_instance_ = new CMsgClientServiceMethod();
  CMsgClientServiceMethodResponse::default_instance_ = new CMsgClientServiceMethodResponse();
  CMsgClientUIMode::default_instance_ = new CMsgClientUIMode();
  CMsgClientHeartBeat::default_instance_->InitAsDefaultInstance();
  CMsgClientSubscribeToPersonaFeed::default_instance_->InitAsDefaultInstance();
  CMsgClientSubscribeToPersonaFeed_PersonaFeed::default_instance_->InitAsDefaultInstance();
  CMsgClientUDSP2PSessionStarted::default_instance_->InitAsDefaultInstance();
  CMsgClientUDSP2PSessionEnded::default_instance_->InitAsDefaultInstance();
  CMsgClientRegisterAuthTicketWithCM::default_instance_->InitAsDefaultInstance();
  CMsgClientTicketAuthComplete::default_instance_->InitAsDefaultInstance();
  CMsgClientLogon::default_instance_->InitAsDefaultInstance();
  CMsgClientLogonResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientRequestWebAPIAuthenticateUserNonce::default_instance_->InitAsDefaultInstance();
  CMsgClientRequestWebAPIAuthenticateUserNonceResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientLogOff::default_instance_->InitAsDefaultInstance();
  CMsgClientLoggedOff::default_instance_->InitAsDefaultInstance();
  CMsgClientCMList::default_instance_->InitAsDefaultInstance();
  CMsgClientP2PConnectionInfo::default_instance_->InitAsDefaultInstance();
  CMsgClientP2PConnectionFailInfo::default_instance_->InitAsDefaultInstance();
  CMsgClientGetAppOwnershipTicket::default_instance_->InitAsDefaultInstance();
  CMsgClientGetAppOwnershipTicketResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientSessionToken::default_instance_->InitAsDefaultInstance();
  CMsgClientGameConnectTokens::default_instance_->InitAsDefaultInstance();
  CMsgGSServerType::default_instance_->InitAsDefaultInstance();
  CMsgGSStatusReply::default_instance_->InitAsDefaultInstance();
  CMsgGSPlayerList::default_instance_->InitAsDefaultInstance();
  CMsgGSPlayerList_Player::default_instance_->InitAsDefaultInstance();
  CMsgGSUserPlaying::default_instance_->InitAsDefaultInstance();
  CMsgGSDisconnectNotice::default_instance_->InitAsDefaultInstance();
  CMsgClientGamesPlayed::default_instance_->InitAsDefaultInstance();
  CMsgClientGamesPlayed_GamePlayed::default_instance_->InitAsDefaultInstance();
  CMsgGSApprove::default_instance_->InitAsDefaultInstance();
  CMsgGSDeny::default_instance_->InitAsDefaultInstance();
  CMsgGSKick::default_instance_->InitAsDefaultInstance();
  CMsgClientAuthList::default_instance_->InitAsDefaultInstance();
  CMsgClientAuthListAck::default_instance_->InitAsDefaultInstance();
  CMsgClientFriendsList::default_instance_->InitAsDefaultInstance();
  CMsgClientFriendsList_Friend::default_instance_->InitAsDefaultInstance();
  CMsgClientFriendsGroupsList::default_instance_->InitAsDefaultInstance();
  CMsgClientFriendsGroupsList_FriendGroup::default_instance_->InitAsDefaultInstance();
  CMsgClientFriendsGroupsList_FriendGroupsMembership::default_instance_->InitAsDefaultInstance();
  CMsgClientPlayerNicknameList::default_instance_->InitAsDefaultInstance();
  CMsgClientPlayerNicknameList_PlayerNickname::default_instance_->InitAsDefaultInstance();
  CMsgClientSetPlayerNickname::default_instance_->InitAsDefaultInstance();
  CMsgClientSetPlayerNicknameResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientLicenseList::default_instance_->InitAsDefaultInstance();
  CMsgClientLicenseList_License::default_instance_->InitAsDefaultInstance();
  CMsgClientLBSSetScore::default_instance_->InitAsDefaultInstance();
  CMsgClientLBSSetScoreResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientLBSSetUGC::default_instance_->InitAsDefaultInstance();
  CMsgClientLBSSetUGCResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientLBSFindOrCreateLB::default_instance_->InitAsDefaultInstance();
  CMsgClientLBSFindOrCreateLBResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientLBSGetLBEntries::default_instance_->InitAsDefaultInstance();
  CMsgClientLBSGetLBEntriesResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientLBSGetLBEntriesResponse_Entry::default_instance_->InitAsDefaultInstance();
  CMsgClientAccountInfo::default_instance_->InitAsDefaultInstance();
  CMsgClientAppMinutesPlayedData::default_instance_->InitAsDefaultInstance();
  CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::default_instance_->InitAsDefaultInstance();
  CMsgClientIsLimitedAccount::default_instance_->InitAsDefaultInstance();
  CMsgClientRequestFriendData::default_instance_->InitAsDefaultInstance();
  CMsgClientChangeStatus::default_instance_->InitAsDefaultInstance();
  CMsgPersonaChangeResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientPersonaState::default_instance_->InitAsDefaultInstance();
  CMsgClientPersonaState_Friend::default_instance_->InitAsDefaultInstance();
  CMsgClientFriendProfileInfo::default_instance_->InitAsDefaultInstance();
  CMsgClientFriendProfileInfoResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientServerList::default_instance_->InitAsDefaultInstance();
  CMsgClientServerList_Server::default_instance_->InitAsDefaultInstance();
  CMsgClientRequestedClientStats::default_instance_->InitAsDefaultInstance();
  CMsgClientRequestedClientStats_StatsToSend::default_instance_->InitAsDefaultInstance();
  CMsgClientStat2::default_instance_->InitAsDefaultInstance();
  CMsgClientStat2_StatDetail::default_instance_->InitAsDefaultInstance();
  CMsgClientMMSCreateLobby::default_instance_->InitAsDefaultInstance();
  CMsgClientMMSCreateLobbyResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientMMSJoinLobby::default_instance_->InitAsDefaultInstance();
  CMsgClientMMSJoinLobbyResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientMMSJoinLobbyResponse_Member::default_instance_->InitAsDefaultInstance();
  CMsgClientMMSLeaveLobby::default_instance_->InitAsDefaultInstance();
  CMsgClientMMSLeaveLobbyResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientMMSGetLobbyList::default_instance_->InitAsDefaultInstance();
  CMsgClientMMSGetLobbyList_Filter::default_instance_->InitAsDefaultInstance();
  CMsgClientMMSGetLobbyListResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientMMSGetLobbyListResponse_Lobby::default_instance_->InitAsDefaultInstance();
  CMsgClientMMSSetLobbyData::default_instance_->InitAsDefaultInstance();
  CMsgClientMMSSetLobbyDataResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientMMSGetLobbyData::default_instance_->InitAsDefaultInstance();
  CMsgClientMMSLobbyData::default_instance_->InitAsDefaultInstance();
  CMsgClientMMSLobbyData_Member::default_instance_->InitAsDefaultInstance();
  CMsgClientMMSSendLobbyChatMsg::default_instance_->InitAsDefaultInstance();
  CMsgClientMMSLobbyChatMsg::default_instance_->InitAsDefaultInstance();
  CMsgClientMMSSetLobbyOwner::default_instance_->InitAsDefaultInstance();
  CMsgClientMMSSetLobbyOwnerResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientMMSSetLobbyLinked::default_instance_->InitAsDefaultInstance();
  CMsgClientMMSSetLobbyGameServer::default_instance_->InitAsDefaultInstance();
  CMsgClientMMSLobbyGameServerSet::default_instance_->InitAsDefaultInstance();
  CMsgClientMMSUserJoinedLobby::default_instance_->InitAsDefaultInstance();
  CMsgClientMMSUserLeftLobby::default_instance_->InitAsDefaultInstance();
  CMsgClientMMSInviteToLobby::default_instance_->InitAsDefaultInstance();
  CMsgClientUDSInviteToGame::default_instance_->InitAsDefaultInstance();
  CMsgClientChatInvite::default_instance_->InitAsDefaultInstance();
  CMsgClientConnectionStats::default_instance_->InitAsDefaultInstance();
  CMsgClientConnectionStats_Stats_Logon::default_instance_->InitAsDefaultInstance();
  CMsgClientConnectionStats_Stats_UDP::default_instance_->InitAsDefaultInstance();
  CMsgClientConnectionStats_Stats_VConn::default_instance_->InitAsDefaultInstance();
  CMsgClientServersAvailable::default_instance_->InitAsDefaultInstance();
  CMsgClientServersAvailable_Server_Types_Available::default_instance_->InitAsDefaultInstance();
  CMsgClientGetUserStats::default_instance_->InitAsDefaultInstance();
  CMsgClientGetUserStatsResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientGetUserStatsResponse_Stats::default_instance_->InitAsDefaultInstance();
  CMsgClientGetUserStatsResponse_Achievement_Blocks::default_instance_->InitAsDefaultInstance();
  CMsgClientStoreUserStatsResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::default_instance_->InitAsDefaultInstance();
  CMsgClientStoreUserStats2::default_instance_->InitAsDefaultInstance();
  CMsgClientStoreUserStats2_Stats::default_instance_->InitAsDefaultInstance();
  CMsgClientStatsUpdated::default_instance_->InitAsDefaultInstance();
  CMsgClientStatsUpdated_Updated_Stats::default_instance_->InitAsDefaultInstance();
  CMsgClientStoreUserStats::default_instance_->InitAsDefaultInstance();
  CMsgClientStoreUserStats_Stats_To_Store::default_instance_->InitAsDefaultInstance();
  CMsgClientGetClientDetails::default_instance_->InitAsDefaultInstance();
  CMsgClientReportOverlayDetourFailure::default_instance_->InitAsDefaultInstance();
  CMsgClientGetClientDetailsResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientGetClientDetailsResponse_Game::default_instance_->InitAsDefaultInstance();
  CMsgClientGetClientAppList::default_instance_->InitAsDefaultInstance();
  CMsgClientGetClientAppListResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientGetClientAppListResponse_App::default_instance_->InitAsDefaultInstance();
  CMsgClientGetClientAppListResponse_App_DLC::default_instance_->InitAsDefaultInstance();
  CMsgClientInstallClientApp::default_instance_->InitAsDefaultInstance();
  CMsgClientInstallClientAppResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientUninstallClientApp::default_instance_->InitAsDefaultInstance();
  CMsgClientUninstallClientAppResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientSetClientAppUpdateState::default_instance_->InitAsDefaultInstance();
  CMsgClientSetClientAppUpdateStateResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientUFSUploadFileRequest::default_instance_->InitAsDefaultInstance();
  CMsgClientUFSUploadFileResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientUFSFileChunk::default_instance_->InitAsDefaultInstance();
  CMsgClientUFSTransferHeartbeat::default_instance_->InitAsDefaultInstance();
  CMsgClientUFSUploadFileFinished::default_instance_->InitAsDefaultInstance();
  CMsgClientUFSDeleteFileRequest::default_instance_->InitAsDefaultInstance();
  CMsgClientUFSDeleteFileResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientUFSGetFileListForApp::default_instance_->InitAsDefaultInstance();
  CMsgClientUFSGetFileListForAppResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientUFSGetFileListForAppResponse_File::default_instance_->InitAsDefaultInstance();
  CMsgClientUFSDownloadRequest::default_instance_->InitAsDefaultInstance();
  CMsgClientUFSDownloadResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientUFSLoginRequest::default_instance_->InitAsDefaultInstance();
  CMsgClientUFSLoginResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientRequestEncryptedAppTicket::default_instance_->InitAsDefaultInstance();
  CMsgClientRequestEncryptedAppTicketResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientRequestOAuthTokenForApp::default_instance_->InitAsDefaultInstance();
  CMsgClientRequestOAuthTokenForAppResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientWalletInfoUpdate::default_instance_->InitAsDefaultInstance();
  CMsgClientAppInfoUpdate::default_instance_->InitAsDefaultInstance();
  CMsgClientAppInfoChanges::default_instance_->InitAsDefaultInstance();
  CMsgClientAppInfoRequest::default_instance_->InitAsDefaultInstance();
  CMsgClientAppInfoRequest_App::default_instance_->InitAsDefaultInstance();
  CMsgClientAppInfoResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientAppInfoResponse_App::default_instance_->InitAsDefaultInstance();
  CMsgClientAppInfoResponse_App_Section::default_instance_->InitAsDefaultInstance();
  CMsgClientPackageInfoRequest::default_instance_->InitAsDefaultInstance();
  CMsgClientPackageInfoResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientPackageInfoResponse_Package::default_instance_->InitAsDefaultInstance();
  CMsgPICSChangesSinceRequest::default_instance_->InitAsDefaultInstance();
  CMsgPICSChangesSinceResponse::default_instance_->InitAsDefaultInstance();
  CMsgPICSChangesSinceResponse_PackageChange::default_instance_->InitAsDefaultInstance();
  CMsgPICSChangesSinceResponse_AppChange::default_instance_->InitAsDefaultInstance();
  CMsgPICSProductInfoRequest::default_instance_->InitAsDefaultInstance();
  CMsgPICSProductInfoRequest_AppInfo::default_instance_->InitAsDefaultInstance();
  CMsgPICSProductInfoRequest_PackageInfo::default_instance_->InitAsDefaultInstance();
  CMsgPICSProductInfoResponse::default_instance_->InitAsDefaultInstance();
  CMsgPICSProductInfoResponse_AppInfo::default_instance_->InitAsDefaultInstance();
  CMsgPICSProductInfoResponse_PackageInfo::default_instance_->InitAsDefaultInstance();
  CMsgPICSAccessTokenRequest::default_instance_->InitAsDefaultInstance();
  CMsgPICSAccessTokenResponse::default_instance_->InitAsDefaultInstance();
  CMsgPICSAccessTokenResponse_PackageToken::default_instance_->InitAsDefaultInstance();
  CMsgPICSAccessTokenResponse_AppToken::default_instance_->InitAsDefaultInstance();
  CMsgClientUFSGetUGCDetails::default_instance_->InitAsDefaultInstance();
  CMsgClientUFSGetUGCDetailsResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientUFSGetSingleFileInfo::default_instance_->InitAsDefaultInstance();
  CMsgClientUFSGetSingleFileInfoResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientUFSShareFile::default_instance_->InitAsDefaultInstance();
  CMsgClientUFSShareFileResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientNewLoginKey::default_instance_->InitAsDefaultInstance();
  CMsgClientNewLoginKeyAccepted::default_instance_->InitAsDefaultInstance();
  CMsgClientAMGetClanOfficers::default_instance_->InitAsDefaultInstance();
  CMsgClientAMGetClanOfficersResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientAMGetPersonaNameHistory::default_instance_->InitAsDefaultInstance();
  CMsgClientAMGetPersonaNameHistory_IdInstance::default_instance_->InitAsDefaultInstance();
  CMsgClientAMGetPersonaNameHistoryResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::default_instance_->InitAsDefaultInstance();
  CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::default_instance_->InitAsDefaultInstance();
  CMsgClientDeregisterWithServer::default_instance_->InitAsDefaultInstance();
  CMsgClientClanState::default_instance_->InitAsDefaultInstance();
  CMsgClientClanState_NameInfo::default_instance_->InitAsDefaultInstance();
  CMsgClientClanState_UserCounts::default_instance_->InitAsDefaultInstance();
  CMsgClientClanState_Event::default_instance_->InitAsDefaultInstance();
  CMsgClientFriendMsg::default_instance_->InitAsDefaultInstance();
  CMsgClientFriendMsgIncoming::default_instance_->InitAsDefaultInstance();
  CMsgClientAddFriend::default_instance_->InitAsDefaultInstance();
  CMsgClientAddFriendResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientRemoveFriend::default_instance_->InitAsDefaultInstance();
  CMsgClientHideFriend::default_instance_->InitAsDefaultInstance();
  CMsgClientUCMAddScreenshot::default_instance_->InitAsDefaultInstance();
  CMsgClientUCMAddScreenshot_Tag::default_instance_->InitAsDefaultInstance();
  CMsgClientUCMAddScreenshotResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientUCMDeleteScreenshot::default_instance_->InitAsDefaultInstance();
  CMsgClientUCMDeleteScreenshotResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientUCMPublishFile::default_instance_->InitAsDefaultInstance();
  CMsgClientUCMPublishFileResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientUCMUpdatePublishedFile::default_instance_->InitAsDefaultInstance();
  CMsgClientUCMUpdatePublishedFileResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientUCMGetPublishedFileDetails::default_instance_->InitAsDefaultInstance();
  CMsgClientUCMGetPublishedFileDetailsResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientUCMDeletePublishedFile::default_instance_->InitAsDefaultInstance();
  CMsgClientUCMDeletePublishedFileResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientUCMEnumerateUserPublishedFiles::default_instance_->InitAsDefaultInstance();
  CMsgClientUCMEnumerateUserPublishedFilesResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId::default_instance_->InitAsDefaultInstance();
  CMsgClientUCMSubscribePublishedFile::default_instance_->InitAsDefaultInstance();
  CMsgClientUCMSubscribePublishedFileResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientUCMEnumerateUserSubscribedFiles::default_instance_->InitAsDefaultInstance();
  CMsgClientUCMEnumerateUserSubscribedFilesResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId::default_instance_->InitAsDefaultInstance();
  CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates::default_instance_->InitAsDefaultInstance();
  CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId::default_instance_->InitAsDefaultInstance();
  CMsgClientUCMUnsubscribePublishedFile::default_instance_->InitAsDefaultInstance();
  CMsgClientUCMUnsubscribePublishedFileResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientUCMPublishedFileSubscribed::default_instance_->InitAsDefaultInstance();
  CMsgClientUCMPublishedFileUnsubscribed::default_instance_->InitAsDefaultInstance();
  CMsgClientUCMPublishedFileDeleted::default_instance_->InitAsDefaultInstance();
  CMsgClientUCMGetPublishedFilesForUser::default_instance_->InitAsDefaultInstance();
  CMsgClientUCMGetPublishedFilesForUserResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId::default_instance_->InitAsDefaultInstance();
  CMsgClientUCMSetUserPublishedFileAction::default_instance_->InitAsDefaultInstance();
  CMsgClientUCMSetUserPublishedFileActionResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientUCMEnumeratePublishedFilesByUserAction::default_instance_->InitAsDefaultInstance();
  CMsgClientUCMEnumeratePublishedFilesByUserActionResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId::default_instance_->InitAsDefaultInstance();
  CMsgClientScreenshotsChanged::default_instance_->InitAsDefaultInstance();
  CMsgClientUpdateUserGameInfo::default_instance_->InitAsDefaultInstance();
  CMsgClientRichPresenceUpload::default_instance_->InitAsDefaultInstance();
  CMsgClientRichPresenceRequest::default_instance_->InitAsDefaultInstance();
  CMsgClientRichPresenceInfo::default_instance_->InitAsDefaultInstance();
  CMsgClientRichPresenceInfo_RichPresence::default_instance_->InitAsDefaultInstance();
  CMsgClientCheckFileSignature::default_instance_->InitAsDefaultInstance();
  CMsgClientCheckFileSignatureResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientReadMachineAuth::default_instance_->InitAsDefaultInstance();
  CMsgClientReadMachineAuthResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientUpdateMachineAuth::default_instance_->InitAsDefaultInstance();
  CMsgClientUpdateMachineAuthResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientRequestMachineAuth::default_instance_->InitAsDefaultInstance();
  CMsgClientRequestMachineAuthResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientChangeSteamGuardOptions::default_instance_->InitAsDefaultInstance();
  CMsgClientChangeSteamGuardOptionsResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientCreateFriendsGroup::default_instance_->InitAsDefaultInstance();
  CMsgClientCreateFriendsGroupResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientDeleteFriendsGroup::default_instance_->InitAsDefaultInstance();
  CMsgClientDeleteFriendsGroupResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientRenameFriendsGroup::default_instance_->InitAsDefaultInstance();
  CMsgClientRenameFriendsGroupResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientAddFriendToGroup::default_instance_->InitAsDefaultInstance();
  CMsgClientAddFriendToGroupResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientRemoveFriendFromGroup::default_instance_->InitAsDefaultInstance();
  CMsgClientRemoveFriendFromGroupResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientRegisterKey::default_instance_->InitAsDefaultInstance();
  CMsgClientPurchaseResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientActivateOEMLicense::default_instance_->InitAsDefaultInstance();
  CMsgClientPurchaseWithMachineID::default_instance_->InitAsDefaultInstance();
  CMsgTrading_InitiateTradeRequest::default_instance_->InitAsDefaultInstance();
  CMsgTrading_InitiateTradeResponse::default_instance_->InitAsDefaultInstance();
  CMsgTrading_CancelTradeRequest::default_instance_->InitAsDefaultInstance();
  CMsgTrading_StartSession::default_instance_->InitAsDefaultInstance();
  CMsgClientMDSInitDepotBuildRequest::default_instance_->InitAsDefaultInstance();
  CMsgClientMDSInitDepotBuildResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientMDSLoginRequest::default_instance_->InitAsDefaultInstance();
  CMsgClientMDSLoginResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientMDSUploadDepotChunks::default_instance_->InitAsDefaultInstance();
  CMsgClientMDSUploadDepotChunks_ChunkUploadData::default_instance_->InitAsDefaultInstance();
  CMsgClientMDSUploadDepotChunksResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientMDSUploadRateTest::default_instance_->InitAsDefaultInstance();
  CMsgClientMDSUploadRateTestResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientMDSTransmitManifestDataChunk::default_instance_->InitAsDefaultInstance();
  CMsgClientMDSUploadManifestRequest::default_instance_->InitAsDefaultInstance();
  CMsgClientMDSUploadManifestResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientMDSGetDepotManifest::default_instance_->InitAsDefaultInstance();
  CMsgClientMDSGetDepotManifestResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientMDSGetDepotManifestChunk::default_instance_->InitAsDefaultInstance();
  CMsgClientMDSRegisterAppBuild::default_instance_->InitAsDefaultInstance();
  CMsgClientMDSRegisterAppBuildResponse::default_instance_->InitAsDefaultInstance();
  CMsgMDSSetAppBuildLive::default_instance_->InitAsDefaultInstance();
  CMsgMDSSetAppBuildLiveResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientMDSSignInstallScript::default_instance_->InitAsDefaultInstance();
  CMsgClientMDSSignInstallScriptResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientEmailChange::default_instance_->InitAsDefaultInstance();
  CMsgClientEmailChangeResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientGetCDNAuthToken::default_instance_->InitAsDefaultInstance();
  CMsgClientGetDepotDecryptionKey::default_instance_->InitAsDefaultInstance();
  CMsgClientGetDepotDecryptionKeyResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientGetAppBetaPasswords::default_instance_->InitAsDefaultInstance();
  CMsgClientGetAppBetaPasswordsResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientGetAppBetaPasswordsResponse_BetaPassword::default_instance_->InitAsDefaultInstance();
  CMsgClientUpdateAppJobReport::default_instance_->InitAsDefaultInstance();
  CMsgClientGetCDNAuthTokenResponse::default_instance_->InitAsDefaultInstance();
  CMsgDownloadRateStatistics::default_instance_->InitAsDefaultInstance();
  CMsgDownloadRateStatistics_StatsInfo::default_instance_->InitAsDefaultInstance();
  CMsgClientRequestAccountData::default_instance_->InitAsDefaultInstance();
  CMsgClientRequestAccountDataResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientUGSGetGlobalStats::default_instance_->InitAsDefaultInstance();
  CMsgClientUGSGetGlobalStatsResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientUGSGetGlobalStatsResponse_Day::default_instance_->InitAsDefaultInstance();
  CMsgClientUGSGetGlobalStatsResponse_Day_Stat::default_instance_->InitAsDefaultInstance();
  CMsgGameServerData::default_instance_->InitAsDefaultInstance();
  CMsgGameServerData_Player::default_instance_->InitAsDefaultInstance();
  CMsgGameServerRemove::default_instance_->InitAsDefaultInstance();
  CMsgClientGMSServerQuery::default_instance_->InitAsDefaultInstance();
  CMsgGMSClientServerQueryResponse::default_instance_->InitAsDefaultInstance();
  CMsgGMSClientServerQueryResponse_Server::default_instance_->InitAsDefaultInstance();
  CMsgGameServerOutOfDate::default_instance_->InitAsDefaultInstance();
  CMsgClientRedeemGuestPass::default_instance_->InitAsDefaultInstance();
  CMsgClientRedeemGuestPassResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientGetClanActivityCounts::default_instance_->InitAsDefaultInstance();
  CMsgClientGetClanActivityCountsResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientOGSReportString::default_instance_->InitAsDefaultInstance();
  CMsgClientOGSReportBug::default_instance_->InitAsDefaultInstance();
  CMsgGSAssociateWithClan::default_instance_->InitAsDefaultInstance();
  CMsgGSAssociateWithClanResponse::default_instance_->InitAsDefaultInstance();
  CMsgGSComputeNewPlayerCompatibility::default_instance_->InitAsDefaultInstance();
  CMsgGSComputeNewPlayerCompatibilityResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientSentLogs::default_instance_->InitAsDefaultInstance();
  CMsgGCClient::default_instance_->InitAsDefaultInstance();
  CMsgClientRequestFreeLicense::default_instance_->InitAsDefaultInstance();
  CMsgClientRequestFreeLicenseResponse::default_instance_->InitAsDefaultInstance();
  CMsgDRMDownloadRequestWithCrashData::default_instance_->InitAsDefaultInstance();
  CMsgDRMDownloadResponse::default_instance_->InitAsDefaultInstance();
  CMsgDRMFinalResult::default_instance_->InitAsDefaultInstance();
  CMsgClientDPCheckSpecialSurvey::default_instance_->InitAsDefaultInstance();
  CMsgClientDPCheckSpecialSurveyResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientDPSendSpecialSurveyResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientDPSendSpecialSurveyResponseReply::default_instance_->InitAsDefaultInstance();
  CMsgClientRequestForgottenPasswordEmail::default_instance_->InitAsDefaultInstance();
  CMsgClientRequestForgottenPasswordEmailResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientItemAnnouncements::default_instance_->InitAsDefaultInstance();
  CMsgClientRequestItemAnnouncements::default_instance_->InitAsDefaultInstance();
  CMsgClientCommentNotifications::default_instance_->InitAsDefaultInstance();
  CMsgClientRequestCommentNotifications::default_instance_->InitAsDefaultInstance();
  CMsgClientOfflineMessageNotification::default_instance_->InitAsDefaultInstance();
  CMsgClientRequestOfflineMessageCount::default_instance_->InitAsDefaultInstance();
  CMsgClientFSGetFriendMessageHistory::default_instance_->InitAsDefaultInstance();
  CMsgClientFSGetFriendMessageHistoryResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientFSGetFriendMessageHistoryResponse_FriendMessage::default_instance_->InitAsDefaultInstance();
  CMsgClientFSGetFriendMessageHistoryForOfflineMessages::default_instance_->InitAsDefaultInstance();
  CMsgClientFSGetFriendsSteamLevels::default_instance_->InitAsDefaultInstance();
  CMsgClientFSGetFriendsSteamLevelsResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientFSGetFriendsSteamLevelsResponse_Friend::default_instance_->InitAsDefaultInstance();
  CMsgClientEmailAddrInfo::default_instance_->InitAsDefaultInstance();
  CMsgCREEnumeratePublishedFiles::default_instance_->InitAsDefaultInstance();
  CMsgCREEnumeratePublishedFilesResponse::default_instance_->InitAsDefaultInstance();
  CMsgCREEnumeratePublishedFilesResponse_PublishedFileId::default_instance_->InitAsDefaultInstance();
  CMsgCRERankByVote::default_instance_->InitAsDefaultInstance();
  CMsgCRERankByVoteResponse::default_instance_->InitAsDefaultInstance();
  CMsgCRERankByVoteResponse_PublishedFileId::default_instance_->InitAsDefaultInstance();
  CMsgCRERankByTrend::default_instance_->InitAsDefaultInstance();
  CMsgCRERankByTrendResponse::default_instance_->InitAsDefaultInstance();
  CMsgCRERankByTrendResponse_PublishedFileId::default_instance_->InitAsDefaultInstance();
  CMsgCREItemVoteSummary::default_instance_->InitAsDefaultInstance();
  CMsgCREItemVoteSummary_PublishedFileId::default_instance_->InitAsDefaultInstance();
  CMsgCREItemVoteSummaryResponse::default_instance_->InitAsDefaultInstance();
  CMsgCREItemVoteSummaryResponse_ItemVoteSummary::default_instance_->InitAsDefaultInstance();
  CMsgCREUpdateUserPublishedItemVote::default_instance_->InitAsDefaultInstance();
  CMsgCREUpdateUserPublishedItemVoteResponse::default_instance_->InitAsDefaultInstance();
  CMsgCREGetUserPublishedItemVoteDetails::default_instance_->InitAsDefaultInstance();
  CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::default_instance_->InitAsDefaultInstance();
  CMsgCREGetUserPublishedItemVoteDetailsResponse::default_instance_->InitAsDefaultInstance();
  CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::default_instance_->InitAsDefaultInstance();
  CMsgGameServerPingSample::default_instance_->InitAsDefaultInstance();
  CMsgGameServerPingSample_Sample::default_instance_->InitAsDefaultInstance();
  CMsgFSGetFollowerCount::default_instance_->InitAsDefaultInstance();
  CMsgFSGetFollowerCountResponse::default_instance_->InitAsDefaultInstance();
  CMsgFSGetIsFollowing::default_instance_->InitAsDefaultInstance();
  CMsgFSGetIsFollowingResponse::default_instance_->InitAsDefaultInstance();
  CMsgFSEnumerateFollowingList::default_instance_->InitAsDefaultInstance();
  CMsgFSEnumerateFollowingListResponse::default_instance_->InitAsDefaultInstance();
  CMsgDPGetNumberOfCurrentPlayers::default_instance_->InitAsDefaultInstance();
  CMsgDPGetNumberOfCurrentPlayersResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientFriendUserStatusPublished::default_instance_->InitAsDefaultInstance();
  CMsgClientServiceMethod::default_instance_->InitAsDefaultInstance();
  CMsgClientServiceMethodResponse::default_instance_->InitAsDefaultInstance();
  CMsgClientUIMode::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_steammessages_5fclientserver_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_steammessages_5fclientserver_2eproto_once_);
void protobuf_AddDesc_steammessages_5fclientserver_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_steammessages_5fclientserver_2eproto_once_,
                 &protobuf_AddDesc_steammessages_5fclientserver_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_steammessages_5fclientserver_2eproto {
  StaticDescriptorInitializer_steammessages_5fclientserver_2eproto() {
    protobuf_AddDesc_steammessages_5fclientserver_2eproto();
  }
} static_descriptor_initializer_steammessages_5fclientserver_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgClientHeartBeat::CMsgClientHeartBeat()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientHeartBeat::InitAsDefaultInstance() {
}

CMsgClientHeartBeat::CMsgClientHeartBeat(const CMsgClientHeartBeat& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientHeartBeat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientHeartBeat::~CMsgClientHeartBeat() {
  SharedDtor();
}

void CMsgClientHeartBeat::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientHeartBeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientHeartBeat& CMsgClientHeartBeat::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientHeartBeat* CMsgClientHeartBeat::default_instance_ = NULL;

CMsgClientHeartBeat* CMsgClientHeartBeat::New() const {
  return new CMsgClientHeartBeat;
}

void CMsgClientHeartBeat::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientHeartBeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void CMsgClientHeartBeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int CMsgClientHeartBeat::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientHeartBeat::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientHeartBeat*>(&from));
}

void CMsgClientHeartBeat::MergeFrom(const CMsgClientHeartBeat& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void CMsgClientHeartBeat::CopyFrom(const CMsgClientHeartBeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientHeartBeat::IsInitialized() const {

  return true;
}

void CMsgClientHeartBeat::Swap(CMsgClientHeartBeat* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientHeartBeat::GetTypeName() const {
  return "Sc.CMsgClientHeartBeat";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientSubscribeToPersonaFeed_PersonaFeed::kSteamIDFieldNumber;
const int CMsgClientSubscribeToPersonaFeed_PersonaFeed::kSubscribeFieldNumber;
#endif  // !_MSC_VER

CMsgClientSubscribeToPersonaFeed_PersonaFeed::CMsgClientSubscribeToPersonaFeed_PersonaFeed()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientSubscribeToPersonaFeed_PersonaFeed::InitAsDefaultInstance() {
}

CMsgClientSubscribeToPersonaFeed_PersonaFeed::CMsgClientSubscribeToPersonaFeed_PersonaFeed(const CMsgClientSubscribeToPersonaFeed_PersonaFeed& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientSubscribeToPersonaFeed_PersonaFeed::SharedCtor() {
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
  subscribe_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientSubscribeToPersonaFeed_PersonaFeed::~CMsgClientSubscribeToPersonaFeed_PersonaFeed() {
  SharedDtor();
}

void CMsgClientSubscribeToPersonaFeed_PersonaFeed::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientSubscribeToPersonaFeed_PersonaFeed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientSubscribeToPersonaFeed_PersonaFeed& CMsgClientSubscribeToPersonaFeed_PersonaFeed::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientSubscribeToPersonaFeed_PersonaFeed* CMsgClientSubscribeToPersonaFeed_PersonaFeed::default_instance_ = NULL;

CMsgClientSubscribeToPersonaFeed_PersonaFeed* CMsgClientSubscribeToPersonaFeed_PersonaFeed::New() const {
  return new CMsgClientSubscribeToPersonaFeed_PersonaFeed;
}

void CMsgClientSubscribeToPersonaFeed_PersonaFeed::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steamid_ = GOOGLE_ULONGLONG(0);
    subscribe_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientSubscribeToPersonaFeed_PersonaFeed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
          set_has_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_subscribe;
        break;
      }

      // optional bool subscribe = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subscribe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &subscribe_)));
          set_has_subscribe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientSubscribeToPersonaFeed_PersonaFeed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steamID = 1;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional bool subscribe = 2;
  if (has_subscribe()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->subscribe(), output);
  }

}

int CMsgClientSubscribeToPersonaFeed_PersonaFeed::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steamID = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional bool subscribe = 2;
    if (has_subscribe()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientSubscribeToPersonaFeed_PersonaFeed::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientSubscribeToPersonaFeed_PersonaFeed*>(&from));
}

void CMsgClientSubscribeToPersonaFeed_PersonaFeed::MergeFrom(const CMsgClientSubscribeToPersonaFeed_PersonaFeed& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
    if (from.has_subscribe()) {
      set_subscribe(from.subscribe());
    }
  }
}

void CMsgClientSubscribeToPersonaFeed_PersonaFeed::CopyFrom(const CMsgClientSubscribeToPersonaFeed_PersonaFeed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSubscribeToPersonaFeed_PersonaFeed::IsInitialized() const {

  return true;
}

void CMsgClientSubscribeToPersonaFeed_PersonaFeed::Swap(CMsgClientSubscribeToPersonaFeed_PersonaFeed* other) {
  if (other != this) {
    std::swap(steamid_, other->steamid_);
    std::swap(subscribe_, other->subscribe_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientSubscribeToPersonaFeed_PersonaFeed::GetTypeName() const {
  return "Sc.CMsgClientSubscribeToPersonaFeed.PersonaFeed";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientSubscribeToPersonaFeed::kPersonaFeedsFieldNumber;
#endif  // !_MSC_VER

CMsgClientSubscribeToPersonaFeed::CMsgClientSubscribeToPersonaFeed()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientSubscribeToPersonaFeed::InitAsDefaultInstance() {
}

CMsgClientSubscribeToPersonaFeed::CMsgClientSubscribeToPersonaFeed(const CMsgClientSubscribeToPersonaFeed& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientSubscribeToPersonaFeed::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientSubscribeToPersonaFeed::~CMsgClientSubscribeToPersonaFeed() {
  SharedDtor();
}

void CMsgClientSubscribeToPersonaFeed::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientSubscribeToPersonaFeed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientSubscribeToPersonaFeed& CMsgClientSubscribeToPersonaFeed::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientSubscribeToPersonaFeed* CMsgClientSubscribeToPersonaFeed::default_instance_ = NULL;

CMsgClientSubscribeToPersonaFeed* CMsgClientSubscribeToPersonaFeed::New() const {
  return new CMsgClientSubscribeToPersonaFeed;
}

void CMsgClientSubscribeToPersonaFeed::Clear() {
  persona_feeds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientSubscribeToPersonaFeed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Sc.CMsgClientSubscribeToPersonaFeed.PersonaFeed persona_feeds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_persona_feeds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_persona_feeds()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_persona_feeds;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientSubscribeToPersonaFeed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Sc.CMsgClientSubscribeToPersonaFeed.PersonaFeed persona_feeds = 1;
  for (int i = 0; i < this->persona_feeds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->persona_feeds(i), output);
  }

}

int CMsgClientSubscribeToPersonaFeed::ByteSize() const {
  int total_size = 0;

  // repeated .Sc.CMsgClientSubscribeToPersonaFeed.PersonaFeed persona_feeds = 1;
  total_size += 1 * this->persona_feeds_size();
  for (int i = 0; i < this->persona_feeds_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->persona_feeds(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientSubscribeToPersonaFeed::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientSubscribeToPersonaFeed*>(&from));
}

void CMsgClientSubscribeToPersonaFeed::MergeFrom(const CMsgClientSubscribeToPersonaFeed& from) {
  GOOGLE_CHECK_NE(&from, this);
  persona_feeds_.MergeFrom(from.persona_feeds_);
}

void CMsgClientSubscribeToPersonaFeed::CopyFrom(const CMsgClientSubscribeToPersonaFeed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSubscribeToPersonaFeed::IsInitialized() const {

  return true;
}

void CMsgClientSubscribeToPersonaFeed::Swap(CMsgClientSubscribeToPersonaFeed* other) {
  if (other != this) {
    persona_feeds_.Swap(&other->persona_feeds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientSubscribeToPersonaFeed::GetTypeName() const {
  return "Sc.CMsgClientSubscribeToPersonaFeed";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUDSP2PSessionStarted::kSteamidRemoteFieldNumber;
const int CMsgClientUDSP2PSessionStarted::kAppidFieldNumber;
#endif  // !_MSC_VER

CMsgClientUDSP2PSessionStarted::CMsgClientUDSP2PSessionStarted()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUDSP2PSessionStarted::InitAsDefaultInstance() {
}

CMsgClientUDSP2PSessionStarted::CMsgClientUDSP2PSessionStarted(const CMsgClientUDSP2PSessionStarted& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUDSP2PSessionStarted::SharedCtor() {
  _cached_size_ = 0;
  steamid_remote_ = GOOGLE_ULONGLONG(0);
  appid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUDSP2PSessionStarted::~CMsgClientUDSP2PSessionStarted() {
  SharedDtor();
}

void CMsgClientUDSP2PSessionStarted::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUDSP2PSessionStarted::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUDSP2PSessionStarted& CMsgClientUDSP2PSessionStarted::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUDSP2PSessionStarted* CMsgClientUDSP2PSessionStarted::default_instance_ = NULL;

CMsgClientUDSP2PSessionStarted* CMsgClientUDSP2PSessionStarted::New() const {
  return new CMsgClientUDSP2PSessionStarted;
}

void CMsgClientUDSP2PSessionStarted::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steamid_remote_ = GOOGLE_ULONGLONG(0);
    appid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUDSP2PSessionStarted::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid_remote = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_remote_)));
          set_has_steamid_remote();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_appid;
        break;
      }

      // optional int32 appid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUDSP2PSessionStarted::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steamid_remote = 1;
  if (has_steamid_remote()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid_remote(), output);
  }

  // optional int32 appid = 2;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->appid(), output);
  }

}

int CMsgClientUDSP2PSessionStarted::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steamid_remote = 1;
    if (has_steamid_remote()) {
      total_size += 1 + 8;
    }

    // optional int32 appid = 2;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUDSP2PSessionStarted::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUDSP2PSessionStarted*>(&from));
}

void CMsgClientUDSP2PSessionStarted::MergeFrom(const CMsgClientUDSP2PSessionStarted& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamid_remote()) {
      set_steamid_remote(from.steamid_remote());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
  }
}

void CMsgClientUDSP2PSessionStarted::CopyFrom(const CMsgClientUDSP2PSessionStarted& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUDSP2PSessionStarted::IsInitialized() const {

  return true;
}

void CMsgClientUDSP2PSessionStarted::Swap(CMsgClientUDSP2PSessionStarted* other) {
  if (other != this) {
    std::swap(steamid_remote_, other->steamid_remote_);
    std::swap(appid_, other->appid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUDSP2PSessionStarted::GetTypeName() const {
  return "Sc.CMsgClientUDSP2PSessionStarted";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUDSP2PSessionEnded::kSteamidRemoteFieldNumber;
const int CMsgClientUDSP2PSessionEnded::kAppidFieldNumber;
const int CMsgClientUDSP2PSessionEnded::kSessionLengthSecFieldNumber;
const int CMsgClientUDSP2PSessionEnded::kSessionErrorFieldNumber;
const int CMsgClientUDSP2PSessionEnded::kNattypeFieldNumber;
const int CMsgClientUDSP2PSessionEnded::kBytesRecvFieldNumber;
const int CMsgClientUDSP2PSessionEnded::kBytesSentFieldNumber;
const int CMsgClientUDSP2PSessionEnded::kBytesSentRelayFieldNumber;
const int CMsgClientUDSP2PSessionEnded::kBytesRecvRelayFieldNumber;
const int CMsgClientUDSP2PSessionEnded::kTimeToConnectMsFieldNumber;
#endif  // !_MSC_VER

CMsgClientUDSP2PSessionEnded::CMsgClientUDSP2PSessionEnded()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUDSP2PSessionEnded::InitAsDefaultInstance() {
}

CMsgClientUDSP2PSessionEnded::CMsgClientUDSP2PSessionEnded(const CMsgClientUDSP2PSessionEnded& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUDSP2PSessionEnded::SharedCtor() {
  _cached_size_ = 0;
  steamid_remote_ = GOOGLE_ULONGLONG(0);
  appid_ = 0;
  session_length_sec_ = 0;
  session_error_ = 0;
  nattype_ = 0;
  bytes_recv_ = 0;
  bytes_sent_ = 0;
  bytes_sent_relay_ = 0;
  bytes_recv_relay_ = 0;
  time_to_connect_ms_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUDSP2PSessionEnded::~CMsgClientUDSP2PSessionEnded() {
  SharedDtor();
}

void CMsgClientUDSP2PSessionEnded::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUDSP2PSessionEnded::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUDSP2PSessionEnded& CMsgClientUDSP2PSessionEnded::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUDSP2PSessionEnded* CMsgClientUDSP2PSessionEnded::default_instance_ = NULL;

CMsgClientUDSP2PSessionEnded* CMsgClientUDSP2PSessionEnded::New() const {
  return new CMsgClientUDSP2PSessionEnded;
}

void CMsgClientUDSP2PSessionEnded::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steamid_remote_ = GOOGLE_ULONGLONG(0);
    appid_ = 0;
    session_length_sec_ = 0;
    session_error_ = 0;
    nattype_ = 0;
    bytes_recv_ = 0;
    bytes_sent_ = 0;
    bytes_sent_relay_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    bytes_recv_relay_ = 0;
    time_to_connect_ms_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUDSP2PSessionEnded::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid_remote = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_remote_)));
          set_has_steamid_remote();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_appid;
        break;
      }

      // optional int32 appid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_session_length_sec;
        break;
      }

      // optional int32 session_length_sec = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_session_length_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_length_sec_)));
          set_has_session_length_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_session_error;
        break;
      }

      // optional int32 session_error = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_session_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_error_)));
          set_has_session_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_nattype;
        break;
      }

      // optional int32 nattype = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nattype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nattype_)));
          set_has_nattype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bytes_recv;
        break;
      }

      // optional int32 bytes_recv = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bytes_recv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bytes_recv_)));
          set_has_bytes_recv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bytes_sent;
        break;
      }

      // optional int32 bytes_sent = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bytes_sent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bytes_sent_)));
          set_has_bytes_sent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bytes_sent_relay;
        break;
      }

      // optional int32 bytes_sent_relay = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bytes_sent_relay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bytes_sent_relay_)));
          set_has_bytes_sent_relay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_bytes_recv_relay;
        break;
      }

      // optional int32 bytes_recv_relay = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bytes_recv_relay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bytes_recv_relay_)));
          set_has_bytes_recv_relay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_time_to_connect_ms;
        break;
      }

      // optional int32 time_to_connect_ms = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_to_connect_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_to_connect_ms_)));
          set_has_time_to_connect_ms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUDSP2PSessionEnded::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steamid_remote = 1;
  if (has_steamid_remote()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid_remote(), output);
  }

  // optional int32 appid = 2;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->appid(), output);
  }

  // optional int32 session_length_sec = 3;
  if (has_session_length_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->session_length_sec(), output);
  }

  // optional int32 session_error = 4;
  if (has_session_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->session_error(), output);
  }

  // optional int32 nattype = 5;
  if (has_nattype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nattype(), output);
  }

  // optional int32 bytes_recv = 6;
  if (has_bytes_recv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->bytes_recv(), output);
  }

  // optional int32 bytes_sent = 7;
  if (has_bytes_sent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->bytes_sent(), output);
  }

  // optional int32 bytes_sent_relay = 8;
  if (has_bytes_sent_relay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->bytes_sent_relay(), output);
  }

  // optional int32 bytes_recv_relay = 9;
  if (has_bytes_recv_relay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->bytes_recv_relay(), output);
  }

  // optional int32 time_to_connect_ms = 10;
  if (has_time_to_connect_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->time_to_connect_ms(), output);
  }

}

int CMsgClientUDSP2PSessionEnded::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steamid_remote = 1;
    if (has_steamid_remote()) {
      total_size += 1 + 8;
    }

    // optional int32 appid = 2;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

    // optional int32 session_length_sec = 3;
    if (has_session_length_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->session_length_sec());
    }

    // optional int32 session_error = 4;
    if (has_session_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->session_error());
    }

    // optional int32 nattype = 5;
    if (has_nattype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nattype());
    }

    // optional int32 bytes_recv = 6;
    if (has_bytes_recv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bytes_recv());
    }

    // optional int32 bytes_sent = 7;
    if (has_bytes_sent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bytes_sent());
    }

    // optional int32 bytes_sent_relay = 8;
    if (has_bytes_sent_relay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bytes_sent_relay());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 bytes_recv_relay = 9;
    if (has_bytes_recv_relay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bytes_recv_relay());
    }

    // optional int32 time_to_connect_ms = 10;
    if (has_time_to_connect_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_to_connect_ms());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUDSP2PSessionEnded::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUDSP2PSessionEnded*>(&from));
}

void CMsgClientUDSP2PSessionEnded::MergeFrom(const CMsgClientUDSP2PSessionEnded& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamid_remote()) {
      set_steamid_remote(from.steamid_remote());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_session_length_sec()) {
      set_session_length_sec(from.session_length_sec());
    }
    if (from.has_session_error()) {
      set_session_error(from.session_error());
    }
    if (from.has_nattype()) {
      set_nattype(from.nattype());
    }
    if (from.has_bytes_recv()) {
      set_bytes_recv(from.bytes_recv());
    }
    if (from.has_bytes_sent()) {
      set_bytes_sent(from.bytes_sent());
    }
    if (from.has_bytes_sent_relay()) {
      set_bytes_sent_relay(from.bytes_sent_relay());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bytes_recv_relay()) {
      set_bytes_recv_relay(from.bytes_recv_relay());
    }
    if (from.has_time_to_connect_ms()) {
      set_time_to_connect_ms(from.time_to_connect_ms());
    }
  }
}

void CMsgClientUDSP2PSessionEnded::CopyFrom(const CMsgClientUDSP2PSessionEnded& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUDSP2PSessionEnded::IsInitialized() const {

  return true;
}

void CMsgClientUDSP2PSessionEnded::Swap(CMsgClientUDSP2PSessionEnded* other) {
  if (other != this) {
    std::swap(steamid_remote_, other->steamid_remote_);
    std::swap(appid_, other->appid_);
    std::swap(session_length_sec_, other->session_length_sec_);
    std::swap(session_error_, other->session_error_);
    std::swap(nattype_, other->nattype_);
    std::swap(bytes_recv_, other->bytes_recv_);
    std::swap(bytes_sent_, other->bytes_sent_);
    std::swap(bytes_sent_relay_, other->bytes_sent_relay_);
    std::swap(bytes_recv_relay_, other->bytes_recv_relay_);
    std::swap(time_to_connect_ms_, other->time_to_connect_ms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUDSP2PSessionEnded::GetTypeName() const {
  return "Sc.CMsgClientUDSP2PSessionEnded";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientRegisterAuthTicketWithCM::kProtocolVersionFieldNumber;
const int CMsgClientRegisterAuthTicketWithCM::kTicketFieldNumber;
#endif  // !_MSC_VER

CMsgClientRegisterAuthTicketWithCM::CMsgClientRegisterAuthTicketWithCM()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientRegisterAuthTicketWithCM::InitAsDefaultInstance() {
}

CMsgClientRegisterAuthTicketWithCM::CMsgClientRegisterAuthTicketWithCM(const CMsgClientRegisterAuthTicketWithCM& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRegisterAuthTicketWithCM::SharedCtor() {
  _cached_size_ = 0;
  protocol_version_ = 0u;
  ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRegisterAuthTicketWithCM::~CMsgClientRegisterAuthTicketWithCM() {
  SharedDtor();
}

void CMsgClientRegisterAuthTicketWithCM::SharedDtor() {
  if (ticket_ != &::google::protobuf::internal::kEmptyString) {
    delete ticket_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientRegisterAuthTicketWithCM::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientRegisterAuthTicketWithCM& CMsgClientRegisterAuthTicketWithCM::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientRegisterAuthTicketWithCM* CMsgClientRegisterAuthTicketWithCM::default_instance_ = NULL;

CMsgClientRegisterAuthTicketWithCM* CMsgClientRegisterAuthTicketWithCM::New() const {
  return new CMsgClientRegisterAuthTicketWithCM;
}

void CMsgClientRegisterAuthTicketWithCM::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protocol_version_ = 0u;
    if (has_ticket()) {
      if (ticket_ != &::google::protobuf::internal::kEmptyString) {
        ticket_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientRegisterAuthTicketWithCM::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 protocol_version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_version_)));
          set_has_protocol_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ticket;
        break;
      }

      // optional bytes ticket = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ticket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ticket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientRegisterAuthTicketWithCM::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 protocol_version = 1;
  if (has_protocol_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->protocol_version(), output);
  }

  // optional bytes ticket = 3;
  if (has_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->ticket(), output);
  }

}

int CMsgClientRegisterAuthTicketWithCM::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 protocol_version = 1;
    if (has_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protocol_version());
    }

    // optional bytes ticket = 3;
    if (has_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ticket());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRegisterAuthTicketWithCM::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientRegisterAuthTicketWithCM*>(&from));
}

void CMsgClientRegisterAuthTicketWithCM::MergeFrom(const CMsgClientRegisterAuthTicketWithCM& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protocol_version()) {
      set_protocol_version(from.protocol_version());
    }
    if (from.has_ticket()) {
      set_ticket(from.ticket());
    }
  }
}

void CMsgClientRegisterAuthTicketWithCM::CopyFrom(const CMsgClientRegisterAuthTicketWithCM& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRegisterAuthTicketWithCM::IsInitialized() const {

  return true;
}

void CMsgClientRegisterAuthTicketWithCM::Swap(CMsgClientRegisterAuthTicketWithCM* other) {
  if (other != this) {
    std::swap(protocol_version_, other->protocol_version_);
    std::swap(ticket_, other->ticket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientRegisterAuthTicketWithCM::GetTypeName() const {
  return "Sc.CMsgClientRegisterAuthTicketWithCM";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientTicketAuthComplete::kSteamIdFieldNumber;
const int CMsgClientTicketAuthComplete::kGameIdFieldNumber;
const int CMsgClientTicketAuthComplete::kEstateFieldNumber;
const int CMsgClientTicketAuthComplete::kEauthSessionResponseFieldNumber;
const int CMsgClientTicketAuthComplete::kDEPRECATEDTicketFieldNumber;
const int CMsgClientTicketAuthComplete::kTicketCrcFieldNumber;
const int CMsgClientTicketAuthComplete::kTicketSequenceFieldNumber;
#endif  // !_MSC_VER

CMsgClientTicketAuthComplete::CMsgClientTicketAuthComplete()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientTicketAuthComplete::InitAsDefaultInstance() {
}

CMsgClientTicketAuthComplete::CMsgClientTicketAuthComplete(const CMsgClientTicketAuthComplete& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientTicketAuthComplete::SharedCtor() {
  _cached_size_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
  game_id_ = GOOGLE_ULONGLONG(0);
  estate_ = 0u;
  eauth_session_response_ = 0u;
  deprecated_ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ticket_crc_ = 0u;
  ticket_sequence_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientTicketAuthComplete::~CMsgClientTicketAuthComplete() {
  SharedDtor();
}

void CMsgClientTicketAuthComplete::SharedDtor() {
  if (deprecated_ticket_ != &::google::protobuf::internal::kEmptyString) {
    delete deprecated_ticket_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientTicketAuthComplete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientTicketAuthComplete& CMsgClientTicketAuthComplete::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientTicketAuthComplete* CMsgClientTicketAuthComplete::default_instance_ = NULL;

CMsgClientTicketAuthComplete* CMsgClientTicketAuthComplete::New() const {
  return new CMsgClientTicketAuthComplete;
}

void CMsgClientTicketAuthComplete::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_ = GOOGLE_ULONGLONG(0);
    game_id_ = GOOGLE_ULONGLONG(0);
    estate_ = 0u;
    eauth_session_response_ = 0u;
    if (has_deprecated_ticket()) {
      if (deprecated_ticket_ != &::google::protobuf::internal::kEmptyString) {
        deprecated_ticket_->clear();
      }
    }
    ticket_crc_ = 0u;
    ticket_sequence_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientTicketAuthComplete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          set_has_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_game_id;
        break;
      }

      // optional fixed64 game_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_estate;
        break;
      }

      // optional uint32 estate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_estate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &estate_)));
          set_has_estate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_eauth_session_response;
        break;
      }

      // optional uint32 eauth_session_response = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eauth_session_response:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eauth_session_response_)));
          set_has_eauth_session_response();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_DEPRECATED_ticket;
        break;
      }

      // optional bytes DEPRECATED_ticket = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DEPRECATED_ticket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_deprecated_ticket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ticket_crc;
        break;
      }

      // optional uint32 ticket_crc = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ticket_crc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ticket_crc_)));
          set_has_ticket_crc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ticket_sequence;
        break;
      }

      // optional uint32 ticket_sequence = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ticket_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ticket_sequence_)));
          set_has_ticket_sequence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientTicketAuthComplete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional fixed64 game_id = 2;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->game_id(), output);
  }

  // optional uint32 estate = 3;
  if (has_estate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->estate(), output);
  }

  // optional uint32 eauth_session_response = 4;
  if (has_eauth_session_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->eauth_session_response(), output);
  }

  // optional bytes DEPRECATED_ticket = 5;
  if (has_deprecated_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->deprecated_ticket(), output);
  }

  // optional uint32 ticket_crc = 6;
  if (has_ticket_crc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ticket_crc(), output);
  }

  // optional uint32 ticket_sequence = 7;
  if (has_ticket_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->ticket_sequence(), output);
  }

}

int CMsgClientTicketAuthComplete::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 game_id = 2;
    if (has_game_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 estate = 3;
    if (has_estate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->estate());
    }

    // optional uint32 eauth_session_response = 4;
    if (has_eauth_session_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eauth_session_response());
    }

    // optional bytes DEPRECATED_ticket = 5;
    if (has_deprecated_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->deprecated_ticket());
    }

    // optional uint32 ticket_crc = 6;
    if (has_ticket_crc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ticket_crc());
    }

    // optional uint32 ticket_sequence = 7;
    if (has_ticket_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ticket_sequence());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientTicketAuthComplete::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientTicketAuthComplete*>(&from));
}

void CMsgClientTicketAuthComplete::MergeFrom(const CMsgClientTicketAuthComplete& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_estate()) {
      set_estate(from.estate());
    }
    if (from.has_eauth_session_response()) {
      set_eauth_session_response(from.eauth_session_response());
    }
    if (from.has_deprecated_ticket()) {
      set_deprecated_ticket(from.deprecated_ticket());
    }
    if (from.has_ticket_crc()) {
      set_ticket_crc(from.ticket_crc());
    }
    if (from.has_ticket_sequence()) {
      set_ticket_sequence(from.ticket_sequence());
    }
  }
}

void CMsgClientTicketAuthComplete::CopyFrom(const CMsgClientTicketAuthComplete& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientTicketAuthComplete::IsInitialized() const {

  return true;
}

void CMsgClientTicketAuthComplete::Swap(CMsgClientTicketAuthComplete* other) {
  if (other != this) {
    std::swap(steam_id_, other->steam_id_);
    std::swap(game_id_, other->game_id_);
    std::swap(estate_, other->estate_);
    std::swap(eauth_session_response_, other->eauth_session_response_);
    std::swap(deprecated_ticket_, other->deprecated_ticket_);
    std::swap(ticket_crc_, other->ticket_crc_);
    std::swap(ticket_sequence_, other->ticket_sequence_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientTicketAuthComplete::GetTypeName() const {
  return "Sc.CMsgClientTicketAuthComplete";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientLogon::kProtocolVersionFieldNumber;
const int CMsgClientLogon::kObfustucatedPrivateIpFieldNumber;
const int CMsgClientLogon::kCellIdFieldNumber;
const int CMsgClientLogon::kLastSessionIdFieldNumber;
const int CMsgClientLogon::kClientPackageVersionFieldNumber;
const int CMsgClientLogon::kClientLanguageFieldNumber;
const int CMsgClientLogon::kClientOsTypeFieldNumber;
const int CMsgClientLogon::kShouldRememberPasswordFieldNumber;
const int CMsgClientLogon::kWineVersionFieldNumber;
const int CMsgClientLogon::kPingMsFromCellSearchFieldNumber;
const int CMsgClientLogon::kPublicIpFieldNumber;
const int CMsgClientLogon::kQosLevelFieldNumber;
const int CMsgClientLogon::kClientSuppliedSteamIdFieldNumber;
const int CMsgClientLogon::kMachineIdFieldNumber;
const int CMsgClientLogon::kSteam2AuthTicketFieldNumber;
const int CMsgClientLogon::kEmailAddressFieldNumber;
const int CMsgClientLogon::kRtime32AccountCreationFieldNumber;
const int CMsgClientLogon::kAccountNameFieldNumber;
const int CMsgClientLogon::kPasswordFieldNumber;
const int CMsgClientLogon::kLoginKeyFieldNumber;
const int CMsgClientLogon::kSonyPsnTicketFieldNumber;
const int CMsgClientLogon::kSonyPsnServiceIdFieldNumber;
const int CMsgClientLogon::kCreateNewPsnLinkedAccountIfNeededFieldNumber;
const int CMsgClientLogon::kSonyPsnNameFieldNumber;
const int CMsgClientLogon::kWasConvertedDeprecatedMsgFieldNumber;
const int CMsgClientLogon::kAnonUserTargetAccountNameFieldNumber;
const int CMsgClientLogon::kResolvedUserSteamIdFieldNumber;
const int CMsgClientLogon::kEresultSentryfileFieldNumber;
const int CMsgClientLogon::kShaSentryfileFieldNumber;
const int CMsgClientLogon::kAuthCodeFieldNumber;
const int CMsgClientLogon::kOtpTypeFieldNumber;
const int CMsgClientLogon::kOtpValueFieldNumber;
const int CMsgClientLogon::kOtpIdentifierFieldNumber;
const int CMsgClientLogon::kSteam2TicketRequestFieldNumber;
const int CMsgClientLogon::kGameServerAppIdFieldNumber;
const int CMsgClientLogon::kSteamguardDontRememberComputerFieldNumber;
const int CMsgClientLogon::kMachineNameFieldNumber;
#endif  // !_MSC_VER

CMsgClientLogon::CMsgClientLogon()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientLogon::InitAsDefaultInstance() {
}

CMsgClientLogon::CMsgClientLogon(const CMsgClientLogon& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientLogon::SharedCtor() {
  _cached_size_ = 0;
  protocol_version_ = 0u;
  obfustucated_private_ip_ = 0u;
  cell_id_ = 0u;
  last_session_id_ = 0u;
  client_package_version_ = 0u;
  client_language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  client_os_type_ = 0u;
  should_remember_password_ = false;
  wine_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ping_ms_from_cell_search_ = 0u;
  public_ip_ = 0u;
  qos_level_ = 0u;
  client_supplied_steam_id_ = GOOGLE_ULONGLONG(0);
  machine_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  steam2_auth_ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  email_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rtime32_account_creation_ = 0u;
  account_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  login_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sony_psn_ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sony_psn_service_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  create_new_psn_linked_account_if_needed_ = false;
  sony_psn_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  was_converted_deprecated_msg_ = false;
  anon_user_target_account_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  resolved_user_steam_id_ = GOOGLE_ULONGLONG(0);
  eresult_sentryfile_ = 0;
  sha_sentryfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  auth_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  otp_type_ = 0;
  otp_value_ = 0u;
  otp_identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  steam2_ticket_request_ = false;
  game_server_app_id_ = 0;
  steamguard_dont_remember_computer_ = false;
  machine_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientLogon::~CMsgClientLogon() {
  SharedDtor();
}

void CMsgClientLogon::SharedDtor() {
  if (client_language_ != &::google::protobuf::internal::kEmptyString) {
    delete client_language_;
  }
  if (wine_version_ != &::google::protobuf::internal::kEmptyString) {
    delete wine_version_;
  }
  if (machine_id_ != &::google::protobuf::internal::kEmptyString) {
    delete machine_id_;
  }
  if (steam2_auth_ticket_ != &::google::protobuf::internal::kEmptyString) {
    delete steam2_auth_ticket_;
  }
  if (email_address_ != &::google::protobuf::internal::kEmptyString) {
    delete email_address_;
  }
  if (account_name_ != &::google::protobuf::internal::kEmptyString) {
    delete account_name_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (login_key_ != &::google::protobuf::internal::kEmptyString) {
    delete login_key_;
  }
  if (sony_psn_ticket_ != &::google::protobuf::internal::kEmptyString) {
    delete sony_psn_ticket_;
  }
  if (sony_psn_service_id_ != &::google::protobuf::internal::kEmptyString) {
    delete sony_psn_service_id_;
  }
  if (sony_psn_name_ != &::google::protobuf::internal::kEmptyString) {
    delete sony_psn_name_;
  }
  if (anon_user_target_account_name_ != &::google::protobuf::internal::kEmptyString) {
    delete anon_user_target_account_name_;
  }
  if (sha_sentryfile_ != &::google::protobuf::internal::kEmptyString) {
    delete sha_sentryfile_;
  }
  if (auth_code_ != &::google::protobuf::internal::kEmptyString) {
    delete auth_code_;
  }
  if (otp_identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete otp_identifier_;
  }
  if (machine_name_ != &::google::protobuf::internal::kEmptyString) {
    delete machine_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientLogon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientLogon& CMsgClientLogon::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientLogon* CMsgClientLogon::default_instance_ = NULL;

CMsgClientLogon* CMsgClientLogon::New() const {
  return new CMsgClientLogon;
}

void CMsgClientLogon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protocol_version_ = 0u;
    obfustucated_private_ip_ = 0u;
    cell_id_ = 0u;
    last_session_id_ = 0u;
    client_package_version_ = 0u;
    if (has_client_language()) {
      if (client_language_ != &::google::protobuf::internal::kEmptyString) {
        client_language_->clear();
      }
    }
    client_os_type_ = 0u;
    should_remember_password_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_wine_version()) {
      if (wine_version_ != &::google::protobuf::internal::kEmptyString) {
        wine_version_->clear();
      }
    }
    ping_ms_from_cell_search_ = 0u;
    public_ip_ = 0u;
    qos_level_ = 0u;
    client_supplied_steam_id_ = GOOGLE_ULONGLONG(0);
    if (has_machine_id()) {
      if (machine_id_ != &::google::protobuf::internal::kEmptyString) {
        machine_id_->clear();
      }
    }
    if (has_steam2_auth_ticket()) {
      if (steam2_auth_ticket_ != &::google::protobuf::internal::kEmptyString) {
        steam2_auth_ticket_->clear();
      }
    }
    if (has_email_address()) {
      if (email_address_ != &::google::protobuf::internal::kEmptyString) {
        email_address_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    rtime32_account_creation_ = 0u;
    if (has_account_name()) {
      if (account_name_ != &::google::protobuf::internal::kEmptyString) {
        account_name_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_login_key()) {
      if (login_key_ != &::google::protobuf::internal::kEmptyString) {
        login_key_->clear();
      }
    }
    if (has_sony_psn_ticket()) {
      if (sony_psn_ticket_ != &::google::protobuf::internal::kEmptyString) {
        sony_psn_ticket_->clear();
      }
    }
    if (has_sony_psn_service_id()) {
      if (sony_psn_service_id_ != &::google::protobuf::internal::kEmptyString) {
        sony_psn_service_id_->clear();
      }
    }
    create_new_psn_linked_account_if_needed_ = false;
    if (has_sony_psn_name()) {
      if (sony_psn_name_ != &::google::protobuf::internal::kEmptyString) {
        sony_psn_name_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    was_converted_deprecated_msg_ = false;
    if (has_anon_user_target_account_name()) {
      if (anon_user_target_account_name_ != &::google::protobuf::internal::kEmptyString) {
        anon_user_target_account_name_->clear();
      }
    }
    resolved_user_steam_id_ = GOOGLE_ULONGLONG(0);
    eresult_sentryfile_ = 0;
    if (has_sha_sentryfile()) {
      if (sha_sentryfile_ != &::google::protobuf::internal::kEmptyString) {
        sha_sentryfile_->clear();
      }
    }
    if (has_auth_code()) {
      if (auth_code_ != &::google::protobuf::internal::kEmptyString) {
        auth_code_->clear();
      }
    }
    otp_type_ = 0;
    otp_value_ = 0u;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_otp_identifier()) {
      if (otp_identifier_ != &::google::protobuf::internal::kEmptyString) {
        otp_identifier_->clear();
      }
    }
    steam2_ticket_request_ = false;
    game_server_app_id_ = 0;
    steamguard_dont_remember_computer_ = false;
    if (has_machine_name()) {
      if (machine_name_ != &::google::protobuf::internal::kEmptyString) {
        machine_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientLogon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 protocol_version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_version_)));
          set_has_protocol_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_obfustucated_private_ip;
        break;
      }

      // optional uint32 obfustucated_private_ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_obfustucated_private_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &obfustucated_private_ip_)));
          set_has_obfustucated_private_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cell_id;
        break;
      }

      // optional uint32 cell_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cell_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_)));
          set_has_cell_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_session_id;
        break;
      }

      // optional uint32 last_session_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_session_id_)));
          set_has_last_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_client_package_version;
        break;
      }

      // optional uint32 client_package_version = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_package_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_package_version_)));
          set_has_client_package_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_client_language;
        break;
      }

      // optional string client_language = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_language()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_client_os_type;
        break;
      }

      // optional uint32 client_os_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_os_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_os_type_)));
          set_has_client_os_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_should_remember_password;
        break;
      }

      // optional bool should_remember_password = 8 [default = false];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_should_remember_password:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &should_remember_password_)));
          set_has_should_remember_password();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_wine_version;
        break;
      }

      // optional string wine_version = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wine_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wine_version()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_ping_ms_from_cell_search;
        break;
      }

      // optional uint32 ping_ms_from_cell_search = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ping_ms_from_cell_search:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_ms_from_cell_search_)));
          set_has_ping_ms_from_cell_search();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_public_ip;
        break;
      }

      // optional uint32 public_ip = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_public_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &public_ip_)));
          set_has_public_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_qos_level;
        break;
      }

      // optional uint32 qos_level = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qos_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qos_level_)));
          set_has_qos_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(177)) goto parse_client_supplied_steam_id;
        break;
      }

      // optional fixed64 client_supplied_steam_id = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_client_supplied_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &client_supplied_steam_id_)));
          set_has_client_supplied_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_machine_id;
        break;
      }

      // optional bytes machine_id = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machine_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_machine_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(330)) goto parse_steam2_auth_ticket;
        break;
      }

      // optional bytes steam2_auth_ticket = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_steam2_auth_ticket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_steam2_auth_ticket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(338)) goto parse_email_address;
        break;
      }

      // optional string email_address = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_email_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(349)) goto parse_rtime32_account_creation;
        break;
      }

      // optional fixed32 rtime32_account_creation = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rtime32_account_creation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &rtime32_account_creation_)));
          set_has_rtime32_account_creation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_account_name;
        break;
      }

      // optional string account_name = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(410)) goto parse_password;
        break;
      }

      // optional string password = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse_login_key;
        break;
      }

      // optional string login_key = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_login_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(560)) goto parse_was_converted_deprecated_msg;
        break;
      }

      // optional bool was_converted_deprecated_msg = 70 [default = false];
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_was_converted_deprecated_msg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &was_converted_deprecated_msg_)));
          set_has_was_converted_deprecated_msg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(642)) goto parse_anon_user_target_account_name;
        break;
      }

      // optional string anon_user_target_account_name = 80;
      case 80: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_anon_user_target_account_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_anon_user_target_account_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(649)) goto parse_resolved_user_steam_id;
        break;
      }

      // optional fixed64 resolved_user_steam_id = 81;
      case 81: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_resolved_user_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &resolved_user_steam_id_)));
          set_has_resolved_user_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(656)) goto parse_eresult_sentryfile;
        break;
      }

      // optional int32 eresult_sentryfile = 82;
      case 82: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eresult_sentryfile:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_sentryfile_)));
          set_has_eresult_sentryfile();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(666)) goto parse_sha_sentryfile;
        break;
      }

      // optional bytes sha_sentryfile = 83;
      case 83: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sha_sentryfile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha_sentryfile()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(674)) goto parse_auth_code;
        break;
      }

      // optional string auth_code = 84;
      case 84: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_auth_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auth_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(680)) goto parse_otp_type;
        break;
      }

      // optional int32 otp_type = 85;
      case 85: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_otp_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &otp_type_)));
          set_has_otp_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(688)) goto parse_otp_value;
        break;
      }

      // optional uint32 otp_value = 86;
      case 86: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_otp_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &otp_value_)));
          set_has_otp_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(698)) goto parse_otp_identifier;
        break;
      }

      // optional string otp_identifier = 87;
      case 87: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_otp_identifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_otp_identifier()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(704)) goto parse_steam2_ticket_request;
        break;
      }

      // optional bool steam2_ticket_request = 88;
      case 88: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_steam2_ticket_request:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &steam2_ticket_request_)));
          set_has_steam2_ticket_request();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(722)) goto parse_sony_psn_ticket;
        break;
      }

      // optional bytes sony_psn_ticket = 90;
      case 90: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sony_psn_ticket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sony_psn_ticket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(730)) goto parse_sony_psn_service_id;
        break;
      }

      // optional string sony_psn_service_id = 91;
      case 91: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sony_psn_service_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sony_psn_service_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(736)) goto parse_create_new_psn_linked_account_if_needed;
        break;
      }

      // optional bool create_new_psn_linked_account_if_needed = 92 [default = false];
      case 92: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_new_psn_linked_account_if_needed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &create_new_psn_linked_account_if_needed_)));
          set_has_create_new_psn_linked_account_if_needed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(746)) goto parse_sony_psn_name;
        break;
      }

      // optional string sony_psn_name = 93;
      case 93: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sony_psn_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sony_psn_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(752)) goto parse_game_server_app_id;
        break;
      }

      // optional int32 game_server_app_id = 94;
      case 94: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_server_app_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_server_app_id_)));
          set_has_game_server_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(760)) goto parse_steamguard_dont_remember_computer;
        break;
      }

      // optional bool steamguard_dont_remember_computer = 95;
      case 95: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_steamguard_dont_remember_computer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &steamguard_dont_remember_computer_)));
          set_has_steamguard_dont_remember_computer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(770)) goto parse_machine_name;
        break;
      }

      // optional string machine_name = 96;
      case 96: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machine_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientLogon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 protocol_version = 1;
  if (has_protocol_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->protocol_version(), output);
  }

  // optional uint32 obfustucated_private_ip = 2;
  if (has_obfustucated_private_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->obfustucated_private_ip(), output);
  }

  // optional uint32 cell_id = 3;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cell_id(), output);
  }

  // optional uint32 last_session_id = 4;
  if (has_last_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->last_session_id(), output);
  }

  // optional uint32 client_package_version = 5;
  if (has_client_package_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->client_package_version(), output);
  }

  // optional string client_language = 6;
  if (has_client_language()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->client_language(), output);
  }

  // optional uint32 client_os_type = 7;
  if (has_client_os_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->client_os_type(), output);
  }

  // optional bool should_remember_password = 8 [default = false];
  if (has_should_remember_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->should_remember_password(), output);
  }

  // optional string wine_version = 9;
  if (has_wine_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->wine_version(), output);
  }

  // optional uint32 ping_ms_from_cell_search = 10;
  if (has_ping_ms_from_cell_search()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->ping_ms_from_cell_search(), output);
  }

  // optional uint32 public_ip = 20;
  if (has_public_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->public_ip(), output);
  }

  // optional uint32 qos_level = 21;
  if (has_qos_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->qos_level(), output);
  }

  // optional fixed64 client_supplied_steam_id = 22;
  if (has_client_supplied_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(22, this->client_supplied_steam_id(), output);
  }

  // optional bytes machine_id = 30;
  if (has_machine_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      30, this->machine_id(), output);
  }

  // optional bytes steam2_auth_ticket = 41;
  if (has_steam2_auth_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      41, this->steam2_auth_ticket(), output);
  }

  // optional string email_address = 42;
  if (has_email_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      42, this->email_address(), output);
  }

  // optional fixed32 rtime32_account_creation = 43;
  if (has_rtime32_account_creation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(43, this->rtime32_account_creation(), output);
  }

  // optional string account_name = 50;
  if (has_account_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      50, this->account_name(), output);
  }

  // optional string password = 51;
  if (has_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      51, this->password(), output);
  }

  // optional string login_key = 60;
  if (has_login_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      60, this->login_key(), output);
  }

  // optional bool was_converted_deprecated_msg = 70 [default = false];
  if (has_was_converted_deprecated_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(70, this->was_converted_deprecated_msg(), output);
  }

  // optional string anon_user_target_account_name = 80;
  if (has_anon_user_target_account_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      80, this->anon_user_target_account_name(), output);
  }

  // optional fixed64 resolved_user_steam_id = 81;
  if (has_resolved_user_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(81, this->resolved_user_steam_id(), output);
  }

  // optional int32 eresult_sentryfile = 82;
  if (has_eresult_sentryfile()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(82, this->eresult_sentryfile(), output);
  }

  // optional bytes sha_sentryfile = 83;
  if (has_sha_sentryfile()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      83, this->sha_sentryfile(), output);
  }

  // optional string auth_code = 84;
  if (has_auth_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      84, this->auth_code(), output);
  }

  // optional int32 otp_type = 85;
  if (has_otp_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(85, this->otp_type(), output);
  }

  // optional uint32 otp_value = 86;
  if (has_otp_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(86, this->otp_value(), output);
  }

  // optional string otp_identifier = 87;
  if (has_otp_identifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      87, this->otp_identifier(), output);
  }

  // optional bool steam2_ticket_request = 88;
  if (has_steam2_ticket_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(88, this->steam2_ticket_request(), output);
  }

  // optional bytes sony_psn_ticket = 90;
  if (has_sony_psn_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      90, this->sony_psn_ticket(), output);
  }

  // optional string sony_psn_service_id = 91;
  if (has_sony_psn_service_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      91, this->sony_psn_service_id(), output);
  }

  // optional bool create_new_psn_linked_account_if_needed = 92 [default = false];
  if (has_create_new_psn_linked_account_if_needed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(92, this->create_new_psn_linked_account_if_needed(), output);
  }

  // optional string sony_psn_name = 93;
  if (has_sony_psn_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      93, this->sony_psn_name(), output);
  }

  // optional int32 game_server_app_id = 94;
  if (has_game_server_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(94, this->game_server_app_id(), output);
  }

  // optional bool steamguard_dont_remember_computer = 95;
  if (has_steamguard_dont_remember_computer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(95, this->steamguard_dont_remember_computer(), output);
  }

  // optional string machine_name = 96;
  if (has_machine_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      96, this->machine_name(), output);
  }

}

int CMsgClientLogon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 protocol_version = 1;
    if (has_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protocol_version());
    }

    // optional uint32 obfustucated_private_ip = 2;
    if (has_obfustucated_private_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->obfustucated_private_ip());
    }

    // optional uint32 cell_id = 3;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_id());
    }

    // optional uint32 last_session_id = 4;
    if (has_last_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_session_id());
    }

    // optional uint32 client_package_version = 5;
    if (has_client_package_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_package_version());
    }

    // optional string client_language = 6;
    if (has_client_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_language());
    }

    // optional uint32 client_os_type = 7;
    if (has_client_os_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_os_type());
    }

    // optional bool should_remember_password = 8 [default = false];
    if (has_should_remember_password()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string wine_version = 9;
    if (has_wine_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wine_version());
    }

    // optional uint32 ping_ms_from_cell_search = 10;
    if (has_ping_ms_from_cell_search()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_ms_from_cell_search());
    }

    // optional uint32 public_ip = 20;
    if (has_public_ip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->public_ip());
    }

    // optional uint32 qos_level = 21;
    if (has_qos_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qos_level());
    }

    // optional fixed64 client_supplied_steam_id = 22;
    if (has_client_supplied_steam_id()) {
      total_size += 2 + 8;
    }

    // optional bytes machine_id = 30;
    if (has_machine_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->machine_id());
    }

    // optional bytes steam2_auth_ticket = 41;
    if (has_steam2_auth_ticket()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->steam2_auth_ticket());
    }

    // optional string email_address = 42;
    if (has_email_address()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email_address());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional fixed32 rtime32_account_creation = 43;
    if (has_rtime32_account_creation()) {
      total_size += 2 + 4;
    }

    // optional string account_name = 50;
    if (has_account_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_name());
    }

    // optional string password = 51;
    if (has_password()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string login_key = 60;
    if (has_login_key()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->login_key());
    }

    // optional bytes sony_psn_ticket = 90;
    if (has_sony_psn_ticket()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sony_psn_ticket());
    }

    // optional string sony_psn_service_id = 91;
    if (has_sony_psn_service_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sony_psn_service_id());
    }

    // optional bool create_new_psn_linked_account_if_needed = 92 [default = false];
    if (has_create_new_psn_linked_account_if_needed()) {
      total_size += 2 + 1;
    }

    // optional string sony_psn_name = 93;
    if (has_sony_psn_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sony_psn_name());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bool was_converted_deprecated_msg = 70 [default = false];
    if (has_was_converted_deprecated_msg()) {
      total_size += 2 + 1;
    }

    // optional string anon_user_target_account_name = 80;
    if (has_anon_user_target_account_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->anon_user_target_account_name());
    }

    // optional fixed64 resolved_user_steam_id = 81;
    if (has_resolved_user_steam_id()) {
      total_size += 2 + 8;
    }

    // optional int32 eresult_sentryfile = 82;
    if (has_eresult_sentryfile()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult_sentryfile());
    }

    // optional bytes sha_sentryfile = 83;
    if (has_sha_sentryfile()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha_sentryfile());
    }

    // optional string auth_code = 84;
    if (has_auth_code()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->auth_code());
    }

    // optional int32 otp_type = 85;
    if (has_otp_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->otp_type());
    }

    // optional uint32 otp_value = 86;
    if (has_otp_value()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->otp_value());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional string otp_identifier = 87;
    if (has_otp_identifier()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->otp_identifier());
    }

    // optional bool steam2_ticket_request = 88;
    if (has_steam2_ticket_request()) {
      total_size += 2 + 1;
    }

    // optional int32 game_server_app_id = 94;
    if (has_game_server_app_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_server_app_id());
    }

    // optional bool steamguard_dont_remember_computer = 95;
    if (has_steamguard_dont_remember_computer()) {
      total_size += 2 + 1;
    }

    // optional string machine_name = 96;
    if (has_machine_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_name());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientLogon::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientLogon*>(&from));
}

void CMsgClientLogon::MergeFrom(const CMsgClientLogon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protocol_version()) {
      set_protocol_version(from.protocol_version());
    }
    if (from.has_obfustucated_private_ip()) {
      set_obfustucated_private_ip(from.obfustucated_private_ip());
    }
    if (from.has_cell_id()) {
      set_cell_id(from.cell_id());
    }
    if (from.has_last_session_id()) {
      set_last_session_id(from.last_session_id());
    }
    if (from.has_client_package_version()) {
      set_client_package_version(from.client_package_version());
    }
    if (from.has_client_language()) {
      set_client_language(from.client_language());
    }
    if (from.has_client_os_type()) {
      set_client_os_type(from.client_os_type());
    }
    if (from.has_should_remember_password()) {
      set_should_remember_password(from.should_remember_password());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_wine_version()) {
      set_wine_version(from.wine_version());
    }
    if (from.has_ping_ms_from_cell_search()) {
      set_ping_ms_from_cell_search(from.ping_ms_from_cell_search());
    }
    if (from.has_public_ip()) {
      set_public_ip(from.public_ip());
    }
    if (from.has_qos_level()) {
      set_qos_level(from.qos_level());
    }
    if (from.has_client_supplied_steam_id()) {
      set_client_supplied_steam_id(from.client_supplied_steam_id());
    }
    if (from.has_machine_id()) {
      set_machine_id(from.machine_id());
    }
    if (from.has_steam2_auth_ticket()) {
      set_steam2_auth_ticket(from.steam2_auth_ticket());
    }
    if (from.has_email_address()) {
      set_email_address(from.email_address());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_rtime32_account_creation()) {
      set_rtime32_account_creation(from.rtime32_account_creation());
    }
    if (from.has_account_name()) {
      set_account_name(from.account_name());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_login_key()) {
      set_login_key(from.login_key());
    }
    if (from.has_sony_psn_ticket()) {
      set_sony_psn_ticket(from.sony_psn_ticket());
    }
    if (from.has_sony_psn_service_id()) {
      set_sony_psn_service_id(from.sony_psn_service_id());
    }
    if (from.has_create_new_psn_linked_account_if_needed()) {
      set_create_new_psn_linked_account_if_needed(from.create_new_psn_linked_account_if_needed());
    }
    if (from.has_sony_psn_name()) {
      set_sony_psn_name(from.sony_psn_name());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_was_converted_deprecated_msg()) {
      set_was_converted_deprecated_msg(from.was_converted_deprecated_msg());
    }
    if (from.has_anon_user_target_account_name()) {
      set_anon_user_target_account_name(from.anon_user_target_account_name());
    }
    if (from.has_resolved_user_steam_id()) {
      set_resolved_user_steam_id(from.resolved_user_steam_id());
    }
    if (from.has_eresult_sentryfile()) {
      set_eresult_sentryfile(from.eresult_sentryfile());
    }
    if (from.has_sha_sentryfile()) {
      set_sha_sentryfile(from.sha_sentryfile());
    }
    if (from.has_auth_code()) {
      set_auth_code(from.auth_code());
    }
    if (from.has_otp_type()) {
      set_otp_type(from.otp_type());
    }
    if (from.has_otp_value()) {
      set_otp_value(from.otp_value());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_otp_identifier()) {
      set_otp_identifier(from.otp_identifier());
    }
    if (from.has_steam2_ticket_request()) {
      set_steam2_ticket_request(from.steam2_ticket_request());
    }
    if (from.has_game_server_app_id()) {
      set_game_server_app_id(from.game_server_app_id());
    }
    if (from.has_steamguard_dont_remember_computer()) {
      set_steamguard_dont_remember_computer(from.steamguard_dont_remember_computer());
    }
    if (from.has_machine_name()) {
      set_machine_name(from.machine_name());
    }
  }
}

void CMsgClientLogon::CopyFrom(const CMsgClientLogon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLogon::IsInitialized() const {

  return true;
}

void CMsgClientLogon::Swap(CMsgClientLogon* other) {
  if (other != this) {
    std::swap(protocol_version_, other->protocol_version_);
    std::swap(obfustucated_private_ip_, other->obfustucated_private_ip_);
    std::swap(cell_id_, other->cell_id_);
    std::swap(last_session_id_, other->last_session_id_);
    std::swap(client_package_version_, other->client_package_version_);
    std::swap(client_language_, other->client_language_);
    std::swap(client_os_type_, other->client_os_type_);
    std::swap(should_remember_password_, other->should_remember_password_);
    std::swap(wine_version_, other->wine_version_);
    std::swap(ping_ms_from_cell_search_, other->ping_ms_from_cell_search_);
    std::swap(public_ip_, other->public_ip_);
    std::swap(qos_level_, other->qos_level_);
    std::swap(client_supplied_steam_id_, other->client_supplied_steam_id_);
    std::swap(machine_id_, other->machine_id_);
    std::swap(steam2_auth_ticket_, other->steam2_auth_ticket_);
    std::swap(email_address_, other->email_address_);
    std::swap(rtime32_account_creation_, other->rtime32_account_creation_);
    std::swap(account_name_, other->account_name_);
    std::swap(password_, other->password_);
    std::swap(login_key_, other->login_key_);
    std::swap(sony_psn_ticket_, other->sony_psn_ticket_);
    std::swap(sony_psn_service_id_, other->sony_psn_service_id_);
    std::swap(create_new_psn_linked_account_if_needed_, other->create_new_psn_linked_account_if_needed_);
    std::swap(sony_psn_name_, other->sony_psn_name_);
    std::swap(was_converted_deprecated_msg_, other->was_converted_deprecated_msg_);
    std::swap(anon_user_target_account_name_, other->anon_user_target_account_name_);
    std::swap(resolved_user_steam_id_, other->resolved_user_steam_id_);
    std::swap(eresult_sentryfile_, other->eresult_sentryfile_);
    std::swap(sha_sentryfile_, other->sha_sentryfile_);
    std::swap(auth_code_, other->auth_code_);
    std::swap(otp_type_, other->otp_type_);
    std::swap(otp_value_, other->otp_value_);
    std::swap(otp_identifier_, other->otp_identifier_);
    std::swap(steam2_ticket_request_, other->steam2_ticket_request_);
    std::swap(game_server_app_id_, other->game_server_app_id_);
    std::swap(steamguard_dont_remember_computer_, other->steamguard_dont_remember_computer_);
    std::swap(machine_name_, other->machine_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientLogon::GetTypeName() const {
  return "Sc.CMsgClientLogon";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientLogonResponse::kEresultFieldNumber;
const int CMsgClientLogonResponse::kOutOfGameHeartbeatSecondsFieldNumber;
const int CMsgClientLogonResponse::kInGameHeartbeatSecondsFieldNumber;
const int CMsgClientLogonResponse::kPublicIpFieldNumber;
const int CMsgClientLogonResponse::kRtime32ServerTimeFieldNumber;
const int CMsgClientLogonResponse::kAccountFlagsFieldNumber;
const int CMsgClientLogonResponse::kCellIdFieldNumber;
const int CMsgClientLogonResponse::kEmailDomainFieldNumber;
const int CMsgClientLogonResponse::kSteam2TicketFieldNumber;
const int CMsgClientLogonResponse::kEresultExtendedFieldNumber;
const int CMsgClientLogonResponse::kWebapiAuthenticateUserNonceFieldNumber;
const int CMsgClientLogonResponse::kCellIdPingThresholdFieldNumber;
const int CMsgClientLogonResponse::kUsePicsFieldNumber;
const int CMsgClientLogonResponse::kClientSuppliedSteamidFieldNumber;
const int CMsgClientLogonResponse::kIpCountryCodeFieldNumber;
#endif  // !_MSC_VER

CMsgClientLogonResponse::CMsgClientLogonResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientLogonResponse::InitAsDefaultInstance() {
}

CMsgClientLogonResponse::CMsgClientLogonResponse(const CMsgClientLogonResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientLogonResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  out_of_game_heartbeat_seconds_ = 0;
  in_game_heartbeat_seconds_ = 0;
  public_ip_ = 0u;
  rtime32_server_time_ = 0u;
  account_flags_ = 0u;
  cell_id_ = 0u;
  email_domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  steam2_ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  eresult_extended_ = 0;
  webapi_authenticate_user_nonce_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cell_id_ping_threshold_ = 0u;
  use_pics_ = false;
  client_supplied_steamid_ = GOOGLE_ULONGLONG(0);
  ip_country_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientLogonResponse::~CMsgClientLogonResponse() {
  SharedDtor();
}

void CMsgClientLogonResponse::SharedDtor() {
  if (email_domain_ != &::google::protobuf::internal::kEmptyString) {
    delete email_domain_;
  }
  if (steam2_ticket_ != &::google::protobuf::internal::kEmptyString) {
    delete steam2_ticket_;
  }
  if (webapi_authenticate_user_nonce_ != &::google::protobuf::internal::kEmptyString) {
    delete webapi_authenticate_user_nonce_;
  }
  if (ip_country_code_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_country_code_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientLogonResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientLogonResponse& CMsgClientLogonResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientLogonResponse* CMsgClientLogonResponse::default_instance_ = NULL;

CMsgClientLogonResponse* CMsgClientLogonResponse::New() const {
  return new CMsgClientLogonResponse;
}

void CMsgClientLogonResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    out_of_game_heartbeat_seconds_ = 0;
    in_game_heartbeat_seconds_ = 0;
    public_ip_ = 0u;
    rtime32_server_time_ = 0u;
    account_flags_ = 0u;
    cell_id_ = 0u;
    if (has_email_domain()) {
      if (email_domain_ != &::google::protobuf::internal::kEmptyString) {
        email_domain_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_steam2_ticket()) {
      if (steam2_ticket_ != &::google::protobuf::internal::kEmptyString) {
        steam2_ticket_->clear();
      }
    }
    eresult_extended_ = 0;
    if (has_webapi_authenticate_user_nonce()) {
      if (webapi_authenticate_user_nonce_ != &::google::protobuf::internal::kEmptyString) {
        webapi_authenticate_user_nonce_->clear();
      }
    }
    cell_id_ping_threshold_ = 0u;
    use_pics_ = false;
    client_supplied_steamid_ = GOOGLE_ULONGLONG(0);
    if (has_ip_country_code()) {
      if (ip_country_code_ != &::google::protobuf::internal::kEmptyString) {
        ip_country_code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientLogonResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_out_of_game_heartbeat_seconds;
        break;
      }

      // optional int32 out_of_game_heartbeat_seconds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_of_game_heartbeat_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &out_of_game_heartbeat_seconds_)));
          set_has_out_of_game_heartbeat_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_in_game_heartbeat_seconds;
        break;
      }

      // optional int32 in_game_heartbeat_seconds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_in_game_heartbeat_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &in_game_heartbeat_seconds_)));
          set_has_in_game_heartbeat_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_public_ip;
        break;
      }

      // optional uint32 public_ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_public_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &public_ip_)));
          set_has_public_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_rtime32_server_time;
        break;
      }

      // optional fixed32 rtime32_server_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rtime32_server_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &rtime32_server_time_)));
          set_has_rtime32_server_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_account_flags;
        break;
      }

      // optional uint32 account_flags = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_flags_)));
          set_has_account_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cell_id;
        break;
      }

      // optional uint32 cell_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cell_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_)));
          set_has_cell_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_email_domain;
        break;
      }

      // optional string email_domain = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_email_domain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email_domain()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_steam2_ticket;
        break;
      }

      // optional bytes steam2_ticket = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_steam2_ticket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_steam2_ticket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_eresult_extended;
        break;
      }

      // optional int32 eresult_extended = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eresult_extended:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_extended_)));
          set_has_eresult_extended();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_webapi_authenticate_user_nonce;
        break;
      }

      // optional string webapi_authenticate_user_nonce = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_webapi_authenticate_user_nonce:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_webapi_authenticate_user_nonce()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_cell_id_ping_threshold;
        break;
      }

      // optional uint32 cell_id_ping_threshold = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cell_id_ping_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_ping_threshold_)));
          set_has_cell_id_ping_threshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_use_pics;
        break;
      }

      // optional bool use_pics = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_pics:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_pics_)));
          set_has_use_pics();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(161)) goto parse_client_supplied_steamid;
        break;
      }

      // optional fixed64 client_supplied_steamid = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_client_supplied_steamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &client_supplied_steamid_)));
          set_has_client_supplied_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_ip_country_code;
        break;
      }

      // optional string ip_country_code = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip_country_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_country_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientLogonResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional int32 out_of_game_heartbeat_seconds = 2;
  if (has_out_of_game_heartbeat_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->out_of_game_heartbeat_seconds(), output);
  }

  // optional int32 in_game_heartbeat_seconds = 3;
  if (has_in_game_heartbeat_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->in_game_heartbeat_seconds(), output);
  }

  // optional uint32 public_ip = 4;
  if (has_public_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->public_ip(), output);
  }

  // optional fixed32 rtime32_server_time = 5;
  if (has_rtime32_server_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->rtime32_server_time(), output);
  }

  // optional uint32 account_flags = 6;
  if (has_account_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->account_flags(), output);
  }

  // optional uint32 cell_id = 7;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->cell_id(), output);
  }

  // optional string email_domain = 8;
  if (has_email_domain()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->email_domain(), output);
  }

  // optional bytes steam2_ticket = 9;
  if (has_steam2_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, this->steam2_ticket(), output);
  }

  // optional int32 eresult_extended = 10;
  if (has_eresult_extended()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->eresult_extended(), output);
  }

  // optional string webapi_authenticate_user_nonce = 11;
  if (has_webapi_authenticate_user_nonce()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->webapi_authenticate_user_nonce(), output);
  }

  // optional uint32 cell_id_ping_threshold = 12;
  if (has_cell_id_ping_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->cell_id_ping_threshold(), output);
  }

  // optional bool use_pics = 13;
  if (has_use_pics()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->use_pics(), output);
  }

  // optional fixed64 client_supplied_steamid = 20;
  if (has_client_supplied_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(20, this->client_supplied_steamid(), output);
  }

  // optional string ip_country_code = 21;
  if (has_ip_country_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->ip_country_code(), output);
  }

}

int CMsgClientLogonResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional int32 out_of_game_heartbeat_seconds = 2;
    if (has_out_of_game_heartbeat_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->out_of_game_heartbeat_seconds());
    }

    // optional int32 in_game_heartbeat_seconds = 3;
    if (has_in_game_heartbeat_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->in_game_heartbeat_seconds());
    }

    // optional uint32 public_ip = 4;
    if (has_public_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->public_ip());
    }

    // optional fixed32 rtime32_server_time = 5;
    if (has_rtime32_server_time()) {
      total_size += 1 + 4;
    }

    // optional uint32 account_flags = 6;
    if (has_account_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_flags());
    }

    // optional uint32 cell_id = 7;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_id());
    }

    // optional string email_domain = 8;
    if (has_email_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email_domain());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes steam2_ticket = 9;
    if (has_steam2_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->steam2_ticket());
    }

    // optional int32 eresult_extended = 10;
    if (has_eresult_extended()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult_extended());
    }

    // optional string webapi_authenticate_user_nonce = 11;
    if (has_webapi_authenticate_user_nonce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->webapi_authenticate_user_nonce());
    }

    // optional uint32 cell_id_ping_threshold = 12;
    if (has_cell_id_ping_threshold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_id_ping_threshold());
    }

    // optional bool use_pics = 13;
    if (has_use_pics()) {
      total_size += 1 + 1;
    }

    // optional fixed64 client_supplied_steamid = 20;
    if (has_client_supplied_steamid()) {
      total_size += 2 + 8;
    }

    // optional string ip_country_code = 21;
    if (has_ip_country_code()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip_country_code());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientLogonResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientLogonResponse*>(&from));
}

void CMsgClientLogonResponse::MergeFrom(const CMsgClientLogonResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_out_of_game_heartbeat_seconds()) {
      set_out_of_game_heartbeat_seconds(from.out_of_game_heartbeat_seconds());
    }
    if (from.has_in_game_heartbeat_seconds()) {
      set_in_game_heartbeat_seconds(from.in_game_heartbeat_seconds());
    }
    if (from.has_public_ip()) {
      set_public_ip(from.public_ip());
    }
    if (from.has_rtime32_server_time()) {
      set_rtime32_server_time(from.rtime32_server_time());
    }
    if (from.has_account_flags()) {
      set_account_flags(from.account_flags());
    }
    if (from.has_cell_id()) {
      set_cell_id(from.cell_id());
    }
    if (from.has_email_domain()) {
      set_email_domain(from.email_domain());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_steam2_ticket()) {
      set_steam2_ticket(from.steam2_ticket());
    }
    if (from.has_eresult_extended()) {
      set_eresult_extended(from.eresult_extended());
    }
    if (from.has_webapi_authenticate_user_nonce()) {
      set_webapi_authenticate_user_nonce(from.webapi_authenticate_user_nonce());
    }
    if (from.has_cell_id_ping_threshold()) {
      set_cell_id_ping_threshold(from.cell_id_ping_threshold());
    }
    if (from.has_use_pics()) {
      set_use_pics(from.use_pics());
    }
    if (from.has_client_supplied_steamid()) {
      set_client_supplied_steamid(from.client_supplied_steamid());
    }
    if (from.has_ip_country_code()) {
      set_ip_country_code(from.ip_country_code());
    }
  }
}

void CMsgClientLogonResponse::CopyFrom(const CMsgClientLogonResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLogonResponse::IsInitialized() const {

  return true;
}

void CMsgClientLogonResponse::Swap(CMsgClientLogonResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(out_of_game_heartbeat_seconds_, other->out_of_game_heartbeat_seconds_);
    std::swap(in_game_heartbeat_seconds_, other->in_game_heartbeat_seconds_);
    std::swap(public_ip_, other->public_ip_);
    std::swap(rtime32_server_time_, other->rtime32_server_time_);
    std::swap(account_flags_, other->account_flags_);
    std::swap(cell_id_, other->cell_id_);
    std::swap(email_domain_, other->email_domain_);
    std::swap(steam2_ticket_, other->steam2_ticket_);
    std::swap(eresult_extended_, other->eresult_extended_);
    std::swap(webapi_authenticate_user_nonce_, other->webapi_authenticate_user_nonce_);
    std::swap(cell_id_ping_threshold_, other->cell_id_ping_threshold_);
    std::swap(use_pics_, other->use_pics_);
    std::swap(client_supplied_steamid_, other->client_supplied_steamid_);
    std::swap(ip_country_code_, other->ip_country_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientLogonResponse::GetTypeName() const {
  return "Sc.CMsgClientLogonResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgClientRequestWebAPIAuthenticateUserNonce::CMsgClientRequestWebAPIAuthenticateUserNonce()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientRequestWebAPIAuthenticateUserNonce::InitAsDefaultInstance() {
}

CMsgClientRequestWebAPIAuthenticateUserNonce::CMsgClientRequestWebAPIAuthenticateUserNonce(const CMsgClientRequestWebAPIAuthenticateUserNonce& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRequestWebAPIAuthenticateUserNonce::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRequestWebAPIAuthenticateUserNonce::~CMsgClientRequestWebAPIAuthenticateUserNonce() {
  SharedDtor();
}

void CMsgClientRequestWebAPIAuthenticateUserNonce::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientRequestWebAPIAuthenticateUserNonce::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientRequestWebAPIAuthenticateUserNonce& CMsgClientRequestWebAPIAuthenticateUserNonce::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientRequestWebAPIAuthenticateUserNonce* CMsgClientRequestWebAPIAuthenticateUserNonce::default_instance_ = NULL;

CMsgClientRequestWebAPIAuthenticateUserNonce* CMsgClientRequestWebAPIAuthenticateUserNonce::New() const {
  return new CMsgClientRequestWebAPIAuthenticateUserNonce;
}

void CMsgClientRequestWebAPIAuthenticateUserNonce::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientRequestWebAPIAuthenticateUserNonce::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void CMsgClientRequestWebAPIAuthenticateUserNonce::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int CMsgClientRequestWebAPIAuthenticateUserNonce::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRequestWebAPIAuthenticateUserNonce::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientRequestWebAPIAuthenticateUserNonce*>(&from));
}

void CMsgClientRequestWebAPIAuthenticateUserNonce::MergeFrom(const CMsgClientRequestWebAPIAuthenticateUserNonce& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void CMsgClientRequestWebAPIAuthenticateUserNonce::CopyFrom(const CMsgClientRequestWebAPIAuthenticateUserNonce& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestWebAPIAuthenticateUserNonce::IsInitialized() const {

  return true;
}

void CMsgClientRequestWebAPIAuthenticateUserNonce::Swap(CMsgClientRequestWebAPIAuthenticateUserNonce* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientRequestWebAPIAuthenticateUserNonce::GetTypeName() const {
  return "Sc.CMsgClientRequestWebAPIAuthenticateUserNonce";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientRequestWebAPIAuthenticateUserNonceResponse::kEresultFieldNumber;
const int CMsgClientRequestWebAPIAuthenticateUserNonceResponse::kWebapiAuthenticateUserNonceFieldNumber;
#endif  // !_MSC_VER

CMsgClientRequestWebAPIAuthenticateUserNonceResponse::CMsgClientRequestWebAPIAuthenticateUserNonceResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::InitAsDefaultInstance() {
}

CMsgClientRequestWebAPIAuthenticateUserNonceResponse::CMsgClientRequestWebAPIAuthenticateUserNonceResponse(const CMsgClientRequestWebAPIAuthenticateUserNonceResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  webapi_authenticate_user_nonce_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRequestWebAPIAuthenticateUserNonceResponse::~CMsgClientRequestWebAPIAuthenticateUserNonceResponse() {
  SharedDtor();
}

void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::SharedDtor() {
  if (webapi_authenticate_user_nonce_ != &::google::protobuf::internal::kEmptyString) {
    delete webapi_authenticate_user_nonce_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientRequestWebAPIAuthenticateUserNonceResponse& CMsgClientRequestWebAPIAuthenticateUserNonceResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientRequestWebAPIAuthenticateUserNonceResponse* CMsgClientRequestWebAPIAuthenticateUserNonceResponse::default_instance_ = NULL;

CMsgClientRequestWebAPIAuthenticateUserNonceResponse* CMsgClientRequestWebAPIAuthenticateUserNonceResponse::New() const {
  return new CMsgClientRequestWebAPIAuthenticateUserNonceResponse;
}

void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    if (has_webapi_authenticate_user_nonce()) {
      if (webapi_authenticate_user_nonce_ != &::google::protobuf::internal::kEmptyString) {
        webapi_authenticate_user_nonce_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientRequestWebAPIAuthenticateUserNonceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_webapi_authenticate_user_nonce;
        break;
      }

      // optional string webapi_authenticate_user_nonce = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_webapi_authenticate_user_nonce:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_webapi_authenticate_user_nonce()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional string webapi_authenticate_user_nonce = 11;
  if (has_webapi_authenticate_user_nonce()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->webapi_authenticate_user_nonce(), output);
  }

}

int CMsgClientRequestWebAPIAuthenticateUserNonceResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional string webapi_authenticate_user_nonce = 11;
    if (has_webapi_authenticate_user_nonce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->webapi_authenticate_user_nonce());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientRequestWebAPIAuthenticateUserNonceResponse*>(&from));
}

void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::MergeFrom(const CMsgClientRequestWebAPIAuthenticateUserNonceResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_webapi_authenticate_user_nonce()) {
      set_webapi_authenticate_user_nonce(from.webapi_authenticate_user_nonce());
    }
  }
}

void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::CopyFrom(const CMsgClientRequestWebAPIAuthenticateUserNonceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestWebAPIAuthenticateUserNonceResponse::IsInitialized() const {

  return true;
}

void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::Swap(CMsgClientRequestWebAPIAuthenticateUserNonceResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(webapi_authenticate_user_nonce_, other->webapi_authenticate_user_nonce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientRequestWebAPIAuthenticateUserNonceResponse::GetTypeName() const {
  return "Sc.CMsgClientRequestWebAPIAuthenticateUserNonceResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgClientLogOff::CMsgClientLogOff()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientLogOff::InitAsDefaultInstance() {
}

CMsgClientLogOff::CMsgClientLogOff(const CMsgClientLogOff& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientLogOff::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientLogOff::~CMsgClientLogOff() {
  SharedDtor();
}

void CMsgClientLogOff::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientLogOff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientLogOff& CMsgClientLogOff::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientLogOff* CMsgClientLogOff::default_instance_ = NULL;

CMsgClientLogOff* CMsgClientLogOff::New() const {
  return new CMsgClientLogOff;
}

void CMsgClientLogOff::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientLogOff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void CMsgClientLogOff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int CMsgClientLogOff::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientLogOff::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientLogOff*>(&from));
}

void CMsgClientLogOff::MergeFrom(const CMsgClientLogOff& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void CMsgClientLogOff::CopyFrom(const CMsgClientLogOff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLogOff::IsInitialized() const {

  return true;
}

void CMsgClientLogOff::Swap(CMsgClientLogOff* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientLogOff::GetTypeName() const {
  return "Sc.CMsgClientLogOff";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientLoggedOff::kEresultFieldNumber;
#endif  // !_MSC_VER

CMsgClientLoggedOff::CMsgClientLoggedOff()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientLoggedOff::InitAsDefaultInstance() {
}

CMsgClientLoggedOff::CMsgClientLoggedOff(const CMsgClientLoggedOff& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientLoggedOff::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientLoggedOff::~CMsgClientLoggedOff() {
  SharedDtor();
}

void CMsgClientLoggedOff::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientLoggedOff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientLoggedOff& CMsgClientLoggedOff::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientLoggedOff* CMsgClientLoggedOff::default_instance_ = NULL;

CMsgClientLoggedOff* CMsgClientLoggedOff::New() const {
  return new CMsgClientLoggedOff;
}

void CMsgClientLoggedOff::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientLoggedOff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientLoggedOff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

}

int CMsgClientLoggedOff::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientLoggedOff::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientLoggedOff*>(&from));
}

void CMsgClientLoggedOff::MergeFrom(const CMsgClientLoggedOff& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
  }
}

void CMsgClientLoggedOff::CopyFrom(const CMsgClientLoggedOff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLoggedOff::IsInitialized() const {

  return true;
}

void CMsgClientLoggedOff::Swap(CMsgClientLoggedOff* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientLoggedOff::GetTypeName() const {
  return "Sc.CMsgClientLoggedOff";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientCMList::kCmAddressesFieldNumber;
const int CMsgClientCMList::kCmPortsFieldNumber;
#endif  // !_MSC_VER

CMsgClientCMList::CMsgClientCMList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientCMList::InitAsDefaultInstance() {
}

CMsgClientCMList::CMsgClientCMList(const CMsgClientCMList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientCMList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientCMList::~CMsgClientCMList() {
  SharedDtor();
}

void CMsgClientCMList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientCMList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientCMList& CMsgClientCMList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientCMList* CMsgClientCMList::default_instance_ = NULL;

CMsgClientCMList* CMsgClientCMList::New() const {
  return new CMsgClientCMList;
}

void CMsgClientCMList::Clear() {
  cm_addresses_.Clear();
  cm_ports_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientCMList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 cm_addresses = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cm_addresses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_cm_addresses())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cm_addresses())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_cm_addresses;
        if (input->ExpectTag(16)) goto parse_cm_ports;
        break;
      }

      // repeated uint32 cm_ports = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cm_ports:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_cm_ports())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cm_ports())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cm_ports;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientCMList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 cm_addresses = 1;
  for (int i = 0; i < this->cm_addresses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->cm_addresses(i), output);
  }

  // repeated uint32 cm_ports = 2;
  for (int i = 0; i < this->cm_ports_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->cm_ports(i), output);
  }

}

int CMsgClientCMList::ByteSize() const {
  int total_size = 0;

  // repeated uint32 cm_addresses = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->cm_addresses_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cm_addresses(i));
    }
    total_size += 1 * this->cm_addresses_size() + data_size;
  }

  // repeated uint32 cm_ports = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->cm_ports_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cm_ports(i));
    }
    total_size += 1 * this->cm_ports_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientCMList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientCMList*>(&from));
}

void CMsgClientCMList::MergeFrom(const CMsgClientCMList& from) {
  GOOGLE_CHECK_NE(&from, this);
  cm_addresses_.MergeFrom(from.cm_addresses_);
  cm_ports_.MergeFrom(from.cm_ports_);
}

void CMsgClientCMList::CopyFrom(const CMsgClientCMList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientCMList::IsInitialized() const {

  return true;
}

void CMsgClientCMList::Swap(CMsgClientCMList* other) {
  if (other != this) {
    cm_addresses_.Swap(&other->cm_addresses_);
    cm_ports_.Swap(&other->cm_ports_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientCMList::GetTypeName() const {
  return "Sc.CMsgClientCMList";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientP2PConnectionInfo::kSteamIdDestFieldNumber;
const int CMsgClientP2PConnectionInfo::kSteamIdSrcFieldNumber;
const int CMsgClientP2PConnectionInfo::kAppIdFieldNumber;
const int CMsgClientP2PConnectionInfo::kCandidateFieldNumber;
#endif  // !_MSC_VER

CMsgClientP2PConnectionInfo::CMsgClientP2PConnectionInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientP2PConnectionInfo::InitAsDefaultInstance() {
}

CMsgClientP2PConnectionInfo::CMsgClientP2PConnectionInfo(const CMsgClientP2PConnectionInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientP2PConnectionInfo::SharedCtor() {
  _cached_size_ = 0;
  steam_id_dest_ = GOOGLE_ULONGLONG(0);
  steam_id_src_ = GOOGLE_ULONGLONG(0);
  app_id_ = 0u;
  candidate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientP2PConnectionInfo::~CMsgClientP2PConnectionInfo() {
  SharedDtor();
}

void CMsgClientP2PConnectionInfo::SharedDtor() {
  if (candidate_ != &::google::protobuf::internal::kEmptyString) {
    delete candidate_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientP2PConnectionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientP2PConnectionInfo& CMsgClientP2PConnectionInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientP2PConnectionInfo* CMsgClientP2PConnectionInfo::default_instance_ = NULL;

CMsgClientP2PConnectionInfo* CMsgClientP2PConnectionInfo::New() const {
  return new CMsgClientP2PConnectionInfo;
}

void CMsgClientP2PConnectionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_dest_ = GOOGLE_ULONGLONG(0);
    steam_id_src_ = GOOGLE_ULONGLONG(0);
    app_id_ = 0u;
    if (has_candidate()) {
      if (candidate_ != &::google::protobuf::internal::kEmptyString) {
        candidate_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientP2PConnectionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id_dest = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_dest_)));
          set_has_steam_id_dest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_steam_id_src;
        break;
      }

      // optional fixed64 steam_id_src = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steam_id_src:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_src_)));
          set_has_steam_id_src();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_app_id;
        break;
      }

      // optional uint32 app_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_app_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_candidate;
        break;
      }

      // optional bytes candidate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_candidate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_candidate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientP2PConnectionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steam_id_dest = 1;
  if (has_steam_id_dest()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id_dest(), output);
  }

  // optional fixed64 steam_id_src = 2;
  if (has_steam_id_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_src(), output);
  }

  // optional uint32 app_id = 3;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->app_id(), output);
  }

  // optional bytes candidate = 4;
  if (has_candidate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->candidate(), output);
  }

}

int CMsgClientP2PConnectionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id_dest = 1;
    if (has_steam_id_dest()) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id_src = 2;
    if (has_steam_id_src()) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 3;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional bytes candidate = 4;
    if (has_candidate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->candidate());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientP2PConnectionInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientP2PConnectionInfo*>(&from));
}

void CMsgClientP2PConnectionInfo::MergeFrom(const CMsgClientP2PConnectionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id_dest()) {
      set_steam_id_dest(from.steam_id_dest());
    }
    if (from.has_steam_id_src()) {
      set_steam_id_src(from.steam_id_src());
    }
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_candidate()) {
      set_candidate(from.candidate());
    }
  }
}

void CMsgClientP2PConnectionInfo::CopyFrom(const CMsgClientP2PConnectionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientP2PConnectionInfo::IsInitialized() const {

  return true;
}

void CMsgClientP2PConnectionInfo::Swap(CMsgClientP2PConnectionInfo* other) {
  if (other != this) {
    std::swap(steam_id_dest_, other->steam_id_dest_);
    std::swap(steam_id_src_, other->steam_id_src_);
    std::swap(app_id_, other->app_id_);
    std::swap(candidate_, other->candidate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientP2PConnectionInfo::GetTypeName() const {
  return "Sc.CMsgClientP2PConnectionInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientP2PConnectionFailInfo::kSteamIdDestFieldNumber;
const int CMsgClientP2PConnectionFailInfo::kSteamIdSrcFieldNumber;
const int CMsgClientP2PConnectionFailInfo::kAppIdFieldNumber;
const int CMsgClientP2PConnectionFailInfo::kEp2PSessionErrorFieldNumber;
#endif  // !_MSC_VER

CMsgClientP2PConnectionFailInfo::CMsgClientP2PConnectionFailInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientP2PConnectionFailInfo::InitAsDefaultInstance() {
}

CMsgClientP2PConnectionFailInfo::CMsgClientP2PConnectionFailInfo(const CMsgClientP2PConnectionFailInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientP2PConnectionFailInfo::SharedCtor() {
  _cached_size_ = 0;
  steam_id_dest_ = GOOGLE_ULONGLONG(0);
  steam_id_src_ = GOOGLE_ULONGLONG(0);
  app_id_ = 0u;
  ep2p_session_error_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientP2PConnectionFailInfo::~CMsgClientP2PConnectionFailInfo() {
  SharedDtor();
}

void CMsgClientP2PConnectionFailInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientP2PConnectionFailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientP2PConnectionFailInfo& CMsgClientP2PConnectionFailInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientP2PConnectionFailInfo* CMsgClientP2PConnectionFailInfo::default_instance_ = NULL;

CMsgClientP2PConnectionFailInfo* CMsgClientP2PConnectionFailInfo::New() const {
  return new CMsgClientP2PConnectionFailInfo;
}

void CMsgClientP2PConnectionFailInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_dest_ = GOOGLE_ULONGLONG(0);
    steam_id_src_ = GOOGLE_ULONGLONG(0);
    app_id_ = 0u;
    ep2p_session_error_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientP2PConnectionFailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id_dest = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_dest_)));
          set_has_steam_id_dest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_steam_id_src;
        break;
      }

      // optional fixed64 steam_id_src = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steam_id_src:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_src_)));
          set_has_steam_id_src();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_app_id;
        break;
      }

      // optional uint32 app_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_app_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ep2p_session_error;
        break;
      }

      // optional uint32 ep2p_session_error = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ep2p_session_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ep2p_session_error_)));
          set_has_ep2p_session_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientP2PConnectionFailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steam_id_dest = 1;
  if (has_steam_id_dest()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id_dest(), output);
  }

  // optional fixed64 steam_id_src = 2;
  if (has_steam_id_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_src(), output);
  }

  // optional uint32 app_id = 3;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->app_id(), output);
  }

  // optional uint32 ep2p_session_error = 4;
  if (has_ep2p_session_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ep2p_session_error(), output);
  }

}

int CMsgClientP2PConnectionFailInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id_dest = 1;
    if (has_steam_id_dest()) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id_src = 2;
    if (has_steam_id_src()) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 3;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 ep2p_session_error = 4;
    if (has_ep2p_session_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ep2p_session_error());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientP2PConnectionFailInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientP2PConnectionFailInfo*>(&from));
}

void CMsgClientP2PConnectionFailInfo::MergeFrom(const CMsgClientP2PConnectionFailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id_dest()) {
      set_steam_id_dest(from.steam_id_dest());
    }
    if (from.has_steam_id_src()) {
      set_steam_id_src(from.steam_id_src());
    }
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_ep2p_session_error()) {
      set_ep2p_session_error(from.ep2p_session_error());
    }
  }
}

void CMsgClientP2PConnectionFailInfo::CopyFrom(const CMsgClientP2PConnectionFailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientP2PConnectionFailInfo::IsInitialized() const {

  return true;
}

void CMsgClientP2PConnectionFailInfo::Swap(CMsgClientP2PConnectionFailInfo* other) {
  if (other != this) {
    std::swap(steam_id_dest_, other->steam_id_dest_);
    std::swap(steam_id_src_, other->steam_id_src_);
    std::swap(app_id_, other->app_id_);
    std::swap(ep2p_session_error_, other->ep2p_session_error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientP2PConnectionFailInfo::GetTypeName() const {
  return "Sc.CMsgClientP2PConnectionFailInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientGetAppOwnershipTicket::kAppIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientGetAppOwnershipTicket::CMsgClientGetAppOwnershipTicket()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientGetAppOwnershipTicket::InitAsDefaultInstance() {
}

CMsgClientGetAppOwnershipTicket::CMsgClientGetAppOwnershipTicket(const CMsgClientGetAppOwnershipTicket& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientGetAppOwnershipTicket::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientGetAppOwnershipTicket::~CMsgClientGetAppOwnershipTicket() {
  SharedDtor();
}

void CMsgClientGetAppOwnershipTicket::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientGetAppOwnershipTicket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientGetAppOwnershipTicket& CMsgClientGetAppOwnershipTicket::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientGetAppOwnershipTicket* CMsgClientGetAppOwnershipTicket::default_instance_ = NULL;

CMsgClientGetAppOwnershipTicket* CMsgClientGetAppOwnershipTicket::New() const {
  return new CMsgClientGetAppOwnershipTicket;
}

void CMsgClientGetAppOwnershipTicket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientGetAppOwnershipTicket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientGetAppOwnershipTicket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

}

int CMsgClientGetAppOwnershipTicket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGetAppOwnershipTicket::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientGetAppOwnershipTicket*>(&from));
}

void CMsgClientGetAppOwnershipTicket::MergeFrom(const CMsgClientGetAppOwnershipTicket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
  }
}

void CMsgClientGetAppOwnershipTicket::CopyFrom(const CMsgClientGetAppOwnershipTicket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetAppOwnershipTicket::IsInitialized() const {

  return true;
}

void CMsgClientGetAppOwnershipTicket::Swap(CMsgClientGetAppOwnershipTicket* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientGetAppOwnershipTicket::GetTypeName() const {
  return "Sc.CMsgClientGetAppOwnershipTicket";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientGetAppOwnershipTicketResponse::kEresultFieldNumber;
const int CMsgClientGetAppOwnershipTicketResponse::kAppIdFieldNumber;
const int CMsgClientGetAppOwnershipTicketResponse::kTicketFieldNumber;
#endif  // !_MSC_VER

CMsgClientGetAppOwnershipTicketResponse::CMsgClientGetAppOwnershipTicketResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientGetAppOwnershipTicketResponse::InitAsDefaultInstance() {
}

CMsgClientGetAppOwnershipTicketResponse::CMsgClientGetAppOwnershipTicketResponse(const CMsgClientGetAppOwnershipTicketResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientGetAppOwnershipTicketResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2u;
  app_id_ = 0u;
  ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientGetAppOwnershipTicketResponse::~CMsgClientGetAppOwnershipTicketResponse() {
  SharedDtor();
}

void CMsgClientGetAppOwnershipTicketResponse::SharedDtor() {
  if (ticket_ != &::google::protobuf::internal::kEmptyString) {
    delete ticket_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientGetAppOwnershipTicketResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientGetAppOwnershipTicketResponse& CMsgClientGetAppOwnershipTicketResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientGetAppOwnershipTicketResponse* CMsgClientGetAppOwnershipTicketResponse::default_instance_ = NULL;

CMsgClientGetAppOwnershipTicketResponse* CMsgClientGetAppOwnershipTicketResponse::New() const {
  return new CMsgClientGetAppOwnershipTicketResponse;
}

void CMsgClientGetAppOwnershipTicketResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2u;
    app_id_ = 0u;
    if (has_ticket()) {
      if (ticket_ != &::google::protobuf::internal::kEmptyString) {
        ticket_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientGetAppOwnershipTicketResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_app_id;
        break;
      }

      // optional uint32 app_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_app_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ticket;
        break;
      }

      // optional bytes ticket = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ticket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ticket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientGetAppOwnershipTicketResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

  // optional uint32 app_id = 2;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->app_id(), output);
  }

  // optional bytes ticket = 3;
  if (has_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->ticket(), output);
  }

}

int CMsgClientGetAppOwnershipTicketResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

    // optional uint32 app_id = 2;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional bytes ticket = 3;
    if (has_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ticket());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGetAppOwnershipTicketResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientGetAppOwnershipTicketResponse*>(&from));
}

void CMsgClientGetAppOwnershipTicketResponse::MergeFrom(const CMsgClientGetAppOwnershipTicketResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_ticket()) {
      set_ticket(from.ticket());
    }
  }
}

void CMsgClientGetAppOwnershipTicketResponse::CopyFrom(const CMsgClientGetAppOwnershipTicketResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetAppOwnershipTicketResponse::IsInitialized() const {

  return true;
}

void CMsgClientGetAppOwnershipTicketResponse::Swap(CMsgClientGetAppOwnershipTicketResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(app_id_, other->app_id_);
    std::swap(ticket_, other->ticket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientGetAppOwnershipTicketResponse::GetTypeName() const {
  return "Sc.CMsgClientGetAppOwnershipTicketResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientSessionToken::kTokenFieldNumber;
#endif  // !_MSC_VER

CMsgClientSessionToken::CMsgClientSessionToken()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientSessionToken::InitAsDefaultInstance() {
}

CMsgClientSessionToken::CMsgClientSessionToken(const CMsgClientSessionToken& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientSessionToken::SharedCtor() {
  _cached_size_ = 0;
  token_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientSessionToken::~CMsgClientSessionToken() {
  SharedDtor();
}

void CMsgClientSessionToken::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientSessionToken::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientSessionToken& CMsgClientSessionToken::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientSessionToken* CMsgClientSessionToken::default_instance_ = NULL;

CMsgClientSessionToken* CMsgClientSessionToken::New() const {
  return new CMsgClientSessionToken;
}

void CMsgClientSessionToken::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    token_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientSessionToken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 token = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &token_)));
          set_has_token();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientSessionToken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->token(), output);
  }

}

int CMsgClientSessionToken::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->token());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientSessionToken::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientSessionToken*>(&from));
}

void CMsgClientSessionToken::MergeFrom(const CMsgClientSessionToken& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
  }
}

void CMsgClientSessionToken::CopyFrom(const CMsgClientSessionToken& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSessionToken::IsInitialized() const {

  return true;
}

void CMsgClientSessionToken::Swap(CMsgClientSessionToken* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientSessionToken::GetTypeName() const {
  return "Sc.CMsgClientSessionToken";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientGameConnectTokens::kMaxTokensToKeepFieldNumber;
const int CMsgClientGameConnectTokens::kTokensFieldNumber;
#endif  // !_MSC_VER

CMsgClientGameConnectTokens::CMsgClientGameConnectTokens()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientGameConnectTokens::InitAsDefaultInstance() {
}

CMsgClientGameConnectTokens::CMsgClientGameConnectTokens(const CMsgClientGameConnectTokens& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientGameConnectTokens::SharedCtor() {
  _cached_size_ = 0;
  max_tokens_to_keep_ = 10u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientGameConnectTokens::~CMsgClientGameConnectTokens() {
  SharedDtor();
}

void CMsgClientGameConnectTokens::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientGameConnectTokens::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientGameConnectTokens& CMsgClientGameConnectTokens::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientGameConnectTokens* CMsgClientGameConnectTokens::default_instance_ = NULL;

CMsgClientGameConnectTokens* CMsgClientGameConnectTokens::New() const {
  return new CMsgClientGameConnectTokens;
}

void CMsgClientGameConnectTokens::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    max_tokens_to_keep_ = 10u;
  }
  tokens_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientGameConnectTokens::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 max_tokens_to_keep = 1 [default = 10];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_tokens_to_keep_)));
          set_has_max_tokens_to_keep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tokens;
        break;
      }

      // repeated bytes tokens = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tokens:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_tokens()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tokens;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientGameConnectTokens::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 max_tokens_to_keep = 1 [default = 10];
  if (has_max_tokens_to_keep()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->max_tokens_to_keep(), output);
  }

  // repeated bytes tokens = 2;
  for (int i = 0; i < this->tokens_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->tokens(i), output);
  }

}

int CMsgClientGameConnectTokens::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 max_tokens_to_keep = 1 [default = 10];
    if (has_max_tokens_to_keep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_tokens_to_keep());
    }

  }
  // repeated bytes tokens = 2;
  total_size += 1 * this->tokens_size();
  for (int i = 0; i < this->tokens_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->tokens(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGameConnectTokens::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientGameConnectTokens*>(&from));
}

void CMsgClientGameConnectTokens::MergeFrom(const CMsgClientGameConnectTokens& from) {
  GOOGLE_CHECK_NE(&from, this);
  tokens_.MergeFrom(from.tokens_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_tokens_to_keep()) {
      set_max_tokens_to_keep(from.max_tokens_to_keep());
    }
  }
}

void CMsgClientGameConnectTokens::CopyFrom(const CMsgClientGameConnectTokens& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGameConnectTokens::IsInitialized() const {

  return true;
}

void CMsgClientGameConnectTokens::Swap(CMsgClientGameConnectTokens* other) {
  if (other != this) {
    std::swap(max_tokens_to_keep_, other->max_tokens_to_keep_);
    tokens_.Swap(&other->tokens_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientGameConnectTokens::GetTypeName() const {
  return "Sc.CMsgClientGameConnectTokens";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGSServerType::kAppIdServedFieldNumber;
const int CMsgGSServerType::kFlagsFieldNumber;
const int CMsgGSServerType::kGameIpAddressFieldNumber;
const int CMsgGSServerType::kGamePortFieldNumber;
const int CMsgGSServerType::kGameDirFieldNumber;
const int CMsgGSServerType::kGameVersionFieldNumber;
const int CMsgGSServerType::kGameQueryPortFieldNumber;
#endif  // !_MSC_VER

CMsgGSServerType::CMsgGSServerType()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgGSServerType::InitAsDefaultInstance() {
}

CMsgGSServerType::CMsgGSServerType(const CMsgGSServerType& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGSServerType::SharedCtor() {
  _cached_size_ = 0;
  app_id_served_ = 0u;
  flags_ = 0u;
  game_ip_address_ = 0u;
  game_port_ = 0u;
  game_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  game_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  game_query_port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGSServerType::~CMsgGSServerType() {
  SharedDtor();
}

void CMsgGSServerType::SharedDtor() {
  if (game_dir_ != &::google::protobuf::internal::kEmptyString) {
    delete game_dir_;
  }
  if (game_version_ != &::google::protobuf::internal::kEmptyString) {
    delete game_version_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgGSServerType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgGSServerType& CMsgGSServerType::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgGSServerType* CMsgGSServerType::default_instance_ = NULL;

CMsgGSServerType* CMsgGSServerType::New() const {
  return new CMsgGSServerType;
}

void CMsgGSServerType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_served_ = 0u;
    flags_ = 0u;
    game_ip_address_ = 0u;
    game_port_ = 0u;
    if (has_game_dir()) {
      if (game_dir_ != &::google::protobuf::internal::kEmptyString) {
        game_dir_->clear();
      }
    }
    if (has_game_version()) {
      if (game_version_ != &::google::protobuf::internal::kEmptyString) {
        game_version_->clear();
      }
    }
    game_query_port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgGSServerType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id_served = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_served_)));
          set_has_app_id_served();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_flags;
        break;
      }

      // optional uint32 flags = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_game_ip_address;
        break;
      }

      // optional uint32 game_ip_address = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_ip_address:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_ip_address_)));
          set_has_game_ip_address();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_game_port;
        break;
      }

      // optional uint32 game_port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_port_)));
          set_has_game_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_game_dir;
        break;
      }

      // optional string game_dir = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_dir()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_game_version;
        break;
      }

      // optional string game_version = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_version()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_game_query_port;
        break;
      }

      // optional uint32 game_query_port = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_query_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_query_port_)));
          set_has_game_query_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGSServerType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id_served = 1;
  if (has_app_id_served()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id_served(), output);
  }

  // optional uint32 flags = 2;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flags(), output);
  }

  // optional uint32 game_ip_address = 3;
  if (has_game_ip_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->game_ip_address(), output);
  }

  // optional uint32 game_port = 4;
  if (has_game_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_port(), output);
  }

  // optional string game_dir = 5;
  if (has_game_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->game_dir(), output);
  }

  // optional string game_version = 6;
  if (has_game_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->game_version(), output);
  }

  // optional uint32 game_query_port = 7;
  if (has_game_query_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->game_query_port(), output);
  }

}

int CMsgGSServerType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id_served = 1;
    if (has_app_id_served()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id_served());
    }

    // optional uint32 flags = 2;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional uint32 game_ip_address = 3;
    if (has_game_ip_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_ip_address());
    }

    // optional uint32 game_port = 4;
    if (has_game_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_port());
    }

    // optional string game_dir = 5;
    if (has_game_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_dir());
    }

    // optional string game_version = 6;
    if (has_game_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_version());
    }

    // optional uint32 game_query_port = 7;
    if (has_game_query_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_query_port());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGSServerType::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgGSServerType*>(&from));
}

void CMsgGSServerType::MergeFrom(const CMsgGSServerType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id_served()) {
      set_app_id_served(from.app_id_served());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_game_ip_address()) {
      set_game_ip_address(from.game_ip_address());
    }
    if (from.has_game_port()) {
      set_game_port(from.game_port());
    }
    if (from.has_game_dir()) {
      set_game_dir(from.game_dir());
    }
    if (from.has_game_version()) {
      set_game_version(from.game_version());
    }
    if (from.has_game_query_port()) {
      set_game_query_port(from.game_query_port());
    }
  }
}

void CMsgGSServerType::CopyFrom(const CMsgGSServerType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGSServerType::IsInitialized() const {

  return true;
}

void CMsgGSServerType::Swap(CMsgGSServerType* other) {
  if (other != this) {
    std::swap(app_id_served_, other->app_id_served_);
    std::swap(flags_, other->flags_);
    std::swap(game_ip_address_, other->game_ip_address_);
    std::swap(game_port_, other->game_port_);
    std::swap(game_dir_, other->game_dir_);
    std::swap(game_version_, other->game_version_);
    std::swap(game_query_port_, other->game_query_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgGSServerType::GetTypeName() const {
  return "Sc.CMsgGSServerType";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGSStatusReply::kIsSecureFieldNumber;
#endif  // !_MSC_VER

CMsgGSStatusReply::CMsgGSStatusReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgGSStatusReply::InitAsDefaultInstance() {
}

CMsgGSStatusReply::CMsgGSStatusReply(const CMsgGSStatusReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGSStatusReply::SharedCtor() {
  _cached_size_ = 0;
  is_secure_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGSStatusReply::~CMsgGSStatusReply() {
  SharedDtor();
}

void CMsgGSStatusReply::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgGSStatusReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgGSStatusReply& CMsgGSStatusReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgGSStatusReply* CMsgGSStatusReply::default_instance_ = NULL;

CMsgGSStatusReply* CMsgGSStatusReply::New() const {
  return new CMsgGSStatusReply;
}

void CMsgGSStatusReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_secure_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgGSStatusReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_secure = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_secure_)));
          set_has_is_secure();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGSStatusReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool is_secure = 1;
  if (has_is_secure()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_secure(), output);
  }

}

int CMsgGSStatusReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool is_secure = 1;
    if (has_is_secure()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGSStatusReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgGSStatusReply*>(&from));
}

void CMsgGSStatusReply::MergeFrom(const CMsgGSStatusReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_secure()) {
      set_is_secure(from.is_secure());
    }
  }
}

void CMsgGSStatusReply::CopyFrom(const CMsgGSStatusReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGSStatusReply::IsInitialized() const {

  return true;
}

void CMsgGSStatusReply::Swap(CMsgGSStatusReply* other) {
  if (other != this) {
    std::swap(is_secure_, other->is_secure_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgGSStatusReply::GetTypeName() const {
  return "Sc.CMsgGSStatusReply";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGSPlayerList_Player::kSteamIdFieldNumber;
const int CMsgGSPlayerList_Player::kPublicIpFieldNumber;
const int CMsgGSPlayerList_Player::kTokenFieldNumber;
#endif  // !_MSC_VER

CMsgGSPlayerList_Player::CMsgGSPlayerList_Player()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgGSPlayerList_Player::InitAsDefaultInstance() {
}

CMsgGSPlayerList_Player::CMsgGSPlayerList_Player(const CMsgGSPlayerList_Player& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGSPlayerList_Player::SharedCtor() {
  _cached_size_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
  public_ip_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGSPlayerList_Player::~CMsgGSPlayerList_Player() {
  SharedDtor();
}

void CMsgGSPlayerList_Player::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgGSPlayerList_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgGSPlayerList_Player& CMsgGSPlayerList_Player::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgGSPlayerList_Player* CMsgGSPlayerList_Player::default_instance_ = NULL;

CMsgGSPlayerList_Player* CMsgGSPlayerList_Player::New() const {
  return new CMsgGSPlayerList_Player;
}

void CMsgGSPlayerList_Player::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_ = GOOGLE_ULONGLONG(0);
    public_ip_ = 0u;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgGSPlayerList_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 steam_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &steam_id_)));
          set_has_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_public_ip;
        break;
      }

      // optional uint32 public_ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_public_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &public_ip_)));
          set_has_public_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }

      // optional bytes token = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGSPlayerList_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 steam_id = 1;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->steam_id(), output);
  }

  // optional uint32 public_ip = 2;
  if (has_public_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->public_ip(), output);
  }

  // optional bytes token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->token(), output);
  }

}

int CMsgGSPlayerList_Player::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->steam_id());
    }

    // optional uint32 public_ip = 2;
    if (has_public_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->public_ip());
    }

    // optional bytes token = 3;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->token());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGSPlayerList_Player::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgGSPlayerList_Player*>(&from));
}

void CMsgGSPlayerList_Player::MergeFrom(const CMsgGSPlayerList_Player& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
    if (from.has_public_ip()) {
      set_public_ip(from.public_ip());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
}

void CMsgGSPlayerList_Player::CopyFrom(const CMsgGSPlayerList_Player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGSPlayerList_Player::IsInitialized() const {

  return true;
}

void CMsgGSPlayerList_Player::Swap(CMsgGSPlayerList_Player* other) {
  if (other != this) {
    std::swap(steam_id_, other->steam_id_);
    std::swap(public_ip_, other->public_ip_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgGSPlayerList_Player::GetTypeName() const {
  return "Sc.CMsgGSPlayerList.Player";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgGSPlayerList::kPlayersFieldNumber;
#endif  // !_MSC_VER

CMsgGSPlayerList::CMsgGSPlayerList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgGSPlayerList::InitAsDefaultInstance() {
}

CMsgGSPlayerList::CMsgGSPlayerList(const CMsgGSPlayerList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGSPlayerList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGSPlayerList::~CMsgGSPlayerList() {
  SharedDtor();
}

void CMsgGSPlayerList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgGSPlayerList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgGSPlayerList& CMsgGSPlayerList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgGSPlayerList* CMsgGSPlayerList::default_instance_ = NULL;

CMsgGSPlayerList* CMsgGSPlayerList::New() const {
  return new CMsgGSPlayerList;
}

void CMsgGSPlayerList::Clear() {
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgGSPlayerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Sc.CMsgGSPlayerList.Player players = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_players;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGSPlayerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Sc.CMsgGSPlayerList.Player players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->players(i), output);
  }

}

int CMsgGSPlayerList::ByteSize() const {
  int total_size = 0;

  // repeated .Sc.CMsgGSPlayerList.Player players = 1;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGSPlayerList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgGSPlayerList*>(&from));
}

void CMsgGSPlayerList::MergeFrom(const CMsgGSPlayerList& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
}

void CMsgGSPlayerList::CopyFrom(const CMsgGSPlayerList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGSPlayerList::IsInitialized() const {

  return true;
}

void CMsgGSPlayerList::Swap(CMsgGSPlayerList* other) {
  if (other != this) {
    players_.Swap(&other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgGSPlayerList::GetTypeName() const {
  return "Sc.CMsgGSPlayerList";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGSUserPlaying::kSteamIdFieldNumber;
const int CMsgGSUserPlaying::kPublicIpFieldNumber;
const int CMsgGSUserPlaying::kTokenFieldNumber;
#endif  // !_MSC_VER

CMsgGSUserPlaying::CMsgGSUserPlaying()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgGSUserPlaying::InitAsDefaultInstance() {
}

CMsgGSUserPlaying::CMsgGSUserPlaying(const CMsgGSUserPlaying& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGSUserPlaying::SharedCtor() {
  _cached_size_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
  public_ip_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGSUserPlaying::~CMsgGSUserPlaying() {
  SharedDtor();
}

void CMsgGSUserPlaying::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgGSUserPlaying::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgGSUserPlaying& CMsgGSUserPlaying::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgGSUserPlaying* CMsgGSUserPlaying::default_instance_ = NULL;

CMsgGSUserPlaying* CMsgGSUserPlaying::New() const {
  return new CMsgGSUserPlaying;
}

void CMsgGSUserPlaying::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_ = GOOGLE_ULONGLONG(0);
    public_ip_ = 0u;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgGSUserPlaying::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          set_has_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_public_ip;
        break;
      }

      // optional uint32 public_ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_public_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &public_ip_)));
          set_has_public_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }

      // optional bytes token = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGSUserPlaying::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional uint32 public_ip = 2;
  if (has_public_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->public_ip(), output);
  }

  // optional bytes token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->token(), output);
  }

}

int CMsgGSUserPlaying::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 public_ip = 2;
    if (has_public_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->public_ip());
    }

    // optional bytes token = 3;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->token());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGSUserPlaying::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgGSUserPlaying*>(&from));
}

void CMsgGSUserPlaying::MergeFrom(const CMsgGSUserPlaying& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
    if (from.has_public_ip()) {
      set_public_ip(from.public_ip());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
}

void CMsgGSUserPlaying::CopyFrom(const CMsgGSUserPlaying& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGSUserPlaying::IsInitialized() const {

  return true;
}

void CMsgGSUserPlaying::Swap(CMsgGSUserPlaying* other) {
  if (other != this) {
    std::swap(steam_id_, other->steam_id_);
    std::swap(public_ip_, other->public_ip_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgGSUserPlaying::GetTypeName() const {
  return "Sc.CMsgGSUserPlaying";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGSDisconnectNotice::kSteamIdFieldNumber;
#endif  // !_MSC_VER

CMsgGSDisconnectNotice::CMsgGSDisconnectNotice()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgGSDisconnectNotice::InitAsDefaultInstance() {
}

CMsgGSDisconnectNotice::CMsgGSDisconnectNotice(const CMsgGSDisconnectNotice& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGSDisconnectNotice::SharedCtor() {
  _cached_size_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGSDisconnectNotice::~CMsgGSDisconnectNotice() {
  SharedDtor();
}

void CMsgGSDisconnectNotice::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgGSDisconnectNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgGSDisconnectNotice& CMsgGSDisconnectNotice::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgGSDisconnectNotice* CMsgGSDisconnectNotice::default_instance_ = NULL;

CMsgGSDisconnectNotice* CMsgGSDisconnectNotice::New() const {
  return new CMsgGSDisconnectNotice;
}

void CMsgGSDisconnectNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgGSDisconnectNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          set_has_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGSDisconnectNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

}

int CMsgGSDisconnectNotice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGSDisconnectNotice::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgGSDisconnectNotice*>(&from));
}

void CMsgGSDisconnectNotice::MergeFrom(const CMsgGSDisconnectNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
  }
}

void CMsgGSDisconnectNotice::CopyFrom(const CMsgGSDisconnectNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGSDisconnectNotice::IsInitialized() const {

  return true;
}

void CMsgGSDisconnectNotice::Swap(CMsgGSDisconnectNotice* other) {
  if (other != this) {
    std::swap(steam_id_, other->steam_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgGSDisconnectNotice::GetTypeName() const {
  return "Sc.CMsgGSDisconnectNotice";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientGamesPlayed_GamePlayed::kSteamIdGsFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kGameIdFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kGameIpAddressFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kGamePortFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kIsSecureFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kTokenFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kGameExtraInfoFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kGameDataBlobFieldNumber;
const int CMsgClientGamesPlayed_GamePlayed::kProcessIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientGamesPlayed_GamePlayed::CMsgClientGamesPlayed_GamePlayed()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientGamesPlayed_GamePlayed::InitAsDefaultInstance() {
}

CMsgClientGamesPlayed_GamePlayed::CMsgClientGamesPlayed_GamePlayed(const CMsgClientGamesPlayed_GamePlayed& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientGamesPlayed_GamePlayed::SharedCtor() {
  _cached_size_ = 0;
  steam_id_gs_ = GOOGLE_ULONGLONG(0);
  game_id_ = GOOGLE_ULONGLONG(0);
  game_ip_address_ = 0u;
  game_port_ = 0u;
  is_secure_ = false;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  game_extra_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  game_data_blob_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  process_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientGamesPlayed_GamePlayed::~CMsgClientGamesPlayed_GamePlayed() {
  SharedDtor();
}

void CMsgClientGamesPlayed_GamePlayed::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (game_extra_info_ != &::google::protobuf::internal::kEmptyString) {
    delete game_extra_info_;
  }
  if (game_data_blob_ != &::google::protobuf::internal::kEmptyString) {
    delete game_data_blob_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientGamesPlayed_GamePlayed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientGamesPlayed_GamePlayed& CMsgClientGamesPlayed_GamePlayed::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientGamesPlayed_GamePlayed* CMsgClientGamesPlayed_GamePlayed::default_instance_ = NULL;

CMsgClientGamesPlayed_GamePlayed* CMsgClientGamesPlayed_GamePlayed::New() const {
  return new CMsgClientGamesPlayed_GamePlayed;
}

void CMsgClientGamesPlayed_GamePlayed::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_gs_ = GOOGLE_ULONGLONG(0);
    game_id_ = GOOGLE_ULONGLONG(0);
    game_ip_address_ = 0u;
    game_port_ = 0u;
    is_secure_ = false;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    if (has_game_extra_info()) {
      if (game_extra_info_ != &::google::protobuf::internal::kEmptyString) {
        game_extra_info_->clear();
      }
    }
    if (has_game_data_blob()) {
      if (game_data_blob_ != &::google::protobuf::internal::kEmptyString) {
        game_data_blob_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    process_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientGamesPlayed_GamePlayed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 steam_id_gs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &steam_id_gs_)));
          set_has_steam_id_gs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_game_id;
        break;
      }

      // optional fixed64 game_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_game_ip_address;
        break;
      }

      // optional uint32 game_ip_address = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_ip_address:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_ip_address_)));
          set_has_game_ip_address();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_game_port;
        break;
      }

      // optional uint32 game_port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_port_)));
          set_has_game_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_secure;
        break;
      }

      // optional bool is_secure = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_secure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_secure_)));
          set_has_is_secure();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_token;
        break;
      }

      // optional bytes token = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_game_extra_info;
        break;
      }

      // optional string game_extra_info = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_extra_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_extra_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_game_data_blob;
        break;
      }

      // optional bytes game_data_blob = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_data_blob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_game_data_blob()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_process_id;
        break;
      }

      // optional uint32 process_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_process_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &process_id_)));
          set_has_process_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientGamesPlayed_GamePlayed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 steam_id_gs = 1;
  if (has_steam_id_gs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->steam_id_gs(), output);
  }

  // optional fixed64 game_id = 2;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->game_id(), output);
  }

  // optional uint32 game_ip_address = 3;
  if (has_game_ip_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->game_ip_address(), output);
  }

  // optional uint32 game_port = 4;
  if (has_game_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_port(), output);
  }

  // optional bool is_secure = 5;
  if (has_is_secure()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_secure(), output);
  }

  // optional bytes token = 6;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->token(), output);
  }

  // optional string game_extra_info = 7;
  if (has_game_extra_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->game_extra_info(), output);
  }

  // optional bytes game_data_blob = 8;
  if (has_game_data_blob()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->game_data_blob(), output);
  }

  // optional uint32 process_id = 9;
  if (has_process_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->process_id(), output);
  }

}

int CMsgClientGamesPlayed_GamePlayed::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 steam_id_gs = 1;
    if (has_steam_id_gs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->steam_id_gs());
    }

    // optional fixed64 game_id = 2;
    if (has_game_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 game_ip_address = 3;
    if (has_game_ip_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_ip_address());
    }

    // optional uint32 game_port = 4;
    if (has_game_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_port());
    }

    // optional bool is_secure = 5;
    if (has_is_secure()) {
      total_size += 1 + 1;
    }

    // optional bytes token = 6;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->token());
    }

    // optional string game_extra_info = 7;
    if (has_game_extra_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_extra_info());
    }

    // optional bytes game_data_blob = 8;
    if (has_game_data_blob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->game_data_blob());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 process_id = 9;
    if (has_process_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->process_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGamesPlayed_GamePlayed::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientGamesPlayed_GamePlayed*>(&from));
}

void CMsgClientGamesPlayed_GamePlayed::MergeFrom(const CMsgClientGamesPlayed_GamePlayed& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id_gs()) {
      set_steam_id_gs(from.steam_id_gs());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_game_ip_address()) {
      set_game_ip_address(from.game_ip_address());
    }
    if (from.has_game_port()) {
      set_game_port(from.game_port());
    }
    if (from.has_is_secure()) {
      set_is_secure(from.is_secure());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_game_extra_info()) {
      set_game_extra_info(from.game_extra_info());
    }
    if (from.has_game_data_blob()) {
      set_game_data_blob(from.game_data_blob());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_process_id()) {
      set_process_id(from.process_id());
    }
  }
}

void CMsgClientGamesPlayed_GamePlayed::CopyFrom(const CMsgClientGamesPlayed_GamePlayed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGamesPlayed_GamePlayed::IsInitialized() const {

  return true;
}

void CMsgClientGamesPlayed_GamePlayed::Swap(CMsgClientGamesPlayed_GamePlayed* other) {
  if (other != this) {
    std::swap(steam_id_gs_, other->steam_id_gs_);
    std::swap(game_id_, other->game_id_);
    std::swap(game_ip_address_, other->game_ip_address_);
    std::swap(game_port_, other->game_port_);
    std::swap(is_secure_, other->is_secure_);
    std::swap(token_, other->token_);
    std::swap(game_extra_info_, other->game_extra_info_);
    std::swap(game_data_blob_, other->game_data_blob_);
    std::swap(process_id_, other->process_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientGamesPlayed_GamePlayed::GetTypeName() const {
  return "Sc.CMsgClientGamesPlayed.GamePlayed";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientGamesPlayed::kGamesPlayedFieldNumber;
#endif  // !_MSC_VER

CMsgClientGamesPlayed::CMsgClientGamesPlayed()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientGamesPlayed::InitAsDefaultInstance() {
}

CMsgClientGamesPlayed::CMsgClientGamesPlayed(const CMsgClientGamesPlayed& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientGamesPlayed::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientGamesPlayed::~CMsgClientGamesPlayed() {
  SharedDtor();
}

void CMsgClientGamesPlayed::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientGamesPlayed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientGamesPlayed& CMsgClientGamesPlayed::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientGamesPlayed* CMsgClientGamesPlayed::default_instance_ = NULL;

CMsgClientGamesPlayed* CMsgClientGamesPlayed::New() const {
  return new CMsgClientGamesPlayed;
}

void CMsgClientGamesPlayed::Clear() {
  games_played_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientGamesPlayed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Sc.CMsgClientGamesPlayed.GamePlayed games_played = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_games_played:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_games_played()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_games_played;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientGamesPlayed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Sc.CMsgClientGamesPlayed.GamePlayed games_played = 1;
  for (int i = 0; i < this->games_played_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->games_played(i), output);
  }

}

int CMsgClientGamesPlayed::ByteSize() const {
  int total_size = 0;

  // repeated .Sc.CMsgClientGamesPlayed.GamePlayed games_played = 1;
  total_size += 1 * this->games_played_size();
  for (int i = 0; i < this->games_played_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->games_played(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGamesPlayed::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientGamesPlayed*>(&from));
}

void CMsgClientGamesPlayed::MergeFrom(const CMsgClientGamesPlayed& from) {
  GOOGLE_CHECK_NE(&from, this);
  games_played_.MergeFrom(from.games_played_);
}

void CMsgClientGamesPlayed::CopyFrom(const CMsgClientGamesPlayed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGamesPlayed::IsInitialized() const {

  return true;
}

void CMsgClientGamesPlayed::Swap(CMsgClientGamesPlayed* other) {
  if (other != this) {
    games_played_.Swap(&other->games_played_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientGamesPlayed::GetTypeName() const {
  return "Sc.CMsgClientGamesPlayed";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGSApprove::kSteamIdFieldNumber;
#endif  // !_MSC_VER

CMsgGSApprove::CMsgGSApprove()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgGSApprove::InitAsDefaultInstance() {
}

CMsgGSApprove::CMsgGSApprove(const CMsgGSApprove& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGSApprove::SharedCtor() {
  _cached_size_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGSApprove::~CMsgGSApprove() {
  SharedDtor();
}

void CMsgGSApprove::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgGSApprove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgGSApprove& CMsgGSApprove::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgGSApprove* CMsgGSApprove::default_instance_ = NULL;

CMsgGSApprove* CMsgGSApprove::New() const {
  return new CMsgGSApprove;
}

void CMsgGSApprove::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgGSApprove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          set_has_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGSApprove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

}

int CMsgGSApprove::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGSApprove::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgGSApprove*>(&from));
}

void CMsgGSApprove::MergeFrom(const CMsgGSApprove& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
  }
}

void CMsgGSApprove::CopyFrom(const CMsgGSApprove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGSApprove::IsInitialized() const {

  return true;
}

void CMsgGSApprove::Swap(CMsgGSApprove* other) {
  if (other != this) {
    std::swap(steam_id_, other->steam_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgGSApprove::GetTypeName() const {
  return "Sc.CMsgGSApprove";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGSDeny::kSteamIdFieldNumber;
const int CMsgGSDeny::kEdenyReasonFieldNumber;
const int CMsgGSDeny::kDenyStringFieldNumber;
#endif  // !_MSC_VER

CMsgGSDeny::CMsgGSDeny()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgGSDeny::InitAsDefaultInstance() {
}

CMsgGSDeny::CMsgGSDeny(const CMsgGSDeny& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGSDeny::SharedCtor() {
  _cached_size_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
  edeny_reason_ = 0;
  deny_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGSDeny::~CMsgGSDeny() {
  SharedDtor();
}

void CMsgGSDeny::SharedDtor() {
  if (deny_string_ != &::google::protobuf::internal::kEmptyString) {
    delete deny_string_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgGSDeny::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgGSDeny& CMsgGSDeny::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgGSDeny* CMsgGSDeny::default_instance_ = NULL;

CMsgGSDeny* CMsgGSDeny::New() const {
  return new CMsgGSDeny;
}

void CMsgGSDeny::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_ = GOOGLE_ULONGLONG(0);
    edeny_reason_ = 0;
    if (has_deny_string()) {
      if (deny_string_ != &::google::protobuf::internal::kEmptyString) {
        deny_string_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgGSDeny::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          set_has_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_edeny_reason;
        break;
      }

      // optional int32 edeny_reason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_edeny_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &edeny_reason_)));
          set_has_edeny_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_deny_string;
        break;
      }

      // optional string deny_string = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deny_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deny_string()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGSDeny::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional int32 edeny_reason = 2;
  if (has_edeny_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->edeny_reason(), output);
  }

  // optional string deny_string = 3;
  if (has_deny_string()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->deny_string(), output);
  }

}

int CMsgGSDeny::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional int32 edeny_reason = 2;
    if (has_edeny_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->edeny_reason());
    }

    // optional string deny_string = 3;
    if (has_deny_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deny_string());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGSDeny::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgGSDeny*>(&from));
}

void CMsgGSDeny::MergeFrom(const CMsgGSDeny& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
    if (from.has_edeny_reason()) {
      set_edeny_reason(from.edeny_reason());
    }
    if (from.has_deny_string()) {
      set_deny_string(from.deny_string());
    }
  }
}

void CMsgGSDeny::CopyFrom(const CMsgGSDeny& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGSDeny::IsInitialized() const {

  return true;
}

void CMsgGSDeny::Swap(CMsgGSDeny* other) {
  if (other != this) {
    std::swap(steam_id_, other->steam_id_);
    std::swap(edeny_reason_, other->edeny_reason_);
    std::swap(deny_string_, other->deny_string_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgGSDeny::GetTypeName() const {
  return "Sc.CMsgGSDeny";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGSKick::kSteamIdFieldNumber;
const int CMsgGSKick::kEdenyReasonFieldNumber;
#endif  // !_MSC_VER

CMsgGSKick::CMsgGSKick()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgGSKick::InitAsDefaultInstance() {
}

CMsgGSKick::CMsgGSKick(const CMsgGSKick& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGSKick::SharedCtor() {
  _cached_size_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
  edeny_reason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGSKick::~CMsgGSKick() {
  SharedDtor();
}

void CMsgGSKick::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgGSKick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgGSKick& CMsgGSKick::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgGSKick* CMsgGSKick::default_instance_ = NULL;

CMsgGSKick* CMsgGSKick::New() const {
  return new CMsgGSKick;
}

void CMsgGSKick::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_ = GOOGLE_ULONGLONG(0);
    edeny_reason_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgGSKick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          set_has_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_edeny_reason;
        break;
      }

      // optional int32 edeny_reason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_edeny_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &edeny_reason_)));
          set_has_edeny_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGSKick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional int32 edeny_reason = 2;
  if (has_edeny_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->edeny_reason(), output);
  }

}

int CMsgGSKick::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional int32 edeny_reason = 2;
    if (has_edeny_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->edeny_reason());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGSKick::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgGSKick*>(&from));
}

void CMsgGSKick::MergeFrom(const CMsgGSKick& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
    if (from.has_edeny_reason()) {
      set_edeny_reason(from.edeny_reason());
    }
  }
}

void CMsgGSKick::CopyFrom(const CMsgGSKick& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGSKick::IsInitialized() const {

  return true;
}

void CMsgGSKick::Swap(CMsgGSKick* other) {
  if (other != this) {
    std::swap(steam_id_, other->steam_id_);
    std::swap(edeny_reason_, other->edeny_reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgGSKick::GetTypeName() const {
  return "Sc.CMsgGSKick";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientAuthList::kTokensLeftFieldNumber;
const int CMsgClientAuthList::kLastRequestSeqFieldNumber;
const int CMsgClientAuthList::kLastRequestSeqFromServerFieldNumber;
const int CMsgClientAuthList::kTicketsFieldNumber;
const int CMsgClientAuthList::kAppIdsFieldNumber;
const int CMsgClientAuthList::kMessageSequenceFieldNumber;
#endif  // !_MSC_VER

CMsgClientAuthList::CMsgClientAuthList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientAuthList::InitAsDefaultInstance() {
}

CMsgClientAuthList::CMsgClientAuthList(const CMsgClientAuthList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientAuthList::SharedCtor() {
  _cached_size_ = 0;
  tokens_left_ = 0u;
  last_request_seq_ = 0u;
  last_request_seq_from_server_ = 0u;
  message_sequence_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientAuthList::~CMsgClientAuthList() {
  SharedDtor();
}

void CMsgClientAuthList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientAuthList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientAuthList& CMsgClientAuthList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientAuthList* CMsgClientAuthList::default_instance_ = NULL;

CMsgClientAuthList* CMsgClientAuthList::New() const {
  return new CMsgClientAuthList;
}

void CMsgClientAuthList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tokens_left_ = 0u;
    last_request_seq_ = 0u;
    last_request_seq_from_server_ = 0u;
    message_sequence_ = 0u;
  }
  tickets_.Clear();
  app_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientAuthList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tokens_left = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tokens_left_)));
          set_has_tokens_left();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_last_request_seq;
        break;
      }

      // optional uint32 last_request_seq = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_request_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_request_seq_)));
          set_has_last_request_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_last_request_seq_from_server;
        break;
      }

      // optional uint32 last_request_seq_from_server = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_request_seq_from_server:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_request_seq_from_server_)));
          set_has_last_request_seq_from_server();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tickets;
        break;
      }

      // repeated .Sc.CMsgAuthTicket tickets = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tickets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tickets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tickets;
        if (input->ExpectTag(40)) goto parse_app_ids;
        break;
      }

      // repeated uint32 app_ids = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_app_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_app_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_app_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_app_ids;
        if (input->ExpectTag(48)) goto parse_message_sequence;
        break;
      }

      // optional uint32 message_sequence = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_message_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_sequence_)));
          set_has_message_sequence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientAuthList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 tokens_left = 1;
  if (has_tokens_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tokens_left(), output);
  }

  // optional uint32 last_request_seq = 2;
  if (has_last_request_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->last_request_seq(), output);
  }

  // optional uint32 last_request_seq_from_server = 3;
  if (has_last_request_seq_from_server()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->last_request_seq_from_server(), output);
  }

  // repeated .Sc.CMsgAuthTicket tickets = 4;
  for (int i = 0; i < this->tickets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->tickets(i), output);
  }

  // repeated uint32 app_ids = 5;
  for (int i = 0; i < this->app_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->app_ids(i), output);
  }

  // optional uint32 message_sequence = 6;
  if (has_message_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->message_sequence(), output);
  }

}

int CMsgClientAuthList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 tokens_left = 1;
    if (has_tokens_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tokens_left());
    }

    // optional uint32 last_request_seq = 2;
    if (has_last_request_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_request_seq());
    }

    // optional uint32 last_request_seq_from_server = 3;
    if (has_last_request_seq_from_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_request_seq_from_server());
    }

    // optional uint32 message_sequence = 6;
    if (has_message_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_sequence());
    }

  }
  // repeated .Sc.CMsgAuthTicket tickets = 4;
  total_size += 1 * this->tickets_size();
  for (int i = 0; i < this->tickets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tickets(i));
  }

  // repeated uint32 app_ids = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->app_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->app_ids(i));
    }
    total_size += 1 * this->app_ids_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAuthList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientAuthList*>(&from));
}

void CMsgClientAuthList::MergeFrom(const CMsgClientAuthList& from) {
  GOOGLE_CHECK_NE(&from, this);
  tickets_.MergeFrom(from.tickets_);
  app_ids_.MergeFrom(from.app_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tokens_left()) {
      set_tokens_left(from.tokens_left());
    }
    if (from.has_last_request_seq()) {
      set_last_request_seq(from.last_request_seq());
    }
    if (from.has_last_request_seq_from_server()) {
      set_last_request_seq_from_server(from.last_request_seq_from_server());
    }
    if (from.has_message_sequence()) {
      set_message_sequence(from.message_sequence());
    }
  }
}

void CMsgClientAuthList::CopyFrom(const CMsgClientAuthList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAuthList::IsInitialized() const {

  return true;
}

void CMsgClientAuthList::Swap(CMsgClientAuthList* other) {
  if (other != this) {
    std::swap(tokens_left_, other->tokens_left_);
    std::swap(last_request_seq_, other->last_request_seq_);
    std::swap(last_request_seq_from_server_, other->last_request_seq_from_server_);
    tickets_.Swap(&other->tickets_);
    app_ids_.Swap(&other->app_ids_);
    std::swap(message_sequence_, other->message_sequence_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientAuthList::GetTypeName() const {
  return "Sc.CMsgClientAuthList";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientAuthListAck::kTicketCrcFieldNumber;
const int CMsgClientAuthListAck::kAppIdsFieldNumber;
const int CMsgClientAuthListAck::kMessageSequenceFieldNumber;
#endif  // !_MSC_VER

CMsgClientAuthListAck::CMsgClientAuthListAck()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientAuthListAck::InitAsDefaultInstance() {
}

CMsgClientAuthListAck::CMsgClientAuthListAck(const CMsgClientAuthListAck& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientAuthListAck::SharedCtor() {
  _cached_size_ = 0;
  message_sequence_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientAuthListAck::~CMsgClientAuthListAck() {
  SharedDtor();
}

void CMsgClientAuthListAck::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientAuthListAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientAuthListAck& CMsgClientAuthListAck::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientAuthListAck* CMsgClientAuthListAck::default_instance_ = NULL;

CMsgClientAuthListAck* CMsgClientAuthListAck::New() const {
  return new CMsgClientAuthListAck;
}

void CMsgClientAuthListAck::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    message_sequence_ = 0u;
  }
  ticket_crc_.Clear();
  app_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientAuthListAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 ticket_crc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ticket_crc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_ticket_crc())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ticket_crc())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_ticket_crc;
        if (input->ExpectTag(16)) goto parse_app_ids;
        break;
      }

      // repeated uint32 app_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_app_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_app_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_app_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_app_ids;
        if (input->ExpectTag(24)) goto parse_message_sequence;
        break;
      }

      // optional uint32 message_sequence = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_message_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_sequence_)));
          set_has_message_sequence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientAuthListAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 ticket_crc = 1;
  for (int i = 0; i < this->ticket_crc_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->ticket_crc(i), output);
  }

  // repeated uint32 app_ids = 2;
  for (int i = 0; i < this->app_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->app_ids(i), output);
  }

  // optional uint32 message_sequence = 3;
  if (has_message_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->message_sequence(), output);
  }

}

int CMsgClientAuthListAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 message_sequence = 3;
    if (has_message_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_sequence());
    }

  }
  // repeated uint32 ticket_crc = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->ticket_crc_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->ticket_crc(i));
    }
    total_size += 1 * this->ticket_crc_size() + data_size;
  }

  // repeated uint32 app_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->app_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->app_ids(i));
    }
    total_size += 1 * this->app_ids_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAuthListAck::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientAuthListAck*>(&from));
}

void CMsgClientAuthListAck::MergeFrom(const CMsgClientAuthListAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  ticket_crc_.MergeFrom(from.ticket_crc_);
  app_ids_.MergeFrom(from.app_ids_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_message_sequence()) {
      set_message_sequence(from.message_sequence());
    }
  }
}

void CMsgClientAuthListAck::CopyFrom(const CMsgClientAuthListAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAuthListAck::IsInitialized() const {

  return true;
}

void CMsgClientAuthListAck::Swap(CMsgClientAuthListAck* other) {
  if (other != this) {
    ticket_crc_.Swap(&other->ticket_crc_);
    app_ids_.Swap(&other->app_ids_);
    std::swap(message_sequence_, other->message_sequence_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientAuthListAck::GetTypeName() const {
  return "Sc.CMsgClientAuthListAck";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientFriendsList_Friend::kUlfriendidFieldNumber;
const int CMsgClientFriendsList_Friend::kEfriendrelationshipFieldNumber;
#endif  // !_MSC_VER

CMsgClientFriendsList_Friend::CMsgClientFriendsList_Friend()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientFriendsList_Friend::InitAsDefaultInstance() {
}

CMsgClientFriendsList_Friend::CMsgClientFriendsList_Friend(const CMsgClientFriendsList_Friend& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientFriendsList_Friend::SharedCtor() {
  _cached_size_ = 0;
  ulfriendid_ = GOOGLE_ULONGLONG(0);
  efriendrelationship_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientFriendsList_Friend::~CMsgClientFriendsList_Friend() {
  SharedDtor();
}

void CMsgClientFriendsList_Friend::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientFriendsList_Friend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientFriendsList_Friend& CMsgClientFriendsList_Friend::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientFriendsList_Friend* CMsgClientFriendsList_Friend::default_instance_ = NULL;

CMsgClientFriendsList_Friend* CMsgClientFriendsList_Friend::New() const {
  return new CMsgClientFriendsList_Friend;
}

void CMsgClientFriendsList_Friend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ulfriendid_ = GOOGLE_ULONGLONG(0);
    efriendrelationship_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientFriendsList_Friend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 ulfriendid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &ulfriendid_)));
          set_has_ulfriendid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_efriendrelationship;
        break;
      }

      // optional uint32 efriendrelationship = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_efriendrelationship:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &efriendrelationship_)));
          set_has_efriendrelationship();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientFriendsList_Friend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 ulfriendid = 1;
  if (has_ulfriendid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->ulfriendid(), output);
  }

  // optional uint32 efriendrelationship = 2;
  if (has_efriendrelationship()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->efriendrelationship(), output);
  }

}

int CMsgClientFriendsList_Friend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 ulfriendid = 1;
    if (has_ulfriendid()) {
      total_size += 1 + 8;
    }

    // optional uint32 efriendrelationship = 2;
    if (has_efriendrelationship()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->efriendrelationship());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientFriendsList_Friend::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientFriendsList_Friend*>(&from));
}

void CMsgClientFriendsList_Friend::MergeFrom(const CMsgClientFriendsList_Friend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ulfriendid()) {
      set_ulfriendid(from.ulfriendid());
    }
    if (from.has_efriendrelationship()) {
      set_efriendrelationship(from.efriendrelationship());
    }
  }
}

void CMsgClientFriendsList_Friend::CopyFrom(const CMsgClientFriendsList_Friend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFriendsList_Friend::IsInitialized() const {

  return true;
}

void CMsgClientFriendsList_Friend::Swap(CMsgClientFriendsList_Friend* other) {
  if (other != this) {
    std::swap(ulfriendid_, other->ulfriendid_);
    std::swap(efriendrelationship_, other->efriendrelationship_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientFriendsList_Friend::GetTypeName() const {
  return "Sc.CMsgClientFriendsList.Friend";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientFriendsList::kBincrementalFieldNumber;
const int CMsgClientFriendsList::kFriendsFieldNumber;
#endif  // !_MSC_VER

CMsgClientFriendsList::CMsgClientFriendsList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientFriendsList::InitAsDefaultInstance() {
}

CMsgClientFriendsList::CMsgClientFriendsList(const CMsgClientFriendsList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientFriendsList::SharedCtor() {
  _cached_size_ = 0;
  bincremental_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientFriendsList::~CMsgClientFriendsList() {
  SharedDtor();
}

void CMsgClientFriendsList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientFriendsList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientFriendsList& CMsgClientFriendsList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientFriendsList* CMsgClientFriendsList::default_instance_ = NULL;

CMsgClientFriendsList* CMsgClientFriendsList::New() const {
  return new CMsgClientFriendsList;
}

void CMsgClientFriendsList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bincremental_ = false;
  }
  friends_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientFriendsList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool bincremental = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bincremental_)));
          set_has_bincremental();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_friends;
        break;
      }

      // repeated .Sc.CMsgClientFriendsList.Friend friends = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friends()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_friends;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientFriendsList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool bincremental = 1;
  if (has_bincremental()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bincremental(), output);
  }

  // repeated .Sc.CMsgClientFriendsList.Friend friends = 2;
  for (int i = 0; i < this->friends_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->friends(i), output);
  }

}

int CMsgClientFriendsList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool bincremental = 1;
    if (has_bincremental()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Sc.CMsgClientFriendsList.Friend friends = 2;
  total_size += 1 * this->friends_size();
  for (int i = 0; i < this->friends_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friends(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientFriendsList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientFriendsList*>(&from));
}

void CMsgClientFriendsList::MergeFrom(const CMsgClientFriendsList& from) {
  GOOGLE_CHECK_NE(&from, this);
  friends_.MergeFrom(from.friends_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bincremental()) {
      set_bincremental(from.bincremental());
    }
  }
}

void CMsgClientFriendsList::CopyFrom(const CMsgClientFriendsList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFriendsList::IsInitialized() const {

  return true;
}

void CMsgClientFriendsList::Swap(CMsgClientFriendsList* other) {
  if (other != this) {
    std::swap(bincremental_, other->bincremental_);
    friends_.Swap(&other->friends_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientFriendsList::GetTypeName() const {
  return "Sc.CMsgClientFriendsList";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientFriendsGroupsList_FriendGroup::kNGroupIDFieldNumber;
const int CMsgClientFriendsGroupsList_FriendGroup::kStrGroupNameFieldNumber;
#endif  // !_MSC_VER

CMsgClientFriendsGroupsList_FriendGroup::CMsgClientFriendsGroupsList_FriendGroup()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientFriendsGroupsList_FriendGroup::InitAsDefaultInstance() {
}

CMsgClientFriendsGroupsList_FriendGroup::CMsgClientFriendsGroupsList_FriendGroup(const CMsgClientFriendsGroupsList_FriendGroup& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientFriendsGroupsList_FriendGroup::SharedCtor() {
  _cached_size_ = 0;
  ngroupid_ = 0;
  strgroupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientFriendsGroupsList_FriendGroup::~CMsgClientFriendsGroupsList_FriendGroup() {
  SharedDtor();
}

void CMsgClientFriendsGroupsList_FriendGroup::SharedDtor() {
  if (strgroupname_ != &::google::protobuf::internal::kEmptyString) {
    delete strgroupname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientFriendsGroupsList_FriendGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientFriendsGroupsList_FriendGroup& CMsgClientFriendsGroupsList_FriendGroup::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientFriendsGroupsList_FriendGroup* CMsgClientFriendsGroupsList_FriendGroup::default_instance_ = NULL;

CMsgClientFriendsGroupsList_FriendGroup* CMsgClientFriendsGroupsList_FriendGroup::New() const {
  return new CMsgClientFriendsGroupsList_FriendGroup;
}

void CMsgClientFriendsGroupsList_FriendGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ngroupid_ = 0;
    if (has_strgroupname()) {
      if (strgroupname_ != &::google::protobuf::internal::kEmptyString) {
        strgroupname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientFriendsGroupsList_FriendGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nGroupID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ngroupid_)));
          set_has_ngroupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strGroupName;
        break;
      }

      // optional string strGroupName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strGroupName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strgroupname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientFriendsGroupsList_FriendGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 nGroupID = 1;
  if (has_ngroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ngroupid(), output);
  }

  // optional string strGroupName = 2;
  if (has_strgroupname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->strgroupname(), output);
  }

}

int CMsgClientFriendsGroupsList_FriendGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nGroupID = 1;
    if (has_ngroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ngroupid());
    }

    // optional string strGroupName = 2;
    if (has_strgroupname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strgroupname());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientFriendsGroupsList_FriendGroup::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientFriendsGroupsList_FriendGroup*>(&from));
}

void CMsgClientFriendsGroupsList_FriendGroup::MergeFrom(const CMsgClientFriendsGroupsList_FriendGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ngroupid()) {
      set_ngroupid(from.ngroupid());
    }
    if (from.has_strgroupname()) {
      set_strgroupname(from.strgroupname());
    }
  }
}

void CMsgClientFriendsGroupsList_FriendGroup::CopyFrom(const CMsgClientFriendsGroupsList_FriendGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFriendsGroupsList_FriendGroup::IsInitialized() const {

  return true;
}

void CMsgClientFriendsGroupsList_FriendGroup::Swap(CMsgClientFriendsGroupsList_FriendGroup* other) {
  if (other != this) {
    std::swap(ngroupid_, other->ngroupid_);
    std::swap(strgroupname_, other->strgroupname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientFriendsGroupsList_FriendGroup::GetTypeName() const {
  return "Sc.CMsgClientFriendsGroupsList.FriendGroup";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientFriendsGroupsList_FriendGroupsMembership::kUlSteamIDFieldNumber;
const int CMsgClientFriendsGroupsList_FriendGroupsMembership::kNGroupIDFieldNumber;
#endif  // !_MSC_VER

CMsgClientFriendsGroupsList_FriendGroupsMembership::CMsgClientFriendsGroupsList_FriendGroupsMembership()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientFriendsGroupsList_FriendGroupsMembership::InitAsDefaultInstance() {
}

CMsgClientFriendsGroupsList_FriendGroupsMembership::CMsgClientFriendsGroupsList_FriendGroupsMembership(const CMsgClientFriendsGroupsList_FriendGroupsMembership& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientFriendsGroupsList_FriendGroupsMembership::SharedCtor() {
  _cached_size_ = 0;
  ulsteamid_ = GOOGLE_ULONGLONG(0);
  ngroupid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientFriendsGroupsList_FriendGroupsMembership::~CMsgClientFriendsGroupsList_FriendGroupsMembership() {
  SharedDtor();
}

void CMsgClientFriendsGroupsList_FriendGroupsMembership::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientFriendsGroupsList_FriendGroupsMembership::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientFriendsGroupsList_FriendGroupsMembership& CMsgClientFriendsGroupsList_FriendGroupsMembership::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientFriendsGroupsList_FriendGroupsMembership* CMsgClientFriendsGroupsList_FriendGroupsMembership::default_instance_ = NULL;

CMsgClientFriendsGroupsList_FriendGroupsMembership* CMsgClientFriendsGroupsList_FriendGroupsMembership::New() const {
  return new CMsgClientFriendsGroupsList_FriendGroupsMembership;
}

void CMsgClientFriendsGroupsList_FriendGroupsMembership::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ulsteamid_ = GOOGLE_ULONGLONG(0);
    ngroupid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientFriendsGroupsList_FriendGroupsMembership::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 ulSteamID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &ulsteamid_)));
          set_has_ulsteamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nGroupID;
        break;
      }

      // optional int32 nGroupID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nGroupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ngroupid_)));
          set_has_ngroupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientFriendsGroupsList_FriendGroupsMembership::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 ulSteamID = 1;
  if (has_ulsteamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->ulsteamid(), output);
  }

  // optional int32 nGroupID = 2;
  if (has_ngroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ngroupid(), output);
  }

}

int CMsgClientFriendsGroupsList_FriendGroupsMembership::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 ulSteamID = 1;
    if (has_ulsteamid()) {
      total_size += 1 + 8;
    }

    // optional int32 nGroupID = 2;
    if (has_ngroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ngroupid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientFriendsGroupsList_FriendGroupsMembership::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientFriendsGroupsList_FriendGroupsMembership*>(&from));
}

void CMsgClientFriendsGroupsList_FriendGroupsMembership::MergeFrom(const CMsgClientFriendsGroupsList_FriendGroupsMembership& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ulsteamid()) {
      set_ulsteamid(from.ulsteamid());
    }
    if (from.has_ngroupid()) {
      set_ngroupid(from.ngroupid());
    }
  }
}

void CMsgClientFriendsGroupsList_FriendGroupsMembership::CopyFrom(const CMsgClientFriendsGroupsList_FriendGroupsMembership& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFriendsGroupsList_FriendGroupsMembership::IsInitialized() const {

  return true;
}

void CMsgClientFriendsGroupsList_FriendGroupsMembership::Swap(CMsgClientFriendsGroupsList_FriendGroupsMembership* other) {
  if (other != this) {
    std::swap(ulsteamid_, other->ulsteamid_);
    std::swap(ngroupid_, other->ngroupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientFriendsGroupsList_FriendGroupsMembership::GetTypeName() const {
  return "Sc.CMsgClientFriendsGroupsList.FriendGroupsMembership";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientFriendsGroupsList::kBremovalFieldNumber;
const int CMsgClientFriendsGroupsList::kBincrementalFieldNumber;
const int CMsgClientFriendsGroupsList::kFriendGroupsFieldNumber;
const int CMsgClientFriendsGroupsList::kMembershipsFieldNumber;
#endif  // !_MSC_VER

CMsgClientFriendsGroupsList::CMsgClientFriendsGroupsList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientFriendsGroupsList::InitAsDefaultInstance() {
}

CMsgClientFriendsGroupsList::CMsgClientFriendsGroupsList(const CMsgClientFriendsGroupsList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientFriendsGroupsList::SharedCtor() {
  _cached_size_ = 0;
  bremoval_ = false;
  bincremental_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientFriendsGroupsList::~CMsgClientFriendsGroupsList() {
  SharedDtor();
}

void CMsgClientFriendsGroupsList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientFriendsGroupsList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientFriendsGroupsList& CMsgClientFriendsGroupsList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientFriendsGroupsList* CMsgClientFriendsGroupsList::default_instance_ = NULL;

CMsgClientFriendsGroupsList* CMsgClientFriendsGroupsList::New() const {
  return new CMsgClientFriendsGroupsList;
}

void CMsgClientFriendsGroupsList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bremoval_ = false;
    bincremental_ = false;
  }
  friendgroups_.Clear();
  memberships_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientFriendsGroupsList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool bremoval = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bremoval_)));
          set_has_bremoval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bincremental;
        break;
      }

      // optional bool bincremental = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bincremental:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bincremental_)));
          set_has_bincremental();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_friendGroups;
        break;
      }

      // repeated .Sc.CMsgClientFriendsGroupsList.FriendGroup friendGroups = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friendGroups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friendgroups()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_friendGroups;
        if (input->ExpectTag(34)) goto parse_memberships;
        break;
      }

      // repeated .Sc.CMsgClientFriendsGroupsList.FriendGroupsMembership memberships = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_memberships:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_memberships()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_memberships;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientFriendsGroupsList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool bremoval = 1;
  if (has_bremoval()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bremoval(), output);
  }

  // optional bool bincremental = 2;
  if (has_bincremental()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bincremental(), output);
  }

  // repeated .Sc.CMsgClientFriendsGroupsList.FriendGroup friendGroups = 3;
  for (int i = 0; i < this->friendgroups_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->friendgroups(i), output);
  }

  // repeated .Sc.CMsgClientFriendsGroupsList.FriendGroupsMembership memberships = 4;
  for (int i = 0; i < this->memberships_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->memberships(i), output);
  }

}

int CMsgClientFriendsGroupsList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool bremoval = 1;
    if (has_bremoval()) {
      total_size += 1 + 1;
    }

    // optional bool bincremental = 2;
    if (has_bincremental()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Sc.CMsgClientFriendsGroupsList.FriendGroup friendGroups = 3;
  total_size += 1 * this->friendgroups_size();
  for (int i = 0; i < this->friendgroups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friendgroups(i));
  }

  // repeated .Sc.CMsgClientFriendsGroupsList.FriendGroupsMembership memberships = 4;
  total_size += 1 * this->memberships_size();
  for (int i = 0; i < this->memberships_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->memberships(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientFriendsGroupsList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientFriendsGroupsList*>(&from));
}

void CMsgClientFriendsGroupsList::MergeFrom(const CMsgClientFriendsGroupsList& from) {
  GOOGLE_CHECK_NE(&from, this);
  friendgroups_.MergeFrom(from.friendgroups_);
  memberships_.MergeFrom(from.memberships_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bremoval()) {
      set_bremoval(from.bremoval());
    }
    if (from.has_bincremental()) {
      set_bincremental(from.bincremental());
    }
  }
}

void CMsgClientFriendsGroupsList::CopyFrom(const CMsgClientFriendsGroupsList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFriendsGroupsList::IsInitialized() const {

  return true;
}

void CMsgClientFriendsGroupsList::Swap(CMsgClientFriendsGroupsList* other) {
  if (other != this) {
    std::swap(bremoval_, other->bremoval_);
    std::swap(bincremental_, other->bincremental_);
    friendgroups_.Swap(&other->friendgroups_);
    memberships_.Swap(&other->memberships_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientFriendsGroupsList::GetTypeName() const {
  return "Sc.CMsgClientFriendsGroupsList";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientPlayerNicknameList_PlayerNickname::kSteamidFieldNumber;
const int CMsgClientPlayerNicknameList_PlayerNickname::kNicknameFieldNumber;
#endif  // !_MSC_VER

CMsgClientPlayerNicknameList_PlayerNickname::CMsgClientPlayerNicknameList_PlayerNickname()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientPlayerNicknameList_PlayerNickname::InitAsDefaultInstance() {
}

CMsgClientPlayerNicknameList_PlayerNickname::CMsgClientPlayerNicknameList_PlayerNickname(const CMsgClientPlayerNicknameList_PlayerNickname& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientPlayerNicknameList_PlayerNickname::SharedCtor() {
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientPlayerNicknameList_PlayerNickname::~CMsgClientPlayerNicknameList_PlayerNickname() {
  SharedDtor();
}

void CMsgClientPlayerNicknameList_PlayerNickname::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientPlayerNicknameList_PlayerNickname::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientPlayerNicknameList_PlayerNickname& CMsgClientPlayerNicknameList_PlayerNickname::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientPlayerNicknameList_PlayerNickname* CMsgClientPlayerNicknameList_PlayerNickname::default_instance_ = NULL;

CMsgClientPlayerNicknameList_PlayerNickname* CMsgClientPlayerNicknameList_PlayerNickname::New() const {
  return new CMsgClientPlayerNicknameList_PlayerNickname;
}

void CMsgClientPlayerNicknameList_PlayerNickname::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steamid_ = GOOGLE_ULONGLONG(0);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientPlayerNicknameList_PlayerNickname::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
          set_has_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nickname;
        break;
      }

      // optional string nickname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientPlayerNicknameList_PlayerNickname::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->nickname(), output);
  }

}

int CMsgClientPlayerNicknameList_PlayerNickname::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional string nickname = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientPlayerNicknameList_PlayerNickname::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientPlayerNicknameList_PlayerNickname*>(&from));
}

void CMsgClientPlayerNicknameList_PlayerNickname::MergeFrom(const CMsgClientPlayerNicknameList_PlayerNickname& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
  }
}

void CMsgClientPlayerNicknameList_PlayerNickname::CopyFrom(const CMsgClientPlayerNicknameList_PlayerNickname& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPlayerNicknameList_PlayerNickname::IsInitialized() const {

  return true;
}

void CMsgClientPlayerNicknameList_PlayerNickname::Swap(CMsgClientPlayerNicknameList_PlayerNickname* other) {
  if (other != this) {
    std::swap(steamid_, other->steamid_);
    std::swap(nickname_, other->nickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientPlayerNicknameList_PlayerNickname::GetTypeName() const {
  return "Sc.CMsgClientPlayerNicknameList.PlayerNickname";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientPlayerNicknameList::kRemovalFieldNumber;
const int CMsgClientPlayerNicknameList::kIncrementalFieldNumber;
const int CMsgClientPlayerNicknameList::kNicknamesFieldNumber;
#endif  // !_MSC_VER

CMsgClientPlayerNicknameList::CMsgClientPlayerNicknameList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientPlayerNicknameList::InitAsDefaultInstance() {
}

CMsgClientPlayerNicknameList::CMsgClientPlayerNicknameList(const CMsgClientPlayerNicknameList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientPlayerNicknameList::SharedCtor() {
  _cached_size_ = 0;
  removal_ = false;
  incremental_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientPlayerNicknameList::~CMsgClientPlayerNicknameList() {
  SharedDtor();
}

void CMsgClientPlayerNicknameList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientPlayerNicknameList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientPlayerNicknameList& CMsgClientPlayerNicknameList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientPlayerNicknameList* CMsgClientPlayerNicknameList::default_instance_ = NULL;

CMsgClientPlayerNicknameList* CMsgClientPlayerNicknameList::New() const {
  return new CMsgClientPlayerNicknameList;
}

void CMsgClientPlayerNicknameList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    removal_ = false;
    incremental_ = false;
  }
  nicknames_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientPlayerNicknameList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool removal = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &removal_)));
          set_has_removal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_incremental;
        break;
      }

      // optional bool incremental = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_incremental:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &incremental_)));
          set_has_incremental();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nicknames;
        break;
      }

      // repeated .Sc.CMsgClientPlayerNicknameList.PlayerNickname nicknames = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nicknames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nicknames()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nicknames;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientPlayerNicknameList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool removal = 1;
  if (has_removal()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->removal(), output);
  }

  // optional bool incremental = 2;
  if (has_incremental()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->incremental(), output);
  }

  // repeated .Sc.CMsgClientPlayerNicknameList.PlayerNickname nicknames = 3;
  for (int i = 0; i < this->nicknames_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->nicknames(i), output);
  }

}

int CMsgClientPlayerNicknameList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool removal = 1;
    if (has_removal()) {
      total_size += 1 + 1;
    }

    // optional bool incremental = 2;
    if (has_incremental()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Sc.CMsgClientPlayerNicknameList.PlayerNickname nicknames = 3;
  total_size += 1 * this->nicknames_size();
  for (int i = 0; i < this->nicknames_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nicknames(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientPlayerNicknameList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientPlayerNicknameList*>(&from));
}

void CMsgClientPlayerNicknameList::MergeFrom(const CMsgClientPlayerNicknameList& from) {
  GOOGLE_CHECK_NE(&from, this);
  nicknames_.MergeFrom(from.nicknames_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_removal()) {
      set_removal(from.removal());
    }
    if (from.has_incremental()) {
      set_incremental(from.incremental());
    }
  }
}

void CMsgClientPlayerNicknameList::CopyFrom(const CMsgClientPlayerNicknameList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPlayerNicknameList::IsInitialized() const {

  return true;
}

void CMsgClientPlayerNicknameList::Swap(CMsgClientPlayerNicknameList* other) {
  if (other != this) {
    std::swap(removal_, other->removal_);
    std::swap(incremental_, other->incremental_);
    nicknames_.Swap(&other->nicknames_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientPlayerNicknameList::GetTypeName() const {
  return "Sc.CMsgClientPlayerNicknameList";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientSetPlayerNickname::kSteamidFieldNumber;
const int CMsgClientSetPlayerNickname::kNicknameFieldNumber;
#endif  // !_MSC_VER

CMsgClientSetPlayerNickname::CMsgClientSetPlayerNickname()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientSetPlayerNickname::InitAsDefaultInstance() {
}

CMsgClientSetPlayerNickname::CMsgClientSetPlayerNickname(const CMsgClientSetPlayerNickname& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientSetPlayerNickname::SharedCtor() {
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientSetPlayerNickname::~CMsgClientSetPlayerNickname() {
  SharedDtor();
}

void CMsgClientSetPlayerNickname::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientSetPlayerNickname::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientSetPlayerNickname& CMsgClientSetPlayerNickname::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientSetPlayerNickname* CMsgClientSetPlayerNickname::default_instance_ = NULL;

CMsgClientSetPlayerNickname* CMsgClientSetPlayerNickname::New() const {
  return new CMsgClientSetPlayerNickname;
}

void CMsgClientSetPlayerNickname::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steamid_ = GOOGLE_ULONGLONG(0);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientSetPlayerNickname::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
          set_has_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientSetPlayerNickname::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nickname(), output);
  }

}

int CMsgClientSetPlayerNickname::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientSetPlayerNickname::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientSetPlayerNickname*>(&from));
}

void CMsgClientSetPlayerNickname::MergeFrom(const CMsgClientSetPlayerNickname& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
  }
}

void CMsgClientSetPlayerNickname::CopyFrom(const CMsgClientSetPlayerNickname& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSetPlayerNickname::IsInitialized() const {

  return true;
}

void CMsgClientSetPlayerNickname::Swap(CMsgClientSetPlayerNickname* other) {
  if (other != this) {
    std::swap(steamid_, other->steamid_);
    std::swap(nickname_, other->nickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientSetPlayerNickname::GetTypeName() const {
  return "Sc.CMsgClientSetPlayerNickname";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientSetPlayerNicknameResponse::kEresultFieldNumber;
#endif  // !_MSC_VER

CMsgClientSetPlayerNicknameResponse::CMsgClientSetPlayerNicknameResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientSetPlayerNicknameResponse::InitAsDefaultInstance() {
}

CMsgClientSetPlayerNicknameResponse::CMsgClientSetPlayerNicknameResponse(const CMsgClientSetPlayerNicknameResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientSetPlayerNicknameResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientSetPlayerNicknameResponse::~CMsgClientSetPlayerNicknameResponse() {
  SharedDtor();
}

void CMsgClientSetPlayerNicknameResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientSetPlayerNicknameResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientSetPlayerNicknameResponse& CMsgClientSetPlayerNicknameResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientSetPlayerNicknameResponse* CMsgClientSetPlayerNicknameResponse::default_instance_ = NULL;

CMsgClientSetPlayerNicknameResponse* CMsgClientSetPlayerNicknameResponse::New() const {
  return new CMsgClientSetPlayerNicknameResponse;
}

void CMsgClientSetPlayerNicknameResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientSetPlayerNicknameResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientSetPlayerNicknameResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 eresult = 1;
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

}

int CMsgClientSetPlayerNicknameResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 eresult = 1;
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientSetPlayerNicknameResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientSetPlayerNicknameResponse*>(&from));
}

void CMsgClientSetPlayerNicknameResponse::MergeFrom(const CMsgClientSetPlayerNicknameResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
  }
}

void CMsgClientSetPlayerNicknameResponse::CopyFrom(const CMsgClientSetPlayerNicknameResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSetPlayerNicknameResponse::IsInitialized() const {

  return true;
}

void CMsgClientSetPlayerNicknameResponse::Swap(CMsgClientSetPlayerNicknameResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientSetPlayerNicknameResponse::GetTypeName() const {
  return "Sc.CMsgClientSetPlayerNicknameResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientLicenseList_License::kPackageIdFieldNumber;
const int CMsgClientLicenseList_License::kTimeCreatedFieldNumber;
const int CMsgClientLicenseList_License::kTimeNextProcessFieldNumber;
const int CMsgClientLicenseList_License::kMinuteLimitFieldNumber;
const int CMsgClientLicenseList_License::kMinutesUsedFieldNumber;
const int CMsgClientLicenseList_License::kPaymentMethodFieldNumber;
const int CMsgClientLicenseList_License::kFlagsFieldNumber;
const int CMsgClientLicenseList_License::kPurchaseCountryCodeFieldNumber;
const int CMsgClientLicenseList_License::kLicenseTypeFieldNumber;
const int CMsgClientLicenseList_License::kTerritoryCodeFieldNumber;
const int CMsgClientLicenseList_License::kChangeNumberFieldNumber;
#endif  // !_MSC_VER

CMsgClientLicenseList_License::CMsgClientLicenseList_License()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientLicenseList_License::InitAsDefaultInstance() {
}

CMsgClientLicenseList_License::CMsgClientLicenseList_License(const CMsgClientLicenseList_License& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientLicenseList_License::SharedCtor() {
  _cached_size_ = 0;
  package_id_ = 0u;
  time_created_ = 0u;
  time_next_process_ = 0u;
  minute_limit_ = 0;
  minutes_used_ = 0;
  payment_method_ = 0u;
  flags_ = 0u;
  purchase_country_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  license_type_ = 0u;
  territory_code_ = 0;
  change_number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientLicenseList_License::~CMsgClientLicenseList_License() {
  SharedDtor();
}

void CMsgClientLicenseList_License::SharedDtor() {
  if (purchase_country_code_ != &::google::protobuf::internal::kEmptyString) {
    delete purchase_country_code_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientLicenseList_License::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientLicenseList_License& CMsgClientLicenseList_License::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientLicenseList_License* CMsgClientLicenseList_License::default_instance_ = NULL;

CMsgClientLicenseList_License* CMsgClientLicenseList_License::New() const {
  return new CMsgClientLicenseList_License;
}

void CMsgClientLicenseList_License::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    package_id_ = 0u;
    time_created_ = 0u;
    time_next_process_ = 0u;
    minute_limit_ = 0;
    minutes_used_ = 0;
    payment_method_ = 0u;
    flags_ = 0u;
    if (has_purchase_country_code()) {
      if (purchase_country_code_ != &::google::protobuf::internal::kEmptyString) {
        purchase_country_code_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    license_type_ = 0u;
    territory_code_ = 0;
    change_number_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientLicenseList_License::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 package_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &package_id_)));
          set_has_package_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_time_created;
        break;
      }

      // optional fixed32 time_created = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_time_created:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &time_created_)));
          set_has_time_created();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_time_next_process;
        break;
      }

      // optional fixed32 time_next_process = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_time_next_process:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &time_next_process_)));
          set_has_time_next_process();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_minute_limit;
        break;
      }

      // optional int32 minute_limit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minute_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minute_limit_)));
          set_has_minute_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_minutes_used;
        break;
      }

      // optional int32 minutes_used = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minutes_used:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minutes_used_)));
          set_has_minutes_used();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_payment_method;
        break;
      }

      // optional uint32 payment_method = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_payment_method:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &payment_method_)));
          set_has_payment_method();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_flags;
        break;
      }

      // optional uint32 flags = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_purchase_country_code;
        break;
      }

      // optional string purchase_country_code = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_purchase_country_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_purchase_country_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_license_type;
        break;
      }

      // optional uint32 license_type = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_license_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &license_type_)));
          set_has_license_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_territory_code;
        break;
      }

      // optional int32 territory_code = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_territory_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &territory_code_)));
          set_has_territory_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_change_number;
        break;
      }

      // optional int32 change_number = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &change_number_)));
          set_has_change_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientLicenseList_License::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 package_id = 1;
  if (has_package_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->package_id(), output);
  }

  // optional fixed32 time_created = 2;
  if (has_time_created()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->time_created(), output);
  }

  // optional fixed32 time_next_process = 3;
  if (has_time_next_process()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->time_next_process(), output);
  }

  // optional int32 minute_limit = 4;
  if (has_minute_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->minute_limit(), output);
  }

  // optional int32 minutes_used = 5;
  if (has_minutes_used()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->minutes_used(), output);
  }

  // optional uint32 payment_method = 6;
  if (has_payment_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->payment_method(), output);
  }

  // optional uint32 flags = 7;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->flags(), output);
  }

  // optional string purchase_country_code = 8;
  if (has_purchase_country_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->purchase_country_code(), output);
  }

  // optional uint32 license_type = 9;
  if (has_license_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->license_type(), output);
  }

  // optional int32 territory_code = 10;
  if (has_territory_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->territory_code(), output);
  }

  // optional int32 change_number = 11;
  if (has_change_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->change_number(), output);
  }

}

int CMsgClientLicenseList_License::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 package_id = 1;
    if (has_package_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->package_id());
    }

    // optional fixed32 time_created = 2;
    if (has_time_created()) {
      total_size += 1 + 4;
    }

    // optional fixed32 time_next_process = 3;
    if (has_time_next_process()) {
      total_size += 1 + 4;
    }

    // optional int32 minute_limit = 4;
    if (has_minute_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minute_limit());
    }

    // optional int32 minutes_used = 5;
    if (has_minutes_used()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minutes_used());
    }

    // optional uint32 payment_method = 6;
    if (has_payment_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->payment_method());
    }

    // optional uint32 flags = 7;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional string purchase_country_code = 8;
    if (has_purchase_country_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->purchase_country_code());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 license_type = 9;
    if (has_license_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->license_type());
    }

    // optional int32 territory_code = 10;
    if (has_territory_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->territory_code());
    }

    // optional int32 change_number = 11;
    if (has_change_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->change_number());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientLicenseList_License::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientLicenseList_License*>(&from));
}

void CMsgClientLicenseList_License::MergeFrom(const CMsgClientLicenseList_License& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_package_id()) {
      set_package_id(from.package_id());
    }
    if (from.has_time_created()) {
      set_time_created(from.time_created());
    }
    if (from.has_time_next_process()) {
      set_time_next_process(from.time_next_process());
    }
    if (from.has_minute_limit()) {
      set_minute_limit(from.minute_limit());
    }
    if (from.has_minutes_used()) {
      set_minutes_used(from.minutes_used());
    }
    if (from.has_payment_method()) {
      set_payment_method(from.payment_method());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_purchase_country_code()) {
      set_purchase_country_code(from.purchase_country_code());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_license_type()) {
      set_license_type(from.license_type());
    }
    if (from.has_territory_code()) {
      set_territory_code(from.territory_code());
    }
    if (from.has_change_number()) {
      set_change_number(from.change_number());
    }
  }
}

void CMsgClientLicenseList_License::CopyFrom(const CMsgClientLicenseList_License& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLicenseList_License::IsInitialized() const {

  return true;
}

void CMsgClientLicenseList_License::Swap(CMsgClientLicenseList_License* other) {
  if (other != this) {
    std::swap(package_id_, other->package_id_);
    std::swap(time_created_, other->time_created_);
    std::swap(time_next_process_, other->time_next_process_);
    std::swap(minute_limit_, other->minute_limit_);
    std::swap(minutes_used_, other->minutes_used_);
    std::swap(payment_method_, other->payment_method_);
    std::swap(flags_, other->flags_);
    std::swap(purchase_country_code_, other->purchase_country_code_);
    std::swap(license_type_, other->license_type_);
    std::swap(territory_code_, other->territory_code_);
    std::swap(change_number_, other->change_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientLicenseList_License::GetTypeName() const {
  return "Sc.CMsgClientLicenseList.License";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientLicenseList::kEresultFieldNumber;
const int CMsgClientLicenseList::kLicensesFieldNumber;
#endif  // !_MSC_VER

CMsgClientLicenseList::CMsgClientLicenseList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientLicenseList::InitAsDefaultInstance() {
}

CMsgClientLicenseList::CMsgClientLicenseList(const CMsgClientLicenseList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientLicenseList::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientLicenseList::~CMsgClientLicenseList() {
  SharedDtor();
}

void CMsgClientLicenseList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientLicenseList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientLicenseList& CMsgClientLicenseList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientLicenseList* CMsgClientLicenseList::default_instance_ = NULL;

CMsgClientLicenseList* CMsgClientLicenseList::New() const {
  return new CMsgClientLicenseList;
}

void CMsgClientLicenseList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
  }
  licenses_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientLicenseList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_licenses;
        break;
      }

      // repeated .Sc.CMsgClientLicenseList.License licenses = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_licenses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_licenses()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_licenses;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientLicenseList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // repeated .Sc.CMsgClientLicenseList.License licenses = 2;
  for (int i = 0; i < this->licenses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->licenses(i), output);
  }

}

int CMsgClientLicenseList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  // repeated .Sc.CMsgClientLicenseList.License licenses = 2;
  total_size += 1 * this->licenses_size();
  for (int i = 0; i < this->licenses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->licenses(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientLicenseList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientLicenseList*>(&from));
}

void CMsgClientLicenseList::MergeFrom(const CMsgClientLicenseList& from) {
  GOOGLE_CHECK_NE(&from, this);
  licenses_.MergeFrom(from.licenses_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
  }
}

void CMsgClientLicenseList::CopyFrom(const CMsgClientLicenseList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLicenseList::IsInitialized() const {

  return true;
}

void CMsgClientLicenseList::Swap(CMsgClientLicenseList* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    licenses_.Swap(&other->licenses_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientLicenseList::GetTypeName() const {
  return "Sc.CMsgClientLicenseList";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientLBSSetScore::kAppIdFieldNumber;
const int CMsgClientLBSSetScore::kLeaderboardIdFieldNumber;
const int CMsgClientLBSSetScore::kScoreFieldNumber;
const int CMsgClientLBSSetScore::kDetailsFieldNumber;
const int CMsgClientLBSSetScore::kUploadScoreMethodFieldNumber;
#endif  // !_MSC_VER

CMsgClientLBSSetScore::CMsgClientLBSSetScore()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientLBSSetScore::InitAsDefaultInstance() {
}

CMsgClientLBSSetScore::CMsgClientLBSSetScore(const CMsgClientLBSSetScore& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientLBSSetScore::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  leaderboard_id_ = 0;
  score_ = 0;
  details_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  upload_score_method_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientLBSSetScore::~CMsgClientLBSSetScore() {
  SharedDtor();
}

void CMsgClientLBSSetScore::SharedDtor() {
  if (details_ != &::google::protobuf::internal::kEmptyString) {
    delete details_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientLBSSetScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientLBSSetScore& CMsgClientLBSSetScore::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientLBSSetScore* CMsgClientLBSSetScore::default_instance_ = NULL;

CMsgClientLBSSetScore* CMsgClientLBSSetScore::New() const {
  return new CMsgClientLBSSetScore;
}

void CMsgClientLBSSetScore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    leaderboard_id_ = 0;
    score_ = 0;
    if (has_details()) {
      if (details_ != &::google::protobuf::internal::kEmptyString) {
        details_->clear();
      }
    }
    upload_score_method_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientLBSSetScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_leaderboard_id;
        break;
      }

      // optional int32 leaderboard_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leaderboard_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leaderboard_id_)));
          set_has_leaderboard_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }

      // optional int32 score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_details;
        break;
      }

      // optional bytes details = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_details()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_upload_score_method;
        break;
      }

      // optional int32 upload_score_method = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upload_score_method:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upload_score_method_)));
          set_has_upload_score_method();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientLBSSetScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional int32 leaderboard_id = 2;
  if (has_leaderboard_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->leaderboard_id(), output);
  }

  // optional int32 score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->score(), output);
  }

  // optional bytes details = 4;
  if (has_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->details(), output);
  }

  // optional int32 upload_score_method = 5;
  if (has_upload_score_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->upload_score_method(), output);
  }

}

int CMsgClientLBSSetScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional int32 leaderboard_id = 2;
    if (has_leaderboard_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leaderboard_id());
    }

    // optional int32 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional bytes details = 4;
    if (has_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->details());
    }

    // optional int32 upload_score_method = 5;
    if (has_upload_score_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upload_score_method());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientLBSSetScore::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientLBSSetScore*>(&from));
}

void CMsgClientLBSSetScore::MergeFrom(const CMsgClientLBSSetScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_leaderboard_id()) {
      set_leaderboard_id(from.leaderboard_id());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_details()) {
      set_details(from.details());
    }
    if (from.has_upload_score_method()) {
      set_upload_score_method(from.upload_score_method());
    }
  }
}

void CMsgClientLBSSetScore::CopyFrom(const CMsgClientLBSSetScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLBSSetScore::IsInitialized() const {

  return true;
}

void CMsgClientLBSSetScore::Swap(CMsgClientLBSSetScore* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(leaderboard_id_, other->leaderboard_id_);
    std::swap(score_, other->score_);
    std::swap(details_, other->details_);
    std::swap(upload_score_method_, other->upload_score_method_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientLBSSetScore::GetTypeName() const {
  return "Sc.CMsgClientLBSSetScore";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientLBSSetScoreResponse::kEresultFieldNumber;
const int CMsgClientLBSSetScoreResponse::kLeaderboardEntryCountFieldNumber;
const int CMsgClientLBSSetScoreResponse::kScoreChangedFieldNumber;
const int CMsgClientLBSSetScoreResponse::kGlobalRankPreviousFieldNumber;
const int CMsgClientLBSSetScoreResponse::kGlobalRankNewFieldNumber;
#endif  // !_MSC_VER

CMsgClientLBSSetScoreResponse::CMsgClientLBSSetScoreResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientLBSSetScoreResponse::InitAsDefaultInstance() {
}

CMsgClientLBSSetScoreResponse::CMsgClientLBSSetScoreResponse(const CMsgClientLBSSetScoreResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientLBSSetScoreResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  leaderboard_entry_count_ = 0;
  score_changed_ = false;
  global_rank_previous_ = 0;
  global_rank_new_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientLBSSetScoreResponse::~CMsgClientLBSSetScoreResponse() {
  SharedDtor();
}

void CMsgClientLBSSetScoreResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientLBSSetScoreResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientLBSSetScoreResponse& CMsgClientLBSSetScoreResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientLBSSetScoreResponse* CMsgClientLBSSetScoreResponse::default_instance_ = NULL;

CMsgClientLBSSetScoreResponse* CMsgClientLBSSetScoreResponse::New() const {
  return new CMsgClientLBSSetScoreResponse;
}

void CMsgClientLBSSetScoreResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    leaderboard_entry_count_ = 0;
    score_changed_ = false;
    global_rank_previous_ = 0;
    global_rank_new_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientLBSSetScoreResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_leaderboard_entry_count;
        break;
      }

      // optional int32 leaderboard_entry_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leaderboard_entry_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leaderboard_entry_count_)));
          set_has_leaderboard_entry_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_score_changed;
        break;
      }

      // optional bool score_changed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score_changed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &score_changed_)));
          set_has_score_changed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_global_rank_previous;
        break;
      }

      // optional int32 global_rank_previous = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_global_rank_previous:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &global_rank_previous_)));
          set_has_global_rank_previous();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_global_rank_new;
        break;
      }

      // optional int32 global_rank_new = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_global_rank_new:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &global_rank_new_)));
          set_has_global_rank_new();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientLBSSetScoreResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional int32 leaderboard_entry_count = 2;
  if (has_leaderboard_entry_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->leaderboard_entry_count(), output);
  }

  // optional bool score_changed = 3;
  if (has_score_changed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->score_changed(), output);
  }

  // optional int32 global_rank_previous = 4;
  if (has_global_rank_previous()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->global_rank_previous(), output);
  }

  // optional int32 global_rank_new = 5;
  if (has_global_rank_new()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->global_rank_new(), output);
  }

}

int CMsgClientLBSSetScoreResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional int32 leaderboard_entry_count = 2;
    if (has_leaderboard_entry_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leaderboard_entry_count());
    }

    // optional bool score_changed = 3;
    if (has_score_changed()) {
      total_size += 1 + 1;
    }

    // optional int32 global_rank_previous = 4;
    if (has_global_rank_previous()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->global_rank_previous());
    }

    // optional int32 global_rank_new = 5;
    if (has_global_rank_new()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->global_rank_new());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientLBSSetScoreResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientLBSSetScoreResponse*>(&from));
}

void CMsgClientLBSSetScoreResponse::MergeFrom(const CMsgClientLBSSetScoreResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_leaderboard_entry_count()) {
      set_leaderboard_entry_count(from.leaderboard_entry_count());
    }
    if (from.has_score_changed()) {
      set_score_changed(from.score_changed());
    }
    if (from.has_global_rank_previous()) {
      set_global_rank_previous(from.global_rank_previous());
    }
    if (from.has_global_rank_new()) {
      set_global_rank_new(from.global_rank_new());
    }
  }
}

void CMsgClientLBSSetScoreResponse::CopyFrom(const CMsgClientLBSSetScoreResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLBSSetScoreResponse::IsInitialized() const {

  return true;
}

void CMsgClientLBSSetScoreResponse::Swap(CMsgClientLBSSetScoreResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(leaderboard_entry_count_, other->leaderboard_entry_count_);
    std::swap(score_changed_, other->score_changed_);
    std::swap(global_rank_previous_, other->global_rank_previous_);
    std::swap(global_rank_new_, other->global_rank_new_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientLBSSetScoreResponse::GetTypeName() const {
  return "Sc.CMsgClientLBSSetScoreResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientLBSSetUGC::kAppIdFieldNumber;
const int CMsgClientLBSSetUGC::kLeaderboardIdFieldNumber;
const int CMsgClientLBSSetUGC::kUgcIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientLBSSetUGC::CMsgClientLBSSetUGC()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientLBSSetUGC::InitAsDefaultInstance() {
}

CMsgClientLBSSetUGC::CMsgClientLBSSetUGC(const CMsgClientLBSSetUGC& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientLBSSetUGC::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  leaderboard_id_ = 0;
  ugc_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientLBSSetUGC::~CMsgClientLBSSetUGC() {
  SharedDtor();
}

void CMsgClientLBSSetUGC::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientLBSSetUGC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientLBSSetUGC& CMsgClientLBSSetUGC::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientLBSSetUGC* CMsgClientLBSSetUGC::default_instance_ = NULL;

CMsgClientLBSSetUGC* CMsgClientLBSSetUGC::New() const {
  return new CMsgClientLBSSetUGC;
}

void CMsgClientLBSSetUGC::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    leaderboard_id_ = 0;
    ugc_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientLBSSetUGC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_leaderboard_id;
        break;
      }

      // optional int32 leaderboard_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leaderboard_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leaderboard_id_)));
          set_has_leaderboard_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_ugc_id;
        break;
      }

      // optional fixed64 ugc_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ugc_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &ugc_id_)));
          set_has_ugc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientLBSSetUGC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional int32 leaderboard_id = 2;
  if (has_leaderboard_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->leaderboard_id(), output);
  }

  // optional fixed64 ugc_id = 3;
  if (has_ugc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->ugc_id(), output);
  }

}

int CMsgClientLBSSetUGC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional int32 leaderboard_id = 2;
    if (has_leaderboard_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leaderboard_id());
    }

    // optional fixed64 ugc_id = 3;
    if (has_ugc_id()) {
      total_size += 1 + 8;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientLBSSetUGC::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientLBSSetUGC*>(&from));
}

void CMsgClientLBSSetUGC::MergeFrom(const CMsgClientLBSSetUGC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_leaderboard_id()) {
      set_leaderboard_id(from.leaderboard_id());
    }
    if (from.has_ugc_id()) {
      set_ugc_id(from.ugc_id());
    }
  }
}

void CMsgClientLBSSetUGC::CopyFrom(const CMsgClientLBSSetUGC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLBSSetUGC::IsInitialized() const {

  return true;
}

void CMsgClientLBSSetUGC::Swap(CMsgClientLBSSetUGC* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(leaderboard_id_, other->leaderboard_id_);
    std::swap(ugc_id_, other->ugc_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientLBSSetUGC::GetTypeName() const {
  return "Sc.CMsgClientLBSSetUGC";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientLBSSetUGCResponse::kEresultFieldNumber;
#endif  // !_MSC_VER

CMsgClientLBSSetUGCResponse::CMsgClientLBSSetUGCResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientLBSSetUGCResponse::InitAsDefaultInstance() {
}

CMsgClientLBSSetUGCResponse::CMsgClientLBSSetUGCResponse(const CMsgClientLBSSetUGCResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientLBSSetUGCResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientLBSSetUGCResponse::~CMsgClientLBSSetUGCResponse() {
  SharedDtor();
}

void CMsgClientLBSSetUGCResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientLBSSetUGCResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientLBSSetUGCResponse& CMsgClientLBSSetUGCResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientLBSSetUGCResponse* CMsgClientLBSSetUGCResponse::default_instance_ = NULL;

CMsgClientLBSSetUGCResponse* CMsgClientLBSSetUGCResponse::New() const {
  return new CMsgClientLBSSetUGCResponse;
}

void CMsgClientLBSSetUGCResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientLBSSetUGCResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientLBSSetUGCResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

}

int CMsgClientLBSSetUGCResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientLBSSetUGCResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientLBSSetUGCResponse*>(&from));
}

void CMsgClientLBSSetUGCResponse::MergeFrom(const CMsgClientLBSSetUGCResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
  }
}

void CMsgClientLBSSetUGCResponse::CopyFrom(const CMsgClientLBSSetUGCResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLBSSetUGCResponse::IsInitialized() const {

  return true;
}

void CMsgClientLBSSetUGCResponse::Swap(CMsgClientLBSSetUGCResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientLBSSetUGCResponse::GetTypeName() const {
  return "Sc.CMsgClientLBSSetUGCResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientLBSFindOrCreateLB::kAppIdFieldNumber;
const int CMsgClientLBSFindOrCreateLB::kLeaderboardSortMethodFieldNumber;
const int CMsgClientLBSFindOrCreateLB::kLeaderboardDisplayTypeFieldNumber;
const int CMsgClientLBSFindOrCreateLB::kCreateIfNotFoundFieldNumber;
const int CMsgClientLBSFindOrCreateLB::kLeaderboardNameFieldNumber;
#endif  // !_MSC_VER

CMsgClientLBSFindOrCreateLB::CMsgClientLBSFindOrCreateLB()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientLBSFindOrCreateLB::InitAsDefaultInstance() {
}

CMsgClientLBSFindOrCreateLB::CMsgClientLBSFindOrCreateLB(const CMsgClientLBSFindOrCreateLB& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientLBSFindOrCreateLB::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  leaderboard_sort_method_ = 0;
  leaderboard_display_type_ = 0;
  create_if_not_found_ = false;
  leaderboard_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientLBSFindOrCreateLB::~CMsgClientLBSFindOrCreateLB() {
  SharedDtor();
}

void CMsgClientLBSFindOrCreateLB::SharedDtor() {
  if (leaderboard_name_ != &::google::protobuf::internal::kEmptyString) {
    delete leaderboard_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientLBSFindOrCreateLB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientLBSFindOrCreateLB& CMsgClientLBSFindOrCreateLB::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientLBSFindOrCreateLB* CMsgClientLBSFindOrCreateLB::default_instance_ = NULL;

CMsgClientLBSFindOrCreateLB* CMsgClientLBSFindOrCreateLB::New() const {
  return new CMsgClientLBSFindOrCreateLB;
}

void CMsgClientLBSFindOrCreateLB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    leaderboard_sort_method_ = 0;
    leaderboard_display_type_ = 0;
    create_if_not_found_ = false;
    if (has_leaderboard_name()) {
      if (leaderboard_name_ != &::google::protobuf::internal::kEmptyString) {
        leaderboard_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientLBSFindOrCreateLB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_leaderboard_sort_method;
        break;
      }

      // optional int32 leaderboard_sort_method = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leaderboard_sort_method:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leaderboard_sort_method_)));
          set_has_leaderboard_sort_method();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_leaderboard_display_type;
        break;
      }

      // optional int32 leaderboard_display_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leaderboard_display_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leaderboard_display_type_)));
          set_has_leaderboard_display_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_create_if_not_found;
        break;
      }

      // optional bool create_if_not_found = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_if_not_found:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &create_if_not_found_)));
          set_has_create_if_not_found();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_leaderboard_name;
        break;
      }

      // optional string leaderboard_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leaderboard_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leaderboard_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientLBSFindOrCreateLB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional int32 leaderboard_sort_method = 2;
  if (has_leaderboard_sort_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->leaderboard_sort_method(), output);
  }

  // optional int32 leaderboard_display_type = 3;
  if (has_leaderboard_display_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->leaderboard_display_type(), output);
  }

  // optional bool create_if_not_found = 4;
  if (has_create_if_not_found()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->create_if_not_found(), output);
  }

  // optional string leaderboard_name = 5;
  if (has_leaderboard_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->leaderboard_name(), output);
  }

}

int CMsgClientLBSFindOrCreateLB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional int32 leaderboard_sort_method = 2;
    if (has_leaderboard_sort_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leaderboard_sort_method());
    }

    // optional int32 leaderboard_display_type = 3;
    if (has_leaderboard_display_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leaderboard_display_type());
    }

    // optional bool create_if_not_found = 4;
    if (has_create_if_not_found()) {
      total_size += 1 + 1;
    }

    // optional string leaderboard_name = 5;
    if (has_leaderboard_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leaderboard_name());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientLBSFindOrCreateLB::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientLBSFindOrCreateLB*>(&from));
}

void CMsgClientLBSFindOrCreateLB::MergeFrom(const CMsgClientLBSFindOrCreateLB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_leaderboard_sort_method()) {
      set_leaderboard_sort_method(from.leaderboard_sort_method());
    }
    if (from.has_leaderboard_display_type()) {
      set_leaderboard_display_type(from.leaderboard_display_type());
    }
    if (from.has_create_if_not_found()) {
      set_create_if_not_found(from.create_if_not_found());
    }
    if (from.has_leaderboard_name()) {
      set_leaderboard_name(from.leaderboard_name());
    }
  }
}

void CMsgClientLBSFindOrCreateLB::CopyFrom(const CMsgClientLBSFindOrCreateLB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLBSFindOrCreateLB::IsInitialized() const {

  return true;
}

void CMsgClientLBSFindOrCreateLB::Swap(CMsgClientLBSFindOrCreateLB* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(leaderboard_sort_method_, other->leaderboard_sort_method_);
    std::swap(leaderboard_display_type_, other->leaderboard_display_type_);
    std::swap(create_if_not_found_, other->create_if_not_found_);
    std::swap(leaderboard_name_, other->leaderboard_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientLBSFindOrCreateLB::GetTypeName() const {
  return "Sc.CMsgClientLBSFindOrCreateLB";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientLBSFindOrCreateLBResponse::kEresultFieldNumber;
const int CMsgClientLBSFindOrCreateLBResponse::kLeaderboardIdFieldNumber;
const int CMsgClientLBSFindOrCreateLBResponse::kLeaderboardEntryCountFieldNumber;
const int CMsgClientLBSFindOrCreateLBResponse::kLeaderboardSortMethodFieldNumber;
const int CMsgClientLBSFindOrCreateLBResponse::kLeaderboardDisplayTypeFieldNumber;
const int CMsgClientLBSFindOrCreateLBResponse::kLeaderboardNameFieldNumber;
#endif  // !_MSC_VER

CMsgClientLBSFindOrCreateLBResponse::CMsgClientLBSFindOrCreateLBResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientLBSFindOrCreateLBResponse::InitAsDefaultInstance() {
}

CMsgClientLBSFindOrCreateLBResponse::CMsgClientLBSFindOrCreateLBResponse(const CMsgClientLBSFindOrCreateLBResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientLBSFindOrCreateLBResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  leaderboard_id_ = 0;
  leaderboard_entry_count_ = 0;
  leaderboard_sort_method_ = 0;
  leaderboard_display_type_ = 0;
  leaderboard_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientLBSFindOrCreateLBResponse::~CMsgClientLBSFindOrCreateLBResponse() {
  SharedDtor();
}

void CMsgClientLBSFindOrCreateLBResponse::SharedDtor() {
  if (leaderboard_name_ != &::google::protobuf::internal::kEmptyString) {
    delete leaderboard_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientLBSFindOrCreateLBResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientLBSFindOrCreateLBResponse& CMsgClientLBSFindOrCreateLBResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientLBSFindOrCreateLBResponse* CMsgClientLBSFindOrCreateLBResponse::default_instance_ = NULL;

CMsgClientLBSFindOrCreateLBResponse* CMsgClientLBSFindOrCreateLBResponse::New() const {
  return new CMsgClientLBSFindOrCreateLBResponse;
}

void CMsgClientLBSFindOrCreateLBResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    leaderboard_id_ = 0;
    leaderboard_entry_count_ = 0;
    leaderboard_sort_method_ = 0;
    leaderboard_display_type_ = 0;
    if (has_leaderboard_name()) {
      if (leaderboard_name_ != &::google::protobuf::internal::kEmptyString) {
        leaderboard_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientLBSFindOrCreateLBResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_leaderboard_id;
        break;
      }

      // optional int32 leaderboard_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leaderboard_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leaderboard_id_)));
          set_has_leaderboard_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_leaderboard_entry_count;
        break;
      }

      // optional int32 leaderboard_entry_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leaderboard_entry_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leaderboard_entry_count_)));
          set_has_leaderboard_entry_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_leaderboard_sort_method;
        break;
      }

      // optional int32 leaderboard_sort_method = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leaderboard_sort_method:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leaderboard_sort_method_)));
          set_has_leaderboard_sort_method();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_leaderboard_display_type;
        break;
      }

      // optional int32 leaderboard_display_type = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leaderboard_display_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leaderboard_display_type_)));
          set_has_leaderboard_display_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_leaderboard_name;
        break;
      }

      // optional string leaderboard_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leaderboard_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leaderboard_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientLBSFindOrCreateLBResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional int32 leaderboard_id = 2;
  if (has_leaderboard_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->leaderboard_id(), output);
  }

  // optional int32 leaderboard_entry_count = 3;
  if (has_leaderboard_entry_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->leaderboard_entry_count(), output);
  }

  // optional int32 leaderboard_sort_method = 4 [default = 0];
  if (has_leaderboard_sort_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->leaderboard_sort_method(), output);
  }

  // optional int32 leaderboard_display_type = 5 [default = 0];
  if (has_leaderboard_display_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->leaderboard_display_type(), output);
  }

  // optional string leaderboard_name = 6;
  if (has_leaderboard_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->leaderboard_name(), output);
  }

}

int CMsgClientLBSFindOrCreateLBResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional int32 leaderboard_id = 2;
    if (has_leaderboard_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leaderboard_id());
    }

    // optional int32 leaderboard_entry_count = 3;
    if (has_leaderboard_entry_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leaderboard_entry_count());
    }

    // optional int32 leaderboard_sort_method = 4 [default = 0];
    if (has_leaderboard_sort_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leaderboard_sort_method());
    }

    // optional int32 leaderboard_display_type = 5 [default = 0];
    if (has_leaderboard_display_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leaderboard_display_type());
    }

    // optional string leaderboard_name = 6;
    if (has_leaderboard_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leaderboard_name());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientLBSFindOrCreateLBResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientLBSFindOrCreateLBResponse*>(&from));
}

void CMsgClientLBSFindOrCreateLBResponse::MergeFrom(const CMsgClientLBSFindOrCreateLBResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_leaderboard_id()) {
      set_leaderboard_id(from.leaderboard_id());
    }
    if (from.has_leaderboard_entry_count()) {
      set_leaderboard_entry_count(from.leaderboard_entry_count());
    }
    if (from.has_leaderboard_sort_method()) {
      set_leaderboard_sort_method(from.leaderboard_sort_method());
    }
    if (from.has_leaderboard_display_type()) {
      set_leaderboard_display_type(from.leaderboard_display_type());
    }
    if (from.has_leaderboard_name()) {
      set_leaderboard_name(from.leaderboard_name());
    }
  }
}

void CMsgClientLBSFindOrCreateLBResponse::CopyFrom(const CMsgClientLBSFindOrCreateLBResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLBSFindOrCreateLBResponse::IsInitialized() const {

  return true;
}

void CMsgClientLBSFindOrCreateLBResponse::Swap(CMsgClientLBSFindOrCreateLBResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(leaderboard_id_, other->leaderboard_id_);
    std::swap(leaderboard_entry_count_, other->leaderboard_entry_count_);
    std::swap(leaderboard_sort_method_, other->leaderboard_sort_method_);
    std::swap(leaderboard_display_type_, other->leaderboard_display_type_);
    std::swap(leaderboard_name_, other->leaderboard_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientLBSFindOrCreateLBResponse::GetTypeName() const {
  return "Sc.CMsgClientLBSFindOrCreateLBResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientLBSGetLBEntries::kAppIdFieldNumber;
const int CMsgClientLBSGetLBEntries::kLeaderboardIdFieldNumber;
const int CMsgClientLBSGetLBEntries::kRangeStartFieldNumber;
const int CMsgClientLBSGetLBEntries::kRangeEndFieldNumber;
const int CMsgClientLBSGetLBEntries::kLeaderboardDataRequestFieldNumber;
const int CMsgClientLBSGetLBEntries::kSteamidsFieldNumber;
#endif  // !_MSC_VER

CMsgClientLBSGetLBEntries::CMsgClientLBSGetLBEntries()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientLBSGetLBEntries::InitAsDefaultInstance() {
}

CMsgClientLBSGetLBEntries::CMsgClientLBSGetLBEntries(const CMsgClientLBSGetLBEntries& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientLBSGetLBEntries::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0;
  leaderboard_id_ = 0;
  range_start_ = 0;
  range_end_ = 0;
  leaderboard_data_request_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientLBSGetLBEntries::~CMsgClientLBSGetLBEntries() {
  SharedDtor();
}

void CMsgClientLBSGetLBEntries::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientLBSGetLBEntries::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientLBSGetLBEntries& CMsgClientLBSGetLBEntries::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientLBSGetLBEntries* CMsgClientLBSGetLBEntries::default_instance_ = NULL;

CMsgClientLBSGetLBEntries* CMsgClientLBSGetLBEntries::New() const {
  return new CMsgClientLBSGetLBEntries;
}

void CMsgClientLBSGetLBEntries::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0;
    leaderboard_id_ = 0;
    range_start_ = 0;
    range_end_ = 0;
    leaderboard_data_request_ = 0;
  }
  steamids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientLBSGetLBEntries::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_leaderboard_id;
        break;
      }

      // optional int32 leaderboard_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leaderboard_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leaderboard_id_)));
          set_has_leaderboard_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_range_start;
        break;
      }

      // optional int32 range_start = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_range_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &range_start_)));
          set_has_range_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_range_end;
        break;
      }

      // optional int32 range_end = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_range_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &range_end_)));
          set_has_range_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_leaderboard_data_request;
        break;
      }

      // optional int32 leaderboard_data_request = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leaderboard_data_request:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leaderboard_data_request_)));
          set_has_leaderboard_data_request();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_steamids;
        break;
      }

      // repeated fixed64 steamids = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steamids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 49, input, this->mutable_steamids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_steamids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_steamids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientLBSGetLBEntries::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->app_id(), output);
  }

  // optional int32 leaderboard_id = 2;
  if (has_leaderboard_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->leaderboard_id(), output);
  }

  // optional int32 range_start = 3;
  if (has_range_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->range_start(), output);
  }

  // optional int32 range_end = 4;
  if (has_range_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->range_end(), output);
  }

  // optional int32 leaderboard_data_request = 5;
  if (has_leaderboard_data_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->leaderboard_data_request(), output);
  }

  // repeated fixed64 steamids = 6;
  for (int i = 0; i < this->steamids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      6, this->steamids(i), output);
  }

}

int CMsgClientLBSGetLBEntries::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->app_id());
    }

    // optional int32 leaderboard_id = 2;
    if (has_leaderboard_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leaderboard_id());
    }

    // optional int32 range_start = 3;
    if (has_range_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->range_start());
    }

    // optional int32 range_end = 4;
    if (has_range_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->range_end());
    }

    // optional int32 leaderboard_data_request = 5;
    if (has_leaderboard_data_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leaderboard_data_request());
    }

  }
  // repeated fixed64 steamids = 6;
  {
    int data_size = 0;
    data_size = 8 * this->steamids_size();
    total_size += 1 * this->steamids_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientLBSGetLBEntries::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientLBSGetLBEntries*>(&from));
}

void CMsgClientLBSGetLBEntries::MergeFrom(const CMsgClientLBSGetLBEntries& from) {
  GOOGLE_CHECK_NE(&from, this);
  steamids_.MergeFrom(from.steamids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_leaderboard_id()) {
      set_leaderboard_id(from.leaderboard_id());
    }
    if (from.has_range_start()) {
      set_range_start(from.range_start());
    }
    if (from.has_range_end()) {
      set_range_end(from.range_end());
    }
    if (from.has_leaderboard_data_request()) {
      set_leaderboard_data_request(from.leaderboard_data_request());
    }
  }
}

void CMsgClientLBSGetLBEntries::CopyFrom(const CMsgClientLBSGetLBEntries& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLBSGetLBEntries::IsInitialized() const {

  return true;
}

void CMsgClientLBSGetLBEntries::Swap(CMsgClientLBSGetLBEntries* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(leaderboard_id_, other->leaderboard_id_);
    std::swap(range_start_, other->range_start_);
    std::swap(range_end_, other->range_end_);
    std::swap(leaderboard_data_request_, other->leaderboard_data_request_);
    steamids_.Swap(&other->steamids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientLBSGetLBEntries::GetTypeName() const {
  return "Sc.CMsgClientLBSGetLBEntries";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientLBSGetLBEntriesResponse_Entry::kSteamIdUserFieldNumber;
const int CMsgClientLBSGetLBEntriesResponse_Entry::kGlobalRankFieldNumber;
const int CMsgClientLBSGetLBEntriesResponse_Entry::kScoreFieldNumber;
const int CMsgClientLBSGetLBEntriesResponse_Entry::kDetailsFieldNumber;
const int CMsgClientLBSGetLBEntriesResponse_Entry::kUgcIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientLBSGetLBEntriesResponse_Entry::CMsgClientLBSGetLBEntriesResponse_Entry()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientLBSGetLBEntriesResponse_Entry::InitAsDefaultInstance() {
}

CMsgClientLBSGetLBEntriesResponse_Entry::CMsgClientLBSGetLBEntriesResponse_Entry(const CMsgClientLBSGetLBEntriesResponse_Entry& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientLBSGetLBEntriesResponse_Entry::SharedCtor() {
  _cached_size_ = 0;
  steam_id_user_ = GOOGLE_ULONGLONG(0);
  global_rank_ = 0;
  score_ = 0;
  details_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ugc_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientLBSGetLBEntriesResponse_Entry::~CMsgClientLBSGetLBEntriesResponse_Entry() {
  SharedDtor();
}

void CMsgClientLBSGetLBEntriesResponse_Entry::SharedDtor() {
  if (details_ != &::google::protobuf::internal::kEmptyString) {
    delete details_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientLBSGetLBEntriesResponse_Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientLBSGetLBEntriesResponse_Entry& CMsgClientLBSGetLBEntriesResponse_Entry::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientLBSGetLBEntriesResponse_Entry* CMsgClientLBSGetLBEntriesResponse_Entry::default_instance_ = NULL;

CMsgClientLBSGetLBEntriesResponse_Entry* CMsgClientLBSGetLBEntriesResponse_Entry::New() const {
  return new CMsgClientLBSGetLBEntriesResponse_Entry;
}

void CMsgClientLBSGetLBEntriesResponse_Entry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_user_ = GOOGLE_ULONGLONG(0);
    global_rank_ = 0;
    score_ = 0;
    if (has_details()) {
      if (details_ != &::google::protobuf::internal::kEmptyString) {
        details_->clear();
      }
    }
    ugc_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientLBSGetLBEntriesResponse_Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id_user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_user_)));
          set_has_steam_id_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_global_rank;
        break;
      }

      // optional int32 global_rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_global_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &global_rank_)));
          set_has_global_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }

      // optional int32 score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_details;
        break;
      }

      // optional bytes details = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_details()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_ugc_id;
        break;
      }

      // optional fixed64 ugc_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ugc_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &ugc_id_)));
          set_has_ugc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientLBSGetLBEntriesResponse_Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steam_id_user = 1;
  if (has_steam_id_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id_user(), output);
  }

  // optional int32 global_rank = 2;
  if (has_global_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->global_rank(), output);
  }

  // optional int32 score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->score(), output);
  }

  // optional bytes details = 4;
  if (has_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->details(), output);
  }

  // optional fixed64 ugc_id = 5;
  if (has_ugc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->ugc_id(), output);
  }

}

int CMsgClientLBSGetLBEntriesResponse_Entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id_user = 1;
    if (has_steam_id_user()) {
      total_size += 1 + 8;
    }

    // optional int32 global_rank = 2;
    if (has_global_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->global_rank());
    }

    // optional int32 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional bytes details = 4;
    if (has_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->details());
    }

    // optional fixed64 ugc_id = 5;
    if (has_ugc_id()) {
      total_size += 1 + 8;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientLBSGetLBEntriesResponse_Entry::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientLBSGetLBEntriesResponse_Entry*>(&from));
}

void CMsgClientLBSGetLBEntriesResponse_Entry::MergeFrom(const CMsgClientLBSGetLBEntriesResponse_Entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id_user()) {
      set_steam_id_user(from.steam_id_user());
    }
    if (from.has_global_rank()) {
      set_global_rank(from.global_rank());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_details()) {
      set_details(from.details());
    }
    if (from.has_ugc_id()) {
      set_ugc_id(from.ugc_id());
    }
  }
}

void CMsgClientLBSGetLBEntriesResponse_Entry::CopyFrom(const CMsgClientLBSGetLBEntriesResponse_Entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLBSGetLBEntriesResponse_Entry::IsInitialized() const {

  return true;
}

void CMsgClientLBSGetLBEntriesResponse_Entry::Swap(CMsgClientLBSGetLBEntriesResponse_Entry* other) {
  if (other != this) {
    std::swap(steam_id_user_, other->steam_id_user_);
    std::swap(global_rank_, other->global_rank_);
    std::swap(score_, other->score_);
    std::swap(details_, other->details_);
    std::swap(ugc_id_, other->ugc_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientLBSGetLBEntriesResponse_Entry::GetTypeName() const {
  return "Sc.CMsgClientLBSGetLBEntriesResponse.Entry";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientLBSGetLBEntriesResponse::kEresultFieldNumber;
const int CMsgClientLBSGetLBEntriesResponse::kLeaderboardEntryCountFieldNumber;
const int CMsgClientLBSGetLBEntriesResponse::kEntriesFieldNumber;
#endif  // !_MSC_VER

CMsgClientLBSGetLBEntriesResponse::CMsgClientLBSGetLBEntriesResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientLBSGetLBEntriesResponse::InitAsDefaultInstance() {
}

CMsgClientLBSGetLBEntriesResponse::CMsgClientLBSGetLBEntriesResponse(const CMsgClientLBSGetLBEntriesResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientLBSGetLBEntriesResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  leaderboard_entry_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientLBSGetLBEntriesResponse::~CMsgClientLBSGetLBEntriesResponse() {
  SharedDtor();
}

void CMsgClientLBSGetLBEntriesResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientLBSGetLBEntriesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientLBSGetLBEntriesResponse& CMsgClientLBSGetLBEntriesResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientLBSGetLBEntriesResponse* CMsgClientLBSGetLBEntriesResponse::default_instance_ = NULL;

CMsgClientLBSGetLBEntriesResponse* CMsgClientLBSGetLBEntriesResponse::New() const {
  return new CMsgClientLBSGetLBEntriesResponse;
}

void CMsgClientLBSGetLBEntriesResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    leaderboard_entry_count_ = 0;
  }
  entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientLBSGetLBEntriesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_leaderboard_entry_count;
        break;
      }

      // optional int32 leaderboard_entry_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leaderboard_entry_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leaderboard_entry_count_)));
          set_has_leaderboard_entry_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_entries;
        break;
      }

      // repeated .Sc.CMsgClientLBSGetLBEntriesResponse.Entry entries = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_entries;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientLBSGetLBEntriesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional int32 leaderboard_entry_count = 2;
  if (has_leaderboard_entry_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->leaderboard_entry_count(), output);
  }

  // repeated .Sc.CMsgClientLBSGetLBEntriesResponse.Entry entries = 3;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->entries(i), output);
  }

}

int CMsgClientLBSGetLBEntriesResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional int32 leaderboard_entry_count = 2;
    if (has_leaderboard_entry_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leaderboard_entry_count());
    }

  }
  // repeated .Sc.CMsgClientLBSGetLBEntriesResponse.Entry entries = 3;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientLBSGetLBEntriesResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientLBSGetLBEntriesResponse*>(&from));
}

void CMsgClientLBSGetLBEntriesResponse::MergeFrom(const CMsgClientLBSGetLBEntriesResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  entries_.MergeFrom(from.entries_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_leaderboard_entry_count()) {
      set_leaderboard_entry_count(from.leaderboard_entry_count());
    }
  }
}

void CMsgClientLBSGetLBEntriesResponse::CopyFrom(const CMsgClientLBSGetLBEntriesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLBSGetLBEntriesResponse::IsInitialized() const {

  return true;
}

void CMsgClientLBSGetLBEntriesResponse::Swap(CMsgClientLBSGetLBEntriesResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(leaderboard_entry_count_, other->leaderboard_entry_count_);
    entries_.Swap(&other->entries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientLBSGetLBEntriesResponse::GetTypeName() const {
  return "Sc.CMsgClientLBSGetLBEntriesResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientAccountInfo::kPersonaNameFieldNumber;
const int CMsgClientAccountInfo::kIpCountryFieldNumber;
const int CMsgClientAccountInfo::kSaltPasswordFieldNumber;
const int CMsgClientAccountInfo::kShaDigestPasswordFieldNumber;
const int CMsgClientAccountInfo::kCountAuthedComputersFieldNumber;
const int CMsgClientAccountInfo::kLockedWithIptFieldNumber;
const int CMsgClientAccountInfo::kAccountFlagsFieldNumber;
const int CMsgClientAccountInfo::kFacebookIdFieldNumber;
const int CMsgClientAccountInfo::kFacebookNameFieldNumber;
const int CMsgClientAccountInfo::kSteamGuardProviderFieldNumber;
const int CMsgClientAccountInfo::kSteamguardRequireCodeDefaultFieldNumber;
const int CMsgClientAccountInfo::kSteamguardShowProvidersFieldNumber;
const int CMsgClientAccountInfo::kSteamguardCanUseMobileProviderFieldNumber;
const int CMsgClientAccountInfo::kSteamguardNotifyNewmachinesFieldNumber;
#endif  // !_MSC_VER

CMsgClientAccountInfo::CMsgClientAccountInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientAccountInfo::InitAsDefaultInstance() {
}

CMsgClientAccountInfo::CMsgClientAccountInfo(const CMsgClientAccountInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientAccountInfo::SharedCtor() {
  _cached_size_ = 0;
  persona_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_country_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  salt_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sha_digest_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  count_authed_computers_ = 0;
  locked_with_ipt_ = false;
  account_flags_ = 0u;
  facebook_id_ = GOOGLE_ULONGLONG(0);
  facebook_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  steam_guard_provider_ = 0;
  steamguard_require_code_default_ = false;
  steamguard_show_providers_ = false;
  steamguard_can_use_mobile_provider_ = false;
  steamguard_notify_newmachines_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientAccountInfo::~CMsgClientAccountInfo() {
  SharedDtor();
}

void CMsgClientAccountInfo::SharedDtor() {
  if (persona_name_ != &::google::protobuf::internal::kEmptyString) {
    delete persona_name_;
  }
  if (ip_country_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_country_;
  }
  if (salt_password_ != &::google::protobuf::internal::kEmptyString) {
    delete salt_password_;
  }
  if (sha_digest_password_ != &::google::protobuf::internal::kEmptyString) {
    delete sha_digest_password_;
  }
  if (facebook_name_ != &::google::protobuf::internal::kEmptyString) {
    delete facebook_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientAccountInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientAccountInfo& CMsgClientAccountInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientAccountInfo* CMsgClientAccountInfo::default_instance_ = NULL;

CMsgClientAccountInfo* CMsgClientAccountInfo::New() const {
  return new CMsgClientAccountInfo;
}

void CMsgClientAccountInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_persona_name()) {
      if (persona_name_ != &::google::protobuf::internal::kEmptyString) {
        persona_name_->clear();
      }
    }
    if (has_ip_country()) {
      if (ip_country_ != &::google::protobuf::internal::kEmptyString) {
        ip_country_->clear();
      }
    }
    if (has_salt_password()) {
      if (salt_password_ != &::google::protobuf::internal::kEmptyString) {
        salt_password_->clear();
      }
    }
    if (has_sha_digest_password()) {
      if (sha_digest_password_ != &::google::protobuf::internal::kEmptyString) {
        sha_digest_password_->clear();
      }
    }
    count_authed_computers_ = 0;
    locked_with_ipt_ = false;
    account_flags_ = 0u;
    facebook_id_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_facebook_name()) {
      if (facebook_name_ != &::google::protobuf::internal::kEmptyString) {
        facebook_name_->clear();
      }
    }
    steam_guard_provider_ = 0;
    steamguard_require_code_default_ = false;
    steamguard_show_providers_ = false;
    steamguard_can_use_mobile_provider_ = false;
    steamguard_notify_newmachines_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientAccountInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string persona_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip_country;
        break;
      }

      // optional string ip_country = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip_country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_country()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_salt_password;
        break;
      }

      // optional bytes salt_password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_salt_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_salt_password()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sha_digest_Password;
        break;
      }

      // optional bytes sha_digest_Password = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sha_digest_Password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha_digest_password()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_count_authed_computers;
        break;
      }

      // optional int32 count_authed_computers = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count_authed_computers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_authed_computers_)));
          set_has_count_authed_computers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_locked_with_ipt;
        break;
      }

      // optional bool locked_with_ipt = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_locked_with_ipt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &locked_with_ipt_)));
          set_has_locked_with_ipt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_account_flags;
        break;
      }

      // optional uint32 account_flags = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_flags_)));
          set_has_account_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_facebook_id;
        break;
      }

      // optional uint64 facebook_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_facebook_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &facebook_id_)));
          set_has_facebook_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_facebook_name;
        break;
      }

      // optional string facebook_name = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_facebook_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_facebook_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_steam_guard_provider;
        break;
      }

      // optional int32 steam_guard_provider = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_steam_guard_provider:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &steam_guard_provider_)));
          set_has_steam_guard_provider();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_steamguard_require_code_default;
        break;
      }

      // optional bool steamguard_require_code_default = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_steamguard_require_code_default:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &steamguard_require_code_default_)));
          set_has_steamguard_require_code_default();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_steamguard_show_providers;
        break;
      }

      // optional bool steamguard_show_providers = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_steamguard_show_providers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &steamguard_show_providers_)));
          set_has_steamguard_show_providers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_steamguard_can_use_mobile_provider;
        break;
      }

      // optional bool steamguard_can_use_mobile_provider = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_steamguard_can_use_mobile_provider:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &steamguard_can_use_mobile_provider_)));
          set_has_steamguard_can_use_mobile_provider();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_steamguard_notify_newmachines;
        break;
      }

      // optional bool steamguard_notify_newmachines = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_steamguard_notify_newmachines:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &steamguard_notify_newmachines_)));
          set_has_steamguard_notify_newmachines();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientAccountInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string persona_name = 1;
  if (has_persona_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->persona_name(), output);
  }

  // optional string ip_country = 2;
  if (has_ip_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip_country(), output);
  }

  // optional bytes salt_password = 3;
  if (has_salt_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->salt_password(), output);
  }

  // optional bytes sha_digest_Password = 4;
  if (has_sha_digest_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->sha_digest_password(), output);
  }

  // optional int32 count_authed_computers = 5;
  if (has_count_authed_computers()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->count_authed_computers(), output);
  }

  // optional bool locked_with_ipt = 6;
  if (has_locked_with_ipt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->locked_with_ipt(), output);
  }

  // optional uint32 account_flags = 7;
  if (has_account_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->account_flags(), output);
  }

  // optional uint64 facebook_id = 8;
  if (has_facebook_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->facebook_id(), output);
  }

  // optional string facebook_name = 9;
  if (has_facebook_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->facebook_name(), output);
  }

  // optional int32 steam_guard_provider = 10;
  if (has_steam_guard_provider()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->steam_guard_provider(), output);
  }

  // optional bool steamguard_require_code_default = 11;
  if (has_steamguard_require_code_default()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->steamguard_require_code_default(), output);
  }

  // optional bool steamguard_show_providers = 12;
  if (has_steamguard_show_providers()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->steamguard_show_providers(), output);
  }

  // optional bool steamguard_can_use_mobile_provider = 13;
  if (has_steamguard_can_use_mobile_provider()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->steamguard_can_use_mobile_provider(), output);
  }

  // optional bool steamguard_notify_newmachines = 14;
  if (has_steamguard_notify_newmachines()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->steamguard_notify_newmachines(), output);
  }

}

int CMsgClientAccountInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string persona_name = 1;
    if (has_persona_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona_name());
    }

    // optional string ip_country = 2;
    if (has_ip_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip_country());
    }

    // optional bytes salt_password = 3;
    if (has_salt_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->salt_password());
    }

    // optional bytes sha_digest_Password = 4;
    if (has_sha_digest_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha_digest_password());
    }

    // optional int32 count_authed_computers = 5;
    if (has_count_authed_computers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count_authed_computers());
    }

    // optional bool locked_with_ipt = 6;
    if (has_locked_with_ipt()) {
      total_size += 1 + 1;
    }

    // optional uint32 account_flags = 7;
    if (has_account_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_flags());
    }

    // optional uint64 facebook_id = 8;
    if (has_facebook_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->facebook_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string facebook_name = 9;
    if (has_facebook_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->facebook_name());
    }

    // optional int32 steam_guard_provider = 10;
    if (has_steam_guard_provider()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->steam_guard_provider());
    }

    // optional bool steamguard_require_code_default = 11;
    if (has_steamguard_require_code_default()) {
      total_size += 1 + 1;
    }

    // optional bool steamguard_show_providers = 12;
    if (has_steamguard_show_providers()) {
      total_size += 1 + 1;
    }

    // optional bool steamguard_can_use_mobile_provider = 13;
    if (has_steamguard_can_use_mobile_provider()) {
      total_size += 1 + 1;
    }

    // optional bool steamguard_notify_newmachines = 14;
    if (has_steamguard_notify_newmachines()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAccountInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientAccountInfo*>(&from));
}

void CMsgClientAccountInfo::MergeFrom(const CMsgClientAccountInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_persona_name()) {
      set_persona_name(from.persona_name());
    }
    if (from.has_ip_country()) {
      set_ip_country(from.ip_country());
    }
    if (from.has_salt_password()) {
      set_salt_password(from.salt_password());
    }
    if (from.has_sha_digest_password()) {
      set_sha_digest_password(from.sha_digest_password());
    }
    if (from.has_count_authed_computers()) {
      set_count_authed_computers(from.count_authed_computers());
    }
    if (from.has_locked_with_ipt()) {
      set_locked_with_ipt(from.locked_with_ipt());
    }
    if (from.has_account_flags()) {
      set_account_flags(from.account_flags());
    }
    if (from.has_facebook_id()) {
      set_facebook_id(from.facebook_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_facebook_name()) {
      set_facebook_name(from.facebook_name());
    }
    if (from.has_steam_guard_provider()) {
      set_steam_guard_provider(from.steam_guard_provider());
    }
    if (from.has_steamguard_require_code_default()) {
      set_steamguard_require_code_default(from.steamguard_require_code_default());
    }
    if (from.has_steamguard_show_providers()) {
      set_steamguard_show_providers(from.steamguard_show_providers());
    }
    if (from.has_steamguard_can_use_mobile_provider()) {
      set_steamguard_can_use_mobile_provider(from.steamguard_can_use_mobile_provider());
    }
    if (from.has_steamguard_notify_newmachines()) {
      set_steamguard_notify_newmachines(from.steamguard_notify_newmachines());
    }
  }
}

void CMsgClientAccountInfo::CopyFrom(const CMsgClientAccountInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAccountInfo::IsInitialized() const {

  return true;
}

void CMsgClientAccountInfo::Swap(CMsgClientAccountInfo* other) {
  if (other != this) {
    std::swap(persona_name_, other->persona_name_);
    std::swap(ip_country_, other->ip_country_);
    std::swap(salt_password_, other->salt_password_);
    std::swap(sha_digest_password_, other->sha_digest_password_);
    std::swap(count_authed_computers_, other->count_authed_computers_);
    std::swap(locked_with_ipt_, other->locked_with_ipt_);
    std::swap(account_flags_, other->account_flags_);
    std::swap(facebook_id_, other->facebook_id_);
    std::swap(facebook_name_, other->facebook_name_);
    std::swap(steam_guard_provider_, other->steam_guard_provider_);
    std::swap(steamguard_require_code_default_, other->steamguard_require_code_default_);
    std::swap(steamguard_show_providers_, other->steamguard_show_providers_);
    std::swap(steamguard_can_use_mobile_provider_, other->steamguard_can_use_mobile_provider_);
    std::swap(steamguard_notify_newmachines_, other->steamguard_notify_newmachines_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientAccountInfo::GetTypeName() const {
  return "Sc.CMsgClientAccountInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::kAppIdFieldNumber;
const int CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::kForeverFieldNumber;
const int CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::kLastTwoWeeksFieldNumber;
#endif  // !_MSC_VER

CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::CMsgClientAppMinutesPlayedData_AppMinutesPlayedData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::InitAsDefaultInstance() {
}

CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::CMsgClientAppMinutesPlayedData_AppMinutesPlayedData(const CMsgClientAppMinutesPlayedData_AppMinutesPlayedData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  forever_ = 0;
  last_two_weeks_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::~CMsgClientAppMinutesPlayedData_AppMinutesPlayedData() {
  SharedDtor();
}

void CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientAppMinutesPlayedData_AppMinutesPlayedData& CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientAppMinutesPlayedData_AppMinutesPlayedData* CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::default_instance_ = NULL;

CMsgClientAppMinutesPlayedData_AppMinutesPlayedData* CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::New() const {
  return new CMsgClientAppMinutesPlayedData_AppMinutesPlayedData;
}

void CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    forever_ = 0;
    last_two_weeks_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_forever;
        break;
      }

      // optional int32 forever = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forever:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &forever_)));
          set_has_forever();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_last_two_weeks;
        break;
      }

      // optional int32 last_two_weeks = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_two_weeks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_two_weeks_)));
          set_has_last_two_weeks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional int32 forever = 2;
  if (has_forever()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->forever(), output);
  }

  // optional int32 last_two_weeks = 3;
  if (has_last_two_weeks()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->last_two_weeks(), output);
  }

}

int CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional int32 forever = 2;
    if (has_forever()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->forever());
    }

    // optional int32 last_two_weeks = 3;
    if (has_last_two_weeks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_two_weeks());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientAppMinutesPlayedData_AppMinutesPlayedData*>(&from));
}

void CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::MergeFrom(const CMsgClientAppMinutesPlayedData_AppMinutesPlayedData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_forever()) {
      set_forever(from.forever());
    }
    if (from.has_last_two_weeks()) {
      set_last_two_weeks(from.last_two_weeks());
    }
  }
}

void CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::CopyFrom(const CMsgClientAppMinutesPlayedData_AppMinutesPlayedData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::IsInitialized() const {

  return true;
}

void CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::Swap(CMsgClientAppMinutesPlayedData_AppMinutesPlayedData* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(forever_, other->forever_);
    std::swap(last_two_weeks_, other->last_two_weeks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientAppMinutesPlayedData_AppMinutesPlayedData::GetTypeName() const {
  return "Sc.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientAppMinutesPlayedData::kMinutesPlayedFieldNumber;
#endif  // !_MSC_VER

CMsgClientAppMinutesPlayedData::CMsgClientAppMinutesPlayedData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientAppMinutesPlayedData::InitAsDefaultInstance() {
}

CMsgClientAppMinutesPlayedData::CMsgClientAppMinutesPlayedData(const CMsgClientAppMinutesPlayedData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientAppMinutesPlayedData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientAppMinutesPlayedData::~CMsgClientAppMinutesPlayedData() {
  SharedDtor();
}

void CMsgClientAppMinutesPlayedData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientAppMinutesPlayedData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientAppMinutesPlayedData& CMsgClientAppMinutesPlayedData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientAppMinutesPlayedData* CMsgClientAppMinutesPlayedData::default_instance_ = NULL;

CMsgClientAppMinutesPlayedData* CMsgClientAppMinutesPlayedData::New() const {
  return new CMsgClientAppMinutesPlayedData;
}

void CMsgClientAppMinutesPlayedData::Clear() {
  minutes_played_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientAppMinutesPlayedData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Sc.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData minutes_played = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_minutes_played:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_minutes_played()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_minutes_played;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientAppMinutesPlayedData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Sc.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData minutes_played = 1;
  for (int i = 0; i < this->minutes_played_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->minutes_played(i), output);
  }

}

int CMsgClientAppMinutesPlayedData::ByteSize() const {
  int total_size = 0;

  // repeated .Sc.CMsgClientAppMinutesPlayedData.AppMinutesPlayedData minutes_played = 1;
  total_size += 1 * this->minutes_played_size();
  for (int i = 0; i < this->minutes_played_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->minutes_played(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAppMinutesPlayedData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientAppMinutesPlayedData*>(&from));
}

void CMsgClientAppMinutesPlayedData::MergeFrom(const CMsgClientAppMinutesPlayedData& from) {
  GOOGLE_CHECK_NE(&from, this);
  minutes_played_.MergeFrom(from.minutes_played_);
}

void CMsgClientAppMinutesPlayedData::CopyFrom(const CMsgClientAppMinutesPlayedData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAppMinutesPlayedData::IsInitialized() const {

  return true;
}

void CMsgClientAppMinutesPlayedData::Swap(CMsgClientAppMinutesPlayedData* other) {
  if (other != this) {
    minutes_played_.Swap(&other->minutes_played_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientAppMinutesPlayedData::GetTypeName() const {
  return "Sc.CMsgClientAppMinutesPlayedData";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientIsLimitedAccount::kBisLimitedAccountFieldNumber;
const int CMsgClientIsLimitedAccount::kBisCommunityBannedFieldNumber;
const int CMsgClientIsLimitedAccount::kBisLockedAccountFieldNumber;
#endif  // !_MSC_VER

CMsgClientIsLimitedAccount::CMsgClientIsLimitedAccount()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientIsLimitedAccount::InitAsDefaultInstance() {
}

CMsgClientIsLimitedAccount::CMsgClientIsLimitedAccount(const CMsgClientIsLimitedAccount& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientIsLimitedAccount::SharedCtor() {
  _cached_size_ = 0;
  bis_limited_account_ = false;
  bis_community_banned_ = false;
  bis_locked_account_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientIsLimitedAccount::~CMsgClientIsLimitedAccount() {
  SharedDtor();
}

void CMsgClientIsLimitedAccount::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientIsLimitedAccount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientIsLimitedAccount& CMsgClientIsLimitedAccount::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientIsLimitedAccount* CMsgClientIsLimitedAccount::default_instance_ = NULL;

CMsgClientIsLimitedAccount* CMsgClientIsLimitedAccount::New() const {
  return new CMsgClientIsLimitedAccount;
}

void CMsgClientIsLimitedAccount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bis_limited_account_ = false;
    bis_community_banned_ = false;
    bis_locked_account_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientIsLimitedAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool bis_limited_account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bis_limited_account_)));
          set_has_bis_limited_account();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bis_community_banned;
        break;
      }

      // optional bool bis_community_banned = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bis_community_banned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bis_community_banned_)));
          set_has_bis_community_banned();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bis_locked_account;
        break;
      }

      // optional bool bis_locked_account = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bis_locked_account:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bis_locked_account_)));
          set_has_bis_locked_account();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientIsLimitedAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool bis_limited_account = 1;
  if (has_bis_limited_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bis_limited_account(), output);
  }

  // optional bool bis_community_banned = 2;
  if (has_bis_community_banned()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bis_community_banned(), output);
  }

  // optional bool bis_locked_account = 3;
  if (has_bis_locked_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bis_locked_account(), output);
  }

}

int CMsgClientIsLimitedAccount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool bis_limited_account = 1;
    if (has_bis_limited_account()) {
      total_size += 1 + 1;
    }

    // optional bool bis_community_banned = 2;
    if (has_bis_community_banned()) {
      total_size += 1 + 1;
    }

    // optional bool bis_locked_account = 3;
    if (has_bis_locked_account()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientIsLimitedAccount::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientIsLimitedAccount*>(&from));
}

void CMsgClientIsLimitedAccount::MergeFrom(const CMsgClientIsLimitedAccount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bis_limited_account()) {
      set_bis_limited_account(from.bis_limited_account());
    }
    if (from.has_bis_community_banned()) {
      set_bis_community_banned(from.bis_community_banned());
    }
    if (from.has_bis_locked_account()) {
      set_bis_locked_account(from.bis_locked_account());
    }
  }
}

void CMsgClientIsLimitedAccount::CopyFrom(const CMsgClientIsLimitedAccount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientIsLimitedAccount::IsInitialized() const {

  return true;
}

void CMsgClientIsLimitedAccount::Swap(CMsgClientIsLimitedAccount* other) {
  if (other != this) {
    std::swap(bis_limited_account_, other->bis_limited_account_);
    std::swap(bis_community_banned_, other->bis_community_banned_);
    std::swap(bis_locked_account_, other->bis_locked_account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientIsLimitedAccount::GetTypeName() const {
  return "Sc.CMsgClientIsLimitedAccount";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientRequestFriendData::kPersonaStateRequestedFieldNumber;
const int CMsgClientRequestFriendData::kFriendsFieldNumber;
#endif  // !_MSC_VER

CMsgClientRequestFriendData::CMsgClientRequestFriendData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientRequestFriendData::InitAsDefaultInstance() {
}

CMsgClientRequestFriendData::CMsgClientRequestFriendData(const CMsgClientRequestFriendData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRequestFriendData::SharedCtor() {
  _cached_size_ = 0;
  persona_state_requested_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRequestFriendData::~CMsgClientRequestFriendData() {
  SharedDtor();
}

void CMsgClientRequestFriendData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientRequestFriendData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientRequestFriendData& CMsgClientRequestFriendData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientRequestFriendData* CMsgClientRequestFriendData::default_instance_ = NULL;

CMsgClientRequestFriendData* CMsgClientRequestFriendData::New() const {
  return new CMsgClientRequestFriendData;
}

void CMsgClientRequestFriendData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    persona_state_requested_ = 0u;
  }
  friends_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientRequestFriendData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 persona_state_requested = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &persona_state_requested_)));
          set_has_persona_state_requested();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_friends;
        break;
      }

      // repeated fixed64 friends = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_friends:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 17, input, this->mutable_friends())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_friends())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_friends;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientRequestFriendData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 persona_state_requested = 1;
  if (has_persona_state_requested()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->persona_state_requested(), output);
  }

  // repeated fixed64 friends = 2;
  for (int i = 0; i < this->friends_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      2, this->friends(i), output);
  }

}

int CMsgClientRequestFriendData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 persona_state_requested = 1;
    if (has_persona_state_requested()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->persona_state_requested());
    }

  }
  // repeated fixed64 friends = 2;
  {
    int data_size = 0;
    data_size = 8 * this->friends_size();
    total_size += 1 * this->friends_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRequestFriendData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientRequestFriendData*>(&from));
}

void CMsgClientRequestFriendData::MergeFrom(const CMsgClientRequestFriendData& from) {
  GOOGLE_CHECK_NE(&from, this);
  friends_.MergeFrom(from.friends_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_persona_state_requested()) {
      set_persona_state_requested(from.persona_state_requested());
    }
  }
}

void CMsgClientRequestFriendData::CopyFrom(const CMsgClientRequestFriendData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestFriendData::IsInitialized() const {

  return true;
}

void CMsgClientRequestFriendData::Swap(CMsgClientRequestFriendData* other) {
  if (other != this) {
    std::swap(persona_state_requested_, other->persona_state_requested_);
    friends_.Swap(&other->friends_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientRequestFriendData::GetTypeName() const {
  return "Sc.CMsgClientRequestFriendData";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientChangeStatus::kPersonaStateFieldNumber;
const int CMsgClientChangeStatus::kPlayerNameFieldNumber;
const int CMsgClientChangeStatus::kIsAutoGeneratedNameFieldNumber;
const int CMsgClientChangeStatus::kHighPriorityFieldNumber;
#endif  // !_MSC_VER

CMsgClientChangeStatus::CMsgClientChangeStatus()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientChangeStatus::InitAsDefaultInstance() {
}

CMsgClientChangeStatus::CMsgClientChangeStatus(const CMsgClientChangeStatus& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientChangeStatus::SharedCtor() {
  _cached_size_ = 0;
  persona_state_ = 0u;
  player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_auto_generated_name_ = false;
  high_priority_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientChangeStatus::~CMsgClientChangeStatus() {
  SharedDtor();
}

void CMsgClientChangeStatus::SharedDtor() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientChangeStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientChangeStatus& CMsgClientChangeStatus::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientChangeStatus* CMsgClientChangeStatus::default_instance_ = NULL;

CMsgClientChangeStatus* CMsgClientChangeStatus::New() const {
  return new CMsgClientChangeStatus;
}

void CMsgClientChangeStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    persona_state_ = 0u;
    if (has_player_name()) {
      if (player_name_ != &::google::protobuf::internal::kEmptyString) {
        player_name_->clear();
      }
    }
    is_auto_generated_name_ = false;
    high_priority_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientChangeStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 persona_state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &persona_state_)));
          set_has_persona_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_name;
        break;
      }

      // optional string player_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_auto_generated_name;
        break;
      }

      // optional bool is_auto_generated_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_auto_generated_name:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_auto_generated_name_)));
          set_has_is_auto_generated_name();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_high_priority;
        break;
      }

      // optional bool high_priority = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_high_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &high_priority_)));
          set_has_high_priority();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientChangeStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 persona_state = 1;
  if (has_persona_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->persona_state(), output);
  }

  // optional string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->player_name(), output);
  }

  // optional bool is_auto_generated_name = 3;
  if (has_is_auto_generated_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_auto_generated_name(), output);
  }

  // optional bool high_priority = 4;
  if (has_high_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->high_priority(), output);
  }

}

int CMsgClientChangeStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 persona_state = 1;
    if (has_persona_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->persona_state());
    }

    // optional string player_name = 2;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional bool is_auto_generated_name = 3;
    if (has_is_auto_generated_name()) {
      total_size += 1 + 1;
    }

    // optional bool high_priority = 4;
    if (has_high_priority()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientChangeStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientChangeStatus*>(&from));
}

void CMsgClientChangeStatus::MergeFrom(const CMsgClientChangeStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_persona_state()) {
      set_persona_state(from.persona_state());
    }
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
    if (from.has_is_auto_generated_name()) {
      set_is_auto_generated_name(from.is_auto_generated_name());
    }
    if (from.has_high_priority()) {
      set_high_priority(from.high_priority());
    }
  }
}

void CMsgClientChangeStatus::CopyFrom(const CMsgClientChangeStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientChangeStatus::IsInitialized() const {

  return true;
}

void CMsgClientChangeStatus::Swap(CMsgClientChangeStatus* other) {
  if (other != this) {
    std::swap(persona_state_, other->persona_state_);
    std::swap(player_name_, other->player_name_);
    std::swap(is_auto_generated_name_, other->is_auto_generated_name_);
    std::swap(high_priority_, other->high_priority_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientChangeStatus::GetTypeName() const {
  return "Sc.CMsgClientChangeStatus";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPersonaChangeResponse::kResultFieldNumber;
const int CMsgPersonaChangeResponse::kPlayerNameFieldNumber;
#endif  // !_MSC_VER

CMsgPersonaChangeResponse::CMsgPersonaChangeResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgPersonaChangeResponse::InitAsDefaultInstance() {
}

CMsgPersonaChangeResponse::CMsgPersonaChangeResponse(const CMsgPersonaChangeResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgPersonaChangeResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPersonaChangeResponse::~CMsgPersonaChangeResponse() {
  SharedDtor();
}

void CMsgPersonaChangeResponse::SharedDtor() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgPersonaChangeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgPersonaChangeResponse& CMsgPersonaChangeResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgPersonaChangeResponse* CMsgPersonaChangeResponse::default_instance_ = NULL;

CMsgPersonaChangeResponse* CMsgPersonaChangeResponse::New() const {
  return new CMsgPersonaChangeResponse;
}

void CMsgPersonaChangeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (has_player_name()) {
      if (player_name_ != &::google::protobuf::internal::kEmptyString) {
        player_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgPersonaChangeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_name;
        break;
      }

      // optional string player_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgPersonaChangeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->player_name(), output);
  }

}

int CMsgPersonaChangeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional string player_name = 2;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPersonaChangeResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgPersonaChangeResponse*>(&from));
}

void CMsgPersonaChangeResponse::MergeFrom(const CMsgPersonaChangeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
  }
}

void CMsgPersonaChangeResponse::CopyFrom(const CMsgPersonaChangeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPersonaChangeResponse::IsInitialized() const {

  return true;
}

void CMsgPersonaChangeResponse::Swap(CMsgPersonaChangeResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(player_name_, other->player_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgPersonaChangeResponse::GetTypeName() const {
  return "Sc.CMsgPersonaChangeResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientPersonaState_Friend::kFriendidFieldNumber;
const int CMsgClientPersonaState_Friend::kPersonaStateFieldNumber;
const int CMsgClientPersonaState_Friend::kGamePlayedAppIdFieldNumber;
const int CMsgClientPersonaState_Friend::kGameServerIpFieldNumber;
const int CMsgClientPersonaState_Friend::kGameServerPortFieldNumber;
const int CMsgClientPersonaState_Friend::kPersonaStateFlagsFieldNumber;
const int CMsgClientPersonaState_Friend::kOnlineSessionInstancesFieldNumber;
const int CMsgClientPersonaState_Friend::kPublishedInstanceIdFieldNumber;
const int CMsgClientPersonaState_Friend::kPlayerNameFieldNumber;
const int CMsgClientPersonaState_Friend::kQueryPortFieldNumber;
const int CMsgClientPersonaState_Friend::kSteamidSourceFieldNumber;
const int CMsgClientPersonaState_Friend::kAvatarHashFieldNumber;
const int CMsgClientPersonaState_Friend::kLastLogoffFieldNumber;
const int CMsgClientPersonaState_Friend::kLastLogonFieldNumber;
const int CMsgClientPersonaState_Friend::kClanRankFieldNumber;
const int CMsgClientPersonaState_Friend::kGameNameFieldNumber;
const int CMsgClientPersonaState_Friend::kGameidFieldNumber;
const int CMsgClientPersonaState_Friend::kGameDataBlobFieldNumber;
const int CMsgClientPersonaState_Friend::kClanTagFieldNumber;
const int CMsgClientPersonaState_Friend::kFacebookNameFieldNumber;
const int CMsgClientPersonaState_Friend::kFacebookIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientPersonaState_Friend::CMsgClientPersonaState_Friend()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientPersonaState_Friend::InitAsDefaultInstance() {
}

CMsgClientPersonaState_Friend::CMsgClientPersonaState_Friend(const CMsgClientPersonaState_Friend& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientPersonaState_Friend::SharedCtor() {
  _cached_size_ = 0;
  friendid_ = GOOGLE_ULONGLONG(0);
  persona_state_ = 0u;
  game_played_app_id_ = 0u;
  game_server_ip_ = 0u;
  game_server_port_ = 0u;
  persona_state_flags_ = 0u;
  online_session_instances_ = 0u;
  published_instance_id_ = 0u;
  player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  query_port_ = 0u;
  steamid_source_ = GOOGLE_ULONGLONG(0);
  avatar_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  last_logoff_ = 0u;
  last_logon_ = 0u;
  clan_rank_ = 0u;
  game_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gameid_ = GOOGLE_ULONGLONG(0);
  game_data_blob_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clan_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  facebook_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  facebook_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientPersonaState_Friend::~CMsgClientPersonaState_Friend() {
  SharedDtor();
}

void CMsgClientPersonaState_Friend::SharedDtor() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (avatar_hash_ != &::google::protobuf::internal::kEmptyString) {
    delete avatar_hash_;
  }
  if (game_name_ != &::google::protobuf::internal::kEmptyString) {
    delete game_name_;
  }
  if (game_data_blob_ != &::google::protobuf::internal::kEmptyString) {
    delete game_data_blob_;
  }
  if (clan_tag_ != &::google::protobuf::internal::kEmptyString) {
    delete clan_tag_;
  }
  if (facebook_name_ != &::google::protobuf::internal::kEmptyString) {
    delete facebook_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientPersonaState_Friend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientPersonaState_Friend& CMsgClientPersonaState_Friend::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientPersonaState_Friend* CMsgClientPersonaState_Friend::default_instance_ = NULL;

CMsgClientPersonaState_Friend* CMsgClientPersonaState_Friend::New() const {
  return new CMsgClientPersonaState_Friend;
}

void CMsgClientPersonaState_Friend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    friendid_ = GOOGLE_ULONGLONG(0);
    persona_state_ = 0u;
    game_played_app_id_ = 0u;
    game_server_ip_ = 0u;
    game_server_port_ = 0u;
    persona_state_flags_ = 0u;
    online_session_instances_ = 0u;
    published_instance_id_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_player_name()) {
      if (player_name_ != &::google::protobuf::internal::kEmptyString) {
        player_name_->clear();
      }
    }
    query_port_ = 0u;
    steamid_source_ = GOOGLE_ULONGLONG(0);
    if (has_avatar_hash()) {
      if (avatar_hash_ != &::google::protobuf::internal::kEmptyString) {
        avatar_hash_->clear();
      }
    }
    last_logoff_ = 0u;
    last_logon_ = 0u;
    clan_rank_ = 0u;
    if (has_game_name()) {
      if (game_name_ != &::google::protobuf::internal::kEmptyString) {
        game_name_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    gameid_ = GOOGLE_ULONGLONG(0);
    if (has_game_data_blob()) {
      if (game_data_blob_ != &::google::protobuf::internal::kEmptyString) {
        game_data_blob_->clear();
      }
    }
    if (has_clan_tag()) {
      if (clan_tag_ != &::google::protobuf::internal::kEmptyString) {
        clan_tag_->clear();
      }
    }
    if (has_facebook_name()) {
      if (facebook_name_ != &::google::protobuf::internal::kEmptyString) {
        facebook_name_->clear();
      }
    }
    facebook_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientPersonaState_Friend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 friendid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &friendid_)));
          set_has_friendid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_persona_state;
        break;
      }

      // optional uint32 persona_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_persona_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &persona_state_)));
          set_has_persona_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_game_played_app_id;
        break;
      }

      // optional uint32 game_played_app_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_played_app_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_played_app_id_)));
          set_has_game_played_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_game_server_ip;
        break;
      }

      // optional uint32 game_server_ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_server_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_server_ip_)));
          set_has_game_server_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_game_server_port;
        break;
      }

      // optional uint32 game_server_port = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_server_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_server_port_)));
          set_has_game_server_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_persona_state_flags;
        break;
      }

      // optional uint32 persona_state_flags = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_persona_state_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &persona_state_flags_)));
          set_has_persona_state_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_online_session_instances;
        break;
      }

      // optional uint32 online_session_instances = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online_session_instances:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_session_instances_)));
          set_has_online_session_instances();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_published_instance_id;
        break;
      }

      // optional uint32 published_instance_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_published_instance_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &published_instance_id_)));
          set_has_published_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_player_name;
        break;
      }

      // optional string player_name = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_query_port;
        break;
      }

      // optional uint32 query_port = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_query_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &query_port_)));
          set_has_query_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(201)) goto parse_steamid_source;
        break;
      }

      // optional fixed64 steamid_source = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steamid_source:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_source_)));
          set_has_steamid_source();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_avatar_hash;
        break;
      }

      // optional bytes avatar_hash = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avatar_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_avatar_hash()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_last_logoff;
        break;
      }

      // optional uint32 last_logoff = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_logoff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_logoff_)));
          set_has_last_logoff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(368)) goto parse_last_logon;
        break;
      }

      // optional uint32 last_logon = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_logon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_logon_)));
          set_has_last_logon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_clan_rank;
        break;
      }

      // optional uint32 clan_rank = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clan_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clan_rank_)));
          set_has_clan_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(442)) goto parse_game_name;
        break;
      }

      // optional string game_name = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(449)) goto parse_gameid;
        break;
      }

      // optional fixed64 gameid = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_gameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse_game_data_blob;
        break;
      }

      // optional bytes game_data_blob = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_data_blob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_game_data_blob()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(522)) goto parse_clan_tag;
        break;
      }

      // optional string clan_tag = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clan_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clan_tag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(530)) goto parse_facebook_name;
        break;
      }

      // optional string facebook_name = 66;
      case 66: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_facebook_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_facebook_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(536)) goto parse_facebook_id;
        break;
      }

      // optional uint64 facebook_id = 67;
      case 67: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_facebook_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &facebook_id_)));
          set_has_facebook_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientPersonaState_Friend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 friendid = 1;
  if (has_friendid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->friendid(), output);
  }

  // optional uint32 persona_state = 2;
  if (has_persona_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->persona_state(), output);
  }

  // optional uint32 game_played_app_id = 3;
  if (has_game_played_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->game_played_app_id(), output);
  }

  // optional uint32 game_server_ip = 4;
  if (has_game_server_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_server_ip(), output);
  }

  // optional uint32 game_server_port = 5;
  if (has_game_server_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->game_server_port(), output);
  }

  // optional uint32 persona_state_flags = 6;
  if (has_persona_state_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->persona_state_flags(), output);
  }

  // optional uint32 online_session_instances = 7;
  if (has_online_session_instances()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->online_session_instances(), output);
  }

  // optional uint32 published_instance_id = 8;
  if (has_published_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->published_instance_id(), output);
  }

  // optional string player_name = 15;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->player_name(), output);
  }

  // optional uint32 query_port = 20;
  if (has_query_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->query_port(), output);
  }

  // optional fixed64 steamid_source = 25;
  if (has_steamid_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(25, this->steamid_source(), output);
  }

  // optional bytes avatar_hash = 31;
  if (has_avatar_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      31, this->avatar_hash(), output);
  }

  // optional uint32 last_logoff = 45;
  if (has_last_logoff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(45, this->last_logoff(), output);
  }

  // optional uint32 last_logon = 46;
  if (has_last_logon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(46, this->last_logon(), output);
  }

  // optional uint32 clan_rank = 50;
  if (has_clan_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(50, this->clan_rank(), output);
  }

  // optional string game_name = 55;
  if (has_game_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      55, this->game_name(), output);
  }

  // optional fixed64 gameid = 56;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(56, this->gameid(), output);
  }

  // optional bytes game_data_blob = 60;
  if (has_game_data_blob()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      60, this->game_data_blob(), output);
  }

  // optional string clan_tag = 65;
  if (has_clan_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      65, this->clan_tag(), output);
  }

  // optional string facebook_name = 66;
  if (has_facebook_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      66, this->facebook_name(), output);
  }

  // optional uint64 facebook_id = 67;
  if (has_facebook_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(67, this->facebook_id(), output);
  }

}

int CMsgClientPersonaState_Friend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 friendid = 1;
    if (has_friendid()) {
      total_size += 1 + 8;
    }

    // optional uint32 persona_state = 2;
    if (has_persona_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->persona_state());
    }

    // optional uint32 game_played_app_id = 3;
    if (has_game_played_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_played_app_id());
    }

    // optional uint32 game_server_ip = 4;
    if (has_game_server_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_server_ip());
    }

    // optional uint32 game_server_port = 5;
    if (has_game_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_server_port());
    }

    // optional uint32 persona_state_flags = 6;
    if (has_persona_state_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->persona_state_flags());
    }

    // optional uint32 online_session_instances = 7;
    if (has_online_session_instances()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online_session_instances());
    }

    // optional uint32 published_instance_id = 8;
    if (has_published_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->published_instance_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string player_name = 15;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional uint32 query_port = 20;
    if (has_query_port()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->query_port());
    }

    // optional fixed64 steamid_source = 25;
    if (has_steamid_source()) {
      total_size += 2 + 8;
    }

    // optional bytes avatar_hash = 31;
    if (has_avatar_hash()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->avatar_hash());
    }

    // optional uint32 last_logoff = 45;
    if (has_last_logoff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_logoff());
    }

    // optional uint32 last_logon = 46;
    if (has_last_logon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_logon());
    }

    // optional uint32 clan_rank = 50;
    if (has_clan_rank()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clan_rank());
    }

    // optional string game_name = 55;
    if (has_game_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_name());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional fixed64 gameid = 56;
    if (has_gameid()) {
      total_size += 2 + 8;
    }

    // optional bytes game_data_blob = 60;
    if (has_game_data_blob()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->game_data_blob());
    }

    // optional string clan_tag = 65;
    if (has_clan_tag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clan_tag());
    }

    // optional string facebook_name = 66;
    if (has_facebook_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->facebook_name());
    }

    // optional uint64 facebook_id = 67;
    if (has_facebook_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->facebook_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientPersonaState_Friend::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientPersonaState_Friend*>(&from));
}

void CMsgClientPersonaState_Friend::MergeFrom(const CMsgClientPersonaState_Friend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friendid()) {
      set_friendid(from.friendid());
    }
    if (from.has_persona_state()) {
      set_persona_state(from.persona_state());
    }
    if (from.has_game_played_app_id()) {
      set_game_played_app_id(from.game_played_app_id());
    }
    if (from.has_game_server_ip()) {
      set_game_server_ip(from.game_server_ip());
    }
    if (from.has_game_server_port()) {
      set_game_server_port(from.game_server_port());
    }
    if (from.has_persona_state_flags()) {
      set_persona_state_flags(from.persona_state_flags());
    }
    if (from.has_online_session_instances()) {
      set_online_session_instances(from.online_session_instances());
    }
    if (from.has_published_instance_id()) {
      set_published_instance_id(from.published_instance_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
    if (from.has_query_port()) {
      set_query_port(from.query_port());
    }
    if (from.has_steamid_source()) {
      set_steamid_source(from.steamid_source());
    }
    if (from.has_avatar_hash()) {
      set_avatar_hash(from.avatar_hash());
    }
    if (from.has_last_logoff()) {
      set_last_logoff(from.last_logoff());
    }
    if (from.has_last_logon()) {
      set_last_logon(from.last_logon());
    }
    if (from.has_clan_rank()) {
      set_clan_rank(from.clan_rank());
    }
    if (from.has_game_name()) {
      set_game_name(from.game_name());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_game_data_blob()) {
      set_game_data_blob(from.game_data_blob());
    }
    if (from.has_clan_tag()) {
      set_clan_tag(from.clan_tag());
    }
    if (from.has_facebook_name()) {
      set_facebook_name(from.facebook_name());
    }
    if (from.has_facebook_id()) {
      set_facebook_id(from.facebook_id());
    }
  }
}

void CMsgClientPersonaState_Friend::CopyFrom(const CMsgClientPersonaState_Friend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPersonaState_Friend::IsInitialized() const {

  return true;
}

void CMsgClientPersonaState_Friend::Swap(CMsgClientPersonaState_Friend* other) {
  if (other != this) {
    std::swap(friendid_, other->friendid_);
    std::swap(persona_state_, other->persona_state_);
    std::swap(game_played_app_id_, other->game_played_app_id_);
    std::swap(game_server_ip_, other->game_server_ip_);
    std::swap(game_server_port_, other->game_server_port_);
    std::swap(persona_state_flags_, other->persona_state_flags_);
    std::swap(online_session_instances_, other->online_session_instances_);
    std::swap(published_instance_id_, other->published_instance_id_);
    std::swap(player_name_, other->player_name_);
    std::swap(query_port_, other->query_port_);
    std::swap(steamid_source_, other->steamid_source_);
    std::swap(avatar_hash_, other->avatar_hash_);
    std::swap(last_logoff_, other->last_logoff_);
    std::swap(last_logon_, other->last_logon_);
    std::swap(clan_rank_, other->clan_rank_);
    std::swap(game_name_, other->game_name_);
    std::swap(gameid_, other->gameid_);
    std::swap(game_data_blob_, other->game_data_blob_);
    std::swap(clan_tag_, other->clan_tag_);
    std::swap(facebook_name_, other->facebook_name_);
    std::swap(facebook_id_, other->facebook_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientPersonaState_Friend::GetTypeName() const {
  return "Sc.CMsgClientPersonaState.Friend";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientPersonaState::kStatusFlagsFieldNumber;
const int CMsgClientPersonaState::kFriendsFieldNumber;
#endif  // !_MSC_VER

CMsgClientPersonaState::CMsgClientPersonaState()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientPersonaState::InitAsDefaultInstance() {
}

CMsgClientPersonaState::CMsgClientPersonaState(const CMsgClientPersonaState& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientPersonaState::SharedCtor() {
  _cached_size_ = 0;
  status_flags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientPersonaState::~CMsgClientPersonaState() {
  SharedDtor();
}

void CMsgClientPersonaState::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientPersonaState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientPersonaState& CMsgClientPersonaState::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientPersonaState* CMsgClientPersonaState::default_instance_ = NULL;

CMsgClientPersonaState* CMsgClientPersonaState::New() const {
  return new CMsgClientPersonaState;
}

void CMsgClientPersonaState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_flags_ = 0u;
  }
  friends_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientPersonaState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 status_flags = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_flags_)));
          set_has_status_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_friends;
        break;
      }

      // repeated .Sc.CMsgClientPersonaState.Friend friends = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friends()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_friends;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientPersonaState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 status_flags = 1;
  if (has_status_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status_flags(), output);
  }

  // repeated .Sc.CMsgClientPersonaState.Friend friends = 2;
  for (int i = 0; i < this->friends_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->friends(i), output);
  }

}

int CMsgClientPersonaState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 status_flags = 1;
    if (has_status_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status_flags());
    }

  }
  // repeated .Sc.CMsgClientPersonaState.Friend friends = 2;
  total_size += 1 * this->friends_size();
  for (int i = 0; i < this->friends_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friends(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientPersonaState::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientPersonaState*>(&from));
}

void CMsgClientPersonaState::MergeFrom(const CMsgClientPersonaState& from) {
  GOOGLE_CHECK_NE(&from, this);
  friends_.MergeFrom(from.friends_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status_flags()) {
      set_status_flags(from.status_flags());
    }
  }
}

void CMsgClientPersonaState::CopyFrom(const CMsgClientPersonaState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPersonaState::IsInitialized() const {

  return true;
}

void CMsgClientPersonaState::Swap(CMsgClientPersonaState* other) {
  if (other != this) {
    std::swap(status_flags_, other->status_flags_);
    friends_.Swap(&other->friends_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientPersonaState::GetTypeName() const {
  return "Sc.CMsgClientPersonaState";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientFriendProfileInfo::kSteamidFriendFieldNumber;
#endif  // !_MSC_VER

CMsgClientFriendProfileInfo::CMsgClientFriendProfileInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientFriendProfileInfo::InitAsDefaultInstance() {
}

CMsgClientFriendProfileInfo::CMsgClientFriendProfileInfo(const CMsgClientFriendProfileInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientFriendProfileInfo::SharedCtor() {
  _cached_size_ = 0;
  steamid_friend_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientFriendProfileInfo::~CMsgClientFriendProfileInfo() {
  SharedDtor();
}

void CMsgClientFriendProfileInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientFriendProfileInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientFriendProfileInfo& CMsgClientFriendProfileInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientFriendProfileInfo* CMsgClientFriendProfileInfo::default_instance_ = NULL;

CMsgClientFriendProfileInfo* CMsgClientFriendProfileInfo::New() const {
  return new CMsgClientFriendProfileInfo;
}

void CMsgClientFriendProfileInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steamid_friend_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientFriendProfileInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid_friend = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_friend_)));
          set_has_steamid_friend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientFriendProfileInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steamid_friend = 1;
  if (has_steamid_friend()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid_friend(), output);
  }

}

int CMsgClientFriendProfileInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steamid_friend = 1;
    if (has_steamid_friend()) {
      total_size += 1 + 8;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientFriendProfileInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientFriendProfileInfo*>(&from));
}

void CMsgClientFriendProfileInfo::MergeFrom(const CMsgClientFriendProfileInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamid_friend()) {
      set_steamid_friend(from.steamid_friend());
    }
  }
}

void CMsgClientFriendProfileInfo::CopyFrom(const CMsgClientFriendProfileInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFriendProfileInfo::IsInitialized() const {

  return true;
}

void CMsgClientFriendProfileInfo::Swap(CMsgClientFriendProfileInfo* other) {
  if (other != this) {
    std::swap(steamid_friend_, other->steamid_friend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientFriendProfileInfo::GetTypeName() const {
  return "Sc.CMsgClientFriendProfileInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientFriendProfileInfoResponse::kEresultFieldNumber;
const int CMsgClientFriendProfileInfoResponse::kSteamidFriendFieldNumber;
const int CMsgClientFriendProfileInfoResponse::kTimeCreatedFieldNumber;
const int CMsgClientFriendProfileInfoResponse::kRealNameFieldNumber;
const int CMsgClientFriendProfileInfoResponse::kCityNameFieldNumber;
const int CMsgClientFriendProfileInfoResponse::kStateNameFieldNumber;
const int CMsgClientFriendProfileInfoResponse::kCountryNameFieldNumber;
const int CMsgClientFriendProfileInfoResponse::kHeadlineFieldNumber;
const int CMsgClientFriendProfileInfoResponse::kSummaryFieldNumber;
const int CMsgClientFriendProfileInfoResponse::kRecentPlaytimeFieldNumber;
#endif  // !_MSC_VER

CMsgClientFriendProfileInfoResponse::CMsgClientFriendProfileInfoResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientFriendProfileInfoResponse::InitAsDefaultInstance() {
}

CMsgClientFriendProfileInfoResponse::CMsgClientFriendProfileInfoResponse(const CMsgClientFriendProfileInfoResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientFriendProfileInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  steamid_friend_ = GOOGLE_ULONGLONG(0);
  time_created_ = 0u;
  real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  city_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  state_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  country_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  headline_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  summary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  recent_playtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientFriendProfileInfoResponse::~CMsgClientFriendProfileInfoResponse() {
  SharedDtor();
}

void CMsgClientFriendProfileInfoResponse::SharedDtor() {
  if (real_name_ != &::google::protobuf::internal::kEmptyString) {
    delete real_name_;
  }
  if (city_name_ != &::google::protobuf::internal::kEmptyString) {
    delete city_name_;
  }
  if (state_name_ != &::google::protobuf::internal::kEmptyString) {
    delete state_name_;
  }
  if (country_name_ != &::google::protobuf::internal::kEmptyString) {
    delete country_name_;
  }
  if (headline_ != &::google::protobuf::internal::kEmptyString) {
    delete headline_;
  }
  if (summary_ != &::google::protobuf::internal::kEmptyString) {
    delete summary_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientFriendProfileInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientFriendProfileInfoResponse& CMsgClientFriendProfileInfoResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientFriendProfileInfoResponse* CMsgClientFriendProfileInfoResponse::default_instance_ = NULL;

CMsgClientFriendProfileInfoResponse* CMsgClientFriendProfileInfoResponse::New() const {
  return new CMsgClientFriendProfileInfoResponse;
}

void CMsgClientFriendProfileInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    steamid_friend_ = GOOGLE_ULONGLONG(0);
    time_created_ = 0u;
    if (has_real_name()) {
      if (real_name_ != &::google::protobuf::internal::kEmptyString) {
        real_name_->clear();
      }
    }
    if (has_city_name()) {
      if (city_name_ != &::google::protobuf::internal::kEmptyString) {
        city_name_->clear();
      }
    }
    if (has_state_name()) {
      if (state_name_ != &::google::protobuf::internal::kEmptyString) {
        state_name_->clear();
      }
    }
    if (has_country_name()) {
      if (country_name_ != &::google::protobuf::internal::kEmptyString) {
        country_name_->clear();
      }
    }
    if (has_headline()) {
      if (headline_ != &::google::protobuf::internal::kEmptyString) {
        headline_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_summary()) {
      if (summary_ != &::google::protobuf::internal::kEmptyString) {
        summary_->clear();
      }
    }
    recent_playtime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientFriendProfileInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_steamid_friend;
        break;
      }

      // optional fixed64 steamid_friend = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steamid_friend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_friend_)));
          set_has_steamid_friend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time_created;
        break;
      }

      // optional uint32 time_created = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_created:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_created_)));
          set_has_time_created();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_real_name;
        break;
      }

      // optional string real_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_real_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_real_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_city_name;
        break;
      }

      // optional string city_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_city_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_state_name;
        break;
      }

      // optional string state_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_state_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_country_name;
        break;
      }

      // optional string country_name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_country_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_headline;
        break;
      }

      // optional string headline = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_headline:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headline()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_summary;
        break;
      }

      // optional string summary = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_summary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_summary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_recent_playtime;
        break;
      }

      // optional uint32 recent_playtime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recent_playtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recent_playtime_)));
          set_has_recent_playtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientFriendProfileInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional fixed64 steamid_friend = 2;
  if (has_steamid_friend()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steamid_friend(), output);
  }

  // optional uint32 time_created = 3;
  if (has_time_created()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_created(), output);
  }

  // optional string real_name = 4;
  if (has_real_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->real_name(), output);
  }

  // optional string city_name = 5;
  if (has_city_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->city_name(), output);
  }

  // optional string state_name = 6;
  if (has_state_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->state_name(), output);
  }

  // optional string country_name = 7;
  if (has_country_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->country_name(), output);
  }

  // optional string headline = 8;
  if (has_headline()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->headline(), output);
  }

  // optional string summary = 9;
  if (has_summary()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->summary(), output);
  }

  // optional uint32 recent_playtime = 10;
  if (has_recent_playtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->recent_playtime(), output);
  }

}

int CMsgClientFriendProfileInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional fixed64 steamid_friend = 2;
    if (has_steamid_friend()) {
      total_size += 1 + 8;
    }

    // optional uint32 time_created = 3;
    if (has_time_created()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_created());
    }

    // optional string real_name = 4;
    if (has_real_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->real_name());
    }

    // optional string city_name = 5;
    if (has_city_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city_name());
    }

    // optional string state_name = 6;
    if (has_state_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->state_name());
    }

    // optional string country_name = 7;
    if (has_country_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country_name());
    }

    // optional string headline = 8;
    if (has_headline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headline());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string summary = 9;
    if (has_summary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->summary());
    }

    // optional uint32 recent_playtime = 10;
    if (has_recent_playtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recent_playtime());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientFriendProfileInfoResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientFriendProfileInfoResponse*>(&from));
}

void CMsgClientFriendProfileInfoResponse::MergeFrom(const CMsgClientFriendProfileInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_steamid_friend()) {
      set_steamid_friend(from.steamid_friend());
    }
    if (from.has_time_created()) {
      set_time_created(from.time_created());
    }
    if (from.has_real_name()) {
      set_real_name(from.real_name());
    }
    if (from.has_city_name()) {
      set_city_name(from.city_name());
    }
    if (from.has_state_name()) {
      set_state_name(from.state_name());
    }
    if (from.has_country_name()) {
      set_country_name(from.country_name());
    }
    if (from.has_headline()) {
      set_headline(from.headline());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_summary()) {
      set_summary(from.summary());
    }
    if (from.has_recent_playtime()) {
      set_recent_playtime(from.recent_playtime());
    }
  }
}

void CMsgClientFriendProfileInfoResponse::CopyFrom(const CMsgClientFriendProfileInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFriendProfileInfoResponse::IsInitialized() const {

  return true;
}

void CMsgClientFriendProfileInfoResponse::Swap(CMsgClientFriendProfileInfoResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(steamid_friend_, other->steamid_friend_);
    std::swap(time_created_, other->time_created_);
    std::swap(real_name_, other->real_name_);
    std::swap(city_name_, other->city_name_);
    std::swap(state_name_, other->state_name_);
    std::swap(country_name_, other->country_name_);
    std::swap(headline_, other->headline_);
    std::swap(summary_, other->summary_);
    std::swap(recent_playtime_, other->recent_playtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientFriendProfileInfoResponse::GetTypeName() const {
  return "Sc.CMsgClientFriendProfileInfoResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientServerList_Server::kServerTypeFieldNumber;
const int CMsgClientServerList_Server::kServerIpFieldNumber;
const int CMsgClientServerList_Server::kServerPortFieldNumber;
#endif  // !_MSC_VER

CMsgClientServerList_Server::CMsgClientServerList_Server()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientServerList_Server::InitAsDefaultInstance() {
}

CMsgClientServerList_Server::CMsgClientServerList_Server(const CMsgClientServerList_Server& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientServerList_Server::SharedCtor() {
  _cached_size_ = 0;
  server_type_ = 0u;
  server_ip_ = 0u;
  server_port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientServerList_Server::~CMsgClientServerList_Server() {
  SharedDtor();
}

void CMsgClientServerList_Server::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientServerList_Server::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientServerList_Server& CMsgClientServerList_Server::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientServerList_Server* CMsgClientServerList_Server::default_instance_ = NULL;

CMsgClientServerList_Server* CMsgClientServerList_Server::New() const {
  return new CMsgClientServerList_Server;
}

void CMsgClientServerList_Server::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_type_ = 0u;
    server_ip_ = 0u;
    server_port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientServerList_Server::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_type_)));
          set_has_server_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_ip;
        break;
      }

      // optional uint32 server_ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_ip_)));
          set_has_server_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_server_port;
        break;
      }

      // optional uint32 server_port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_port_)));
          set_has_server_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientServerList_Server::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 server_type = 1;
  if (has_server_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_type(), output);
  }

  // optional uint32 server_ip = 2;
  if (has_server_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_ip(), output);
  }

  // optional uint32 server_port = 3;
  if (has_server_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->server_port(), output);
  }

}

int CMsgClientServerList_Server::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 server_type = 1;
    if (has_server_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_type());
    }

    // optional uint32 server_ip = 2;
    if (has_server_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_ip());
    }

    // optional uint32 server_port = 3;
    if (has_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_port());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientServerList_Server::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientServerList_Server*>(&from));
}

void CMsgClientServerList_Server::MergeFrom(const CMsgClientServerList_Server& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_type()) {
      set_server_type(from.server_type());
    }
    if (from.has_server_ip()) {
      set_server_ip(from.server_ip());
    }
    if (from.has_server_port()) {
      set_server_port(from.server_port());
    }
  }
}

void CMsgClientServerList_Server::CopyFrom(const CMsgClientServerList_Server& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientServerList_Server::IsInitialized() const {

  return true;
}

void CMsgClientServerList_Server::Swap(CMsgClientServerList_Server* other) {
  if (other != this) {
    std::swap(server_type_, other->server_type_);
    std::swap(server_ip_, other->server_ip_);
    std::swap(server_port_, other->server_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientServerList_Server::GetTypeName() const {
  return "Sc.CMsgClientServerList.Server";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientServerList::kServersFieldNumber;
#endif  // !_MSC_VER

CMsgClientServerList::CMsgClientServerList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientServerList::InitAsDefaultInstance() {
}

CMsgClientServerList::CMsgClientServerList(const CMsgClientServerList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientServerList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientServerList::~CMsgClientServerList() {
  SharedDtor();
}

void CMsgClientServerList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientServerList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientServerList& CMsgClientServerList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientServerList* CMsgClientServerList::default_instance_ = NULL;

CMsgClientServerList* CMsgClientServerList::New() const {
  return new CMsgClientServerList;
}

void CMsgClientServerList::Clear() {
  servers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientServerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Sc.CMsgClientServerList.Server servers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_servers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_servers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_servers;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientServerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Sc.CMsgClientServerList.Server servers = 1;
  for (int i = 0; i < this->servers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->servers(i), output);
  }

}

int CMsgClientServerList::ByteSize() const {
  int total_size = 0;

  // repeated .Sc.CMsgClientServerList.Server servers = 1;
  total_size += 1 * this->servers_size();
  for (int i = 0; i < this->servers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->servers(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientServerList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientServerList*>(&from));
}

void CMsgClientServerList::MergeFrom(const CMsgClientServerList& from) {
  GOOGLE_CHECK_NE(&from, this);
  servers_.MergeFrom(from.servers_);
}

void CMsgClientServerList::CopyFrom(const CMsgClientServerList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientServerList::IsInitialized() const {

  return true;
}

void CMsgClientServerList::Swap(CMsgClientServerList* other) {
  if (other != this) {
    servers_.Swap(&other->servers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientServerList::GetTypeName() const {
  return "Sc.CMsgClientServerList";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientRequestedClientStats_StatsToSend::kClientStatFieldNumber;
const int CMsgClientRequestedClientStats_StatsToSend::kStatAggregateMethodFieldNumber;
#endif  // !_MSC_VER

CMsgClientRequestedClientStats_StatsToSend::CMsgClientRequestedClientStats_StatsToSend()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientRequestedClientStats_StatsToSend::InitAsDefaultInstance() {
}

CMsgClientRequestedClientStats_StatsToSend::CMsgClientRequestedClientStats_StatsToSend(const CMsgClientRequestedClientStats_StatsToSend& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRequestedClientStats_StatsToSend::SharedCtor() {
  _cached_size_ = 0;
  client_stat_ = 0u;
  stat_aggregate_method_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRequestedClientStats_StatsToSend::~CMsgClientRequestedClientStats_StatsToSend() {
  SharedDtor();
}

void CMsgClientRequestedClientStats_StatsToSend::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientRequestedClientStats_StatsToSend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientRequestedClientStats_StatsToSend& CMsgClientRequestedClientStats_StatsToSend::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientRequestedClientStats_StatsToSend* CMsgClientRequestedClientStats_StatsToSend::default_instance_ = NULL;

CMsgClientRequestedClientStats_StatsToSend* CMsgClientRequestedClientStats_StatsToSend::New() const {
  return new CMsgClientRequestedClientStats_StatsToSend;
}

void CMsgClientRequestedClientStats_StatsToSend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_stat_ = 0u;
    stat_aggregate_method_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientRequestedClientStats_StatsToSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 client_stat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_stat_)));
          set_has_client_stat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stat_aggregate_method;
        break;
      }

      // optional uint32 stat_aggregate_method = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stat_aggregate_method:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stat_aggregate_method_)));
          set_has_stat_aggregate_method();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientRequestedClientStats_StatsToSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 client_stat = 1;
  if (has_client_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->client_stat(), output);
  }

  // optional uint32 stat_aggregate_method = 2;
  if (has_stat_aggregate_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stat_aggregate_method(), output);
  }

}

int CMsgClientRequestedClientStats_StatsToSend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 client_stat = 1;
    if (has_client_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_stat());
    }

    // optional uint32 stat_aggregate_method = 2;
    if (has_stat_aggregate_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stat_aggregate_method());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRequestedClientStats_StatsToSend::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientRequestedClientStats_StatsToSend*>(&from));
}

void CMsgClientRequestedClientStats_StatsToSend::MergeFrom(const CMsgClientRequestedClientStats_StatsToSend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_stat()) {
      set_client_stat(from.client_stat());
    }
    if (from.has_stat_aggregate_method()) {
      set_stat_aggregate_method(from.stat_aggregate_method());
    }
  }
}

void CMsgClientRequestedClientStats_StatsToSend::CopyFrom(const CMsgClientRequestedClientStats_StatsToSend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestedClientStats_StatsToSend::IsInitialized() const {

  return true;
}

void CMsgClientRequestedClientStats_StatsToSend::Swap(CMsgClientRequestedClientStats_StatsToSend* other) {
  if (other != this) {
    std::swap(client_stat_, other->client_stat_);
    std::swap(stat_aggregate_method_, other->stat_aggregate_method_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientRequestedClientStats_StatsToSend::GetTypeName() const {
  return "Sc.CMsgClientRequestedClientStats.StatsToSend";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientRequestedClientStats::kStatsToSendFieldNumber;
#endif  // !_MSC_VER

CMsgClientRequestedClientStats::CMsgClientRequestedClientStats()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientRequestedClientStats::InitAsDefaultInstance() {
}

CMsgClientRequestedClientStats::CMsgClientRequestedClientStats(const CMsgClientRequestedClientStats& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRequestedClientStats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRequestedClientStats::~CMsgClientRequestedClientStats() {
  SharedDtor();
}

void CMsgClientRequestedClientStats::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientRequestedClientStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientRequestedClientStats& CMsgClientRequestedClientStats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientRequestedClientStats* CMsgClientRequestedClientStats::default_instance_ = NULL;

CMsgClientRequestedClientStats* CMsgClientRequestedClientStats::New() const {
  return new CMsgClientRequestedClientStats;
}

void CMsgClientRequestedClientStats::Clear() {
  stats_to_send_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientRequestedClientStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Sc.CMsgClientRequestedClientStats.StatsToSend stats_to_send = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stats_to_send:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stats_to_send()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stats_to_send;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientRequestedClientStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Sc.CMsgClientRequestedClientStats.StatsToSend stats_to_send = 1;
  for (int i = 0; i < this->stats_to_send_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->stats_to_send(i), output);
  }

}

int CMsgClientRequestedClientStats::ByteSize() const {
  int total_size = 0;

  // repeated .Sc.CMsgClientRequestedClientStats.StatsToSend stats_to_send = 1;
  total_size += 1 * this->stats_to_send_size();
  for (int i = 0; i < this->stats_to_send_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stats_to_send(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRequestedClientStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientRequestedClientStats*>(&from));
}

void CMsgClientRequestedClientStats::MergeFrom(const CMsgClientRequestedClientStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  stats_to_send_.MergeFrom(from.stats_to_send_);
}

void CMsgClientRequestedClientStats::CopyFrom(const CMsgClientRequestedClientStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestedClientStats::IsInitialized() const {

  return true;
}

void CMsgClientRequestedClientStats::Swap(CMsgClientRequestedClientStats* other) {
  if (other != this) {
    stats_to_send_.Swap(&other->stats_to_send_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientRequestedClientStats::GetTypeName() const {
  return "Sc.CMsgClientRequestedClientStats";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientStat2_StatDetail::kClientStatFieldNumber;
const int CMsgClientStat2_StatDetail::kLlValueFieldNumber;
const int CMsgClientStat2_StatDetail::kTimeOfDayFieldNumber;
const int CMsgClientStat2_StatDetail::kCellIdFieldNumber;
const int CMsgClientStat2_StatDetail::kDepotIdFieldNumber;
const int CMsgClientStat2_StatDetail::kAppIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientStat2_StatDetail::CMsgClientStat2_StatDetail()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientStat2_StatDetail::InitAsDefaultInstance() {
}

CMsgClientStat2_StatDetail::CMsgClientStat2_StatDetail(const CMsgClientStat2_StatDetail& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientStat2_StatDetail::SharedCtor() {
  _cached_size_ = 0;
  client_stat_ = 0u;
  ll_value_ = GOOGLE_LONGLONG(0);
  time_of_day_ = 0u;
  cell_id_ = 0u;
  depot_id_ = 0u;
  app_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientStat2_StatDetail::~CMsgClientStat2_StatDetail() {
  SharedDtor();
}

void CMsgClientStat2_StatDetail::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientStat2_StatDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientStat2_StatDetail& CMsgClientStat2_StatDetail::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientStat2_StatDetail* CMsgClientStat2_StatDetail::default_instance_ = NULL;

CMsgClientStat2_StatDetail* CMsgClientStat2_StatDetail::New() const {
  return new CMsgClientStat2_StatDetail;
}

void CMsgClientStat2_StatDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_stat_ = 0u;
    ll_value_ = GOOGLE_LONGLONG(0);
    time_of_day_ = 0u;
    cell_id_ = 0u;
    depot_id_ = 0u;
    app_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientStat2_StatDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 client_stat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_stat_)));
          set_has_client_stat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ll_value;
        break;
      }

      // optional int64 ll_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ll_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ll_value_)));
          set_has_ll_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time_of_day;
        break;
      }

      // optional uint32 time_of_day = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_of_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_of_day_)));
          set_has_time_of_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cell_id;
        break;
      }

      // optional uint32 cell_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cell_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_)));
          set_has_cell_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_depot_id;
        break;
      }

      // optional uint32 depot_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_depot_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &depot_id_)));
          set_has_depot_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_app_id;
        break;
      }

      // optional uint32 app_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_app_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientStat2_StatDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 client_stat = 1;
  if (has_client_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->client_stat(), output);
  }

  // optional int64 ll_value = 2;
  if (has_ll_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->ll_value(), output);
  }

  // optional uint32 time_of_day = 3;
  if (has_time_of_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_of_day(), output);
  }

  // optional uint32 cell_id = 4;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cell_id(), output);
  }

  // optional uint32 depot_id = 5;
  if (has_depot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->depot_id(), output);
  }

  // optional uint32 app_id = 6;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->app_id(), output);
  }

}

int CMsgClientStat2_StatDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 client_stat = 1;
    if (has_client_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_stat());
    }

    // optional int64 ll_value = 2;
    if (has_ll_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ll_value());
    }

    // optional uint32 time_of_day = 3;
    if (has_time_of_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_of_day());
    }

    // optional uint32 cell_id = 4;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_id());
    }

    // optional uint32 depot_id = 5;
    if (has_depot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->depot_id());
    }

    // optional uint32 app_id = 6;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientStat2_StatDetail::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientStat2_StatDetail*>(&from));
}

void CMsgClientStat2_StatDetail::MergeFrom(const CMsgClientStat2_StatDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_stat()) {
      set_client_stat(from.client_stat());
    }
    if (from.has_ll_value()) {
      set_ll_value(from.ll_value());
    }
    if (from.has_time_of_day()) {
      set_time_of_day(from.time_of_day());
    }
    if (from.has_cell_id()) {
      set_cell_id(from.cell_id());
    }
    if (from.has_depot_id()) {
      set_depot_id(from.depot_id());
    }
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
  }
}

void CMsgClientStat2_StatDetail::CopyFrom(const CMsgClientStat2_StatDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientStat2_StatDetail::IsInitialized() const {

  return true;
}

void CMsgClientStat2_StatDetail::Swap(CMsgClientStat2_StatDetail* other) {
  if (other != this) {
    std::swap(client_stat_, other->client_stat_);
    std::swap(ll_value_, other->ll_value_);
    std::swap(time_of_day_, other->time_of_day_);
    std::swap(cell_id_, other->cell_id_);
    std::swap(depot_id_, other->depot_id_);
    std::swap(app_id_, other->app_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientStat2_StatDetail::GetTypeName() const {
  return "Sc.CMsgClientStat2.StatDetail";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientStat2::kStatDetailFieldNumber;
#endif  // !_MSC_VER

CMsgClientStat2::CMsgClientStat2()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientStat2::InitAsDefaultInstance() {
}

CMsgClientStat2::CMsgClientStat2(const CMsgClientStat2& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientStat2::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientStat2::~CMsgClientStat2() {
  SharedDtor();
}

void CMsgClientStat2::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientStat2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientStat2& CMsgClientStat2::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientStat2* CMsgClientStat2::default_instance_ = NULL;

CMsgClientStat2* CMsgClientStat2::New() const {
  return new CMsgClientStat2;
}

void CMsgClientStat2::Clear() {
  stat_detail_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientStat2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Sc.CMsgClientStat2.StatDetail stat_detail = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stat_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stat_detail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stat_detail;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientStat2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Sc.CMsgClientStat2.StatDetail stat_detail = 1;
  for (int i = 0; i < this->stat_detail_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->stat_detail(i), output);
  }

}

int CMsgClientStat2::ByteSize() const {
  int total_size = 0;

  // repeated .Sc.CMsgClientStat2.StatDetail stat_detail = 1;
  total_size += 1 * this->stat_detail_size();
  for (int i = 0; i < this->stat_detail_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stat_detail(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientStat2::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientStat2*>(&from));
}

void CMsgClientStat2::MergeFrom(const CMsgClientStat2& from) {
  GOOGLE_CHECK_NE(&from, this);
  stat_detail_.MergeFrom(from.stat_detail_);
}

void CMsgClientStat2::CopyFrom(const CMsgClientStat2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientStat2::IsInitialized() const {

  return true;
}

void CMsgClientStat2::Swap(CMsgClientStat2* other) {
  if (other != this) {
    stat_detail_.Swap(&other->stat_detail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientStat2::GetTypeName() const {
  return "Sc.CMsgClientStat2";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientMMSCreateLobby::kAppIdFieldNumber;
const int CMsgClientMMSCreateLobby::kMaxMembersFieldNumber;
const int CMsgClientMMSCreateLobby::kLobbyTypeFieldNumber;
const int CMsgClientMMSCreateLobby::kLobbyFlagsFieldNumber;
const int CMsgClientMMSCreateLobby::kCellIdFieldNumber;
const int CMsgClientMMSCreateLobby::kPublicIpFieldNumber;
const int CMsgClientMMSCreateLobby::kMetadataFieldNumber;
const int CMsgClientMMSCreateLobby::kPersonaNameOwnerFieldNumber;
#endif  // !_MSC_VER

CMsgClientMMSCreateLobby::CMsgClientMMSCreateLobby()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientMMSCreateLobby::InitAsDefaultInstance() {
}

CMsgClientMMSCreateLobby::CMsgClientMMSCreateLobby(const CMsgClientMMSCreateLobby& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientMMSCreateLobby::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  max_members_ = 0;
  lobby_type_ = 0;
  lobby_flags_ = 0;
  cell_id_ = 0u;
  public_ip_ = 0u;
  metadata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  persona_name_owner_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientMMSCreateLobby::~CMsgClientMMSCreateLobby() {
  SharedDtor();
}

void CMsgClientMMSCreateLobby::SharedDtor() {
  if (metadata_ != &::google::protobuf::internal::kEmptyString) {
    delete metadata_;
  }
  if (persona_name_owner_ != &::google::protobuf::internal::kEmptyString) {
    delete persona_name_owner_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientMMSCreateLobby::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientMMSCreateLobby& CMsgClientMMSCreateLobby::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientMMSCreateLobby* CMsgClientMMSCreateLobby::default_instance_ = NULL;

CMsgClientMMSCreateLobby* CMsgClientMMSCreateLobby::New() const {
  return new CMsgClientMMSCreateLobby;
}

void CMsgClientMMSCreateLobby::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    max_members_ = 0;
    lobby_type_ = 0;
    lobby_flags_ = 0;
    cell_id_ = 0u;
    public_ip_ = 0u;
    if (has_metadata()) {
      if (metadata_ != &::google::protobuf::internal::kEmptyString) {
        metadata_->clear();
      }
    }
    if (has_persona_name_owner()) {
      if (persona_name_owner_ != &::google::protobuf::internal::kEmptyString) {
        persona_name_owner_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientMMSCreateLobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_max_members;
        break;
      }

      // optional int32 max_members = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_members:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_members_)));
          set_has_max_members();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lobby_type;
        break;
      }

      // optional int32 lobby_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lobby_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lobby_type_)));
          set_has_lobby_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lobby_flags;
        break;
      }

      // optional int32 lobby_flags = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lobby_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lobby_flags_)));
          set_has_lobby_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cell_id;
        break;
      }

      // optional uint32 cell_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cell_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_)));
          set_has_cell_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_public_ip;
        break;
      }

      // optional uint32 public_ip = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_public_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &public_ip_)));
          set_has_public_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_metadata;
        break;
      }

      // optional bytes metadata = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_metadata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_persona_name_owner;
        break;
      }

      // optional string persona_name_owner = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_persona_name_owner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona_name_owner()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientMMSCreateLobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional int32 max_members = 2;
  if (has_max_members()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_members(), output);
  }

  // optional int32 lobby_type = 3;
  if (has_lobby_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lobby_type(), output);
  }

  // optional int32 lobby_flags = 4;
  if (has_lobby_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lobby_flags(), output);
  }

  // optional uint32 cell_id = 5;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cell_id(), output);
  }

  // optional uint32 public_ip = 6;
  if (has_public_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->public_ip(), output);
  }

  // optional bytes metadata = 7;
  if (has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->metadata(), output);
  }

  // optional string persona_name_owner = 8;
  if (has_persona_name_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->persona_name_owner(), output);
  }

}

int CMsgClientMMSCreateLobby::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional int32 max_members = 2;
    if (has_max_members()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_members());
    }

    // optional int32 lobby_type = 3;
    if (has_lobby_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lobby_type());
    }

    // optional int32 lobby_flags = 4;
    if (has_lobby_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lobby_flags());
    }

    // optional uint32 cell_id = 5;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_id());
    }

    // optional uint32 public_ip = 6;
    if (has_public_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->public_ip());
    }

    // optional bytes metadata = 7;
    if (has_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->metadata());
    }

    // optional string persona_name_owner = 8;
    if (has_persona_name_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona_name_owner());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMMSCreateLobby::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientMMSCreateLobby*>(&from));
}

void CMsgClientMMSCreateLobby::MergeFrom(const CMsgClientMMSCreateLobby& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_max_members()) {
      set_max_members(from.max_members());
    }
    if (from.has_lobby_type()) {
      set_lobby_type(from.lobby_type());
    }
    if (from.has_lobby_flags()) {
      set_lobby_flags(from.lobby_flags());
    }
    if (from.has_cell_id()) {
      set_cell_id(from.cell_id());
    }
    if (from.has_public_ip()) {
      set_public_ip(from.public_ip());
    }
    if (from.has_metadata()) {
      set_metadata(from.metadata());
    }
    if (from.has_persona_name_owner()) {
      set_persona_name_owner(from.persona_name_owner());
    }
  }
}

void CMsgClientMMSCreateLobby::CopyFrom(const CMsgClientMMSCreateLobby& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSCreateLobby::IsInitialized() const {

  return true;
}

void CMsgClientMMSCreateLobby::Swap(CMsgClientMMSCreateLobby* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(max_members_, other->max_members_);
    std::swap(lobby_type_, other->lobby_type_);
    std::swap(lobby_flags_, other->lobby_flags_);
    std::swap(cell_id_, other->cell_id_);
    std::swap(public_ip_, other->public_ip_);
    std::swap(metadata_, other->metadata_);
    std::swap(persona_name_owner_, other->persona_name_owner_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientMMSCreateLobby::GetTypeName() const {
  return "Sc.CMsgClientMMSCreateLobby";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientMMSCreateLobbyResponse::kAppIdFieldNumber;
const int CMsgClientMMSCreateLobbyResponse::kSteamIdLobbyFieldNumber;
const int CMsgClientMMSCreateLobbyResponse::kEresultFieldNumber;
#endif  // !_MSC_VER

CMsgClientMMSCreateLobbyResponse::CMsgClientMMSCreateLobbyResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientMMSCreateLobbyResponse::InitAsDefaultInstance() {
}

CMsgClientMMSCreateLobbyResponse::CMsgClientMMSCreateLobbyResponse(const CMsgClientMMSCreateLobbyResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientMMSCreateLobbyResponse::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  steam_id_lobby_ = GOOGLE_ULONGLONG(0);
  eresult_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientMMSCreateLobbyResponse::~CMsgClientMMSCreateLobbyResponse() {
  SharedDtor();
}

void CMsgClientMMSCreateLobbyResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientMMSCreateLobbyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientMMSCreateLobbyResponse& CMsgClientMMSCreateLobbyResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientMMSCreateLobbyResponse* CMsgClientMMSCreateLobbyResponse::default_instance_ = NULL;

CMsgClientMMSCreateLobbyResponse* CMsgClientMMSCreateLobbyResponse::New() const {
  return new CMsgClientMMSCreateLobbyResponse;
}

void CMsgClientMMSCreateLobbyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    steam_id_lobby_ = GOOGLE_ULONGLONG(0);
    eresult_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientMMSCreateLobbyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_steam_id_lobby;
        break;
      }

      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steam_id_lobby:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby_)));
          set_has_steam_id_lobby();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_eresult;
        break;
      }

      // optional int32 eresult = 3 [default = 2];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eresult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientMMSCreateLobbyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (has_steam_id_lobby()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_lobby(), output);
  }

  // optional int32 eresult = 3 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->eresult(), output);
  }

}

int CMsgClientMMSCreateLobbyResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional fixed64 steam_id_lobby = 2;
    if (has_steam_id_lobby()) {
      total_size += 1 + 8;
    }

    // optional int32 eresult = 3 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMMSCreateLobbyResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientMMSCreateLobbyResponse*>(&from));
}

void CMsgClientMMSCreateLobbyResponse::MergeFrom(const CMsgClientMMSCreateLobbyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_steam_id_lobby()) {
      set_steam_id_lobby(from.steam_id_lobby());
    }
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
  }
}

void CMsgClientMMSCreateLobbyResponse::CopyFrom(const CMsgClientMMSCreateLobbyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSCreateLobbyResponse::IsInitialized() const {

  return true;
}

void CMsgClientMMSCreateLobbyResponse::Swap(CMsgClientMMSCreateLobbyResponse* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(steam_id_lobby_, other->steam_id_lobby_);
    std::swap(eresult_, other->eresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientMMSCreateLobbyResponse::GetTypeName() const {
  return "Sc.CMsgClientMMSCreateLobbyResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientMMSJoinLobby::kAppIdFieldNumber;
const int CMsgClientMMSJoinLobby::kSteamIdLobbyFieldNumber;
const int CMsgClientMMSJoinLobby::kPersonaNameFieldNumber;
#endif  // !_MSC_VER

CMsgClientMMSJoinLobby::CMsgClientMMSJoinLobby()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientMMSJoinLobby::InitAsDefaultInstance() {
}

CMsgClientMMSJoinLobby::CMsgClientMMSJoinLobby(const CMsgClientMMSJoinLobby& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientMMSJoinLobby::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  steam_id_lobby_ = GOOGLE_ULONGLONG(0);
  persona_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientMMSJoinLobby::~CMsgClientMMSJoinLobby() {
  SharedDtor();
}

void CMsgClientMMSJoinLobby::SharedDtor() {
  if (persona_name_ != &::google::protobuf::internal::kEmptyString) {
    delete persona_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientMMSJoinLobby::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientMMSJoinLobby& CMsgClientMMSJoinLobby::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientMMSJoinLobby* CMsgClientMMSJoinLobby::default_instance_ = NULL;

CMsgClientMMSJoinLobby* CMsgClientMMSJoinLobby::New() const {
  return new CMsgClientMMSJoinLobby;
}

void CMsgClientMMSJoinLobby::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    steam_id_lobby_ = GOOGLE_ULONGLONG(0);
    if (has_persona_name()) {
      if (persona_name_ != &::google::protobuf::internal::kEmptyString) {
        persona_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientMMSJoinLobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_steam_id_lobby;
        break;
      }

      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steam_id_lobby:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby_)));
          set_has_steam_id_lobby();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_persona_name;
        break;
      }

      // optional string persona_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_persona_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientMMSJoinLobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (has_steam_id_lobby()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_lobby(), output);
  }

  // optional string persona_name = 3;
  if (has_persona_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->persona_name(), output);
  }

}

int CMsgClientMMSJoinLobby::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional fixed64 steam_id_lobby = 2;
    if (has_steam_id_lobby()) {
      total_size += 1 + 8;
    }

    // optional string persona_name = 3;
    if (has_persona_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona_name());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMMSJoinLobby::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientMMSJoinLobby*>(&from));
}

void CMsgClientMMSJoinLobby::MergeFrom(const CMsgClientMMSJoinLobby& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_steam_id_lobby()) {
      set_steam_id_lobby(from.steam_id_lobby());
    }
    if (from.has_persona_name()) {
      set_persona_name(from.persona_name());
    }
  }
}

void CMsgClientMMSJoinLobby::CopyFrom(const CMsgClientMMSJoinLobby& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSJoinLobby::IsInitialized() const {

  return true;
}

void CMsgClientMMSJoinLobby::Swap(CMsgClientMMSJoinLobby* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(steam_id_lobby_, other->steam_id_lobby_);
    std::swap(persona_name_, other->persona_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientMMSJoinLobby::GetTypeName() const {
  return "Sc.CMsgClientMMSJoinLobby";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientMMSJoinLobbyResponse_Member::kSteamIdFieldNumber;
const int CMsgClientMMSJoinLobbyResponse_Member::kPersonaNameFieldNumber;
const int CMsgClientMMSJoinLobbyResponse_Member::kMetadataFieldNumber;
#endif  // !_MSC_VER

CMsgClientMMSJoinLobbyResponse_Member::CMsgClientMMSJoinLobbyResponse_Member()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientMMSJoinLobbyResponse_Member::InitAsDefaultInstance() {
}

CMsgClientMMSJoinLobbyResponse_Member::CMsgClientMMSJoinLobbyResponse_Member(const CMsgClientMMSJoinLobbyResponse_Member& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientMMSJoinLobbyResponse_Member::SharedCtor() {
  _cached_size_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
  persona_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  metadata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientMMSJoinLobbyResponse_Member::~CMsgClientMMSJoinLobbyResponse_Member() {
  SharedDtor();
}

void CMsgClientMMSJoinLobbyResponse_Member::SharedDtor() {
  if (persona_name_ != &::google::protobuf::internal::kEmptyString) {
    delete persona_name_;
  }
  if (metadata_ != &::google::protobuf::internal::kEmptyString) {
    delete metadata_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientMMSJoinLobbyResponse_Member::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientMMSJoinLobbyResponse_Member& CMsgClientMMSJoinLobbyResponse_Member::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientMMSJoinLobbyResponse_Member* CMsgClientMMSJoinLobbyResponse_Member::default_instance_ = NULL;

CMsgClientMMSJoinLobbyResponse_Member* CMsgClientMMSJoinLobbyResponse_Member::New() const {
  return new CMsgClientMMSJoinLobbyResponse_Member;
}

void CMsgClientMMSJoinLobbyResponse_Member::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_ = GOOGLE_ULONGLONG(0);
    if (has_persona_name()) {
      if (persona_name_ != &::google::protobuf::internal::kEmptyString) {
        persona_name_->clear();
      }
    }
    if (has_metadata()) {
      if (metadata_ != &::google::protobuf::internal::kEmptyString) {
        metadata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientMMSJoinLobbyResponse_Member::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          set_has_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_persona_name;
        break;
      }

      // optional string persona_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_persona_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_metadata;
        break;
      }

      // optional bytes metadata = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_metadata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientMMSJoinLobbyResponse_Member::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional string persona_name = 2;
  if (has_persona_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->persona_name(), output);
  }

  // optional bytes metadata = 3;
  if (has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->metadata(), output);
  }

}

int CMsgClientMMSJoinLobbyResponse_Member::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional string persona_name = 2;
    if (has_persona_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona_name());
    }

    // optional bytes metadata = 3;
    if (has_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->metadata());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMMSJoinLobbyResponse_Member::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientMMSJoinLobbyResponse_Member*>(&from));
}

void CMsgClientMMSJoinLobbyResponse_Member::MergeFrom(const CMsgClientMMSJoinLobbyResponse_Member& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
    if (from.has_persona_name()) {
      set_persona_name(from.persona_name());
    }
    if (from.has_metadata()) {
      set_metadata(from.metadata());
    }
  }
}

void CMsgClientMMSJoinLobbyResponse_Member::CopyFrom(const CMsgClientMMSJoinLobbyResponse_Member& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSJoinLobbyResponse_Member::IsInitialized() const {

  return true;
}

void CMsgClientMMSJoinLobbyResponse_Member::Swap(CMsgClientMMSJoinLobbyResponse_Member* other) {
  if (other != this) {
    std::swap(steam_id_, other->steam_id_);
    std::swap(persona_name_, other->persona_name_);
    std::swap(metadata_, other->metadata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientMMSJoinLobbyResponse_Member::GetTypeName() const {
  return "Sc.CMsgClientMMSJoinLobbyResponse.Member";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientMMSJoinLobbyResponse::kAppIdFieldNumber;
const int CMsgClientMMSJoinLobbyResponse::kSteamIdLobbyFieldNumber;
const int CMsgClientMMSJoinLobbyResponse::kChatRoomEnterResponseFieldNumber;
const int CMsgClientMMSJoinLobbyResponse::kMaxMembersFieldNumber;
const int CMsgClientMMSJoinLobbyResponse::kLobbyTypeFieldNumber;
const int CMsgClientMMSJoinLobbyResponse::kLobbyFlagsFieldNumber;
const int CMsgClientMMSJoinLobbyResponse::kSteamIdOwnerFieldNumber;
const int CMsgClientMMSJoinLobbyResponse::kMetadataFieldNumber;
const int CMsgClientMMSJoinLobbyResponse::kMembersFieldNumber;
#endif  // !_MSC_VER

CMsgClientMMSJoinLobbyResponse::CMsgClientMMSJoinLobbyResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientMMSJoinLobbyResponse::InitAsDefaultInstance() {
}

CMsgClientMMSJoinLobbyResponse::CMsgClientMMSJoinLobbyResponse(const CMsgClientMMSJoinLobbyResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientMMSJoinLobbyResponse::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  steam_id_lobby_ = GOOGLE_ULONGLONG(0);
  chat_room_enter_response_ = 0;
  max_members_ = 0;
  lobby_type_ = 0;
  lobby_flags_ = 0;
  steam_id_owner_ = GOOGLE_ULONGLONG(0);
  metadata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientMMSJoinLobbyResponse::~CMsgClientMMSJoinLobbyResponse() {
  SharedDtor();
}

void CMsgClientMMSJoinLobbyResponse::SharedDtor() {
  if (metadata_ != &::google::protobuf::internal::kEmptyString) {
    delete metadata_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientMMSJoinLobbyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientMMSJoinLobbyResponse& CMsgClientMMSJoinLobbyResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientMMSJoinLobbyResponse* CMsgClientMMSJoinLobbyResponse::default_instance_ = NULL;

CMsgClientMMSJoinLobbyResponse* CMsgClientMMSJoinLobbyResponse::New() const {
  return new CMsgClientMMSJoinLobbyResponse;
}

void CMsgClientMMSJoinLobbyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    steam_id_lobby_ = GOOGLE_ULONGLONG(0);
    chat_room_enter_response_ = 0;
    max_members_ = 0;
    lobby_type_ = 0;
    lobby_flags_ = 0;
    steam_id_owner_ = GOOGLE_ULONGLONG(0);
    if (has_metadata()) {
      if (metadata_ != &::google::protobuf::internal::kEmptyString) {
        metadata_->clear();
      }
    }
  }
  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientMMSJoinLobbyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_steam_id_lobby;
        break;
      }

      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steam_id_lobby:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby_)));
          set_has_steam_id_lobby();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_chat_room_enter_response;
        break;
      }

      // optional int32 chat_room_enter_response = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chat_room_enter_response:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chat_room_enter_response_)));
          set_has_chat_room_enter_response();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_max_members;
        break;
      }

      // optional int32 max_members = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_members:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_members_)));
          set_has_max_members();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lobby_type;
        break;
      }

      // optional int32 lobby_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lobby_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lobby_type_)));
          set_has_lobby_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_lobby_flags;
        break;
      }

      // optional int32 lobby_flags = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lobby_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lobby_flags_)));
          set_has_lobby_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_steam_id_owner;
        break;
      }

      // optional fixed64 steam_id_owner = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steam_id_owner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_owner_)));
          set_has_steam_id_owner();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_metadata;
        break;
      }

      // optional bytes metadata = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_metadata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_members;
        break;
      }

      // repeated .Sc.CMsgClientMMSJoinLobbyResponse.Member members = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_members;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientMMSJoinLobbyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (has_steam_id_lobby()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_lobby(), output);
  }

  // optional int32 chat_room_enter_response = 3;
  if (has_chat_room_enter_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->chat_room_enter_response(), output);
  }

  // optional int32 max_members = 4;
  if (has_max_members()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_members(), output);
  }

  // optional int32 lobby_type = 5;
  if (has_lobby_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->lobby_type(), output);
  }

  // optional int32 lobby_flags = 6;
  if (has_lobby_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lobby_flags(), output);
  }

  // optional fixed64 steam_id_owner = 7;
  if (has_steam_id_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->steam_id_owner(), output);
  }

  // optional bytes metadata = 8;
  if (has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->metadata(), output);
  }

  // repeated .Sc.CMsgClientMMSJoinLobbyResponse.Member members = 9;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->members(i), output);
  }

}

int CMsgClientMMSJoinLobbyResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional fixed64 steam_id_lobby = 2;
    if (has_steam_id_lobby()) {
      total_size += 1 + 8;
    }

    // optional int32 chat_room_enter_response = 3;
    if (has_chat_room_enter_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chat_room_enter_response());
    }

    // optional int32 max_members = 4;
    if (has_max_members()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_members());
    }

    // optional int32 lobby_type = 5;
    if (has_lobby_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lobby_type());
    }

    // optional int32 lobby_flags = 6;
    if (has_lobby_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lobby_flags());
    }

    // optional fixed64 steam_id_owner = 7;
    if (has_steam_id_owner()) {
      total_size += 1 + 8;
    }

    // optional bytes metadata = 8;
    if (has_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->metadata());
    }

  }
  // repeated .Sc.CMsgClientMMSJoinLobbyResponse.Member members = 9;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMMSJoinLobbyResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientMMSJoinLobbyResponse*>(&from));
}

void CMsgClientMMSJoinLobbyResponse::MergeFrom(const CMsgClientMMSJoinLobbyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_steam_id_lobby()) {
      set_steam_id_lobby(from.steam_id_lobby());
    }
    if (from.has_chat_room_enter_response()) {
      set_chat_room_enter_response(from.chat_room_enter_response());
    }
    if (from.has_max_members()) {
      set_max_members(from.max_members());
    }
    if (from.has_lobby_type()) {
      set_lobby_type(from.lobby_type());
    }
    if (from.has_lobby_flags()) {
      set_lobby_flags(from.lobby_flags());
    }
    if (from.has_steam_id_owner()) {
      set_steam_id_owner(from.steam_id_owner());
    }
    if (from.has_metadata()) {
      set_metadata(from.metadata());
    }
  }
}

void CMsgClientMMSJoinLobbyResponse::CopyFrom(const CMsgClientMMSJoinLobbyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSJoinLobbyResponse::IsInitialized() const {

  return true;
}

void CMsgClientMMSJoinLobbyResponse::Swap(CMsgClientMMSJoinLobbyResponse* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(steam_id_lobby_, other->steam_id_lobby_);
    std::swap(chat_room_enter_response_, other->chat_room_enter_response_);
    std::swap(max_members_, other->max_members_);
    std::swap(lobby_type_, other->lobby_type_);
    std::swap(lobby_flags_, other->lobby_flags_);
    std::swap(steam_id_owner_, other->steam_id_owner_);
    std::swap(metadata_, other->metadata_);
    members_.Swap(&other->members_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientMMSJoinLobbyResponse::GetTypeName() const {
  return "Sc.CMsgClientMMSJoinLobbyResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientMMSLeaveLobby::kAppIdFieldNumber;
const int CMsgClientMMSLeaveLobby::kSteamIdLobbyFieldNumber;
#endif  // !_MSC_VER

CMsgClientMMSLeaveLobby::CMsgClientMMSLeaveLobby()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientMMSLeaveLobby::InitAsDefaultInstance() {
}

CMsgClientMMSLeaveLobby::CMsgClientMMSLeaveLobby(const CMsgClientMMSLeaveLobby& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientMMSLeaveLobby::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  steam_id_lobby_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientMMSLeaveLobby::~CMsgClientMMSLeaveLobby() {
  SharedDtor();
}

void CMsgClientMMSLeaveLobby::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientMMSLeaveLobby::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientMMSLeaveLobby& CMsgClientMMSLeaveLobby::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientMMSLeaveLobby* CMsgClientMMSLeaveLobby::default_instance_ = NULL;

CMsgClientMMSLeaveLobby* CMsgClientMMSLeaveLobby::New() const {
  return new CMsgClientMMSLeaveLobby;
}

void CMsgClientMMSLeaveLobby::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    steam_id_lobby_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientMMSLeaveLobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_steam_id_lobby;
        break;
      }

      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steam_id_lobby:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby_)));
          set_has_steam_id_lobby();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientMMSLeaveLobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (has_steam_id_lobby()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_lobby(), output);
  }

}

int CMsgClientMMSLeaveLobby::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional fixed64 steam_id_lobby = 2;
    if (has_steam_id_lobby()) {
      total_size += 1 + 8;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMMSLeaveLobby::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientMMSLeaveLobby*>(&from));
}

void CMsgClientMMSLeaveLobby::MergeFrom(const CMsgClientMMSLeaveLobby& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_steam_id_lobby()) {
      set_steam_id_lobby(from.steam_id_lobby());
    }
  }
}

void CMsgClientMMSLeaveLobby::CopyFrom(const CMsgClientMMSLeaveLobby& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSLeaveLobby::IsInitialized() const {

  return true;
}

void CMsgClientMMSLeaveLobby::Swap(CMsgClientMMSLeaveLobby* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(steam_id_lobby_, other->steam_id_lobby_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientMMSLeaveLobby::GetTypeName() const {
  return "Sc.CMsgClientMMSLeaveLobby";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientMMSLeaveLobbyResponse::kAppIdFieldNumber;
const int CMsgClientMMSLeaveLobbyResponse::kSteamIdLobbyFieldNumber;
const int CMsgClientMMSLeaveLobbyResponse::kEresultFieldNumber;
#endif  // !_MSC_VER

CMsgClientMMSLeaveLobbyResponse::CMsgClientMMSLeaveLobbyResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientMMSLeaveLobbyResponse::InitAsDefaultInstance() {
}

CMsgClientMMSLeaveLobbyResponse::CMsgClientMMSLeaveLobbyResponse(const CMsgClientMMSLeaveLobbyResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientMMSLeaveLobbyResponse::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  steam_id_lobby_ = GOOGLE_ULONGLONG(0);
  eresult_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientMMSLeaveLobbyResponse::~CMsgClientMMSLeaveLobbyResponse() {
  SharedDtor();
}

void CMsgClientMMSLeaveLobbyResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientMMSLeaveLobbyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientMMSLeaveLobbyResponse& CMsgClientMMSLeaveLobbyResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientMMSLeaveLobbyResponse* CMsgClientMMSLeaveLobbyResponse::default_instance_ = NULL;

CMsgClientMMSLeaveLobbyResponse* CMsgClientMMSLeaveLobbyResponse::New() const {
  return new CMsgClientMMSLeaveLobbyResponse;
}

void CMsgClientMMSLeaveLobbyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    steam_id_lobby_ = GOOGLE_ULONGLONG(0);
    eresult_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientMMSLeaveLobbyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_steam_id_lobby;
        break;
      }

      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steam_id_lobby:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby_)));
          set_has_steam_id_lobby();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_eresult;
        break;
      }

      // optional int32 eresult = 3 [default = 2];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eresult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientMMSLeaveLobbyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (has_steam_id_lobby()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_lobby(), output);
  }

  // optional int32 eresult = 3 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->eresult(), output);
  }

}

int CMsgClientMMSLeaveLobbyResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional fixed64 steam_id_lobby = 2;
    if (has_steam_id_lobby()) {
      total_size += 1 + 8;
    }

    // optional int32 eresult = 3 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMMSLeaveLobbyResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientMMSLeaveLobbyResponse*>(&from));
}

void CMsgClientMMSLeaveLobbyResponse::MergeFrom(const CMsgClientMMSLeaveLobbyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_steam_id_lobby()) {
      set_steam_id_lobby(from.steam_id_lobby());
    }
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
  }
}

void CMsgClientMMSLeaveLobbyResponse::CopyFrom(const CMsgClientMMSLeaveLobbyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSLeaveLobbyResponse::IsInitialized() const {

  return true;
}

void CMsgClientMMSLeaveLobbyResponse::Swap(CMsgClientMMSLeaveLobbyResponse* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(steam_id_lobby_, other->steam_id_lobby_);
    std::swap(eresult_, other->eresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientMMSLeaveLobbyResponse::GetTypeName() const {
  return "Sc.CMsgClientMMSLeaveLobbyResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientMMSGetLobbyList_Filter::kKeyFieldNumber;
const int CMsgClientMMSGetLobbyList_Filter::kValueFieldNumber;
const int CMsgClientMMSGetLobbyList_Filter::kComparisionFieldNumber;
const int CMsgClientMMSGetLobbyList_Filter::kFilterTypeFieldNumber;
#endif  // !_MSC_VER

CMsgClientMMSGetLobbyList_Filter::CMsgClientMMSGetLobbyList_Filter()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientMMSGetLobbyList_Filter::InitAsDefaultInstance() {
}

CMsgClientMMSGetLobbyList_Filter::CMsgClientMMSGetLobbyList_Filter(const CMsgClientMMSGetLobbyList_Filter& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientMMSGetLobbyList_Filter::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  comparision_ = 0;
  filter_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientMMSGetLobbyList_Filter::~CMsgClientMMSGetLobbyList_Filter() {
  SharedDtor();
}

void CMsgClientMMSGetLobbyList_Filter::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientMMSGetLobbyList_Filter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientMMSGetLobbyList_Filter& CMsgClientMMSGetLobbyList_Filter::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientMMSGetLobbyList_Filter* CMsgClientMMSGetLobbyList_Filter::default_instance_ = NULL;

CMsgClientMMSGetLobbyList_Filter* CMsgClientMMSGetLobbyList_Filter::New() const {
  return new CMsgClientMMSGetLobbyList_Filter;
}

void CMsgClientMMSGetLobbyList_Filter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    comparision_ = 0;
    filter_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientMMSGetLobbyList_Filter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_comparision;
        break;
      }

      // optional int32 comparision = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_comparision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &comparision_)));
          set_has_comparision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_filter_type;
        break;
      }

      // optional int32 filter_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filter_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &filter_type_)));
          set_has_filter_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientMMSGetLobbyList_Filter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  // optional int32 comparision = 3;
  if (has_comparision()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->comparision(), output);
  }

  // optional int32 filter_type = 4;
  if (has_filter_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->filter_type(), output);
  }

}

int CMsgClientMMSGetLobbyList_Filter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional int32 comparision = 3;
    if (has_comparision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->comparision());
    }

    // optional int32 filter_type = 4;
    if (has_filter_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->filter_type());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMMSGetLobbyList_Filter::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientMMSGetLobbyList_Filter*>(&from));
}

void CMsgClientMMSGetLobbyList_Filter::MergeFrom(const CMsgClientMMSGetLobbyList_Filter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_comparision()) {
      set_comparision(from.comparision());
    }
    if (from.has_filter_type()) {
      set_filter_type(from.filter_type());
    }
  }
}

void CMsgClientMMSGetLobbyList_Filter::CopyFrom(const CMsgClientMMSGetLobbyList_Filter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSGetLobbyList_Filter::IsInitialized() const {

  return true;
}

void CMsgClientMMSGetLobbyList_Filter::Swap(CMsgClientMMSGetLobbyList_Filter* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(comparision_, other->comparision_);
    std::swap(filter_type_, other->filter_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientMMSGetLobbyList_Filter::GetTypeName() const {
  return "Sc.CMsgClientMMSGetLobbyList.Filter";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientMMSGetLobbyList::kAppIdFieldNumber;
const int CMsgClientMMSGetLobbyList::kNumLobbiesRequestedFieldNumber;
const int CMsgClientMMSGetLobbyList::kCellIdFieldNumber;
const int CMsgClientMMSGetLobbyList::kPublicIpFieldNumber;
const int CMsgClientMMSGetLobbyList::kFiltersFieldNumber;
#endif  // !_MSC_VER

CMsgClientMMSGetLobbyList::CMsgClientMMSGetLobbyList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientMMSGetLobbyList::InitAsDefaultInstance() {
}

CMsgClientMMSGetLobbyList::CMsgClientMMSGetLobbyList(const CMsgClientMMSGetLobbyList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientMMSGetLobbyList::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  num_lobbies_requested_ = 0;
  cell_id_ = 0u;
  public_ip_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientMMSGetLobbyList::~CMsgClientMMSGetLobbyList() {
  SharedDtor();
}

void CMsgClientMMSGetLobbyList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientMMSGetLobbyList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientMMSGetLobbyList& CMsgClientMMSGetLobbyList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientMMSGetLobbyList* CMsgClientMMSGetLobbyList::default_instance_ = NULL;

CMsgClientMMSGetLobbyList* CMsgClientMMSGetLobbyList::New() const {
  return new CMsgClientMMSGetLobbyList;
}

void CMsgClientMMSGetLobbyList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    num_lobbies_requested_ = 0;
    cell_id_ = 0u;
    public_ip_ = 0u;
  }
  filters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientMMSGetLobbyList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num_lobbies_requested;
        break;
      }

      // optional int32 num_lobbies_requested = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_lobbies_requested:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_lobbies_requested_)));
          set_has_num_lobbies_requested();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cell_id;
        break;
      }

      // optional uint32 cell_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cell_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_)));
          set_has_cell_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_public_ip;
        break;
      }

      // optional uint32 public_ip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_public_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &public_ip_)));
          set_has_public_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_filters;
        break;
      }

      // repeated .Sc.CMsgClientMMSGetLobbyList.Filter filters = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_filters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_filters;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientMMSGetLobbyList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional int32 num_lobbies_requested = 3;
  if (has_num_lobbies_requested()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_lobbies_requested(), output);
  }

  // optional uint32 cell_id = 4;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cell_id(), output);
  }

  // optional uint32 public_ip = 5;
  if (has_public_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->public_ip(), output);
  }

  // repeated .Sc.CMsgClientMMSGetLobbyList.Filter filters = 6;
  for (int i = 0; i < this->filters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->filters(i), output);
  }

}

int CMsgClientMMSGetLobbyList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional int32 num_lobbies_requested = 3;
    if (has_num_lobbies_requested()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_lobbies_requested());
    }

    // optional uint32 cell_id = 4;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_id());
    }

    // optional uint32 public_ip = 5;
    if (has_public_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->public_ip());
    }

  }
  // repeated .Sc.CMsgClientMMSGetLobbyList.Filter filters = 6;
  total_size += 1 * this->filters_size();
  for (int i = 0; i < this->filters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->filters(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMMSGetLobbyList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientMMSGetLobbyList*>(&from));
}

void CMsgClientMMSGetLobbyList::MergeFrom(const CMsgClientMMSGetLobbyList& from) {
  GOOGLE_CHECK_NE(&from, this);
  filters_.MergeFrom(from.filters_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_num_lobbies_requested()) {
      set_num_lobbies_requested(from.num_lobbies_requested());
    }
    if (from.has_cell_id()) {
      set_cell_id(from.cell_id());
    }
    if (from.has_public_ip()) {
      set_public_ip(from.public_ip());
    }
  }
}

void CMsgClientMMSGetLobbyList::CopyFrom(const CMsgClientMMSGetLobbyList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSGetLobbyList::IsInitialized() const {

  return true;
}

void CMsgClientMMSGetLobbyList::Swap(CMsgClientMMSGetLobbyList* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(num_lobbies_requested_, other->num_lobbies_requested_);
    std::swap(cell_id_, other->cell_id_);
    std::swap(public_ip_, other->public_ip_);
    filters_.Swap(&other->filters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientMMSGetLobbyList::GetTypeName() const {
  return "Sc.CMsgClientMMSGetLobbyList";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientMMSGetLobbyListResponse_Lobby::kSteamIdFieldNumber;
const int CMsgClientMMSGetLobbyListResponse_Lobby::kMaxMembersFieldNumber;
const int CMsgClientMMSGetLobbyListResponse_Lobby::kLobbyTypeFieldNumber;
const int CMsgClientMMSGetLobbyListResponse_Lobby::kLobbyFlagsFieldNumber;
const int CMsgClientMMSGetLobbyListResponse_Lobby::kMetadataFieldNumber;
const int CMsgClientMMSGetLobbyListResponse_Lobby::kNumMembersFieldNumber;
const int CMsgClientMMSGetLobbyListResponse_Lobby::kDistanceFieldNumber;
const int CMsgClientMMSGetLobbyListResponse_Lobby::kWeightFieldNumber;
#endif  // !_MSC_VER

CMsgClientMMSGetLobbyListResponse_Lobby::CMsgClientMMSGetLobbyListResponse_Lobby()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientMMSGetLobbyListResponse_Lobby::InitAsDefaultInstance() {
}

CMsgClientMMSGetLobbyListResponse_Lobby::CMsgClientMMSGetLobbyListResponse_Lobby(const CMsgClientMMSGetLobbyListResponse_Lobby& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientMMSGetLobbyListResponse_Lobby::SharedCtor() {
  _cached_size_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
  max_members_ = 0;
  lobby_type_ = 0;
  lobby_flags_ = 0;
  metadata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  num_members_ = 0;
  distance_ = 0;
  weight_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientMMSGetLobbyListResponse_Lobby::~CMsgClientMMSGetLobbyListResponse_Lobby() {
  SharedDtor();
}

void CMsgClientMMSGetLobbyListResponse_Lobby::SharedDtor() {
  if (metadata_ != &::google::protobuf::internal::kEmptyString) {
    delete metadata_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientMMSGetLobbyListResponse_Lobby::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientMMSGetLobbyListResponse_Lobby& CMsgClientMMSGetLobbyListResponse_Lobby::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientMMSGetLobbyListResponse_Lobby* CMsgClientMMSGetLobbyListResponse_Lobby::default_instance_ = NULL;

CMsgClientMMSGetLobbyListResponse_Lobby* CMsgClientMMSGetLobbyListResponse_Lobby::New() const {
  return new CMsgClientMMSGetLobbyListResponse_Lobby;
}

void CMsgClientMMSGetLobbyListResponse_Lobby::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_ = GOOGLE_ULONGLONG(0);
    max_members_ = 0;
    lobby_type_ = 0;
    lobby_flags_ = 0;
    if (has_metadata()) {
      if (metadata_ != &::google::protobuf::internal::kEmptyString) {
        metadata_->clear();
      }
    }
    num_members_ = 0;
    distance_ = 0;
    weight_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientMMSGetLobbyListResponse_Lobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          set_has_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_max_members;
        break;
      }

      // optional int32 max_members = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_members:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_members_)));
          set_has_max_members();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lobby_type;
        break;
      }

      // optional int32 lobby_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lobby_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lobby_type_)));
          set_has_lobby_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lobby_flags;
        break;
      }

      // optional int32 lobby_flags = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lobby_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lobby_flags_)));
          set_has_lobby_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_metadata;
        break;
      }

      // optional bytes metadata = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_metadata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_num_members;
        break;
      }

      // optional int32 num_members = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_members:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_members_)));
          set_has_num_members();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_distance;
        break;
      }

      // optional float distance = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
          set_has_distance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_weight;
        break;
      }

      // optional int64 weight = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientMMSGetLobbyListResponse_Lobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional int32 max_members = 2;
  if (has_max_members()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_members(), output);
  }

  // optional int32 lobby_type = 3;
  if (has_lobby_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lobby_type(), output);
  }

  // optional int32 lobby_flags = 4;
  if (has_lobby_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lobby_flags(), output);
  }

  // optional bytes metadata = 5;
  if (has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->metadata(), output);
  }

  // optional int32 num_members = 6;
  if (has_num_members()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->num_members(), output);
  }

  // optional float distance = 7;
  if (has_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->distance(), output);
  }

  // optional int64 weight = 8;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->weight(), output);
  }

}

int CMsgClientMMSGetLobbyListResponse_Lobby::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional int32 max_members = 2;
    if (has_max_members()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_members());
    }

    // optional int32 lobby_type = 3;
    if (has_lobby_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lobby_type());
    }

    // optional int32 lobby_flags = 4;
    if (has_lobby_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lobby_flags());
    }

    // optional bytes metadata = 5;
    if (has_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->metadata());
    }

    // optional int32 num_members = 6;
    if (has_num_members()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_members());
    }

    // optional float distance = 7;
    if (has_distance()) {
      total_size += 1 + 4;
    }

    // optional int64 weight = 8;
    if (has_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->weight());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMMSGetLobbyListResponse_Lobby::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientMMSGetLobbyListResponse_Lobby*>(&from));
}

void CMsgClientMMSGetLobbyListResponse_Lobby::MergeFrom(const CMsgClientMMSGetLobbyListResponse_Lobby& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
    if (from.has_max_members()) {
      set_max_members(from.max_members());
    }
    if (from.has_lobby_type()) {
      set_lobby_type(from.lobby_type());
    }
    if (from.has_lobby_flags()) {
      set_lobby_flags(from.lobby_flags());
    }
    if (from.has_metadata()) {
      set_metadata(from.metadata());
    }
    if (from.has_num_members()) {
      set_num_members(from.num_members());
    }
    if (from.has_distance()) {
      set_distance(from.distance());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
  }
}

void CMsgClientMMSGetLobbyListResponse_Lobby::CopyFrom(const CMsgClientMMSGetLobbyListResponse_Lobby& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSGetLobbyListResponse_Lobby::IsInitialized() const {

  return true;
}

void CMsgClientMMSGetLobbyListResponse_Lobby::Swap(CMsgClientMMSGetLobbyListResponse_Lobby* other) {
  if (other != this) {
    std::swap(steam_id_, other->steam_id_);
    std::swap(max_members_, other->max_members_);
    std::swap(lobby_type_, other->lobby_type_);
    std::swap(lobby_flags_, other->lobby_flags_);
    std::swap(metadata_, other->metadata_);
    std::swap(num_members_, other->num_members_);
    std::swap(distance_, other->distance_);
    std::swap(weight_, other->weight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientMMSGetLobbyListResponse_Lobby::GetTypeName() const {
  return "Sc.CMsgClientMMSGetLobbyListResponse.Lobby";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientMMSGetLobbyListResponse::kAppIdFieldNumber;
const int CMsgClientMMSGetLobbyListResponse::kEresultFieldNumber;
const int CMsgClientMMSGetLobbyListResponse::kLobbiesFieldNumber;
#endif  // !_MSC_VER

CMsgClientMMSGetLobbyListResponse::CMsgClientMMSGetLobbyListResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientMMSGetLobbyListResponse::InitAsDefaultInstance() {
}

CMsgClientMMSGetLobbyListResponse::CMsgClientMMSGetLobbyListResponse(const CMsgClientMMSGetLobbyListResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientMMSGetLobbyListResponse::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  eresult_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientMMSGetLobbyListResponse::~CMsgClientMMSGetLobbyListResponse() {
  SharedDtor();
}

void CMsgClientMMSGetLobbyListResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientMMSGetLobbyListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientMMSGetLobbyListResponse& CMsgClientMMSGetLobbyListResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientMMSGetLobbyListResponse* CMsgClientMMSGetLobbyListResponse::default_instance_ = NULL;

CMsgClientMMSGetLobbyListResponse* CMsgClientMMSGetLobbyListResponse::New() const {
  return new CMsgClientMMSGetLobbyListResponse;
}

void CMsgClientMMSGetLobbyListResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    eresult_ = 2;
  }
  lobbies_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientMMSGetLobbyListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_eresult;
        break;
      }

      // optional int32 eresult = 3 [default = 2];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eresult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_lobbies;
        break;
      }

      // repeated .Sc.CMsgClientMMSGetLobbyListResponse.Lobby lobbies = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lobbies:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lobbies()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_lobbies;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientMMSGetLobbyListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional int32 eresult = 3 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->eresult(), output);
  }

  // repeated .Sc.CMsgClientMMSGetLobbyListResponse.Lobby lobbies = 4;
  for (int i = 0; i < this->lobbies_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->lobbies(i), output);
  }

}

int CMsgClientMMSGetLobbyListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional int32 eresult = 3 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  // repeated .Sc.CMsgClientMMSGetLobbyListResponse.Lobby lobbies = 4;
  total_size += 1 * this->lobbies_size();
  for (int i = 0; i < this->lobbies_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lobbies(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMMSGetLobbyListResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientMMSGetLobbyListResponse*>(&from));
}

void CMsgClientMMSGetLobbyListResponse::MergeFrom(const CMsgClientMMSGetLobbyListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  lobbies_.MergeFrom(from.lobbies_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
  }
}

void CMsgClientMMSGetLobbyListResponse::CopyFrom(const CMsgClientMMSGetLobbyListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSGetLobbyListResponse::IsInitialized() const {

  return true;
}

void CMsgClientMMSGetLobbyListResponse::Swap(CMsgClientMMSGetLobbyListResponse* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(eresult_, other->eresult_);
    lobbies_.Swap(&other->lobbies_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientMMSGetLobbyListResponse::GetTypeName() const {
  return "Sc.CMsgClientMMSGetLobbyListResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientMMSSetLobbyData::kAppIdFieldNumber;
const int CMsgClientMMSSetLobbyData::kSteamIdLobbyFieldNumber;
const int CMsgClientMMSSetLobbyData::kSteamIdMemberFieldNumber;
const int CMsgClientMMSSetLobbyData::kMaxMembersFieldNumber;
const int CMsgClientMMSSetLobbyData::kLobbyTypeFieldNumber;
const int CMsgClientMMSSetLobbyData::kLobbyFlagsFieldNumber;
const int CMsgClientMMSSetLobbyData::kMetadataFieldNumber;
#endif  // !_MSC_VER

CMsgClientMMSSetLobbyData::CMsgClientMMSSetLobbyData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientMMSSetLobbyData::InitAsDefaultInstance() {
}

CMsgClientMMSSetLobbyData::CMsgClientMMSSetLobbyData(const CMsgClientMMSSetLobbyData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientMMSSetLobbyData::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  steam_id_lobby_ = GOOGLE_ULONGLONG(0);
  steam_id_member_ = GOOGLE_ULONGLONG(0);
  max_members_ = 0;
  lobby_type_ = 0;
  lobby_flags_ = 0;
  metadata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientMMSSetLobbyData::~CMsgClientMMSSetLobbyData() {
  SharedDtor();
}

void CMsgClientMMSSetLobbyData::SharedDtor() {
  if (metadata_ != &::google::protobuf::internal::kEmptyString) {
    delete metadata_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientMMSSetLobbyData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientMMSSetLobbyData& CMsgClientMMSSetLobbyData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientMMSSetLobbyData* CMsgClientMMSSetLobbyData::default_instance_ = NULL;

CMsgClientMMSSetLobbyData* CMsgClientMMSSetLobbyData::New() const {
  return new CMsgClientMMSSetLobbyData;
}

void CMsgClientMMSSetLobbyData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    steam_id_lobby_ = GOOGLE_ULONGLONG(0);
    steam_id_member_ = GOOGLE_ULONGLONG(0);
    max_members_ = 0;
    lobby_type_ = 0;
    lobby_flags_ = 0;
    if (has_metadata()) {
      if (metadata_ != &::google::protobuf::internal::kEmptyString) {
        metadata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientMMSSetLobbyData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_steam_id_lobby;
        break;
      }

      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steam_id_lobby:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby_)));
          set_has_steam_id_lobby();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_steam_id_member;
        break;
      }

      // optional fixed64 steam_id_member = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steam_id_member:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_member_)));
          set_has_steam_id_member();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_max_members;
        break;
      }

      // optional int32 max_members = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_members:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_members_)));
          set_has_max_members();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lobby_type;
        break;
      }

      // optional int32 lobby_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lobby_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lobby_type_)));
          set_has_lobby_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_lobby_flags;
        break;
      }

      // optional int32 lobby_flags = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lobby_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lobby_flags_)));
          set_has_lobby_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_metadata;
        break;
      }

      // optional bytes metadata = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_metadata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientMMSSetLobbyData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (has_steam_id_lobby()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_lobby(), output);
  }

  // optional fixed64 steam_id_member = 3;
  if (has_steam_id_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->steam_id_member(), output);
  }

  // optional int32 max_members = 4;
  if (has_max_members()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_members(), output);
  }

  // optional int32 lobby_type = 5;
  if (has_lobby_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->lobby_type(), output);
  }

  // optional int32 lobby_flags = 6;
  if (has_lobby_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lobby_flags(), output);
  }

  // optional bytes metadata = 7;
  if (has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->metadata(), output);
  }

}

int CMsgClientMMSSetLobbyData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional fixed64 steam_id_lobby = 2;
    if (has_steam_id_lobby()) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id_member = 3;
    if (has_steam_id_member()) {
      total_size += 1 + 8;
    }

    // optional int32 max_members = 4;
    if (has_max_members()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_members());
    }

    // optional int32 lobby_type = 5;
    if (has_lobby_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lobby_type());
    }

    // optional int32 lobby_flags = 6;
    if (has_lobby_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lobby_flags());
    }

    // optional bytes metadata = 7;
    if (has_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->metadata());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMMSSetLobbyData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientMMSSetLobbyData*>(&from));
}

void CMsgClientMMSSetLobbyData::MergeFrom(const CMsgClientMMSSetLobbyData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_steam_id_lobby()) {
      set_steam_id_lobby(from.steam_id_lobby());
    }
    if (from.has_steam_id_member()) {
      set_steam_id_member(from.steam_id_member());
    }
    if (from.has_max_members()) {
      set_max_members(from.max_members());
    }
    if (from.has_lobby_type()) {
      set_lobby_type(from.lobby_type());
    }
    if (from.has_lobby_flags()) {
      set_lobby_flags(from.lobby_flags());
    }
    if (from.has_metadata()) {
      set_metadata(from.metadata());
    }
  }
}

void CMsgClientMMSSetLobbyData::CopyFrom(const CMsgClientMMSSetLobbyData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSSetLobbyData::IsInitialized() const {

  return true;
}

void CMsgClientMMSSetLobbyData::Swap(CMsgClientMMSSetLobbyData* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(steam_id_lobby_, other->steam_id_lobby_);
    std::swap(steam_id_member_, other->steam_id_member_);
    std::swap(max_members_, other->max_members_);
    std::swap(lobby_type_, other->lobby_type_);
    std::swap(lobby_flags_, other->lobby_flags_);
    std::swap(metadata_, other->metadata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientMMSSetLobbyData::GetTypeName() const {
  return "Sc.CMsgClientMMSSetLobbyData";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientMMSSetLobbyDataResponse::kAppIdFieldNumber;
const int CMsgClientMMSSetLobbyDataResponse::kSteamIdLobbyFieldNumber;
const int CMsgClientMMSSetLobbyDataResponse::kEresultFieldNumber;
#endif  // !_MSC_VER

CMsgClientMMSSetLobbyDataResponse::CMsgClientMMSSetLobbyDataResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientMMSSetLobbyDataResponse::InitAsDefaultInstance() {
}

CMsgClientMMSSetLobbyDataResponse::CMsgClientMMSSetLobbyDataResponse(const CMsgClientMMSSetLobbyDataResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientMMSSetLobbyDataResponse::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  steam_id_lobby_ = GOOGLE_ULONGLONG(0);
  eresult_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientMMSSetLobbyDataResponse::~CMsgClientMMSSetLobbyDataResponse() {
  SharedDtor();
}

void CMsgClientMMSSetLobbyDataResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientMMSSetLobbyDataResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientMMSSetLobbyDataResponse& CMsgClientMMSSetLobbyDataResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientMMSSetLobbyDataResponse* CMsgClientMMSSetLobbyDataResponse::default_instance_ = NULL;

CMsgClientMMSSetLobbyDataResponse* CMsgClientMMSSetLobbyDataResponse::New() const {
  return new CMsgClientMMSSetLobbyDataResponse;
}

void CMsgClientMMSSetLobbyDataResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    steam_id_lobby_ = GOOGLE_ULONGLONG(0);
    eresult_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientMMSSetLobbyDataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_steam_id_lobby;
        break;
      }

      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steam_id_lobby:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby_)));
          set_has_steam_id_lobby();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_eresult;
        break;
      }

      // optional int32 eresult = 3 [default = 2];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eresult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientMMSSetLobbyDataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (has_steam_id_lobby()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_lobby(), output);
  }

  // optional int32 eresult = 3 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->eresult(), output);
  }

}

int CMsgClientMMSSetLobbyDataResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional fixed64 steam_id_lobby = 2;
    if (has_steam_id_lobby()) {
      total_size += 1 + 8;
    }

    // optional int32 eresult = 3 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMMSSetLobbyDataResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientMMSSetLobbyDataResponse*>(&from));
}

void CMsgClientMMSSetLobbyDataResponse::MergeFrom(const CMsgClientMMSSetLobbyDataResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_steam_id_lobby()) {
      set_steam_id_lobby(from.steam_id_lobby());
    }
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
  }
}

void CMsgClientMMSSetLobbyDataResponse::CopyFrom(const CMsgClientMMSSetLobbyDataResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSSetLobbyDataResponse::IsInitialized() const {

  return true;
}

void CMsgClientMMSSetLobbyDataResponse::Swap(CMsgClientMMSSetLobbyDataResponse* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(steam_id_lobby_, other->steam_id_lobby_);
    std::swap(eresult_, other->eresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientMMSSetLobbyDataResponse::GetTypeName() const {
  return "Sc.CMsgClientMMSSetLobbyDataResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientMMSGetLobbyData::kAppIdFieldNumber;
const int CMsgClientMMSGetLobbyData::kSteamIdLobbyFieldNumber;
#endif  // !_MSC_VER

CMsgClientMMSGetLobbyData::CMsgClientMMSGetLobbyData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientMMSGetLobbyData::InitAsDefaultInstance() {
}

CMsgClientMMSGetLobbyData::CMsgClientMMSGetLobbyData(const CMsgClientMMSGetLobbyData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientMMSGetLobbyData::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  steam_id_lobby_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientMMSGetLobbyData::~CMsgClientMMSGetLobbyData() {
  SharedDtor();
}

void CMsgClientMMSGetLobbyData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientMMSGetLobbyData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientMMSGetLobbyData& CMsgClientMMSGetLobbyData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientMMSGetLobbyData* CMsgClientMMSGetLobbyData::default_instance_ = NULL;

CMsgClientMMSGetLobbyData* CMsgClientMMSGetLobbyData::New() const {
  return new CMsgClientMMSGetLobbyData;
}

void CMsgClientMMSGetLobbyData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    steam_id_lobby_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientMMSGetLobbyData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_steam_id_lobby;
        break;
      }

      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steam_id_lobby:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby_)));
          set_has_steam_id_lobby();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientMMSGetLobbyData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (has_steam_id_lobby()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_lobby(), output);
  }

}

int CMsgClientMMSGetLobbyData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional fixed64 steam_id_lobby = 2;
    if (has_steam_id_lobby()) {
      total_size += 1 + 8;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMMSGetLobbyData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientMMSGetLobbyData*>(&from));
}

void CMsgClientMMSGetLobbyData::MergeFrom(const CMsgClientMMSGetLobbyData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_steam_id_lobby()) {
      set_steam_id_lobby(from.steam_id_lobby());
    }
  }
}

void CMsgClientMMSGetLobbyData::CopyFrom(const CMsgClientMMSGetLobbyData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSGetLobbyData::IsInitialized() const {

  return true;
}

void CMsgClientMMSGetLobbyData::Swap(CMsgClientMMSGetLobbyData* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(steam_id_lobby_, other->steam_id_lobby_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientMMSGetLobbyData::GetTypeName() const {
  return "Sc.CMsgClientMMSGetLobbyData";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientMMSLobbyData_Member::kSteamIdFieldNumber;
const int CMsgClientMMSLobbyData_Member::kPersonaNameFieldNumber;
const int CMsgClientMMSLobbyData_Member::kMetadataFieldNumber;
#endif  // !_MSC_VER

CMsgClientMMSLobbyData_Member::CMsgClientMMSLobbyData_Member()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientMMSLobbyData_Member::InitAsDefaultInstance() {
}

CMsgClientMMSLobbyData_Member::CMsgClientMMSLobbyData_Member(const CMsgClientMMSLobbyData_Member& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientMMSLobbyData_Member::SharedCtor() {
  _cached_size_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
  persona_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  metadata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientMMSLobbyData_Member::~CMsgClientMMSLobbyData_Member() {
  SharedDtor();
}

void CMsgClientMMSLobbyData_Member::SharedDtor() {
  if (persona_name_ != &::google::protobuf::internal::kEmptyString) {
    delete persona_name_;
  }
  if (metadata_ != &::google::protobuf::internal::kEmptyString) {
    delete metadata_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientMMSLobbyData_Member::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientMMSLobbyData_Member& CMsgClientMMSLobbyData_Member::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientMMSLobbyData_Member* CMsgClientMMSLobbyData_Member::default_instance_ = NULL;

CMsgClientMMSLobbyData_Member* CMsgClientMMSLobbyData_Member::New() const {
  return new CMsgClientMMSLobbyData_Member;
}

void CMsgClientMMSLobbyData_Member::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_ = GOOGLE_ULONGLONG(0);
    if (has_persona_name()) {
      if (persona_name_ != &::google::protobuf::internal::kEmptyString) {
        persona_name_->clear();
      }
    }
    if (has_metadata()) {
      if (metadata_ != &::google::protobuf::internal::kEmptyString) {
        metadata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientMMSLobbyData_Member::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          set_has_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_persona_name;
        break;
      }

      // optional string persona_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_persona_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_metadata;
        break;
      }

      // optional bytes metadata = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_metadata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientMMSLobbyData_Member::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional string persona_name = 2;
  if (has_persona_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->persona_name(), output);
  }

  // optional bytes metadata = 3;
  if (has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->metadata(), output);
  }

}

int CMsgClientMMSLobbyData_Member::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional string persona_name = 2;
    if (has_persona_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona_name());
    }

    // optional bytes metadata = 3;
    if (has_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->metadata());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMMSLobbyData_Member::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientMMSLobbyData_Member*>(&from));
}

void CMsgClientMMSLobbyData_Member::MergeFrom(const CMsgClientMMSLobbyData_Member& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
    if (from.has_persona_name()) {
      set_persona_name(from.persona_name());
    }
    if (from.has_metadata()) {
      set_metadata(from.metadata());
    }
  }
}

void CMsgClientMMSLobbyData_Member::CopyFrom(const CMsgClientMMSLobbyData_Member& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSLobbyData_Member::IsInitialized() const {

  return true;
}

void CMsgClientMMSLobbyData_Member::Swap(CMsgClientMMSLobbyData_Member* other) {
  if (other != this) {
    std::swap(steam_id_, other->steam_id_);
    std::swap(persona_name_, other->persona_name_);
    std::swap(metadata_, other->metadata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientMMSLobbyData_Member::GetTypeName() const {
  return "Sc.CMsgClientMMSLobbyData.Member";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientMMSLobbyData::kAppIdFieldNumber;
const int CMsgClientMMSLobbyData::kSteamIdLobbyFieldNumber;
const int CMsgClientMMSLobbyData::kNumMembersFieldNumber;
const int CMsgClientMMSLobbyData::kMaxMembersFieldNumber;
const int CMsgClientMMSLobbyData::kLobbyTypeFieldNumber;
const int CMsgClientMMSLobbyData::kLobbyFlagsFieldNumber;
const int CMsgClientMMSLobbyData::kSteamIdOwnerFieldNumber;
const int CMsgClientMMSLobbyData::kMetadataFieldNumber;
const int CMsgClientMMSLobbyData::kMembersFieldNumber;
const int CMsgClientMMSLobbyData::kLobbyCellidFieldNumber;
#endif  // !_MSC_VER

CMsgClientMMSLobbyData::CMsgClientMMSLobbyData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientMMSLobbyData::InitAsDefaultInstance() {
}

CMsgClientMMSLobbyData::CMsgClientMMSLobbyData(const CMsgClientMMSLobbyData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientMMSLobbyData::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  steam_id_lobby_ = GOOGLE_ULONGLONG(0);
  num_members_ = 0;
  max_members_ = 0;
  lobby_type_ = 0;
  lobby_flags_ = 0;
  steam_id_owner_ = GOOGLE_ULONGLONG(0);
  metadata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lobby_cellid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientMMSLobbyData::~CMsgClientMMSLobbyData() {
  SharedDtor();
}

void CMsgClientMMSLobbyData::SharedDtor() {
  if (metadata_ != &::google::protobuf::internal::kEmptyString) {
    delete metadata_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientMMSLobbyData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientMMSLobbyData& CMsgClientMMSLobbyData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientMMSLobbyData* CMsgClientMMSLobbyData::default_instance_ = NULL;

CMsgClientMMSLobbyData* CMsgClientMMSLobbyData::New() const {
  return new CMsgClientMMSLobbyData;
}

void CMsgClientMMSLobbyData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    steam_id_lobby_ = GOOGLE_ULONGLONG(0);
    num_members_ = 0;
    max_members_ = 0;
    lobby_type_ = 0;
    lobby_flags_ = 0;
    steam_id_owner_ = GOOGLE_ULONGLONG(0);
    if (has_metadata()) {
      if (metadata_ != &::google::protobuf::internal::kEmptyString) {
        metadata_->clear();
      }
    }
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    lobby_cellid_ = 0u;
  }
  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientMMSLobbyData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_steam_id_lobby;
        break;
      }

      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steam_id_lobby:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby_)));
          set_has_steam_id_lobby();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num_members;
        break;
      }

      // optional int32 num_members = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_members:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_members_)));
          set_has_num_members();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_max_members;
        break;
      }

      // optional int32 max_members = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_members:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_members_)));
          set_has_max_members();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lobby_type;
        break;
      }

      // optional int32 lobby_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lobby_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lobby_type_)));
          set_has_lobby_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_lobby_flags;
        break;
      }

      // optional int32 lobby_flags = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lobby_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lobby_flags_)));
          set_has_lobby_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_steam_id_owner;
        break;
      }

      // optional fixed64 steam_id_owner = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steam_id_owner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_owner_)));
          set_has_steam_id_owner();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_metadata;
        break;
      }

      // optional bytes metadata = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_metadata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_members;
        break;
      }

      // repeated .Sc.CMsgClientMMSLobbyData.Member members = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_members;
        if (input->ExpectTag(80)) goto parse_lobby_cellid;
        break;
      }

      // optional uint32 lobby_cellid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lobby_cellid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lobby_cellid_)));
          set_has_lobby_cellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientMMSLobbyData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (has_steam_id_lobby()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_lobby(), output);
  }

  // optional int32 num_members = 3;
  if (has_num_members()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_members(), output);
  }

  // optional int32 max_members = 4;
  if (has_max_members()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_members(), output);
  }

  // optional int32 lobby_type = 5;
  if (has_lobby_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->lobby_type(), output);
  }

  // optional int32 lobby_flags = 6;
  if (has_lobby_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lobby_flags(), output);
  }

  // optional fixed64 steam_id_owner = 7;
  if (has_steam_id_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->steam_id_owner(), output);
  }

  // optional bytes metadata = 8;
  if (has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->metadata(), output);
  }

  // repeated .Sc.CMsgClientMMSLobbyData.Member members = 9;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->members(i), output);
  }

  // optional uint32 lobby_cellid = 10;
  if (has_lobby_cellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->lobby_cellid(), output);
  }

}

int CMsgClientMMSLobbyData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional fixed64 steam_id_lobby = 2;
    if (has_steam_id_lobby()) {
      total_size += 1 + 8;
    }

    // optional int32 num_members = 3;
    if (has_num_members()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_members());
    }

    // optional int32 max_members = 4;
    if (has_max_members()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_members());
    }

    // optional int32 lobby_type = 5;
    if (has_lobby_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lobby_type());
    }

    // optional int32 lobby_flags = 6;
    if (has_lobby_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lobby_flags());
    }

    // optional fixed64 steam_id_owner = 7;
    if (has_steam_id_owner()) {
      total_size += 1 + 8;
    }

    // optional bytes metadata = 8;
    if (has_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->metadata());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional uint32 lobby_cellid = 10;
    if (has_lobby_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lobby_cellid());
    }

  }
  // repeated .Sc.CMsgClientMMSLobbyData.Member members = 9;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMMSLobbyData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientMMSLobbyData*>(&from));
}

void CMsgClientMMSLobbyData::MergeFrom(const CMsgClientMMSLobbyData& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_steam_id_lobby()) {
      set_steam_id_lobby(from.steam_id_lobby());
    }
    if (from.has_num_members()) {
      set_num_members(from.num_members());
    }
    if (from.has_max_members()) {
      set_max_members(from.max_members());
    }
    if (from.has_lobby_type()) {
      set_lobby_type(from.lobby_type());
    }
    if (from.has_lobby_flags()) {
      set_lobby_flags(from.lobby_flags());
    }
    if (from.has_steam_id_owner()) {
      set_steam_id_owner(from.steam_id_owner());
    }
    if (from.has_metadata()) {
      set_metadata(from.metadata());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_lobby_cellid()) {
      set_lobby_cellid(from.lobby_cellid());
    }
  }
}

void CMsgClientMMSLobbyData::CopyFrom(const CMsgClientMMSLobbyData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSLobbyData::IsInitialized() const {

  return true;
}

void CMsgClientMMSLobbyData::Swap(CMsgClientMMSLobbyData* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(steam_id_lobby_, other->steam_id_lobby_);
    std::swap(num_members_, other->num_members_);
    std::swap(max_members_, other->max_members_);
    std::swap(lobby_type_, other->lobby_type_);
    std::swap(lobby_flags_, other->lobby_flags_);
    std::swap(steam_id_owner_, other->steam_id_owner_);
    std::swap(metadata_, other->metadata_);
    members_.Swap(&other->members_);
    std::swap(lobby_cellid_, other->lobby_cellid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientMMSLobbyData::GetTypeName() const {
  return "Sc.CMsgClientMMSLobbyData";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientMMSSendLobbyChatMsg::kAppIdFieldNumber;
const int CMsgClientMMSSendLobbyChatMsg::kSteamIdLobbyFieldNumber;
const int CMsgClientMMSSendLobbyChatMsg::kSteamIdTargetFieldNumber;
const int CMsgClientMMSSendLobbyChatMsg::kLobbyMessageFieldNumber;
#endif  // !_MSC_VER

CMsgClientMMSSendLobbyChatMsg::CMsgClientMMSSendLobbyChatMsg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientMMSSendLobbyChatMsg::InitAsDefaultInstance() {
}

CMsgClientMMSSendLobbyChatMsg::CMsgClientMMSSendLobbyChatMsg(const CMsgClientMMSSendLobbyChatMsg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientMMSSendLobbyChatMsg::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  steam_id_lobby_ = GOOGLE_ULONGLONG(0);
  steam_id_target_ = GOOGLE_ULONGLONG(0);
  lobby_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientMMSSendLobbyChatMsg::~CMsgClientMMSSendLobbyChatMsg() {
  SharedDtor();
}

void CMsgClientMMSSendLobbyChatMsg::SharedDtor() {
  if (lobby_message_ != &::google::protobuf::internal::kEmptyString) {
    delete lobby_message_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientMMSSendLobbyChatMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientMMSSendLobbyChatMsg& CMsgClientMMSSendLobbyChatMsg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientMMSSendLobbyChatMsg* CMsgClientMMSSendLobbyChatMsg::default_instance_ = NULL;

CMsgClientMMSSendLobbyChatMsg* CMsgClientMMSSendLobbyChatMsg::New() const {
  return new CMsgClientMMSSendLobbyChatMsg;
}

void CMsgClientMMSSendLobbyChatMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    steam_id_lobby_ = GOOGLE_ULONGLONG(0);
    steam_id_target_ = GOOGLE_ULONGLONG(0);
    if (has_lobby_message()) {
      if (lobby_message_ != &::google::protobuf::internal::kEmptyString) {
        lobby_message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientMMSSendLobbyChatMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_steam_id_lobby;
        break;
      }

      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steam_id_lobby:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby_)));
          set_has_steam_id_lobby();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_steam_id_target;
        break;
      }

      // optional fixed64 steam_id_target = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steam_id_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_target_)));
          set_has_steam_id_target();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_lobby_message;
        break;
      }

      // optional bytes lobby_message = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lobby_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_lobby_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientMMSSendLobbyChatMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (has_steam_id_lobby()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_lobby(), output);
  }

  // optional fixed64 steam_id_target = 3;
  if (has_steam_id_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->steam_id_target(), output);
  }

  // optional bytes lobby_message = 4;
  if (has_lobby_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->lobby_message(), output);
  }

}

int CMsgClientMMSSendLobbyChatMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional fixed64 steam_id_lobby = 2;
    if (has_steam_id_lobby()) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id_target = 3;
    if (has_steam_id_target()) {
      total_size += 1 + 8;
    }

    // optional bytes lobby_message = 4;
    if (has_lobby_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->lobby_message());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMMSSendLobbyChatMsg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientMMSSendLobbyChatMsg*>(&from));
}

void CMsgClientMMSSendLobbyChatMsg::MergeFrom(const CMsgClientMMSSendLobbyChatMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_steam_id_lobby()) {
      set_steam_id_lobby(from.steam_id_lobby());
    }
    if (from.has_steam_id_target()) {
      set_steam_id_target(from.steam_id_target());
    }
    if (from.has_lobby_message()) {
      set_lobby_message(from.lobby_message());
    }
  }
}

void CMsgClientMMSSendLobbyChatMsg::CopyFrom(const CMsgClientMMSSendLobbyChatMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSSendLobbyChatMsg::IsInitialized() const {

  return true;
}

void CMsgClientMMSSendLobbyChatMsg::Swap(CMsgClientMMSSendLobbyChatMsg* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(steam_id_lobby_, other->steam_id_lobby_);
    std::swap(steam_id_target_, other->steam_id_target_);
    std::swap(lobby_message_, other->lobby_message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientMMSSendLobbyChatMsg::GetTypeName() const {
  return "Sc.CMsgClientMMSSendLobbyChatMsg";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientMMSLobbyChatMsg::kAppIdFieldNumber;
const int CMsgClientMMSLobbyChatMsg::kSteamIdLobbyFieldNumber;
const int CMsgClientMMSLobbyChatMsg::kSteamIdSenderFieldNumber;
const int CMsgClientMMSLobbyChatMsg::kLobbyMessageFieldNumber;
#endif  // !_MSC_VER

CMsgClientMMSLobbyChatMsg::CMsgClientMMSLobbyChatMsg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientMMSLobbyChatMsg::InitAsDefaultInstance() {
}

CMsgClientMMSLobbyChatMsg::CMsgClientMMSLobbyChatMsg(const CMsgClientMMSLobbyChatMsg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientMMSLobbyChatMsg::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  steam_id_lobby_ = GOOGLE_ULONGLONG(0);
  steam_id_sender_ = GOOGLE_ULONGLONG(0);
  lobby_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientMMSLobbyChatMsg::~CMsgClientMMSLobbyChatMsg() {
  SharedDtor();
}

void CMsgClientMMSLobbyChatMsg::SharedDtor() {
  if (lobby_message_ != &::google::protobuf::internal::kEmptyString) {
    delete lobby_message_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientMMSLobbyChatMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientMMSLobbyChatMsg& CMsgClientMMSLobbyChatMsg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientMMSLobbyChatMsg* CMsgClientMMSLobbyChatMsg::default_instance_ = NULL;

CMsgClientMMSLobbyChatMsg* CMsgClientMMSLobbyChatMsg::New() const {
  return new CMsgClientMMSLobbyChatMsg;
}

void CMsgClientMMSLobbyChatMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    steam_id_lobby_ = GOOGLE_ULONGLONG(0);
    steam_id_sender_ = GOOGLE_ULONGLONG(0);
    if (has_lobby_message()) {
      if (lobby_message_ != &::google::protobuf::internal::kEmptyString) {
        lobby_message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientMMSLobbyChatMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_steam_id_lobby;
        break;
      }

      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steam_id_lobby:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby_)));
          set_has_steam_id_lobby();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_steam_id_sender;
        break;
      }

      // optional fixed64 steam_id_sender = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steam_id_sender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_sender_)));
          set_has_steam_id_sender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_lobby_message;
        break;
      }

      // optional bytes lobby_message = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lobby_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_lobby_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientMMSLobbyChatMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (has_steam_id_lobby()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_lobby(), output);
  }

  // optional fixed64 steam_id_sender = 3;
  if (has_steam_id_sender()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->steam_id_sender(), output);
  }

  // optional bytes lobby_message = 4;
  if (has_lobby_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->lobby_message(), output);
  }

}

int CMsgClientMMSLobbyChatMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional fixed64 steam_id_lobby = 2;
    if (has_steam_id_lobby()) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id_sender = 3;
    if (has_steam_id_sender()) {
      total_size += 1 + 8;
    }

    // optional bytes lobby_message = 4;
    if (has_lobby_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->lobby_message());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMMSLobbyChatMsg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientMMSLobbyChatMsg*>(&from));
}

void CMsgClientMMSLobbyChatMsg::MergeFrom(const CMsgClientMMSLobbyChatMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_steam_id_lobby()) {
      set_steam_id_lobby(from.steam_id_lobby());
    }
    if (from.has_steam_id_sender()) {
      set_steam_id_sender(from.steam_id_sender());
    }
    if (from.has_lobby_message()) {
      set_lobby_message(from.lobby_message());
    }
  }
}

void CMsgClientMMSLobbyChatMsg::CopyFrom(const CMsgClientMMSLobbyChatMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSLobbyChatMsg::IsInitialized() const {

  return true;
}

void CMsgClientMMSLobbyChatMsg::Swap(CMsgClientMMSLobbyChatMsg* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(steam_id_lobby_, other->steam_id_lobby_);
    std::swap(steam_id_sender_, other->steam_id_sender_);
    std::swap(lobby_message_, other->lobby_message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientMMSLobbyChatMsg::GetTypeName() const {
  return "Sc.CMsgClientMMSLobbyChatMsg";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientMMSSetLobbyOwner::kAppIdFieldNumber;
const int CMsgClientMMSSetLobbyOwner::kSteamIdLobbyFieldNumber;
const int CMsgClientMMSSetLobbyOwner::kSteamIdNewOwnerFieldNumber;
#endif  // !_MSC_VER

CMsgClientMMSSetLobbyOwner::CMsgClientMMSSetLobbyOwner()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientMMSSetLobbyOwner::InitAsDefaultInstance() {
}

CMsgClientMMSSetLobbyOwner::CMsgClientMMSSetLobbyOwner(const CMsgClientMMSSetLobbyOwner& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientMMSSetLobbyOwner::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  steam_id_lobby_ = GOOGLE_ULONGLONG(0);
  steam_id_new_owner_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientMMSSetLobbyOwner::~CMsgClientMMSSetLobbyOwner() {
  SharedDtor();
}

void CMsgClientMMSSetLobbyOwner::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientMMSSetLobbyOwner::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientMMSSetLobbyOwner& CMsgClientMMSSetLobbyOwner::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientMMSSetLobbyOwner* CMsgClientMMSSetLobbyOwner::default_instance_ = NULL;

CMsgClientMMSSetLobbyOwner* CMsgClientMMSSetLobbyOwner::New() const {
  return new CMsgClientMMSSetLobbyOwner;
}

void CMsgClientMMSSetLobbyOwner::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    steam_id_lobby_ = GOOGLE_ULONGLONG(0);
    steam_id_new_owner_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientMMSSetLobbyOwner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_steam_id_lobby;
        break;
      }

      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steam_id_lobby:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby_)));
          set_has_steam_id_lobby();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_steam_id_new_owner;
        break;
      }

      // optional fixed64 steam_id_new_owner = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steam_id_new_owner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_new_owner_)));
          set_has_steam_id_new_owner();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientMMSSetLobbyOwner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (has_steam_id_lobby()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_lobby(), output);
  }

  // optional fixed64 steam_id_new_owner = 3;
  if (has_steam_id_new_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->steam_id_new_owner(), output);
  }

}

int CMsgClientMMSSetLobbyOwner::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional fixed64 steam_id_lobby = 2;
    if (has_steam_id_lobby()) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id_new_owner = 3;
    if (has_steam_id_new_owner()) {
      total_size += 1 + 8;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMMSSetLobbyOwner::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientMMSSetLobbyOwner*>(&from));
}

void CMsgClientMMSSetLobbyOwner::MergeFrom(const CMsgClientMMSSetLobbyOwner& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_steam_id_lobby()) {
      set_steam_id_lobby(from.steam_id_lobby());
    }
    if (from.has_steam_id_new_owner()) {
      set_steam_id_new_owner(from.steam_id_new_owner());
    }
  }
}

void CMsgClientMMSSetLobbyOwner::CopyFrom(const CMsgClientMMSSetLobbyOwner& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSSetLobbyOwner::IsInitialized() const {

  return true;
}

void CMsgClientMMSSetLobbyOwner::Swap(CMsgClientMMSSetLobbyOwner* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(steam_id_lobby_, other->steam_id_lobby_);
    std::swap(steam_id_new_owner_, other->steam_id_new_owner_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientMMSSetLobbyOwner::GetTypeName() const {
  return "Sc.CMsgClientMMSSetLobbyOwner";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientMMSSetLobbyOwnerResponse::kAppIdFieldNumber;
const int CMsgClientMMSSetLobbyOwnerResponse::kSteamIdLobbyFieldNumber;
const int CMsgClientMMSSetLobbyOwnerResponse::kEresultFieldNumber;
#endif  // !_MSC_VER

CMsgClientMMSSetLobbyOwnerResponse::CMsgClientMMSSetLobbyOwnerResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientMMSSetLobbyOwnerResponse::InitAsDefaultInstance() {
}

CMsgClientMMSSetLobbyOwnerResponse::CMsgClientMMSSetLobbyOwnerResponse(const CMsgClientMMSSetLobbyOwnerResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientMMSSetLobbyOwnerResponse::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  steam_id_lobby_ = GOOGLE_ULONGLONG(0);
  eresult_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientMMSSetLobbyOwnerResponse::~CMsgClientMMSSetLobbyOwnerResponse() {
  SharedDtor();
}

void CMsgClientMMSSetLobbyOwnerResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientMMSSetLobbyOwnerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientMMSSetLobbyOwnerResponse& CMsgClientMMSSetLobbyOwnerResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientMMSSetLobbyOwnerResponse* CMsgClientMMSSetLobbyOwnerResponse::default_instance_ = NULL;

CMsgClientMMSSetLobbyOwnerResponse* CMsgClientMMSSetLobbyOwnerResponse::New() const {
  return new CMsgClientMMSSetLobbyOwnerResponse;
}

void CMsgClientMMSSetLobbyOwnerResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    steam_id_lobby_ = GOOGLE_ULONGLONG(0);
    eresult_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientMMSSetLobbyOwnerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_steam_id_lobby;
        break;
      }

      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steam_id_lobby:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby_)));
          set_has_steam_id_lobby();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_eresult;
        break;
      }

      // optional int32 eresult = 3 [default = 2];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eresult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientMMSSetLobbyOwnerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (has_steam_id_lobby()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_lobby(), output);
  }

  // optional int32 eresult = 3 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->eresult(), output);
  }

}

int CMsgClientMMSSetLobbyOwnerResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional fixed64 steam_id_lobby = 2;
    if (has_steam_id_lobby()) {
      total_size += 1 + 8;
    }

    // optional int32 eresult = 3 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMMSSetLobbyOwnerResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientMMSSetLobbyOwnerResponse*>(&from));
}

void CMsgClientMMSSetLobbyOwnerResponse::MergeFrom(const CMsgClientMMSSetLobbyOwnerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_steam_id_lobby()) {
      set_steam_id_lobby(from.steam_id_lobby());
    }
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
  }
}

void CMsgClientMMSSetLobbyOwnerResponse::CopyFrom(const CMsgClientMMSSetLobbyOwnerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSSetLobbyOwnerResponse::IsInitialized() const {

  return true;
}

void CMsgClientMMSSetLobbyOwnerResponse::Swap(CMsgClientMMSSetLobbyOwnerResponse* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(steam_id_lobby_, other->steam_id_lobby_);
    std::swap(eresult_, other->eresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientMMSSetLobbyOwnerResponse::GetTypeName() const {
  return "Sc.CMsgClientMMSSetLobbyOwnerResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientMMSSetLobbyLinked::kAppIdFieldNumber;
const int CMsgClientMMSSetLobbyLinked::kSteamIdLobbyFieldNumber;
const int CMsgClientMMSSetLobbyLinked::kSteamIdLobby2FieldNumber;
#endif  // !_MSC_VER

CMsgClientMMSSetLobbyLinked::CMsgClientMMSSetLobbyLinked()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientMMSSetLobbyLinked::InitAsDefaultInstance() {
}

CMsgClientMMSSetLobbyLinked::CMsgClientMMSSetLobbyLinked(const CMsgClientMMSSetLobbyLinked& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientMMSSetLobbyLinked::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  steam_id_lobby_ = GOOGLE_ULONGLONG(0);
  steam_id_lobby2_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientMMSSetLobbyLinked::~CMsgClientMMSSetLobbyLinked() {
  SharedDtor();
}

void CMsgClientMMSSetLobbyLinked::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientMMSSetLobbyLinked::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientMMSSetLobbyLinked& CMsgClientMMSSetLobbyLinked::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientMMSSetLobbyLinked* CMsgClientMMSSetLobbyLinked::default_instance_ = NULL;

CMsgClientMMSSetLobbyLinked* CMsgClientMMSSetLobbyLinked::New() const {
  return new CMsgClientMMSSetLobbyLinked;
}

void CMsgClientMMSSetLobbyLinked::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    steam_id_lobby_ = GOOGLE_ULONGLONG(0);
    steam_id_lobby2_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientMMSSetLobbyLinked::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_steam_id_lobby;
        break;
      }

      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steam_id_lobby:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby_)));
          set_has_steam_id_lobby();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_steam_id_lobby2;
        break;
      }

      // optional fixed64 steam_id_lobby2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steam_id_lobby2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby2_)));
          set_has_steam_id_lobby2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientMMSSetLobbyLinked::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (has_steam_id_lobby()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_lobby(), output);
  }

  // optional fixed64 steam_id_lobby2 = 3;
  if (has_steam_id_lobby2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->steam_id_lobby2(), output);
  }

}

int CMsgClientMMSSetLobbyLinked::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional fixed64 steam_id_lobby = 2;
    if (has_steam_id_lobby()) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id_lobby2 = 3;
    if (has_steam_id_lobby2()) {
      total_size += 1 + 8;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMMSSetLobbyLinked::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientMMSSetLobbyLinked*>(&from));
}

void CMsgClientMMSSetLobbyLinked::MergeFrom(const CMsgClientMMSSetLobbyLinked& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_steam_id_lobby()) {
      set_steam_id_lobby(from.steam_id_lobby());
    }
    if (from.has_steam_id_lobby2()) {
      set_steam_id_lobby2(from.steam_id_lobby2());
    }
  }
}

void CMsgClientMMSSetLobbyLinked::CopyFrom(const CMsgClientMMSSetLobbyLinked& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSSetLobbyLinked::IsInitialized() const {

  return true;
}

void CMsgClientMMSSetLobbyLinked::Swap(CMsgClientMMSSetLobbyLinked* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(steam_id_lobby_, other->steam_id_lobby_);
    std::swap(steam_id_lobby2_, other->steam_id_lobby2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientMMSSetLobbyLinked::GetTypeName() const {
  return "Sc.CMsgClientMMSSetLobbyLinked";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientMMSSetLobbyGameServer::kAppIdFieldNumber;
const int CMsgClientMMSSetLobbyGameServer::kSteamIdLobbyFieldNumber;
const int CMsgClientMMSSetLobbyGameServer::kGameServerIpFieldNumber;
const int CMsgClientMMSSetLobbyGameServer::kGameServerPortFieldNumber;
const int CMsgClientMMSSetLobbyGameServer::kGameServerSteamIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientMMSSetLobbyGameServer::CMsgClientMMSSetLobbyGameServer()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientMMSSetLobbyGameServer::InitAsDefaultInstance() {
}

CMsgClientMMSSetLobbyGameServer::CMsgClientMMSSetLobbyGameServer(const CMsgClientMMSSetLobbyGameServer& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientMMSSetLobbyGameServer::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  steam_id_lobby_ = GOOGLE_ULONGLONG(0);
  game_server_ip_ = 0u;
  game_server_port_ = 0u;
  game_server_steam_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientMMSSetLobbyGameServer::~CMsgClientMMSSetLobbyGameServer() {
  SharedDtor();
}

void CMsgClientMMSSetLobbyGameServer::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientMMSSetLobbyGameServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientMMSSetLobbyGameServer& CMsgClientMMSSetLobbyGameServer::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientMMSSetLobbyGameServer* CMsgClientMMSSetLobbyGameServer::default_instance_ = NULL;

CMsgClientMMSSetLobbyGameServer* CMsgClientMMSSetLobbyGameServer::New() const {
  return new CMsgClientMMSSetLobbyGameServer;
}

void CMsgClientMMSSetLobbyGameServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    steam_id_lobby_ = GOOGLE_ULONGLONG(0);
    game_server_ip_ = 0u;
    game_server_port_ = 0u;
    game_server_steam_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientMMSSetLobbyGameServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_steam_id_lobby;
        break;
      }

      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steam_id_lobby:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby_)));
          set_has_steam_id_lobby();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_game_server_ip;
        break;
      }

      // optional uint32 game_server_ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_server_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_server_ip_)));
          set_has_game_server_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_game_server_port;
        break;
      }

      // optional uint32 game_server_port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_server_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_server_port_)));
          set_has_game_server_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_game_server_steam_id;
        break;
      }

      // optional fixed64 game_server_steam_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_game_server_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &game_server_steam_id_)));
          set_has_game_server_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientMMSSetLobbyGameServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (has_steam_id_lobby()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_lobby(), output);
  }

  // optional uint32 game_server_ip = 3;
  if (has_game_server_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->game_server_ip(), output);
  }

  // optional uint32 game_server_port = 4;
  if (has_game_server_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_server_port(), output);
  }

  // optional fixed64 game_server_steam_id = 5;
  if (has_game_server_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->game_server_steam_id(), output);
  }

}

int CMsgClientMMSSetLobbyGameServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional fixed64 steam_id_lobby = 2;
    if (has_steam_id_lobby()) {
      total_size += 1 + 8;
    }

    // optional uint32 game_server_ip = 3;
    if (has_game_server_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_server_ip());
    }

    // optional uint32 game_server_port = 4;
    if (has_game_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_server_port());
    }

    // optional fixed64 game_server_steam_id = 5;
    if (has_game_server_steam_id()) {
      total_size += 1 + 8;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMMSSetLobbyGameServer::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientMMSSetLobbyGameServer*>(&from));
}

void CMsgClientMMSSetLobbyGameServer::MergeFrom(const CMsgClientMMSSetLobbyGameServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_steam_id_lobby()) {
      set_steam_id_lobby(from.steam_id_lobby());
    }
    if (from.has_game_server_ip()) {
      set_game_server_ip(from.game_server_ip());
    }
    if (from.has_game_server_port()) {
      set_game_server_port(from.game_server_port());
    }
    if (from.has_game_server_steam_id()) {
      set_game_server_steam_id(from.game_server_steam_id());
    }
  }
}

void CMsgClientMMSSetLobbyGameServer::CopyFrom(const CMsgClientMMSSetLobbyGameServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSSetLobbyGameServer::IsInitialized() const {

  return true;
}

void CMsgClientMMSSetLobbyGameServer::Swap(CMsgClientMMSSetLobbyGameServer* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(steam_id_lobby_, other->steam_id_lobby_);
    std::swap(game_server_ip_, other->game_server_ip_);
    std::swap(game_server_port_, other->game_server_port_);
    std::swap(game_server_steam_id_, other->game_server_steam_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientMMSSetLobbyGameServer::GetTypeName() const {
  return "Sc.CMsgClientMMSSetLobbyGameServer";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientMMSLobbyGameServerSet::kAppIdFieldNumber;
const int CMsgClientMMSLobbyGameServerSet::kSteamIdLobbyFieldNumber;
const int CMsgClientMMSLobbyGameServerSet::kGameServerIpFieldNumber;
const int CMsgClientMMSLobbyGameServerSet::kGameServerPortFieldNumber;
const int CMsgClientMMSLobbyGameServerSet::kGameServerSteamIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientMMSLobbyGameServerSet::CMsgClientMMSLobbyGameServerSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientMMSLobbyGameServerSet::InitAsDefaultInstance() {
}

CMsgClientMMSLobbyGameServerSet::CMsgClientMMSLobbyGameServerSet(const CMsgClientMMSLobbyGameServerSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientMMSLobbyGameServerSet::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  steam_id_lobby_ = GOOGLE_ULONGLONG(0);
  game_server_ip_ = 0u;
  game_server_port_ = 0u;
  game_server_steam_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientMMSLobbyGameServerSet::~CMsgClientMMSLobbyGameServerSet() {
  SharedDtor();
}

void CMsgClientMMSLobbyGameServerSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientMMSLobbyGameServerSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientMMSLobbyGameServerSet& CMsgClientMMSLobbyGameServerSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientMMSLobbyGameServerSet* CMsgClientMMSLobbyGameServerSet::default_instance_ = NULL;

CMsgClientMMSLobbyGameServerSet* CMsgClientMMSLobbyGameServerSet::New() const {
  return new CMsgClientMMSLobbyGameServerSet;
}

void CMsgClientMMSLobbyGameServerSet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    steam_id_lobby_ = GOOGLE_ULONGLONG(0);
    game_server_ip_ = 0u;
    game_server_port_ = 0u;
    game_server_steam_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientMMSLobbyGameServerSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_steam_id_lobby;
        break;
      }

      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steam_id_lobby:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby_)));
          set_has_steam_id_lobby();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_game_server_ip;
        break;
      }

      // optional uint32 game_server_ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_server_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_server_ip_)));
          set_has_game_server_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_game_server_port;
        break;
      }

      // optional uint32 game_server_port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_server_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_server_port_)));
          set_has_game_server_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_game_server_steam_id;
        break;
      }

      // optional fixed64 game_server_steam_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_game_server_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &game_server_steam_id_)));
          set_has_game_server_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientMMSLobbyGameServerSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (has_steam_id_lobby()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_lobby(), output);
  }

  // optional uint32 game_server_ip = 3;
  if (has_game_server_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->game_server_ip(), output);
  }

  // optional uint32 game_server_port = 4;
  if (has_game_server_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_server_port(), output);
  }

  // optional fixed64 game_server_steam_id = 5;
  if (has_game_server_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->game_server_steam_id(), output);
  }

}

int CMsgClientMMSLobbyGameServerSet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional fixed64 steam_id_lobby = 2;
    if (has_steam_id_lobby()) {
      total_size += 1 + 8;
    }

    // optional uint32 game_server_ip = 3;
    if (has_game_server_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_server_ip());
    }

    // optional uint32 game_server_port = 4;
    if (has_game_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_server_port());
    }

    // optional fixed64 game_server_steam_id = 5;
    if (has_game_server_steam_id()) {
      total_size += 1 + 8;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMMSLobbyGameServerSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientMMSLobbyGameServerSet*>(&from));
}

void CMsgClientMMSLobbyGameServerSet::MergeFrom(const CMsgClientMMSLobbyGameServerSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_steam_id_lobby()) {
      set_steam_id_lobby(from.steam_id_lobby());
    }
    if (from.has_game_server_ip()) {
      set_game_server_ip(from.game_server_ip());
    }
    if (from.has_game_server_port()) {
      set_game_server_port(from.game_server_port());
    }
    if (from.has_game_server_steam_id()) {
      set_game_server_steam_id(from.game_server_steam_id());
    }
  }
}

void CMsgClientMMSLobbyGameServerSet::CopyFrom(const CMsgClientMMSLobbyGameServerSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSLobbyGameServerSet::IsInitialized() const {

  return true;
}

void CMsgClientMMSLobbyGameServerSet::Swap(CMsgClientMMSLobbyGameServerSet* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(steam_id_lobby_, other->steam_id_lobby_);
    std::swap(game_server_ip_, other->game_server_ip_);
    std::swap(game_server_port_, other->game_server_port_);
    std::swap(game_server_steam_id_, other->game_server_steam_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientMMSLobbyGameServerSet::GetTypeName() const {
  return "Sc.CMsgClientMMSLobbyGameServerSet";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientMMSUserJoinedLobby::kAppIdFieldNumber;
const int CMsgClientMMSUserJoinedLobby::kSteamIdLobbyFieldNumber;
const int CMsgClientMMSUserJoinedLobby::kSteamIdUserFieldNumber;
const int CMsgClientMMSUserJoinedLobby::kPersonaNameFieldNumber;
#endif  // !_MSC_VER

CMsgClientMMSUserJoinedLobby::CMsgClientMMSUserJoinedLobby()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientMMSUserJoinedLobby::InitAsDefaultInstance() {
}

CMsgClientMMSUserJoinedLobby::CMsgClientMMSUserJoinedLobby(const CMsgClientMMSUserJoinedLobby& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientMMSUserJoinedLobby::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  steam_id_lobby_ = GOOGLE_ULONGLONG(0);
  steam_id_user_ = GOOGLE_ULONGLONG(0);
  persona_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientMMSUserJoinedLobby::~CMsgClientMMSUserJoinedLobby() {
  SharedDtor();
}

void CMsgClientMMSUserJoinedLobby::SharedDtor() {
  if (persona_name_ != &::google::protobuf::internal::kEmptyString) {
    delete persona_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientMMSUserJoinedLobby::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientMMSUserJoinedLobby& CMsgClientMMSUserJoinedLobby::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientMMSUserJoinedLobby* CMsgClientMMSUserJoinedLobby::default_instance_ = NULL;

CMsgClientMMSUserJoinedLobby* CMsgClientMMSUserJoinedLobby::New() const {
  return new CMsgClientMMSUserJoinedLobby;
}

void CMsgClientMMSUserJoinedLobby::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    steam_id_lobby_ = GOOGLE_ULONGLONG(0);
    steam_id_user_ = GOOGLE_ULONGLONG(0);
    if (has_persona_name()) {
      if (persona_name_ != &::google::protobuf::internal::kEmptyString) {
        persona_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientMMSUserJoinedLobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_steam_id_lobby;
        break;
      }

      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steam_id_lobby:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby_)));
          set_has_steam_id_lobby();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_steam_id_user;
        break;
      }

      // optional fixed64 steam_id_user = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steam_id_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_user_)));
          set_has_steam_id_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_persona_name;
        break;
      }

      // optional string persona_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_persona_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientMMSUserJoinedLobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (has_steam_id_lobby()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_lobby(), output);
  }

  // optional fixed64 steam_id_user = 3;
  if (has_steam_id_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->steam_id_user(), output);
  }

  // optional string persona_name = 4;
  if (has_persona_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->persona_name(), output);
  }

}

int CMsgClientMMSUserJoinedLobby::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional fixed64 steam_id_lobby = 2;
    if (has_steam_id_lobby()) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id_user = 3;
    if (has_steam_id_user()) {
      total_size += 1 + 8;
    }

    // optional string persona_name = 4;
    if (has_persona_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona_name());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMMSUserJoinedLobby::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientMMSUserJoinedLobby*>(&from));
}

void CMsgClientMMSUserJoinedLobby::MergeFrom(const CMsgClientMMSUserJoinedLobby& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_steam_id_lobby()) {
      set_steam_id_lobby(from.steam_id_lobby());
    }
    if (from.has_steam_id_user()) {
      set_steam_id_user(from.steam_id_user());
    }
    if (from.has_persona_name()) {
      set_persona_name(from.persona_name());
    }
  }
}

void CMsgClientMMSUserJoinedLobby::CopyFrom(const CMsgClientMMSUserJoinedLobby& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSUserJoinedLobby::IsInitialized() const {

  return true;
}

void CMsgClientMMSUserJoinedLobby::Swap(CMsgClientMMSUserJoinedLobby* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(steam_id_lobby_, other->steam_id_lobby_);
    std::swap(steam_id_user_, other->steam_id_user_);
    std::swap(persona_name_, other->persona_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientMMSUserJoinedLobby::GetTypeName() const {
  return "Sc.CMsgClientMMSUserJoinedLobby";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientMMSUserLeftLobby::kAppIdFieldNumber;
const int CMsgClientMMSUserLeftLobby::kSteamIdLobbyFieldNumber;
const int CMsgClientMMSUserLeftLobby::kSteamIdUserFieldNumber;
const int CMsgClientMMSUserLeftLobby::kPersonaNameFieldNumber;
#endif  // !_MSC_VER

CMsgClientMMSUserLeftLobby::CMsgClientMMSUserLeftLobby()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientMMSUserLeftLobby::InitAsDefaultInstance() {
}

CMsgClientMMSUserLeftLobby::CMsgClientMMSUserLeftLobby(const CMsgClientMMSUserLeftLobby& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientMMSUserLeftLobby::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  steam_id_lobby_ = GOOGLE_ULONGLONG(0);
  steam_id_user_ = GOOGLE_ULONGLONG(0);
  persona_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientMMSUserLeftLobby::~CMsgClientMMSUserLeftLobby() {
  SharedDtor();
}

void CMsgClientMMSUserLeftLobby::SharedDtor() {
  if (persona_name_ != &::google::protobuf::internal::kEmptyString) {
    delete persona_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientMMSUserLeftLobby::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientMMSUserLeftLobby& CMsgClientMMSUserLeftLobby::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientMMSUserLeftLobby* CMsgClientMMSUserLeftLobby::default_instance_ = NULL;

CMsgClientMMSUserLeftLobby* CMsgClientMMSUserLeftLobby::New() const {
  return new CMsgClientMMSUserLeftLobby;
}

void CMsgClientMMSUserLeftLobby::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    steam_id_lobby_ = GOOGLE_ULONGLONG(0);
    steam_id_user_ = GOOGLE_ULONGLONG(0);
    if (has_persona_name()) {
      if (persona_name_ != &::google::protobuf::internal::kEmptyString) {
        persona_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientMMSUserLeftLobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_steam_id_lobby;
        break;
      }

      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steam_id_lobby:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby_)));
          set_has_steam_id_lobby();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_steam_id_user;
        break;
      }

      // optional fixed64 steam_id_user = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steam_id_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_user_)));
          set_has_steam_id_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_persona_name;
        break;
      }

      // optional string persona_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_persona_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientMMSUserLeftLobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (has_steam_id_lobby()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_lobby(), output);
  }

  // optional fixed64 steam_id_user = 3;
  if (has_steam_id_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->steam_id_user(), output);
  }

  // optional string persona_name = 4;
  if (has_persona_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->persona_name(), output);
  }

}

int CMsgClientMMSUserLeftLobby::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional fixed64 steam_id_lobby = 2;
    if (has_steam_id_lobby()) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id_user = 3;
    if (has_steam_id_user()) {
      total_size += 1 + 8;
    }

    // optional string persona_name = 4;
    if (has_persona_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona_name());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMMSUserLeftLobby::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientMMSUserLeftLobby*>(&from));
}

void CMsgClientMMSUserLeftLobby::MergeFrom(const CMsgClientMMSUserLeftLobby& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_steam_id_lobby()) {
      set_steam_id_lobby(from.steam_id_lobby());
    }
    if (from.has_steam_id_user()) {
      set_steam_id_user(from.steam_id_user());
    }
    if (from.has_persona_name()) {
      set_persona_name(from.persona_name());
    }
  }
}

void CMsgClientMMSUserLeftLobby::CopyFrom(const CMsgClientMMSUserLeftLobby& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSUserLeftLobby::IsInitialized() const {

  return true;
}

void CMsgClientMMSUserLeftLobby::Swap(CMsgClientMMSUserLeftLobby* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(steam_id_lobby_, other->steam_id_lobby_);
    std::swap(steam_id_user_, other->steam_id_user_);
    std::swap(persona_name_, other->persona_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientMMSUserLeftLobby::GetTypeName() const {
  return "Sc.CMsgClientMMSUserLeftLobby";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientMMSInviteToLobby::kAppIdFieldNumber;
const int CMsgClientMMSInviteToLobby::kSteamIdLobbyFieldNumber;
const int CMsgClientMMSInviteToLobby::kSteamIdUserInvitedFieldNumber;
#endif  // !_MSC_VER

CMsgClientMMSInviteToLobby::CMsgClientMMSInviteToLobby()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientMMSInviteToLobby::InitAsDefaultInstance() {
}

CMsgClientMMSInviteToLobby::CMsgClientMMSInviteToLobby(const CMsgClientMMSInviteToLobby& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientMMSInviteToLobby::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  steam_id_lobby_ = GOOGLE_ULONGLONG(0);
  steam_id_user_invited_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientMMSInviteToLobby::~CMsgClientMMSInviteToLobby() {
  SharedDtor();
}

void CMsgClientMMSInviteToLobby::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientMMSInviteToLobby::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientMMSInviteToLobby& CMsgClientMMSInviteToLobby::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientMMSInviteToLobby* CMsgClientMMSInviteToLobby::default_instance_ = NULL;

CMsgClientMMSInviteToLobby* CMsgClientMMSInviteToLobby::New() const {
  return new CMsgClientMMSInviteToLobby;
}

void CMsgClientMMSInviteToLobby::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    steam_id_lobby_ = GOOGLE_ULONGLONG(0);
    steam_id_user_invited_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientMMSInviteToLobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_steam_id_lobby;
        break;
      }

      // optional fixed64 steam_id_lobby = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steam_id_lobby:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_lobby_)));
          set_has_steam_id_lobby();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_steam_id_user_invited;
        break;
      }

      // optional fixed64 steam_id_user_invited = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steam_id_user_invited:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_user_invited_)));
          set_has_steam_id_user_invited();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientMMSInviteToLobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 steam_id_lobby = 2;
  if (has_steam_id_lobby()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_lobby(), output);
  }

  // optional fixed64 steam_id_user_invited = 3;
  if (has_steam_id_user_invited()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->steam_id_user_invited(), output);
  }

}

int CMsgClientMMSInviteToLobby::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional fixed64 steam_id_lobby = 2;
    if (has_steam_id_lobby()) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id_user_invited = 3;
    if (has_steam_id_user_invited()) {
      total_size += 1 + 8;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMMSInviteToLobby::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientMMSInviteToLobby*>(&from));
}

void CMsgClientMMSInviteToLobby::MergeFrom(const CMsgClientMMSInviteToLobby& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_steam_id_lobby()) {
      set_steam_id_lobby(from.steam_id_lobby());
    }
    if (from.has_steam_id_user_invited()) {
      set_steam_id_user_invited(from.steam_id_user_invited());
    }
  }
}

void CMsgClientMMSInviteToLobby::CopyFrom(const CMsgClientMMSInviteToLobby& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMMSInviteToLobby::IsInitialized() const {

  return true;
}

void CMsgClientMMSInviteToLobby::Swap(CMsgClientMMSInviteToLobby* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(steam_id_lobby_, other->steam_id_lobby_);
    std::swap(steam_id_user_invited_, other->steam_id_user_invited_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientMMSInviteToLobby::GetTypeName() const {
  return "Sc.CMsgClientMMSInviteToLobby";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUDSInviteToGame::kSteamIdDestFieldNumber;
const int CMsgClientUDSInviteToGame::kSteamIdSrcFieldNumber;
const int CMsgClientUDSInviteToGame::kConnectStringFieldNumber;
#endif  // !_MSC_VER

CMsgClientUDSInviteToGame::CMsgClientUDSInviteToGame()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUDSInviteToGame::InitAsDefaultInstance() {
}

CMsgClientUDSInviteToGame::CMsgClientUDSInviteToGame(const CMsgClientUDSInviteToGame& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUDSInviteToGame::SharedCtor() {
  _cached_size_ = 0;
  steam_id_dest_ = GOOGLE_ULONGLONG(0);
  steam_id_src_ = GOOGLE_ULONGLONG(0);
  connect_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUDSInviteToGame::~CMsgClientUDSInviteToGame() {
  SharedDtor();
}

void CMsgClientUDSInviteToGame::SharedDtor() {
  if (connect_string_ != &::google::protobuf::internal::kEmptyString) {
    delete connect_string_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUDSInviteToGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUDSInviteToGame& CMsgClientUDSInviteToGame::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUDSInviteToGame* CMsgClientUDSInviteToGame::default_instance_ = NULL;

CMsgClientUDSInviteToGame* CMsgClientUDSInviteToGame::New() const {
  return new CMsgClientUDSInviteToGame;
}

void CMsgClientUDSInviteToGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_dest_ = GOOGLE_ULONGLONG(0);
    steam_id_src_ = GOOGLE_ULONGLONG(0);
    if (has_connect_string()) {
      if (connect_string_ != &::google::protobuf::internal::kEmptyString) {
        connect_string_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUDSInviteToGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id_dest = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_dest_)));
          set_has_steam_id_dest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_steam_id_src;
        break;
      }

      // optional fixed64 steam_id_src = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steam_id_src:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_src_)));
          set_has_steam_id_src();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_connect_string;
        break;
      }

      // optional string connect_string = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connect_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connect_string()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUDSInviteToGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steam_id_dest = 1;
  if (has_steam_id_dest()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id_dest(), output);
  }

  // optional fixed64 steam_id_src = 2;
  if (has_steam_id_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_src(), output);
  }

  // optional string connect_string = 3;
  if (has_connect_string()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->connect_string(), output);
  }

}

int CMsgClientUDSInviteToGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id_dest = 1;
    if (has_steam_id_dest()) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id_src = 2;
    if (has_steam_id_src()) {
      total_size += 1 + 8;
    }

    // optional string connect_string = 3;
    if (has_connect_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->connect_string());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUDSInviteToGame::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUDSInviteToGame*>(&from));
}

void CMsgClientUDSInviteToGame::MergeFrom(const CMsgClientUDSInviteToGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id_dest()) {
      set_steam_id_dest(from.steam_id_dest());
    }
    if (from.has_steam_id_src()) {
      set_steam_id_src(from.steam_id_src());
    }
    if (from.has_connect_string()) {
      set_connect_string(from.connect_string());
    }
  }
}

void CMsgClientUDSInviteToGame::CopyFrom(const CMsgClientUDSInviteToGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUDSInviteToGame::IsInitialized() const {

  return true;
}

void CMsgClientUDSInviteToGame::Swap(CMsgClientUDSInviteToGame* other) {
  if (other != this) {
    std::swap(steam_id_dest_, other->steam_id_dest_);
    std::swap(steam_id_src_, other->steam_id_src_);
    std::swap(connect_string_, other->connect_string_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUDSInviteToGame::GetTypeName() const {
  return "Sc.CMsgClientUDSInviteToGame";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientChatInvite::kSteamIdInvitedFieldNumber;
const int CMsgClientChatInvite::kSteamIdChatFieldNumber;
const int CMsgClientChatInvite::kSteamIdPatronFieldNumber;
const int CMsgClientChatInvite::kChatroomTypeFieldNumber;
const int CMsgClientChatInvite::kSteamIdFriendChatFieldNumber;
const int CMsgClientChatInvite::kChatNameFieldNumber;
const int CMsgClientChatInvite::kGameIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientChatInvite::CMsgClientChatInvite()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientChatInvite::InitAsDefaultInstance() {
}

CMsgClientChatInvite::CMsgClientChatInvite(const CMsgClientChatInvite& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientChatInvite::SharedCtor() {
  _cached_size_ = 0;
  steam_id_invited_ = GOOGLE_ULONGLONG(0);
  steam_id_chat_ = GOOGLE_ULONGLONG(0);
  steam_id_patron_ = GOOGLE_ULONGLONG(0);
  chatroom_type_ = 0;
  steam_id_friend_chat_ = GOOGLE_ULONGLONG(0);
  chat_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  game_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientChatInvite::~CMsgClientChatInvite() {
  SharedDtor();
}

void CMsgClientChatInvite::SharedDtor() {
  if (chat_name_ != &::google::protobuf::internal::kEmptyString) {
    delete chat_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientChatInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientChatInvite& CMsgClientChatInvite::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientChatInvite* CMsgClientChatInvite::default_instance_ = NULL;

CMsgClientChatInvite* CMsgClientChatInvite::New() const {
  return new CMsgClientChatInvite;
}

void CMsgClientChatInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_invited_ = GOOGLE_ULONGLONG(0);
    steam_id_chat_ = GOOGLE_ULONGLONG(0);
    steam_id_patron_ = GOOGLE_ULONGLONG(0);
    chatroom_type_ = 0;
    steam_id_friend_chat_ = GOOGLE_ULONGLONG(0);
    if (has_chat_name()) {
      if (chat_name_ != &::google::protobuf::internal::kEmptyString) {
        chat_name_->clear();
      }
    }
    game_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientChatInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id_invited = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_invited_)));
          set_has_steam_id_invited();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_steam_id_chat;
        break;
      }

      // optional fixed64 steam_id_chat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steam_id_chat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_chat_)));
          set_has_steam_id_chat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_steam_id_patron;
        break;
      }

      // optional fixed64 steam_id_patron = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steam_id_patron:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_patron_)));
          set_has_steam_id_patron();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_chatroom_type;
        break;
      }

      // optional int32 chatroom_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chatroom_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chatroom_type_)));
          set_has_chatroom_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_steam_id_friend_chat;
        break;
      }

      // optional fixed64 steam_id_friend_chat = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steam_id_friend_chat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_friend_chat_)));
          set_has_steam_id_friend_chat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_chat_name;
        break;
      }

      // optional string chat_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chat_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chat_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_game_id;
        break;
      }

      // optional fixed64 game_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientChatInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steam_id_invited = 1;
  if (has_steam_id_invited()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id_invited(), output);
  }

  // optional fixed64 steam_id_chat = 2;
  if (has_steam_id_chat()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_chat(), output);
  }

  // optional fixed64 steam_id_patron = 3;
  if (has_steam_id_patron()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->steam_id_patron(), output);
  }

  // optional int32 chatroom_type = 4;
  if (has_chatroom_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->chatroom_type(), output);
  }

  // optional fixed64 steam_id_friend_chat = 5;
  if (has_steam_id_friend_chat()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->steam_id_friend_chat(), output);
  }

  // optional string chat_name = 6;
  if (has_chat_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->chat_name(), output);
  }

  // optional fixed64 game_id = 7;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->game_id(), output);
  }

}

int CMsgClientChatInvite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id_invited = 1;
    if (has_steam_id_invited()) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id_chat = 2;
    if (has_steam_id_chat()) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id_patron = 3;
    if (has_steam_id_patron()) {
      total_size += 1 + 8;
    }

    // optional int32 chatroom_type = 4;
    if (has_chatroom_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chatroom_type());
    }

    // optional fixed64 steam_id_friend_chat = 5;
    if (has_steam_id_friend_chat()) {
      total_size += 1 + 8;
    }

    // optional string chat_name = 6;
    if (has_chat_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chat_name());
    }

    // optional fixed64 game_id = 7;
    if (has_game_id()) {
      total_size += 1 + 8;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientChatInvite::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientChatInvite*>(&from));
}

void CMsgClientChatInvite::MergeFrom(const CMsgClientChatInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id_invited()) {
      set_steam_id_invited(from.steam_id_invited());
    }
    if (from.has_steam_id_chat()) {
      set_steam_id_chat(from.steam_id_chat());
    }
    if (from.has_steam_id_patron()) {
      set_steam_id_patron(from.steam_id_patron());
    }
    if (from.has_chatroom_type()) {
      set_chatroom_type(from.chatroom_type());
    }
    if (from.has_steam_id_friend_chat()) {
      set_steam_id_friend_chat(from.steam_id_friend_chat());
    }
    if (from.has_chat_name()) {
      set_chat_name(from.chat_name());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
  }
}

void CMsgClientChatInvite::CopyFrom(const CMsgClientChatInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientChatInvite::IsInitialized() const {

  return true;
}

void CMsgClientChatInvite::Swap(CMsgClientChatInvite* other) {
  if (other != this) {
    std::swap(steam_id_invited_, other->steam_id_invited_);
    std::swap(steam_id_chat_, other->steam_id_chat_);
    std::swap(steam_id_patron_, other->steam_id_patron_);
    std::swap(chatroom_type_, other->chatroom_type_);
    std::swap(steam_id_friend_chat_, other->steam_id_friend_chat_);
    std::swap(chat_name_, other->chat_name_);
    std::swap(game_id_, other->game_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientChatInvite::GetTypeName() const {
  return "Sc.CMsgClientChatInvite";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientConnectionStats_Stats_Logon::kConnectAttemptsFieldNumber;
const int CMsgClientConnectionStats_Stats_Logon::kConnectSuccessesFieldNumber;
const int CMsgClientConnectionStats_Stats_Logon::kConnectFailuresFieldNumber;
const int CMsgClientConnectionStats_Stats_Logon::kConnectionsDroppedFieldNumber;
#endif  // !_MSC_VER

CMsgClientConnectionStats_Stats_Logon::CMsgClientConnectionStats_Stats_Logon()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientConnectionStats_Stats_Logon::InitAsDefaultInstance() {
}

CMsgClientConnectionStats_Stats_Logon::CMsgClientConnectionStats_Stats_Logon(const CMsgClientConnectionStats_Stats_Logon& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientConnectionStats_Stats_Logon::SharedCtor() {
  _cached_size_ = 0;
  connect_attempts_ = 0;
  connect_successes_ = 0;
  connect_failures_ = 0;
  connections_dropped_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientConnectionStats_Stats_Logon::~CMsgClientConnectionStats_Stats_Logon() {
  SharedDtor();
}

void CMsgClientConnectionStats_Stats_Logon::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientConnectionStats_Stats_Logon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientConnectionStats_Stats_Logon& CMsgClientConnectionStats_Stats_Logon::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientConnectionStats_Stats_Logon* CMsgClientConnectionStats_Stats_Logon::default_instance_ = NULL;

CMsgClientConnectionStats_Stats_Logon* CMsgClientConnectionStats_Stats_Logon::New() const {
  return new CMsgClientConnectionStats_Stats_Logon;
}

void CMsgClientConnectionStats_Stats_Logon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    connect_attempts_ = 0;
    connect_successes_ = 0;
    connect_failures_ = 0;
    connections_dropped_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientConnectionStats_Stats_Logon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 connect_attempts = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &connect_attempts_)));
          set_has_connect_attempts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_connect_successes;
        break;
      }

      // optional int32 connect_successes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_connect_successes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &connect_successes_)));
          set_has_connect_successes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_connect_failures;
        break;
      }

      // optional int32 connect_failures = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_connect_failures:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &connect_failures_)));
          set_has_connect_failures();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_connections_dropped;
        break;
      }

      // optional int32 connections_dropped = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_connections_dropped:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &connections_dropped_)));
          set_has_connections_dropped();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientConnectionStats_Stats_Logon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 connect_attempts = 1;
  if (has_connect_attempts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->connect_attempts(), output);
  }

  // optional int32 connect_successes = 2;
  if (has_connect_successes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->connect_successes(), output);
  }

  // optional int32 connect_failures = 3;
  if (has_connect_failures()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->connect_failures(), output);
  }

  // optional int32 connections_dropped = 4;
  if (has_connections_dropped()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->connections_dropped(), output);
  }

}

int CMsgClientConnectionStats_Stats_Logon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 connect_attempts = 1;
    if (has_connect_attempts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->connect_attempts());
    }

    // optional int32 connect_successes = 2;
    if (has_connect_successes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->connect_successes());
    }

    // optional int32 connect_failures = 3;
    if (has_connect_failures()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->connect_failures());
    }

    // optional int32 connections_dropped = 4;
    if (has_connections_dropped()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->connections_dropped());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientConnectionStats_Stats_Logon::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientConnectionStats_Stats_Logon*>(&from));
}

void CMsgClientConnectionStats_Stats_Logon::MergeFrom(const CMsgClientConnectionStats_Stats_Logon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_connect_attempts()) {
      set_connect_attempts(from.connect_attempts());
    }
    if (from.has_connect_successes()) {
      set_connect_successes(from.connect_successes());
    }
    if (from.has_connect_failures()) {
      set_connect_failures(from.connect_failures());
    }
    if (from.has_connections_dropped()) {
      set_connections_dropped(from.connections_dropped());
    }
  }
}

void CMsgClientConnectionStats_Stats_Logon::CopyFrom(const CMsgClientConnectionStats_Stats_Logon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientConnectionStats_Stats_Logon::IsInitialized() const {

  return true;
}

void CMsgClientConnectionStats_Stats_Logon::Swap(CMsgClientConnectionStats_Stats_Logon* other) {
  if (other != this) {
    std::swap(connect_attempts_, other->connect_attempts_);
    std::swap(connect_successes_, other->connect_successes_);
    std::swap(connect_failures_, other->connect_failures_);
    std::swap(connections_dropped_, other->connections_dropped_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientConnectionStats_Stats_Logon::GetTypeName() const {
  return "Sc.CMsgClientConnectionStats.Stats_Logon";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientConnectionStats_Stats_UDP::kPktsSentFieldNumber;
const int CMsgClientConnectionStats_Stats_UDP::kBytesSentFieldNumber;
const int CMsgClientConnectionStats_Stats_UDP::kPktsRecvFieldNumber;
const int CMsgClientConnectionStats_Stats_UDP::kPktsProcessedFieldNumber;
const int CMsgClientConnectionStats_Stats_UDP::kBytesRecvFieldNumber;
#endif  // !_MSC_VER

CMsgClientConnectionStats_Stats_UDP::CMsgClientConnectionStats_Stats_UDP()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientConnectionStats_Stats_UDP::InitAsDefaultInstance() {
}

CMsgClientConnectionStats_Stats_UDP::CMsgClientConnectionStats_Stats_UDP(const CMsgClientConnectionStats_Stats_UDP& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientConnectionStats_Stats_UDP::SharedCtor() {
  _cached_size_ = 0;
  pkts_sent_ = GOOGLE_ULONGLONG(0);
  bytes_sent_ = GOOGLE_ULONGLONG(0);
  pkts_recv_ = GOOGLE_ULONGLONG(0);
  pkts_processed_ = GOOGLE_ULONGLONG(0);
  bytes_recv_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientConnectionStats_Stats_UDP::~CMsgClientConnectionStats_Stats_UDP() {
  SharedDtor();
}

void CMsgClientConnectionStats_Stats_UDP::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientConnectionStats_Stats_UDP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientConnectionStats_Stats_UDP& CMsgClientConnectionStats_Stats_UDP::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientConnectionStats_Stats_UDP* CMsgClientConnectionStats_Stats_UDP::default_instance_ = NULL;

CMsgClientConnectionStats_Stats_UDP* CMsgClientConnectionStats_Stats_UDP::New() const {
  return new CMsgClientConnectionStats_Stats_UDP;
}

void CMsgClientConnectionStats_Stats_UDP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pkts_sent_ = GOOGLE_ULONGLONG(0);
    bytes_sent_ = GOOGLE_ULONGLONG(0);
    pkts_recv_ = GOOGLE_ULONGLONG(0);
    pkts_processed_ = GOOGLE_ULONGLONG(0);
    bytes_recv_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientConnectionStats_Stats_UDP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 pkts_sent = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pkts_sent_)));
          set_has_pkts_sent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bytes_sent;
        break;
      }

      // optional uint64 bytes_sent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bytes_sent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_sent_)));
          set_has_bytes_sent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pkts_recv;
        break;
      }

      // optional uint64 pkts_recv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pkts_recv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pkts_recv_)));
          set_has_pkts_recv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pkts_processed;
        break;
      }

      // optional uint64 pkts_processed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pkts_processed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pkts_processed_)));
          set_has_pkts_processed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bytes_recv;
        break;
      }

      // optional uint64 bytes_recv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bytes_recv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_recv_)));
          set_has_bytes_recv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientConnectionStats_Stats_UDP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 pkts_sent = 1;
  if (has_pkts_sent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->pkts_sent(), output);
  }

  // optional uint64 bytes_sent = 2;
  if (has_bytes_sent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->bytes_sent(), output);
  }

  // optional uint64 pkts_recv = 3;
  if (has_pkts_recv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->pkts_recv(), output);
  }

  // optional uint64 pkts_processed = 4;
  if (has_pkts_processed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->pkts_processed(), output);
  }

  // optional uint64 bytes_recv = 5;
  if (has_bytes_recv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->bytes_recv(), output);
  }

}

int CMsgClientConnectionStats_Stats_UDP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 pkts_sent = 1;
    if (has_pkts_sent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pkts_sent());
    }

    // optional uint64 bytes_sent = 2;
    if (has_bytes_sent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes_sent());
    }

    // optional uint64 pkts_recv = 3;
    if (has_pkts_recv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pkts_recv());
    }

    // optional uint64 pkts_processed = 4;
    if (has_pkts_processed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pkts_processed());
    }

    // optional uint64 bytes_recv = 5;
    if (has_bytes_recv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes_recv());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientConnectionStats_Stats_UDP::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientConnectionStats_Stats_UDP*>(&from));
}

void CMsgClientConnectionStats_Stats_UDP::MergeFrom(const CMsgClientConnectionStats_Stats_UDP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pkts_sent()) {
      set_pkts_sent(from.pkts_sent());
    }
    if (from.has_bytes_sent()) {
      set_bytes_sent(from.bytes_sent());
    }
    if (from.has_pkts_recv()) {
      set_pkts_recv(from.pkts_recv());
    }
    if (from.has_pkts_processed()) {
      set_pkts_processed(from.pkts_processed());
    }
    if (from.has_bytes_recv()) {
      set_bytes_recv(from.bytes_recv());
    }
  }
}

void CMsgClientConnectionStats_Stats_UDP::CopyFrom(const CMsgClientConnectionStats_Stats_UDP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientConnectionStats_Stats_UDP::IsInitialized() const {

  return true;
}

void CMsgClientConnectionStats_Stats_UDP::Swap(CMsgClientConnectionStats_Stats_UDP* other) {
  if (other != this) {
    std::swap(pkts_sent_, other->pkts_sent_);
    std::swap(bytes_sent_, other->bytes_sent_);
    std::swap(pkts_recv_, other->pkts_recv_);
    std::swap(pkts_processed_, other->pkts_processed_);
    std::swap(bytes_recv_, other->bytes_recv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientConnectionStats_Stats_UDP::GetTypeName() const {
  return "Sc.CMsgClientConnectionStats.Stats_UDP";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientConnectionStats_Stats_VConn::kConnectionsUdpFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kConnectionsTcpFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kStatsUdpFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kPktsAbandonedFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kConnReqReceivedFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kPktsResentFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kMsgsSentFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kMsgsSentFailedFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kMsgsRecvFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kDatagramsSentFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kDatagramsRecvFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kBadPktsRecvFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kUnknownConnPktsRecvFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kMissedPktsRecvFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kDupPktsRecvFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kFailedConnectChallengesFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kMicroSecAvgLatencyFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kMicroSecMinLatencyFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kMicroSecMaxLatencyFieldNumber;
const int CMsgClientConnectionStats_Stats_VConn::kMemPoolMsgInUseFieldNumber;
#endif  // !_MSC_VER

CMsgClientConnectionStats_Stats_VConn::CMsgClientConnectionStats_Stats_VConn()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientConnectionStats_Stats_VConn::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  stats_udp_ = const_cast< ::Sc::CMsgClientConnectionStats_Stats_UDP*>(
      ::Sc::CMsgClientConnectionStats_Stats_UDP::internal_default_instance());
#else
  stats_udp_ = const_cast< ::Sc::CMsgClientConnectionStats_Stats_UDP*>(&::Sc::CMsgClientConnectionStats_Stats_UDP::default_instance());
#endif
}

CMsgClientConnectionStats_Stats_VConn::CMsgClientConnectionStats_Stats_VConn(const CMsgClientConnectionStats_Stats_VConn& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientConnectionStats_Stats_VConn::SharedCtor() {
  _cached_size_ = 0;
  connections_udp_ = 0u;
  connections_tcp_ = 0u;
  stats_udp_ = NULL;
  pkts_abandoned_ = GOOGLE_ULONGLONG(0);
  conn_req_received_ = GOOGLE_ULONGLONG(0);
  pkts_resent_ = GOOGLE_ULONGLONG(0);
  msgs_sent_ = GOOGLE_ULONGLONG(0);
  msgs_sent_failed_ = GOOGLE_ULONGLONG(0);
  msgs_recv_ = GOOGLE_ULONGLONG(0);
  datagrams_sent_ = GOOGLE_ULONGLONG(0);
  datagrams_recv_ = GOOGLE_ULONGLONG(0);
  bad_pkts_recv_ = GOOGLE_ULONGLONG(0);
  unknown_conn_pkts_recv_ = GOOGLE_ULONGLONG(0);
  missed_pkts_recv_ = GOOGLE_ULONGLONG(0);
  dup_pkts_recv_ = GOOGLE_ULONGLONG(0);
  failed_connect_challenges_ = GOOGLE_ULONGLONG(0);
  micro_sec_avg_latency_ = 0u;
  micro_sec_min_latency_ = 0u;
  micro_sec_max_latency_ = 0u;
  mem_pool_msg_in_use_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientConnectionStats_Stats_VConn::~CMsgClientConnectionStats_Stats_VConn() {
  SharedDtor();
}

void CMsgClientConnectionStats_Stats_VConn::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete stats_udp_;
  }
}

void CMsgClientConnectionStats_Stats_VConn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientConnectionStats_Stats_VConn& CMsgClientConnectionStats_Stats_VConn::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientConnectionStats_Stats_VConn* CMsgClientConnectionStats_Stats_VConn::default_instance_ = NULL;

CMsgClientConnectionStats_Stats_VConn* CMsgClientConnectionStats_Stats_VConn::New() const {
  return new CMsgClientConnectionStats_Stats_VConn;
}

void CMsgClientConnectionStats_Stats_VConn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    connections_udp_ = 0u;
    connections_tcp_ = 0u;
    if (has_stats_udp()) {
      if (stats_udp_ != NULL) stats_udp_->::Sc::CMsgClientConnectionStats_Stats_UDP::Clear();
    }
    pkts_abandoned_ = GOOGLE_ULONGLONG(0);
    conn_req_received_ = GOOGLE_ULONGLONG(0);
    pkts_resent_ = GOOGLE_ULONGLONG(0);
    msgs_sent_ = GOOGLE_ULONGLONG(0);
    msgs_sent_failed_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    msgs_recv_ = GOOGLE_ULONGLONG(0);
    datagrams_sent_ = GOOGLE_ULONGLONG(0);
    datagrams_recv_ = GOOGLE_ULONGLONG(0);
    bad_pkts_recv_ = GOOGLE_ULONGLONG(0);
    unknown_conn_pkts_recv_ = GOOGLE_ULONGLONG(0);
    missed_pkts_recv_ = GOOGLE_ULONGLONG(0);
    dup_pkts_recv_ = GOOGLE_ULONGLONG(0);
    failed_connect_challenges_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    micro_sec_avg_latency_ = 0u;
    micro_sec_min_latency_ = 0u;
    micro_sec_max_latency_ = 0u;
    mem_pool_msg_in_use_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientConnectionStats_Stats_VConn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 connections_udp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &connections_udp_)));
          set_has_connections_udp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_connections_tcp;
        break;
      }

      // optional uint32 connections_tcp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_connections_tcp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &connections_tcp_)));
          set_has_connections_tcp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stats_udp;
        break;
      }

      // optional .Sc.CMsgClientConnectionStats.Stats_UDP stats_udp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stats_udp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats_udp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pkts_abandoned;
        break;
      }

      // optional uint64 pkts_abandoned = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pkts_abandoned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pkts_abandoned_)));
          set_has_pkts_abandoned();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_conn_req_received;
        break;
      }

      // optional uint64 conn_req_received = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_conn_req_received:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &conn_req_received_)));
          set_has_conn_req_received();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_pkts_resent;
        break;
      }

      // optional uint64 pkts_resent = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pkts_resent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pkts_resent_)));
          set_has_pkts_resent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_msgs_sent;
        break;
      }

      // optional uint64 msgs_sent = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgs_sent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msgs_sent_)));
          set_has_msgs_sent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_msgs_sent_failed;
        break;
      }

      // optional uint64 msgs_sent_failed = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgs_sent_failed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msgs_sent_failed_)));
          set_has_msgs_sent_failed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_msgs_recv;
        break;
      }

      // optional uint64 msgs_recv = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgs_recv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msgs_recv_)));
          set_has_msgs_recv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_datagrams_sent;
        break;
      }

      // optional uint64 datagrams_sent = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_datagrams_sent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &datagrams_sent_)));
          set_has_datagrams_sent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_datagrams_recv;
        break;
      }

      // optional uint64 datagrams_recv = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_datagrams_recv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &datagrams_recv_)));
          set_has_datagrams_recv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_bad_pkts_recv;
        break;
      }

      // optional uint64 bad_pkts_recv = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bad_pkts_recv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bad_pkts_recv_)));
          set_has_bad_pkts_recv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_unknown_conn_pkts_recv;
        break;
      }

      // optional uint64 unknown_conn_pkts_recv = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unknown_conn_pkts_recv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &unknown_conn_pkts_recv_)));
          set_has_unknown_conn_pkts_recv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_missed_pkts_recv;
        break;
      }

      // optional uint64 missed_pkts_recv = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_missed_pkts_recv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &missed_pkts_recv_)));
          set_has_missed_pkts_recv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_dup_pkts_recv;
        break;
      }

      // optional uint64 dup_pkts_recv = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dup_pkts_recv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dup_pkts_recv_)));
          set_has_dup_pkts_recv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_failed_connect_challenges;
        break;
      }

      // optional uint64 failed_connect_challenges = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_failed_connect_challenges:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &failed_connect_challenges_)));
          set_has_failed_connect_challenges();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_micro_sec_avg_latency;
        break;
      }

      // optional uint32 micro_sec_avg_latency = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_micro_sec_avg_latency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &micro_sec_avg_latency_)));
          set_has_micro_sec_avg_latency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_micro_sec_min_latency;
        break;
      }

      // optional uint32 micro_sec_min_latency = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_micro_sec_min_latency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &micro_sec_min_latency_)));
          set_has_micro_sec_min_latency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_micro_sec_max_latency;
        break;
      }

      // optional uint32 micro_sec_max_latency = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_micro_sec_max_latency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &micro_sec_max_latency_)));
          set_has_micro_sec_max_latency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_mem_pool_msg_in_use;
        break;
      }

      // optional uint32 mem_pool_msg_in_use = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mem_pool_msg_in_use:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mem_pool_msg_in_use_)));
          set_has_mem_pool_msg_in_use();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientConnectionStats_Stats_VConn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 connections_udp = 1;
  if (has_connections_udp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->connections_udp(), output);
  }

  // optional uint32 connections_tcp = 2;
  if (has_connections_tcp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->connections_tcp(), output);
  }

  // optional .Sc.CMsgClientConnectionStats.Stats_UDP stats_udp = 3;
  if (has_stats_udp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->stats_udp(), output);
  }

  // optional uint64 pkts_abandoned = 4;
  if (has_pkts_abandoned()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->pkts_abandoned(), output);
  }

  // optional uint64 conn_req_received = 5;
  if (has_conn_req_received()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->conn_req_received(), output);
  }

  // optional uint64 pkts_resent = 6;
  if (has_pkts_resent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->pkts_resent(), output);
  }

  // optional uint64 msgs_sent = 7;
  if (has_msgs_sent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->msgs_sent(), output);
  }

  // optional uint64 msgs_sent_failed = 8;
  if (has_msgs_sent_failed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->msgs_sent_failed(), output);
  }

  // optional uint64 msgs_recv = 9;
  if (has_msgs_recv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->msgs_recv(), output);
  }

  // optional uint64 datagrams_sent = 10;
  if (has_datagrams_sent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->datagrams_sent(), output);
  }

  // optional uint64 datagrams_recv = 11;
  if (has_datagrams_recv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->datagrams_recv(), output);
  }

  // optional uint64 bad_pkts_recv = 12;
  if (has_bad_pkts_recv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->bad_pkts_recv(), output);
  }

  // optional uint64 unknown_conn_pkts_recv = 13;
  if (has_unknown_conn_pkts_recv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->unknown_conn_pkts_recv(), output);
  }

  // optional uint64 missed_pkts_recv = 14;
  if (has_missed_pkts_recv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->missed_pkts_recv(), output);
  }

  // optional uint64 dup_pkts_recv = 15;
  if (has_dup_pkts_recv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->dup_pkts_recv(), output);
  }

  // optional uint64 failed_connect_challenges = 16;
  if (has_failed_connect_challenges()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->failed_connect_challenges(), output);
  }

  // optional uint32 micro_sec_avg_latency = 17;
  if (has_micro_sec_avg_latency()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->micro_sec_avg_latency(), output);
  }

  // optional uint32 micro_sec_min_latency = 18;
  if (has_micro_sec_min_latency()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->micro_sec_min_latency(), output);
  }

  // optional uint32 micro_sec_max_latency = 19;
  if (has_micro_sec_max_latency()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->micro_sec_max_latency(), output);
  }

  // optional uint32 mem_pool_msg_in_use = 20;
  if (has_mem_pool_msg_in_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->mem_pool_msg_in_use(), output);
  }

}

int CMsgClientConnectionStats_Stats_VConn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 connections_udp = 1;
    if (has_connections_udp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->connections_udp());
    }

    // optional uint32 connections_tcp = 2;
    if (has_connections_tcp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->connections_tcp());
    }

    // optional .Sc.CMsgClientConnectionStats.Stats_UDP stats_udp = 3;
    if (has_stats_udp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stats_udp());
    }

    // optional uint64 pkts_abandoned = 4;
    if (has_pkts_abandoned()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pkts_abandoned());
    }

    // optional uint64 conn_req_received = 5;
    if (has_conn_req_received()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->conn_req_received());
    }

    // optional uint64 pkts_resent = 6;
    if (has_pkts_resent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pkts_resent());
    }

    // optional uint64 msgs_sent = 7;
    if (has_msgs_sent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msgs_sent());
    }

    // optional uint64 msgs_sent_failed = 8;
    if (has_msgs_sent_failed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msgs_sent_failed());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 msgs_recv = 9;
    if (has_msgs_recv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msgs_recv());
    }

    // optional uint64 datagrams_sent = 10;
    if (has_datagrams_sent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->datagrams_sent());
    }

    // optional uint64 datagrams_recv = 11;
    if (has_datagrams_recv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->datagrams_recv());
    }

    // optional uint64 bad_pkts_recv = 12;
    if (has_bad_pkts_recv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bad_pkts_recv());
    }

    // optional uint64 unknown_conn_pkts_recv = 13;
    if (has_unknown_conn_pkts_recv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->unknown_conn_pkts_recv());
    }

    // optional uint64 missed_pkts_recv = 14;
    if (has_missed_pkts_recv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->missed_pkts_recv());
    }

    // optional uint64 dup_pkts_recv = 15;
    if (has_dup_pkts_recv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dup_pkts_recv());
    }

    // optional uint64 failed_connect_challenges = 16;
    if (has_failed_connect_challenges()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->failed_connect_challenges());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 micro_sec_avg_latency = 17;
    if (has_micro_sec_avg_latency()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->micro_sec_avg_latency());
    }

    // optional uint32 micro_sec_min_latency = 18;
    if (has_micro_sec_min_latency()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->micro_sec_min_latency());
    }

    // optional uint32 micro_sec_max_latency = 19;
    if (has_micro_sec_max_latency()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->micro_sec_max_latency());
    }

    // optional uint32 mem_pool_msg_in_use = 20;
    if (has_mem_pool_msg_in_use()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mem_pool_msg_in_use());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientConnectionStats_Stats_VConn::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientConnectionStats_Stats_VConn*>(&from));
}

void CMsgClientConnectionStats_Stats_VConn::MergeFrom(const CMsgClientConnectionStats_Stats_VConn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_connections_udp()) {
      set_connections_udp(from.connections_udp());
    }
    if (from.has_connections_tcp()) {
      set_connections_tcp(from.connections_tcp());
    }
    if (from.has_stats_udp()) {
      mutable_stats_udp()->::Sc::CMsgClientConnectionStats_Stats_UDP::MergeFrom(from.stats_udp());
    }
    if (from.has_pkts_abandoned()) {
      set_pkts_abandoned(from.pkts_abandoned());
    }
    if (from.has_conn_req_received()) {
      set_conn_req_received(from.conn_req_received());
    }
    if (from.has_pkts_resent()) {
      set_pkts_resent(from.pkts_resent());
    }
    if (from.has_msgs_sent()) {
      set_msgs_sent(from.msgs_sent());
    }
    if (from.has_msgs_sent_failed()) {
      set_msgs_sent_failed(from.msgs_sent_failed());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_msgs_recv()) {
      set_msgs_recv(from.msgs_recv());
    }
    if (from.has_datagrams_sent()) {
      set_datagrams_sent(from.datagrams_sent());
    }
    if (from.has_datagrams_recv()) {
      set_datagrams_recv(from.datagrams_recv());
    }
    if (from.has_bad_pkts_recv()) {
      set_bad_pkts_recv(from.bad_pkts_recv());
    }
    if (from.has_unknown_conn_pkts_recv()) {
      set_unknown_conn_pkts_recv(from.unknown_conn_pkts_recv());
    }
    if (from.has_missed_pkts_recv()) {
      set_missed_pkts_recv(from.missed_pkts_recv());
    }
    if (from.has_dup_pkts_recv()) {
      set_dup_pkts_recv(from.dup_pkts_recv());
    }
    if (from.has_failed_connect_challenges()) {
      set_failed_connect_challenges(from.failed_connect_challenges());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_micro_sec_avg_latency()) {
      set_micro_sec_avg_latency(from.micro_sec_avg_latency());
    }
    if (from.has_micro_sec_min_latency()) {
      set_micro_sec_min_latency(from.micro_sec_min_latency());
    }
    if (from.has_micro_sec_max_latency()) {
      set_micro_sec_max_latency(from.micro_sec_max_latency());
    }
    if (from.has_mem_pool_msg_in_use()) {
      set_mem_pool_msg_in_use(from.mem_pool_msg_in_use());
    }
  }
}

void CMsgClientConnectionStats_Stats_VConn::CopyFrom(const CMsgClientConnectionStats_Stats_VConn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientConnectionStats_Stats_VConn::IsInitialized() const {

  return true;
}

void CMsgClientConnectionStats_Stats_VConn::Swap(CMsgClientConnectionStats_Stats_VConn* other) {
  if (other != this) {
    std::swap(connections_udp_, other->connections_udp_);
    std::swap(connections_tcp_, other->connections_tcp_);
    std::swap(stats_udp_, other->stats_udp_);
    std::swap(pkts_abandoned_, other->pkts_abandoned_);
    std::swap(conn_req_received_, other->conn_req_received_);
    std::swap(pkts_resent_, other->pkts_resent_);
    std::swap(msgs_sent_, other->msgs_sent_);
    std::swap(msgs_sent_failed_, other->msgs_sent_failed_);
    std::swap(msgs_recv_, other->msgs_recv_);
    std::swap(datagrams_sent_, other->datagrams_sent_);
    std::swap(datagrams_recv_, other->datagrams_recv_);
    std::swap(bad_pkts_recv_, other->bad_pkts_recv_);
    std::swap(unknown_conn_pkts_recv_, other->unknown_conn_pkts_recv_);
    std::swap(missed_pkts_recv_, other->missed_pkts_recv_);
    std::swap(dup_pkts_recv_, other->dup_pkts_recv_);
    std::swap(failed_connect_challenges_, other->failed_connect_challenges_);
    std::swap(micro_sec_avg_latency_, other->micro_sec_avg_latency_);
    std::swap(micro_sec_min_latency_, other->micro_sec_min_latency_);
    std::swap(micro_sec_max_latency_, other->micro_sec_max_latency_);
    std::swap(mem_pool_msg_in_use_, other->mem_pool_msg_in_use_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientConnectionStats_Stats_VConn::GetTypeName() const {
  return "Sc.CMsgClientConnectionStats.Stats_VConn";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientConnectionStats::kStatsLogonFieldNumber;
const int CMsgClientConnectionStats::kStatsVconnFieldNumber;
#endif  // !_MSC_VER

CMsgClientConnectionStats::CMsgClientConnectionStats()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientConnectionStats::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  stats_logon_ = const_cast< ::Sc::CMsgClientConnectionStats_Stats_Logon*>(
      ::Sc::CMsgClientConnectionStats_Stats_Logon::internal_default_instance());
#else
  stats_logon_ = const_cast< ::Sc::CMsgClientConnectionStats_Stats_Logon*>(&::Sc::CMsgClientConnectionStats_Stats_Logon::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  stats_vconn_ = const_cast< ::Sc::CMsgClientConnectionStats_Stats_VConn*>(
      ::Sc::CMsgClientConnectionStats_Stats_VConn::internal_default_instance());
#else
  stats_vconn_ = const_cast< ::Sc::CMsgClientConnectionStats_Stats_VConn*>(&::Sc::CMsgClientConnectionStats_Stats_VConn::default_instance());
#endif
}

CMsgClientConnectionStats::CMsgClientConnectionStats(const CMsgClientConnectionStats& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientConnectionStats::SharedCtor() {
  _cached_size_ = 0;
  stats_logon_ = NULL;
  stats_vconn_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientConnectionStats::~CMsgClientConnectionStats() {
  SharedDtor();
}

void CMsgClientConnectionStats::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete stats_logon_;
    delete stats_vconn_;
  }
}

void CMsgClientConnectionStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientConnectionStats& CMsgClientConnectionStats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientConnectionStats* CMsgClientConnectionStats::default_instance_ = NULL;

CMsgClientConnectionStats* CMsgClientConnectionStats::New() const {
  return new CMsgClientConnectionStats;
}

void CMsgClientConnectionStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stats_logon()) {
      if (stats_logon_ != NULL) stats_logon_->::Sc::CMsgClientConnectionStats_Stats_Logon::Clear();
    }
    if (has_stats_vconn()) {
      if (stats_vconn_ != NULL) stats_vconn_->::Sc::CMsgClientConnectionStats_Stats_VConn::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientConnectionStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Sc.CMsgClientConnectionStats.Stats_Logon stats_logon = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats_logon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stats_vconn;
        break;
      }

      // optional .Sc.CMsgClientConnectionStats.Stats_VConn stats_vconn = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stats_vconn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats_vconn()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientConnectionStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Sc.CMsgClientConnectionStats.Stats_Logon stats_logon = 1;
  if (has_stats_logon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->stats_logon(), output);
  }

  // optional .Sc.CMsgClientConnectionStats.Stats_VConn stats_vconn = 2;
  if (has_stats_vconn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->stats_vconn(), output);
  }

}

int CMsgClientConnectionStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Sc.CMsgClientConnectionStats.Stats_Logon stats_logon = 1;
    if (has_stats_logon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stats_logon());
    }

    // optional .Sc.CMsgClientConnectionStats.Stats_VConn stats_vconn = 2;
    if (has_stats_vconn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stats_vconn());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientConnectionStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientConnectionStats*>(&from));
}

void CMsgClientConnectionStats::MergeFrom(const CMsgClientConnectionStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stats_logon()) {
      mutable_stats_logon()->::Sc::CMsgClientConnectionStats_Stats_Logon::MergeFrom(from.stats_logon());
    }
    if (from.has_stats_vconn()) {
      mutable_stats_vconn()->::Sc::CMsgClientConnectionStats_Stats_VConn::MergeFrom(from.stats_vconn());
    }
  }
}

void CMsgClientConnectionStats::CopyFrom(const CMsgClientConnectionStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientConnectionStats::IsInitialized() const {

  return true;
}

void CMsgClientConnectionStats::Swap(CMsgClientConnectionStats* other) {
  if (other != this) {
    std::swap(stats_logon_, other->stats_logon_);
    std::swap(stats_vconn_, other->stats_vconn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientConnectionStats::GetTypeName() const {
  return "Sc.CMsgClientConnectionStats";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientServersAvailable_Server_Types_Available::kServerFieldNumber;
const int CMsgClientServersAvailable_Server_Types_Available::kChangedFieldNumber;
#endif  // !_MSC_VER

CMsgClientServersAvailable_Server_Types_Available::CMsgClientServersAvailable_Server_Types_Available()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientServersAvailable_Server_Types_Available::InitAsDefaultInstance() {
}

CMsgClientServersAvailable_Server_Types_Available::CMsgClientServersAvailable_Server_Types_Available(const CMsgClientServersAvailable_Server_Types_Available& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientServersAvailable_Server_Types_Available::SharedCtor() {
  _cached_size_ = 0;
  server_ = 0u;
  changed_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientServersAvailable_Server_Types_Available::~CMsgClientServersAvailable_Server_Types_Available() {
  SharedDtor();
}

void CMsgClientServersAvailable_Server_Types_Available::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientServersAvailable_Server_Types_Available::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientServersAvailable_Server_Types_Available& CMsgClientServersAvailable_Server_Types_Available::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientServersAvailable_Server_Types_Available* CMsgClientServersAvailable_Server_Types_Available::default_instance_ = NULL;

CMsgClientServersAvailable_Server_Types_Available* CMsgClientServersAvailable_Server_Types_Available::New() const {
  return new CMsgClientServersAvailable_Server_Types_Available;
}

void CMsgClientServersAvailable_Server_Types_Available::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_ = 0u;
    changed_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientServersAvailable_Server_Types_Available::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_)));
          set_has_server();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_changed;
        break;
      }

      // optional bool changed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_changed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &changed_)));
          set_has_changed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientServersAvailable_Server_Types_Available::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 server = 1;
  if (has_server()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server(), output);
  }

  // optional bool changed = 2;
  if (has_changed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->changed(), output);
  }

}

int CMsgClientServersAvailable_Server_Types_Available::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 server = 1;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server());
    }

    // optional bool changed = 2;
    if (has_changed()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientServersAvailable_Server_Types_Available::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientServersAvailable_Server_Types_Available*>(&from));
}

void CMsgClientServersAvailable_Server_Types_Available::MergeFrom(const CMsgClientServersAvailable_Server_Types_Available& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server()) {
      set_server(from.server());
    }
    if (from.has_changed()) {
      set_changed(from.changed());
    }
  }
}

void CMsgClientServersAvailable_Server_Types_Available::CopyFrom(const CMsgClientServersAvailable_Server_Types_Available& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientServersAvailable_Server_Types_Available::IsInitialized() const {

  return true;
}

void CMsgClientServersAvailable_Server_Types_Available::Swap(CMsgClientServersAvailable_Server_Types_Available* other) {
  if (other != this) {
    std::swap(server_, other->server_);
    std::swap(changed_, other->changed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientServersAvailable_Server_Types_Available::GetTypeName() const {
  return "Sc.CMsgClientServersAvailable.Server_Types_Available";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientServersAvailable::kServerTypesAvailableFieldNumber;
const int CMsgClientServersAvailable::kServerTypeForAuthServicesFieldNumber;
#endif  // !_MSC_VER

CMsgClientServersAvailable::CMsgClientServersAvailable()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientServersAvailable::InitAsDefaultInstance() {
}

CMsgClientServersAvailable::CMsgClientServersAvailable(const CMsgClientServersAvailable& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientServersAvailable::SharedCtor() {
  _cached_size_ = 0;
  server_type_for_auth_services_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientServersAvailable::~CMsgClientServersAvailable() {
  SharedDtor();
}

void CMsgClientServersAvailable::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientServersAvailable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientServersAvailable& CMsgClientServersAvailable::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientServersAvailable* CMsgClientServersAvailable::default_instance_ = NULL;

CMsgClientServersAvailable* CMsgClientServersAvailable::New() const {
  return new CMsgClientServersAvailable;
}

void CMsgClientServersAvailable::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    server_type_for_auth_services_ = 0u;
  }
  server_types_available_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientServersAvailable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Sc.CMsgClientServersAvailable.Server_Types_Available server_types_available = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_types_available:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_server_types_available()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_server_types_available;
        if (input->ExpectTag(16)) goto parse_server_type_for_auth_services;
        break;
      }

      // optional uint32 server_type_for_auth_services = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_type_for_auth_services:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_type_for_auth_services_)));
          set_has_server_type_for_auth_services();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientServersAvailable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Sc.CMsgClientServersAvailable.Server_Types_Available server_types_available = 1;
  for (int i = 0; i < this->server_types_available_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->server_types_available(i), output);
  }

  // optional uint32 server_type_for_auth_services = 2;
  if (has_server_type_for_auth_services()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_type_for_auth_services(), output);
  }

}

int CMsgClientServersAvailable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 server_type_for_auth_services = 2;
    if (has_server_type_for_auth_services()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_type_for_auth_services());
    }

  }
  // repeated .Sc.CMsgClientServersAvailable.Server_Types_Available server_types_available = 1;
  total_size += 1 * this->server_types_available_size();
  for (int i = 0; i < this->server_types_available_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->server_types_available(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientServersAvailable::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientServersAvailable*>(&from));
}

void CMsgClientServersAvailable::MergeFrom(const CMsgClientServersAvailable& from) {
  GOOGLE_CHECK_NE(&from, this);
  server_types_available_.MergeFrom(from.server_types_available_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_server_type_for_auth_services()) {
      set_server_type_for_auth_services(from.server_type_for_auth_services());
    }
  }
}

void CMsgClientServersAvailable::CopyFrom(const CMsgClientServersAvailable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientServersAvailable::IsInitialized() const {

  return true;
}

void CMsgClientServersAvailable::Swap(CMsgClientServersAvailable* other) {
  if (other != this) {
    server_types_available_.Swap(&other->server_types_available_);
    std::swap(server_type_for_auth_services_, other->server_type_for_auth_services_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientServersAvailable::GetTypeName() const {
  return "Sc.CMsgClientServersAvailable";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientGetUserStats::kGameIdFieldNumber;
const int CMsgClientGetUserStats::kCrcStatsFieldNumber;
const int CMsgClientGetUserStats::kSchemaLocalVersionFieldNumber;
const int CMsgClientGetUserStats::kSteamIdForUserFieldNumber;
#endif  // !_MSC_VER

CMsgClientGetUserStats::CMsgClientGetUserStats()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientGetUserStats::InitAsDefaultInstance() {
}

CMsgClientGetUserStats::CMsgClientGetUserStats(const CMsgClientGetUserStats& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientGetUserStats::SharedCtor() {
  _cached_size_ = 0;
  game_id_ = GOOGLE_ULONGLONG(0);
  crc_stats_ = 0u;
  schema_local_version_ = 0;
  steam_id_for_user_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientGetUserStats::~CMsgClientGetUserStats() {
  SharedDtor();
}

void CMsgClientGetUserStats::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientGetUserStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientGetUserStats& CMsgClientGetUserStats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientGetUserStats* CMsgClientGetUserStats::default_instance_ = NULL;

CMsgClientGetUserStats* CMsgClientGetUserStats::New() const {
  return new CMsgClientGetUserStats;
}

void CMsgClientGetUserStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_id_ = GOOGLE_ULONGLONG(0);
    crc_stats_ = 0u;
    schema_local_version_ = 0;
    steam_id_for_user_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientGetUserStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 game_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_crc_stats;
        break;
      }

      // optional uint32 crc_stats = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crc_stats:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crc_stats_)));
          set_has_crc_stats();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_schema_local_version;
        break;
      }

      // optional int32 schema_local_version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_schema_local_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &schema_local_version_)));
          set_has_schema_local_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_steam_id_for_user;
        break;
      }

      // optional fixed64 steam_id_for_user = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steam_id_for_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_for_user_)));
          set_has_steam_id_for_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientGetUserStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 game_id = 1;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->game_id(), output);
  }

  // optional uint32 crc_stats = 2;
  if (has_crc_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->crc_stats(), output);
  }

  // optional int32 schema_local_version = 3;
  if (has_schema_local_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->schema_local_version(), output);
  }

  // optional fixed64 steam_id_for_user = 4;
  if (has_steam_id_for_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->steam_id_for_user(), output);
  }

}

int CMsgClientGetUserStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 game_id = 1;
    if (has_game_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 crc_stats = 2;
    if (has_crc_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crc_stats());
    }

    // optional int32 schema_local_version = 3;
    if (has_schema_local_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->schema_local_version());
    }

    // optional fixed64 steam_id_for_user = 4;
    if (has_steam_id_for_user()) {
      total_size += 1 + 8;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGetUserStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientGetUserStats*>(&from));
}

void CMsgClientGetUserStats::MergeFrom(const CMsgClientGetUserStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_crc_stats()) {
      set_crc_stats(from.crc_stats());
    }
    if (from.has_schema_local_version()) {
      set_schema_local_version(from.schema_local_version());
    }
    if (from.has_steam_id_for_user()) {
      set_steam_id_for_user(from.steam_id_for_user());
    }
  }
}

void CMsgClientGetUserStats::CopyFrom(const CMsgClientGetUserStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetUserStats::IsInitialized() const {

  return true;
}

void CMsgClientGetUserStats::Swap(CMsgClientGetUserStats* other) {
  if (other != this) {
    std::swap(game_id_, other->game_id_);
    std::swap(crc_stats_, other->crc_stats_);
    std::swap(schema_local_version_, other->schema_local_version_);
    std::swap(steam_id_for_user_, other->steam_id_for_user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientGetUserStats::GetTypeName() const {
  return "Sc.CMsgClientGetUserStats";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientGetUserStatsResponse_Stats::kStatIdFieldNumber;
const int CMsgClientGetUserStatsResponse_Stats::kStatValueFieldNumber;
#endif  // !_MSC_VER

CMsgClientGetUserStatsResponse_Stats::CMsgClientGetUserStatsResponse_Stats()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientGetUserStatsResponse_Stats::InitAsDefaultInstance() {
}

CMsgClientGetUserStatsResponse_Stats::CMsgClientGetUserStatsResponse_Stats(const CMsgClientGetUserStatsResponse_Stats& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientGetUserStatsResponse_Stats::SharedCtor() {
  _cached_size_ = 0;
  stat_id_ = 0u;
  stat_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientGetUserStatsResponse_Stats::~CMsgClientGetUserStatsResponse_Stats() {
  SharedDtor();
}

void CMsgClientGetUserStatsResponse_Stats::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientGetUserStatsResponse_Stats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientGetUserStatsResponse_Stats& CMsgClientGetUserStatsResponse_Stats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientGetUserStatsResponse_Stats* CMsgClientGetUserStatsResponse_Stats::default_instance_ = NULL;

CMsgClientGetUserStatsResponse_Stats* CMsgClientGetUserStatsResponse_Stats::New() const {
  return new CMsgClientGetUserStatsResponse_Stats;
}

void CMsgClientGetUserStatsResponse_Stats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stat_id_ = 0u;
    stat_value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientGetUserStatsResponse_Stats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stat_id_)));
          set_has_stat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stat_value;
        break;
      }

      // optional uint32 stat_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stat_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stat_value_)));
          set_has_stat_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientGetUserStatsResponse_Stats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 stat_id = 1;
  if (has_stat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stat_id(), output);
  }

  // optional uint32 stat_value = 2;
  if (has_stat_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stat_value(), output);
  }

}

int CMsgClientGetUserStatsResponse_Stats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 stat_id = 1;
    if (has_stat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stat_id());
    }

    // optional uint32 stat_value = 2;
    if (has_stat_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stat_value());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGetUserStatsResponse_Stats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientGetUserStatsResponse_Stats*>(&from));
}

void CMsgClientGetUserStatsResponse_Stats::MergeFrom(const CMsgClientGetUserStatsResponse_Stats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stat_id()) {
      set_stat_id(from.stat_id());
    }
    if (from.has_stat_value()) {
      set_stat_value(from.stat_value());
    }
  }
}

void CMsgClientGetUserStatsResponse_Stats::CopyFrom(const CMsgClientGetUserStatsResponse_Stats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetUserStatsResponse_Stats::IsInitialized() const {

  return true;
}

void CMsgClientGetUserStatsResponse_Stats::Swap(CMsgClientGetUserStatsResponse_Stats* other) {
  if (other != this) {
    std::swap(stat_id_, other->stat_id_);
    std::swap(stat_value_, other->stat_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientGetUserStatsResponse_Stats::GetTypeName() const {
  return "Sc.CMsgClientGetUserStatsResponse.Stats";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientGetUserStatsResponse_Achievement_Blocks::kAchievementIdFieldNumber;
const int CMsgClientGetUserStatsResponse_Achievement_Blocks::kUnlockTimeFieldNumber;
#endif  // !_MSC_VER

CMsgClientGetUserStatsResponse_Achievement_Blocks::CMsgClientGetUserStatsResponse_Achievement_Blocks()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientGetUserStatsResponse_Achievement_Blocks::InitAsDefaultInstance() {
}

CMsgClientGetUserStatsResponse_Achievement_Blocks::CMsgClientGetUserStatsResponse_Achievement_Blocks(const CMsgClientGetUserStatsResponse_Achievement_Blocks& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientGetUserStatsResponse_Achievement_Blocks::SharedCtor() {
  _cached_size_ = 0;
  achievement_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientGetUserStatsResponse_Achievement_Blocks::~CMsgClientGetUserStatsResponse_Achievement_Blocks() {
  SharedDtor();
}

void CMsgClientGetUserStatsResponse_Achievement_Blocks::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientGetUserStatsResponse_Achievement_Blocks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientGetUserStatsResponse_Achievement_Blocks& CMsgClientGetUserStatsResponse_Achievement_Blocks::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientGetUserStatsResponse_Achievement_Blocks* CMsgClientGetUserStatsResponse_Achievement_Blocks::default_instance_ = NULL;

CMsgClientGetUserStatsResponse_Achievement_Blocks* CMsgClientGetUserStatsResponse_Achievement_Blocks::New() const {
  return new CMsgClientGetUserStatsResponse_Achievement_Blocks;
}

void CMsgClientGetUserStatsResponse_Achievement_Blocks::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    achievement_id_ = 0u;
  }
  unlock_time_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientGetUserStatsResponse_Achievement_Blocks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 achievement_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &achievement_id_)));
          set_has_achievement_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_unlock_time;
        break;
      }

      // repeated fixed32 unlock_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_unlock_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 21, input, this->mutable_unlock_time())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_unlock_time())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_unlock_time;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientGetUserStatsResponse_Achievement_Blocks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 achievement_id = 1;
  if (has_achievement_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->achievement_id(), output);
  }

  // repeated fixed32 unlock_time = 2;
  for (int i = 0; i < this->unlock_time_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      2, this->unlock_time(i), output);
  }

}

int CMsgClientGetUserStatsResponse_Achievement_Blocks::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 achievement_id = 1;
    if (has_achievement_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->achievement_id());
    }

  }
  // repeated fixed32 unlock_time = 2;
  {
    int data_size = 0;
    data_size = 4 * this->unlock_time_size();
    total_size += 1 * this->unlock_time_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGetUserStatsResponse_Achievement_Blocks::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientGetUserStatsResponse_Achievement_Blocks*>(&from));
}

void CMsgClientGetUserStatsResponse_Achievement_Blocks::MergeFrom(const CMsgClientGetUserStatsResponse_Achievement_Blocks& from) {
  GOOGLE_CHECK_NE(&from, this);
  unlock_time_.MergeFrom(from.unlock_time_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_achievement_id()) {
      set_achievement_id(from.achievement_id());
    }
  }
}

void CMsgClientGetUserStatsResponse_Achievement_Blocks::CopyFrom(const CMsgClientGetUserStatsResponse_Achievement_Blocks& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetUserStatsResponse_Achievement_Blocks::IsInitialized() const {

  return true;
}

void CMsgClientGetUserStatsResponse_Achievement_Blocks::Swap(CMsgClientGetUserStatsResponse_Achievement_Blocks* other) {
  if (other != this) {
    std::swap(achievement_id_, other->achievement_id_);
    unlock_time_.Swap(&other->unlock_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientGetUserStatsResponse_Achievement_Blocks::GetTypeName() const {
  return "Sc.CMsgClientGetUserStatsResponse.Achievement_Blocks";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientGetUserStatsResponse::kGameIdFieldNumber;
const int CMsgClientGetUserStatsResponse::kEresultFieldNumber;
const int CMsgClientGetUserStatsResponse::kCrcStatsFieldNumber;
const int CMsgClientGetUserStatsResponse::kSchemaFieldNumber;
const int CMsgClientGetUserStatsResponse::kStatsFieldNumber;
const int CMsgClientGetUserStatsResponse::kAchievementBlocksFieldNumber;
#endif  // !_MSC_VER

CMsgClientGetUserStatsResponse::CMsgClientGetUserStatsResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientGetUserStatsResponse::InitAsDefaultInstance() {
}

CMsgClientGetUserStatsResponse::CMsgClientGetUserStatsResponse(const CMsgClientGetUserStatsResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientGetUserStatsResponse::SharedCtor() {
  _cached_size_ = 0;
  game_id_ = GOOGLE_ULONGLONG(0);
  eresult_ = 2;
  crc_stats_ = 0u;
  schema_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientGetUserStatsResponse::~CMsgClientGetUserStatsResponse() {
  SharedDtor();
}

void CMsgClientGetUserStatsResponse::SharedDtor() {
  if (schema_ != &::google::protobuf::internal::kEmptyString) {
    delete schema_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientGetUserStatsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientGetUserStatsResponse& CMsgClientGetUserStatsResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientGetUserStatsResponse* CMsgClientGetUserStatsResponse::default_instance_ = NULL;

CMsgClientGetUserStatsResponse* CMsgClientGetUserStatsResponse::New() const {
  return new CMsgClientGetUserStatsResponse;
}

void CMsgClientGetUserStatsResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_id_ = GOOGLE_ULONGLONG(0);
    eresult_ = 2;
    crc_stats_ = 0u;
    if (has_schema()) {
      if (schema_ != &::google::protobuf::internal::kEmptyString) {
        schema_->clear();
      }
    }
  }
  stats_.Clear();
  achievement_blocks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientGetUserStatsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 game_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_eresult;
        break;
      }

      // optional int32 eresult = 2 [default = 2];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eresult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_crc_stats;
        break;
      }

      // optional uint32 crc_stats = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crc_stats:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crc_stats_)));
          set_has_crc_stats();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_schema;
        break;
      }

      // optional bytes schema = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_schema:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_schema()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_stats;
        break;
      }

      // repeated .Sc.CMsgClientGetUserStatsResponse.Stats stats = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_stats;
        if (input->ExpectTag(50)) goto parse_achievement_blocks;
        break;
      }

      // repeated .Sc.CMsgClientGetUserStatsResponse.Achievement_Blocks achievement_blocks = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_achievement_blocks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_achievement_blocks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_achievement_blocks;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientGetUserStatsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 game_id = 1;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->game_id(), output);
  }

  // optional int32 eresult = 2 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->eresult(), output);
  }

  // optional uint32 crc_stats = 3;
  if (has_crc_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->crc_stats(), output);
  }

  // optional bytes schema = 4;
  if (has_schema()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->schema(), output);
  }

  // repeated .Sc.CMsgClientGetUserStatsResponse.Stats stats = 5;
  for (int i = 0; i < this->stats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->stats(i), output);
  }

  // repeated .Sc.CMsgClientGetUserStatsResponse.Achievement_Blocks achievement_blocks = 6;
  for (int i = 0; i < this->achievement_blocks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->achievement_blocks(i), output);
  }

}

int CMsgClientGetUserStatsResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 game_id = 1;
    if (has_game_id()) {
      total_size += 1 + 8;
    }

    // optional int32 eresult = 2 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional uint32 crc_stats = 3;
    if (has_crc_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crc_stats());
    }

    // optional bytes schema = 4;
    if (has_schema()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->schema());
    }

  }
  // repeated .Sc.CMsgClientGetUserStatsResponse.Stats stats = 5;
  total_size += 1 * this->stats_size();
  for (int i = 0; i < this->stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stats(i));
  }

  // repeated .Sc.CMsgClientGetUserStatsResponse.Achievement_Blocks achievement_blocks = 6;
  total_size += 1 * this->achievement_blocks_size();
  for (int i = 0; i < this->achievement_blocks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->achievement_blocks(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGetUserStatsResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientGetUserStatsResponse*>(&from));
}

void CMsgClientGetUserStatsResponse::MergeFrom(const CMsgClientGetUserStatsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  stats_.MergeFrom(from.stats_);
  achievement_blocks_.MergeFrom(from.achievement_blocks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_crc_stats()) {
      set_crc_stats(from.crc_stats());
    }
    if (from.has_schema()) {
      set_schema(from.schema());
    }
  }
}

void CMsgClientGetUserStatsResponse::CopyFrom(const CMsgClientGetUserStatsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetUserStatsResponse::IsInitialized() const {

  return true;
}

void CMsgClientGetUserStatsResponse::Swap(CMsgClientGetUserStatsResponse* other) {
  if (other != this) {
    std::swap(game_id_, other->game_id_);
    std::swap(eresult_, other->eresult_);
    std::swap(crc_stats_, other->crc_stats_);
    std::swap(schema_, other->schema_);
    stats_.Swap(&other->stats_);
    achievement_blocks_.Swap(&other->achievement_blocks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientGetUserStatsResponse::GetTypeName() const {
  return "Sc.CMsgClientGetUserStatsResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::kStatIdFieldNumber;
const int CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::kRevertedStatValueFieldNumber;
#endif  // !_MSC_VER

CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::CMsgClientStoreUserStatsResponse_Stats_Failed_Validation()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::InitAsDefaultInstance() {
}

CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::CMsgClientStoreUserStatsResponse_Stats_Failed_Validation(const CMsgClientStoreUserStatsResponse_Stats_Failed_Validation& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::SharedCtor() {
  _cached_size_ = 0;
  stat_id_ = 0u;
  reverted_stat_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::~CMsgClientStoreUserStatsResponse_Stats_Failed_Validation() {
  SharedDtor();
}

void CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientStoreUserStatsResponse_Stats_Failed_Validation& CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientStoreUserStatsResponse_Stats_Failed_Validation* CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::default_instance_ = NULL;

CMsgClientStoreUserStatsResponse_Stats_Failed_Validation* CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::New() const {
  return new CMsgClientStoreUserStatsResponse_Stats_Failed_Validation;
}

void CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stat_id_ = 0u;
    reverted_stat_value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stat_id_)));
          set_has_stat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reverted_stat_value;
        break;
      }

      // optional uint32 reverted_stat_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reverted_stat_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reverted_stat_value_)));
          set_has_reverted_stat_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 stat_id = 1;
  if (has_stat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stat_id(), output);
  }

  // optional uint32 reverted_stat_value = 2;
  if (has_reverted_stat_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reverted_stat_value(), output);
  }

}

int CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 stat_id = 1;
    if (has_stat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stat_id());
    }

    // optional uint32 reverted_stat_value = 2;
    if (has_reverted_stat_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reverted_stat_value());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientStoreUserStatsResponse_Stats_Failed_Validation*>(&from));
}

void CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::MergeFrom(const CMsgClientStoreUserStatsResponse_Stats_Failed_Validation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stat_id()) {
      set_stat_id(from.stat_id());
    }
    if (from.has_reverted_stat_value()) {
      set_reverted_stat_value(from.reverted_stat_value());
    }
  }
}

void CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::CopyFrom(const CMsgClientStoreUserStatsResponse_Stats_Failed_Validation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::IsInitialized() const {

  return true;
}

void CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::Swap(CMsgClientStoreUserStatsResponse_Stats_Failed_Validation* other) {
  if (other != this) {
    std::swap(stat_id_, other->stat_id_);
    std::swap(reverted_stat_value_, other->reverted_stat_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientStoreUserStatsResponse_Stats_Failed_Validation::GetTypeName() const {
  return "Sc.CMsgClientStoreUserStatsResponse.Stats_Failed_Validation";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientStoreUserStatsResponse::kGameIdFieldNumber;
const int CMsgClientStoreUserStatsResponse::kEresultFieldNumber;
const int CMsgClientStoreUserStatsResponse::kCrcStatsFieldNumber;
const int CMsgClientStoreUserStatsResponse::kStatsFailedValidationFieldNumber;
const int CMsgClientStoreUserStatsResponse::kStatsOutOfDateFieldNumber;
#endif  // !_MSC_VER

CMsgClientStoreUserStatsResponse::CMsgClientStoreUserStatsResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientStoreUserStatsResponse::InitAsDefaultInstance() {
}

CMsgClientStoreUserStatsResponse::CMsgClientStoreUserStatsResponse(const CMsgClientStoreUserStatsResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientStoreUserStatsResponse::SharedCtor() {
  _cached_size_ = 0;
  game_id_ = GOOGLE_ULONGLONG(0);
  eresult_ = 2;
  crc_stats_ = 0u;
  stats_out_of_date_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientStoreUserStatsResponse::~CMsgClientStoreUserStatsResponse() {
  SharedDtor();
}

void CMsgClientStoreUserStatsResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientStoreUserStatsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientStoreUserStatsResponse& CMsgClientStoreUserStatsResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientStoreUserStatsResponse* CMsgClientStoreUserStatsResponse::default_instance_ = NULL;

CMsgClientStoreUserStatsResponse* CMsgClientStoreUserStatsResponse::New() const {
  return new CMsgClientStoreUserStatsResponse;
}

void CMsgClientStoreUserStatsResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_id_ = GOOGLE_ULONGLONG(0);
    eresult_ = 2;
    crc_stats_ = 0u;
    stats_out_of_date_ = false;
  }
  stats_failed_validation_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientStoreUserStatsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 game_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_eresult;
        break;
      }

      // optional int32 eresult = 2 [default = 2];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eresult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_crc_stats;
        break;
      }

      // optional uint32 crc_stats = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crc_stats:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crc_stats_)));
          set_has_crc_stats();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stats_failed_validation;
        break;
      }

      // repeated .Sc.CMsgClientStoreUserStatsResponse.Stats_Failed_Validation stats_failed_validation = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stats_failed_validation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stats_failed_validation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stats_failed_validation;
        if (input->ExpectTag(40)) goto parse_stats_out_of_date;
        break;
      }

      // optional bool stats_out_of_date = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stats_out_of_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stats_out_of_date_)));
          set_has_stats_out_of_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientStoreUserStatsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 game_id = 1;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->game_id(), output);
  }

  // optional int32 eresult = 2 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->eresult(), output);
  }

  // optional uint32 crc_stats = 3;
  if (has_crc_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->crc_stats(), output);
  }

  // repeated .Sc.CMsgClientStoreUserStatsResponse.Stats_Failed_Validation stats_failed_validation = 4;
  for (int i = 0; i < this->stats_failed_validation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->stats_failed_validation(i), output);
  }

  // optional bool stats_out_of_date = 5;
  if (has_stats_out_of_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->stats_out_of_date(), output);
  }

}

int CMsgClientStoreUserStatsResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 game_id = 1;
    if (has_game_id()) {
      total_size += 1 + 8;
    }

    // optional int32 eresult = 2 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional uint32 crc_stats = 3;
    if (has_crc_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crc_stats());
    }

    // optional bool stats_out_of_date = 5;
    if (has_stats_out_of_date()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Sc.CMsgClientStoreUserStatsResponse.Stats_Failed_Validation stats_failed_validation = 4;
  total_size += 1 * this->stats_failed_validation_size();
  for (int i = 0; i < this->stats_failed_validation_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stats_failed_validation(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientStoreUserStatsResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientStoreUserStatsResponse*>(&from));
}

void CMsgClientStoreUserStatsResponse::MergeFrom(const CMsgClientStoreUserStatsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  stats_failed_validation_.MergeFrom(from.stats_failed_validation_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_crc_stats()) {
      set_crc_stats(from.crc_stats());
    }
    if (from.has_stats_out_of_date()) {
      set_stats_out_of_date(from.stats_out_of_date());
    }
  }
}

void CMsgClientStoreUserStatsResponse::CopyFrom(const CMsgClientStoreUserStatsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientStoreUserStatsResponse::IsInitialized() const {

  return true;
}

void CMsgClientStoreUserStatsResponse::Swap(CMsgClientStoreUserStatsResponse* other) {
  if (other != this) {
    std::swap(game_id_, other->game_id_);
    std::swap(eresult_, other->eresult_);
    std::swap(crc_stats_, other->crc_stats_);
    stats_failed_validation_.Swap(&other->stats_failed_validation_);
    std::swap(stats_out_of_date_, other->stats_out_of_date_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientStoreUserStatsResponse::GetTypeName() const {
  return "Sc.CMsgClientStoreUserStatsResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientStoreUserStats2_Stats::kStatIdFieldNumber;
const int CMsgClientStoreUserStats2_Stats::kStatValueFieldNumber;
#endif  // !_MSC_VER

CMsgClientStoreUserStats2_Stats::CMsgClientStoreUserStats2_Stats()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientStoreUserStats2_Stats::InitAsDefaultInstance() {
}

CMsgClientStoreUserStats2_Stats::CMsgClientStoreUserStats2_Stats(const CMsgClientStoreUserStats2_Stats& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientStoreUserStats2_Stats::SharedCtor() {
  _cached_size_ = 0;
  stat_id_ = 0u;
  stat_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientStoreUserStats2_Stats::~CMsgClientStoreUserStats2_Stats() {
  SharedDtor();
}

void CMsgClientStoreUserStats2_Stats::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientStoreUserStats2_Stats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientStoreUserStats2_Stats& CMsgClientStoreUserStats2_Stats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientStoreUserStats2_Stats* CMsgClientStoreUserStats2_Stats::default_instance_ = NULL;

CMsgClientStoreUserStats2_Stats* CMsgClientStoreUserStats2_Stats::New() const {
  return new CMsgClientStoreUserStats2_Stats;
}

void CMsgClientStoreUserStats2_Stats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stat_id_ = 0u;
    stat_value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientStoreUserStats2_Stats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stat_id_)));
          set_has_stat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stat_value;
        break;
      }

      // optional uint32 stat_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stat_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stat_value_)));
          set_has_stat_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientStoreUserStats2_Stats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 stat_id = 1;
  if (has_stat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stat_id(), output);
  }

  // optional uint32 stat_value = 2;
  if (has_stat_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stat_value(), output);
  }

}

int CMsgClientStoreUserStats2_Stats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 stat_id = 1;
    if (has_stat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stat_id());
    }

    // optional uint32 stat_value = 2;
    if (has_stat_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stat_value());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientStoreUserStats2_Stats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientStoreUserStats2_Stats*>(&from));
}

void CMsgClientStoreUserStats2_Stats::MergeFrom(const CMsgClientStoreUserStats2_Stats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stat_id()) {
      set_stat_id(from.stat_id());
    }
    if (from.has_stat_value()) {
      set_stat_value(from.stat_value());
    }
  }
}

void CMsgClientStoreUserStats2_Stats::CopyFrom(const CMsgClientStoreUserStats2_Stats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientStoreUserStats2_Stats::IsInitialized() const {

  return true;
}

void CMsgClientStoreUserStats2_Stats::Swap(CMsgClientStoreUserStats2_Stats* other) {
  if (other != this) {
    std::swap(stat_id_, other->stat_id_);
    std::swap(stat_value_, other->stat_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientStoreUserStats2_Stats::GetTypeName() const {
  return "Sc.CMsgClientStoreUserStats2.Stats";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientStoreUserStats2::kGameIdFieldNumber;
const int CMsgClientStoreUserStats2::kSettorSteamIdFieldNumber;
const int CMsgClientStoreUserStats2::kSetteeSteamIdFieldNumber;
const int CMsgClientStoreUserStats2::kCrcStatsFieldNumber;
const int CMsgClientStoreUserStats2::kExplicitResetFieldNumber;
const int CMsgClientStoreUserStats2::kStatsFieldNumber;
#endif  // !_MSC_VER

CMsgClientStoreUserStats2::CMsgClientStoreUserStats2()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientStoreUserStats2::InitAsDefaultInstance() {
}

CMsgClientStoreUserStats2::CMsgClientStoreUserStats2(const CMsgClientStoreUserStats2& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientStoreUserStats2::SharedCtor() {
  _cached_size_ = 0;
  game_id_ = GOOGLE_ULONGLONG(0);
  settor_steam_id_ = GOOGLE_ULONGLONG(0);
  settee_steam_id_ = GOOGLE_ULONGLONG(0);
  crc_stats_ = 0u;
  explicit_reset_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientStoreUserStats2::~CMsgClientStoreUserStats2() {
  SharedDtor();
}

void CMsgClientStoreUserStats2::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientStoreUserStats2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientStoreUserStats2& CMsgClientStoreUserStats2::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientStoreUserStats2* CMsgClientStoreUserStats2::default_instance_ = NULL;

CMsgClientStoreUserStats2* CMsgClientStoreUserStats2::New() const {
  return new CMsgClientStoreUserStats2;
}

void CMsgClientStoreUserStats2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_id_ = GOOGLE_ULONGLONG(0);
    settor_steam_id_ = GOOGLE_ULONGLONG(0);
    settee_steam_id_ = GOOGLE_ULONGLONG(0);
    crc_stats_ = 0u;
    explicit_reset_ = false;
  }
  stats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientStoreUserStats2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 game_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_settor_steam_id;
        break;
      }

      // optional fixed64 settor_steam_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_settor_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &settor_steam_id_)));
          set_has_settor_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_settee_steam_id;
        break;
      }

      // optional fixed64 settee_steam_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_settee_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &settee_steam_id_)));
          set_has_settee_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_crc_stats;
        break;
      }

      // optional uint32 crc_stats = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crc_stats:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crc_stats_)));
          set_has_crc_stats();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_explicit_reset;
        break;
      }

      // optional bool explicit_reset = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_explicit_reset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &explicit_reset_)));
          set_has_explicit_reset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_stats;
        break;
      }

      // repeated .Sc.CMsgClientStoreUserStats2.Stats stats = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_stats;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientStoreUserStats2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 game_id = 1;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->game_id(), output);
  }

  // optional fixed64 settor_steam_id = 2;
  if (has_settor_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->settor_steam_id(), output);
  }

  // optional fixed64 settee_steam_id = 3;
  if (has_settee_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->settee_steam_id(), output);
  }

  // optional uint32 crc_stats = 4;
  if (has_crc_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->crc_stats(), output);
  }

  // optional bool explicit_reset = 5;
  if (has_explicit_reset()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->explicit_reset(), output);
  }

  // repeated .Sc.CMsgClientStoreUserStats2.Stats stats = 6;
  for (int i = 0; i < this->stats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->stats(i), output);
  }

}

int CMsgClientStoreUserStats2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 game_id = 1;
    if (has_game_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 settor_steam_id = 2;
    if (has_settor_steam_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 settee_steam_id = 3;
    if (has_settee_steam_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 crc_stats = 4;
    if (has_crc_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crc_stats());
    }

    // optional bool explicit_reset = 5;
    if (has_explicit_reset()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Sc.CMsgClientStoreUserStats2.Stats stats = 6;
  total_size += 1 * this->stats_size();
  for (int i = 0; i < this->stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stats(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientStoreUserStats2::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientStoreUserStats2*>(&from));
}

void CMsgClientStoreUserStats2::MergeFrom(const CMsgClientStoreUserStats2& from) {
  GOOGLE_CHECK_NE(&from, this);
  stats_.MergeFrom(from.stats_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_settor_steam_id()) {
      set_settor_steam_id(from.settor_steam_id());
    }
    if (from.has_settee_steam_id()) {
      set_settee_steam_id(from.settee_steam_id());
    }
    if (from.has_crc_stats()) {
      set_crc_stats(from.crc_stats());
    }
    if (from.has_explicit_reset()) {
      set_explicit_reset(from.explicit_reset());
    }
  }
}

void CMsgClientStoreUserStats2::CopyFrom(const CMsgClientStoreUserStats2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientStoreUserStats2::IsInitialized() const {

  return true;
}

void CMsgClientStoreUserStats2::Swap(CMsgClientStoreUserStats2* other) {
  if (other != this) {
    std::swap(game_id_, other->game_id_);
    std::swap(settor_steam_id_, other->settor_steam_id_);
    std::swap(settee_steam_id_, other->settee_steam_id_);
    std::swap(crc_stats_, other->crc_stats_);
    std::swap(explicit_reset_, other->explicit_reset_);
    stats_.Swap(&other->stats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientStoreUserStats2::GetTypeName() const {
  return "Sc.CMsgClientStoreUserStats2";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientStatsUpdated_Updated_Stats::kStatIdFieldNumber;
const int CMsgClientStatsUpdated_Updated_Stats::kStatValueFieldNumber;
#endif  // !_MSC_VER

CMsgClientStatsUpdated_Updated_Stats::CMsgClientStatsUpdated_Updated_Stats()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientStatsUpdated_Updated_Stats::InitAsDefaultInstance() {
}

CMsgClientStatsUpdated_Updated_Stats::CMsgClientStatsUpdated_Updated_Stats(const CMsgClientStatsUpdated_Updated_Stats& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientStatsUpdated_Updated_Stats::SharedCtor() {
  _cached_size_ = 0;
  stat_id_ = 0u;
  stat_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientStatsUpdated_Updated_Stats::~CMsgClientStatsUpdated_Updated_Stats() {
  SharedDtor();
}

void CMsgClientStatsUpdated_Updated_Stats::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientStatsUpdated_Updated_Stats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientStatsUpdated_Updated_Stats& CMsgClientStatsUpdated_Updated_Stats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientStatsUpdated_Updated_Stats* CMsgClientStatsUpdated_Updated_Stats::default_instance_ = NULL;

CMsgClientStatsUpdated_Updated_Stats* CMsgClientStatsUpdated_Updated_Stats::New() const {
  return new CMsgClientStatsUpdated_Updated_Stats;
}

void CMsgClientStatsUpdated_Updated_Stats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stat_id_ = 0u;
    stat_value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientStatsUpdated_Updated_Stats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stat_id_)));
          set_has_stat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stat_value;
        break;
      }

      // optional uint32 stat_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stat_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stat_value_)));
          set_has_stat_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientStatsUpdated_Updated_Stats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 stat_id = 1;
  if (has_stat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stat_id(), output);
  }

  // optional uint32 stat_value = 2;
  if (has_stat_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stat_value(), output);
  }

}

int CMsgClientStatsUpdated_Updated_Stats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 stat_id = 1;
    if (has_stat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stat_id());
    }

    // optional uint32 stat_value = 2;
    if (has_stat_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stat_value());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientStatsUpdated_Updated_Stats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientStatsUpdated_Updated_Stats*>(&from));
}

void CMsgClientStatsUpdated_Updated_Stats::MergeFrom(const CMsgClientStatsUpdated_Updated_Stats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stat_id()) {
      set_stat_id(from.stat_id());
    }
    if (from.has_stat_value()) {
      set_stat_value(from.stat_value());
    }
  }
}

void CMsgClientStatsUpdated_Updated_Stats::CopyFrom(const CMsgClientStatsUpdated_Updated_Stats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientStatsUpdated_Updated_Stats::IsInitialized() const {

  return true;
}

void CMsgClientStatsUpdated_Updated_Stats::Swap(CMsgClientStatsUpdated_Updated_Stats* other) {
  if (other != this) {
    std::swap(stat_id_, other->stat_id_);
    std::swap(stat_value_, other->stat_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientStatsUpdated_Updated_Stats::GetTypeName() const {
  return "Sc.CMsgClientStatsUpdated.Updated_Stats";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientStatsUpdated::kSteamIdFieldNumber;
const int CMsgClientStatsUpdated::kGameIdFieldNumber;
const int CMsgClientStatsUpdated::kCrcStatsFieldNumber;
const int CMsgClientStatsUpdated::kUpdatedStatsFieldNumber;
#endif  // !_MSC_VER

CMsgClientStatsUpdated::CMsgClientStatsUpdated()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientStatsUpdated::InitAsDefaultInstance() {
}

CMsgClientStatsUpdated::CMsgClientStatsUpdated(const CMsgClientStatsUpdated& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientStatsUpdated::SharedCtor() {
  _cached_size_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
  game_id_ = GOOGLE_ULONGLONG(0);
  crc_stats_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientStatsUpdated::~CMsgClientStatsUpdated() {
  SharedDtor();
}

void CMsgClientStatsUpdated::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientStatsUpdated::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientStatsUpdated& CMsgClientStatsUpdated::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientStatsUpdated* CMsgClientStatsUpdated::default_instance_ = NULL;

CMsgClientStatsUpdated* CMsgClientStatsUpdated::New() const {
  return new CMsgClientStatsUpdated;
}

void CMsgClientStatsUpdated::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_ = GOOGLE_ULONGLONG(0);
    game_id_ = GOOGLE_ULONGLONG(0);
    crc_stats_ = 0u;
  }
  updated_stats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientStatsUpdated::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          set_has_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_game_id;
        break;
      }

      // optional fixed64 game_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_crc_stats;
        break;
      }

      // optional uint32 crc_stats = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crc_stats:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crc_stats_)));
          set_has_crc_stats();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_updated_stats;
        break;
      }

      // repeated .Sc.CMsgClientStatsUpdated.Updated_Stats updated_stats = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_updated_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updated_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_updated_stats;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientStatsUpdated::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional fixed64 game_id = 2;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->game_id(), output);
  }

  // optional uint32 crc_stats = 3;
  if (has_crc_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->crc_stats(), output);
  }

  // repeated .Sc.CMsgClientStatsUpdated.Updated_Stats updated_stats = 4;
  for (int i = 0; i < this->updated_stats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->updated_stats(i), output);
  }

}

int CMsgClientStatsUpdated::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 game_id = 2;
    if (has_game_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 crc_stats = 3;
    if (has_crc_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crc_stats());
    }

  }
  // repeated .Sc.CMsgClientStatsUpdated.Updated_Stats updated_stats = 4;
  total_size += 1 * this->updated_stats_size();
  for (int i = 0; i < this->updated_stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updated_stats(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientStatsUpdated::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientStatsUpdated*>(&from));
}

void CMsgClientStatsUpdated::MergeFrom(const CMsgClientStatsUpdated& from) {
  GOOGLE_CHECK_NE(&from, this);
  updated_stats_.MergeFrom(from.updated_stats_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_crc_stats()) {
      set_crc_stats(from.crc_stats());
    }
  }
}

void CMsgClientStatsUpdated::CopyFrom(const CMsgClientStatsUpdated& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientStatsUpdated::IsInitialized() const {

  return true;
}

void CMsgClientStatsUpdated::Swap(CMsgClientStatsUpdated* other) {
  if (other != this) {
    std::swap(steam_id_, other->steam_id_);
    std::swap(game_id_, other->game_id_);
    std::swap(crc_stats_, other->crc_stats_);
    updated_stats_.Swap(&other->updated_stats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientStatsUpdated::GetTypeName() const {
  return "Sc.CMsgClientStatsUpdated";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientStoreUserStats_Stats_To_Store::kStatIdFieldNumber;
const int CMsgClientStoreUserStats_Stats_To_Store::kStatValueFieldNumber;
#endif  // !_MSC_VER

CMsgClientStoreUserStats_Stats_To_Store::CMsgClientStoreUserStats_Stats_To_Store()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientStoreUserStats_Stats_To_Store::InitAsDefaultInstance() {
}

CMsgClientStoreUserStats_Stats_To_Store::CMsgClientStoreUserStats_Stats_To_Store(const CMsgClientStoreUserStats_Stats_To_Store& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientStoreUserStats_Stats_To_Store::SharedCtor() {
  _cached_size_ = 0;
  stat_id_ = 0u;
  stat_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientStoreUserStats_Stats_To_Store::~CMsgClientStoreUserStats_Stats_To_Store() {
  SharedDtor();
}

void CMsgClientStoreUserStats_Stats_To_Store::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientStoreUserStats_Stats_To_Store::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientStoreUserStats_Stats_To_Store& CMsgClientStoreUserStats_Stats_To_Store::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientStoreUserStats_Stats_To_Store* CMsgClientStoreUserStats_Stats_To_Store::default_instance_ = NULL;

CMsgClientStoreUserStats_Stats_To_Store* CMsgClientStoreUserStats_Stats_To_Store::New() const {
  return new CMsgClientStoreUserStats_Stats_To_Store;
}

void CMsgClientStoreUserStats_Stats_To_Store::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stat_id_ = 0u;
    stat_value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientStoreUserStats_Stats_To_Store::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stat_id_)));
          set_has_stat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stat_value;
        break;
      }

      // optional uint32 stat_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stat_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stat_value_)));
          set_has_stat_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientStoreUserStats_Stats_To_Store::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 stat_id = 1;
  if (has_stat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stat_id(), output);
  }

  // optional uint32 stat_value = 2;
  if (has_stat_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stat_value(), output);
  }

}

int CMsgClientStoreUserStats_Stats_To_Store::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 stat_id = 1;
    if (has_stat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stat_id());
    }

    // optional uint32 stat_value = 2;
    if (has_stat_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stat_value());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientStoreUserStats_Stats_To_Store::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientStoreUserStats_Stats_To_Store*>(&from));
}

void CMsgClientStoreUserStats_Stats_To_Store::MergeFrom(const CMsgClientStoreUserStats_Stats_To_Store& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stat_id()) {
      set_stat_id(from.stat_id());
    }
    if (from.has_stat_value()) {
      set_stat_value(from.stat_value());
    }
  }
}

void CMsgClientStoreUserStats_Stats_To_Store::CopyFrom(const CMsgClientStoreUserStats_Stats_To_Store& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientStoreUserStats_Stats_To_Store::IsInitialized() const {

  return true;
}

void CMsgClientStoreUserStats_Stats_To_Store::Swap(CMsgClientStoreUserStats_Stats_To_Store* other) {
  if (other != this) {
    std::swap(stat_id_, other->stat_id_);
    std::swap(stat_value_, other->stat_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientStoreUserStats_Stats_To_Store::GetTypeName() const {
  return "Sc.CMsgClientStoreUserStats.Stats_To_Store";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientStoreUserStats::kGameIdFieldNumber;
const int CMsgClientStoreUserStats::kExplicitResetFieldNumber;
const int CMsgClientStoreUserStats::kStatsToStoreFieldNumber;
#endif  // !_MSC_VER

CMsgClientStoreUserStats::CMsgClientStoreUserStats()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientStoreUserStats::InitAsDefaultInstance() {
}

CMsgClientStoreUserStats::CMsgClientStoreUserStats(const CMsgClientStoreUserStats& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientStoreUserStats::SharedCtor() {
  _cached_size_ = 0;
  game_id_ = GOOGLE_ULONGLONG(0);
  explicit_reset_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientStoreUserStats::~CMsgClientStoreUserStats() {
  SharedDtor();
}

void CMsgClientStoreUserStats::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientStoreUserStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientStoreUserStats& CMsgClientStoreUserStats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientStoreUserStats* CMsgClientStoreUserStats::default_instance_ = NULL;

CMsgClientStoreUserStats* CMsgClientStoreUserStats::New() const {
  return new CMsgClientStoreUserStats;
}

void CMsgClientStoreUserStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_id_ = GOOGLE_ULONGLONG(0);
    explicit_reset_ = false;
  }
  stats_to_store_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientStoreUserStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 game_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_explicit_reset;
        break;
      }

      // optional bool explicit_reset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_explicit_reset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &explicit_reset_)));
          set_has_explicit_reset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stats_to_store;
        break;
      }

      // repeated .Sc.CMsgClientStoreUserStats.Stats_To_Store stats_to_store = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stats_to_store:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stats_to_store()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stats_to_store;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientStoreUserStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 game_id = 1;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->game_id(), output);
  }

  // optional bool explicit_reset = 2;
  if (has_explicit_reset()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->explicit_reset(), output);
  }

  // repeated .Sc.CMsgClientStoreUserStats.Stats_To_Store stats_to_store = 3;
  for (int i = 0; i < this->stats_to_store_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->stats_to_store(i), output);
  }

}

int CMsgClientStoreUserStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 game_id = 1;
    if (has_game_id()) {
      total_size += 1 + 8;
    }

    // optional bool explicit_reset = 2;
    if (has_explicit_reset()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Sc.CMsgClientStoreUserStats.Stats_To_Store stats_to_store = 3;
  total_size += 1 * this->stats_to_store_size();
  for (int i = 0; i < this->stats_to_store_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stats_to_store(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientStoreUserStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientStoreUserStats*>(&from));
}

void CMsgClientStoreUserStats::MergeFrom(const CMsgClientStoreUserStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  stats_to_store_.MergeFrom(from.stats_to_store_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_explicit_reset()) {
      set_explicit_reset(from.explicit_reset());
    }
  }
}

void CMsgClientStoreUserStats::CopyFrom(const CMsgClientStoreUserStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientStoreUserStats::IsInitialized() const {

  return true;
}

void CMsgClientStoreUserStats::Swap(CMsgClientStoreUserStats* other) {
  if (other != this) {
    std::swap(game_id_, other->game_id_);
    std::swap(explicit_reset_, other->explicit_reset_);
    stats_to_store_.Swap(&other->stats_to_store_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientStoreUserStats::GetTypeName() const {
  return "Sc.CMsgClientStoreUserStats";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgClientGetClientDetails::CMsgClientGetClientDetails()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientGetClientDetails::InitAsDefaultInstance() {
}

CMsgClientGetClientDetails::CMsgClientGetClientDetails(const CMsgClientGetClientDetails& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientGetClientDetails::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientGetClientDetails::~CMsgClientGetClientDetails() {
  SharedDtor();
}

void CMsgClientGetClientDetails::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientGetClientDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientGetClientDetails& CMsgClientGetClientDetails::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientGetClientDetails* CMsgClientGetClientDetails::default_instance_ = NULL;

CMsgClientGetClientDetails* CMsgClientGetClientDetails::New() const {
  return new CMsgClientGetClientDetails;
}

void CMsgClientGetClientDetails::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientGetClientDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void CMsgClientGetClientDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int CMsgClientGetClientDetails::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGetClientDetails::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientGetClientDetails*>(&from));
}

void CMsgClientGetClientDetails::MergeFrom(const CMsgClientGetClientDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void CMsgClientGetClientDetails::CopyFrom(const CMsgClientGetClientDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetClientDetails::IsInitialized() const {

  return true;
}

void CMsgClientGetClientDetails::Swap(CMsgClientGetClientDetails* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientGetClientDetails::GetTypeName() const {
  return "Sc.CMsgClientGetClientDetails";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientReportOverlayDetourFailure::kFailureStringsFieldNumber;
#endif  // !_MSC_VER

CMsgClientReportOverlayDetourFailure::CMsgClientReportOverlayDetourFailure()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientReportOverlayDetourFailure::InitAsDefaultInstance() {
}

CMsgClientReportOverlayDetourFailure::CMsgClientReportOverlayDetourFailure(const CMsgClientReportOverlayDetourFailure& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientReportOverlayDetourFailure::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientReportOverlayDetourFailure::~CMsgClientReportOverlayDetourFailure() {
  SharedDtor();
}

void CMsgClientReportOverlayDetourFailure::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientReportOverlayDetourFailure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientReportOverlayDetourFailure& CMsgClientReportOverlayDetourFailure::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientReportOverlayDetourFailure* CMsgClientReportOverlayDetourFailure::default_instance_ = NULL;

CMsgClientReportOverlayDetourFailure* CMsgClientReportOverlayDetourFailure::New() const {
  return new CMsgClientReportOverlayDetourFailure;
}

void CMsgClientReportOverlayDetourFailure::Clear() {
  failure_strings_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientReportOverlayDetourFailure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string failure_strings = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_failure_strings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_failure_strings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_failure_strings;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientReportOverlayDetourFailure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string failure_strings = 1;
  for (int i = 0; i < this->failure_strings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->failure_strings(i), output);
  }

}

int CMsgClientReportOverlayDetourFailure::ByteSize() const {
  int total_size = 0;

  // repeated string failure_strings = 1;
  total_size += 1 * this->failure_strings_size();
  for (int i = 0; i < this->failure_strings_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->failure_strings(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientReportOverlayDetourFailure::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientReportOverlayDetourFailure*>(&from));
}

void CMsgClientReportOverlayDetourFailure::MergeFrom(const CMsgClientReportOverlayDetourFailure& from) {
  GOOGLE_CHECK_NE(&from, this);
  failure_strings_.MergeFrom(from.failure_strings_);
}

void CMsgClientReportOverlayDetourFailure::CopyFrom(const CMsgClientReportOverlayDetourFailure& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientReportOverlayDetourFailure::IsInitialized() const {

  return true;
}

void CMsgClientReportOverlayDetourFailure::Swap(CMsgClientReportOverlayDetourFailure* other) {
  if (other != this) {
    failure_strings_.Swap(&other->failure_strings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientReportOverlayDetourFailure::GetTypeName() const {
  return "Sc.CMsgClientReportOverlayDetourFailure";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientGetClientDetailsResponse_Game::kAppidFieldNumber;
const int CMsgClientGetClientDetailsResponse_Game::kExtraInfoFieldNumber;
const int CMsgClientGetClientDetailsResponse_Game::kTimeRunningSecFieldNumber;
#endif  // !_MSC_VER

CMsgClientGetClientDetailsResponse_Game::CMsgClientGetClientDetailsResponse_Game()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientGetClientDetailsResponse_Game::InitAsDefaultInstance() {
}

CMsgClientGetClientDetailsResponse_Game::CMsgClientGetClientDetailsResponse_Game(const CMsgClientGetClientDetailsResponse_Game& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientGetClientDetailsResponse_Game::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0u;
  extra_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_running_sec_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientGetClientDetailsResponse_Game::~CMsgClientGetClientDetailsResponse_Game() {
  SharedDtor();
}

void CMsgClientGetClientDetailsResponse_Game::SharedDtor() {
  if (extra_info_ != &::google::protobuf::internal::kEmptyString) {
    delete extra_info_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientGetClientDetailsResponse_Game::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientGetClientDetailsResponse_Game& CMsgClientGetClientDetailsResponse_Game::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientGetClientDetailsResponse_Game* CMsgClientGetClientDetailsResponse_Game::default_instance_ = NULL;

CMsgClientGetClientDetailsResponse_Game* CMsgClientGetClientDetailsResponse_Game::New() const {
  return new CMsgClientGetClientDetailsResponse_Game;
}

void CMsgClientGetClientDetailsResponse_Game::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    appid_ = 0u;
    if (has_extra_info()) {
      if (extra_info_ != &::google::protobuf::internal::kEmptyString) {
        extra_info_->clear();
      }
    }
    time_running_sec_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientGetClientDetailsResponse_Game::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_extra_info;
        break;
      }

      // optional string extra_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extra_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extra_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time_running_sec;
        break;
      }

      // optional uint32 time_running_sec = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_running_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_running_sec_)));
          set_has_time_running_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientGetClientDetailsResponse_Game::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 appid = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional string extra_info = 2;
  if (has_extra_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->extra_info(), output);
  }

  // optional uint32 time_running_sec = 3;
  if (has_time_running_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_running_sec(), output);
  }

}

int CMsgClientGetClientDetailsResponse_Game::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional string extra_info = 2;
    if (has_extra_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extra_info());
    }

    // optional uint32 time_running_sec = 3;
    if (has_time_running_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_running_sec());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGetClientDetailsResponse_Game::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientGetClientDetailsResponse_Game*>(&from));
}

void CMsgClientGetClientDetailsResponse_Game::MergeFrom(const CMsgClientGetClientDetailsResponse_Game& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_extra_info()) {
      set_extra_info(from.extra_info());
    }
    if (from.has_time_running_sec()) {
      set_time_running_sec(from.time_running_sec());
    }
  }
}

void CMsgClientGetClientDetailsResponse_Game::CopyFrom(const CMsgClientGetClientDetailsResponse_Game& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetClientDetailsResponse_Game::IsInitialized() const {

  return true;
}

void CMsgClientGetClientDetailsResponse_Game::Swap(CMsgClientGetClientDetailsResponse_Game* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(extra_info_, other->extra_info_);
    std::swap(time_running_sec_, other->time_running_sec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientGetClientDetailsResponse_Game::GetTypeName() const {
  return "Sc.CMsgClientGetClientDetailsResponse.Game";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientGetClientDetailsResponse::kPackageVersionFieldNumber;
const int CMsgClientGetClientDetailsResponse::kProtocolVersionFieldNumber;
const int CMsgClientGetClientDetailsResponse::kOsFieldNumber;
const int CMsgClientGetClientDetailsResponse::kMachineNameFieldNumber;
const int CMsgClientGetClientDetailsResponse::kIpPublicFieldNumber;
const int CMsgClientGetClientDetailsResponse::kIpPrivateFieldNumber;
const int CMsgClientGetClientDetailsResponse::kBytesAvailableFieldNumber;
const int CMsgClientGetClientDetailsResponse::kGamesRunningFieldNumber;
#endif  // !_MSC_VER

CMsgClientGetClientDetailsResponse::CMsgClientGetClientDetailsResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientGetClientDetailsResponse::InitAsDefaultInstance() {
}

CMsgClientGetClientDetailsResponse::CMsgClientGetClientDetailsResponse(const CMsgClientGetClientDetailsResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientGetClientDetailsResponse::SharedCtor() {
  _cached_size_ = 0;
  package_version_ = 0u;
  protocol_version_ = 0u;
  os_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  machine_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_public_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_private_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bytes_available_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientGetClientDetailsResponse::~CMsgClientGetClientDetailsResponse() {
  SharedDtor();
}

void CMsgClientGetClientDetailsResponse::SharedDtor() {
  if (os_ != &::google::protobuf::internal::kEmptyString) {
    delete os_;
  }
  if (machine_name_ != &::google::protobuf::internal::kEmptyString) {
    delete machine_name_;
  }
  if (ip_public_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_public_;
  }
  if (ip_private_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_private_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientGetClientDetailsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientGetClientDetailsResponse& CMsgClientGetClientDetailsResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientGetClientDetailsResponse* CMsgClientGetClientDetailsResponse::default_instance_ = NULL;

CMsgClientGetClientDetailsResponse* CMsgClientGetClientDetailsResponse::New() const {
  return new CMsgClientGetClientDetailsResponse;
}

void CMsgClientGetClientDetailsResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    package_version_ = 0u;
    protocol_version_ = 0u;
    if (has_os()) {
      if (os_ != &::google::protobuf::internal::kEmptyString) {
        os_->clear();
      }
    }
    if (has_machine_name()) {
      if (machine_name_ != &::google::protobuf::internal::kEmptyString) {
        machine_name_->clear();
      }
    }
    if (has_ip_public()) {
      if (ip_public_ != &::google::protobuf::internal::kEmptyString) {
        ip_public_->clear();
      }
    }
    if (has_ip_private()) {
      if (ip_private_ != &::google::protobuf::internal::kEmptyString) {
        ip_private_->clear();
      }
    }
    bytes_available_ = GOOGLE_ULONGLONG(0);
  }
  games_running_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientGetClientDetailsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 package_version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &package_version_)));
          set_has_package_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_os;
        break;
      }

      // optional string os = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_os:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_machine_name;
        break;
      }

      // optional string machine_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machine_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ip_public;
        break;
      }

      // optional string ip_public = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip_public:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_public()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ip_private;
        break;
      }

      // optional string ip_private = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip_private:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_private()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_games_running;
        break;
      }

      // repeated .Sc.CMsgClientGetClientDetailsResponse.Game games_running = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_games_running:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_games_running()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_games_running;
        if (input->ExpectTag(56)) goto parse_bytes_available;
        break;
      }

      // optional uint64 bytes_available = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bytes_available:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_available_)));
          set_has_bytes_available();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_protocol_version;
        break;
      }

      // optional uint32 protocol_version = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_protocol_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_version_)));
          set_has_protocol_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientGetClientDetailsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 package_version = 1;
  if (has_package_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->package_version(), output);
  }

  // optional string os = 2;
  if (has_os()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->os(), output);
  }

  // optional string machine_name = 3;
  if (has_machine_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->machine_name(), output);
  }

  // optional string ip_public = 4;
  if (has_ip_public()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ip_public(), output);
  }

  // optional string ip_private = 5;
  if (has_ip_private()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->ip_private(), output);
  }

  // repeated .Sc.CMsgClientGetClientDetailsResponse.Game games_running = 6;
  for (int i = 0; i < this->games_running_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->games_running(i), output);
  }

  // optional uint64 bytes_available = 7;
  if (has_bytes_available()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->bytes_available(), output);
  }

  // optional uint32 protocol_version = 8;
  if (has_protocol_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->protocol_version(), output);
  }

}

int CMsgClientGetClientDetailsResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 package_version = 1;
    if (has_package_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->package_version());
    }

    // optional uint32 protocol_version = 8;
    if (has_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protocol_version());
    }

    // optional string os = 2;
    if (has_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os());
    }

    // optional string machine_name = 3;
    if (has_machine_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_name());
    }

    // optional string ip_public = 4;
    if (has_ip_public()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip_public());
    }

    // optional string ip_private = 5;
    if (has_ip_private()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip_private());
    }

    // optional uint64 bytes_available = 7;
    if (has_bytes_available()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes_available());
    }

  }
  // repeated .Sc.CMsgClientGetClientDetailsResponse.Game games_running = 6;
  total_size += 1 * this->games_running_size();
  for (int i = 0; i < this->games_running_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->games_running(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGetClientDetailsResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientGetClientDetailsResponse*>(&from));
}

void CMsgClientGetClientDetailsResponse::MergeFrom(const CMsgClientGetClientDetailsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  games_running_.MergeFrom(from.games_running_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_package_version()) {
      set_package_version(from.package_version());
    }
    if (from.has_protocol_version()) {
      set_protocol_version(from.protocol_version());
    }
    if (from.has_os()) {
      set_os(from.os());
    }
    if (from.has_machine_name()) {
      set_machine_name(from.machine_name());
    }
    if (from.has_ip_public()) {
      set_ip_public(from.ip_public());
    }
    if (from.has_ip_private()) {
      set_ip_private(from.ip_private());
    }
    if (from.has_bytes_available()) {
      set_bytes_available(from.bytes_available());
    }
  }
}

void CMsgClientGetClientDetailsResponse::CopyFrom(const CMsgClientGetClientDetailsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetClientDetailsResponse::IsInitialized() const {

  return true;
}

void CMsgClientGetClientDetailsResponse::Swap(CMsgClientGetClientDetailsResponse* other) {
  if (other != this) {
    std::swap(package_version_, other->package_version_);
    std::swap(protocol_version_, other->protocol_version_);
    std::swap(os_, other->os_);
    std::swap(machine_name_, other->machine_name_);
    std::swap(ip_public_, other->ip_public_);
    std::swap(ip_private_, other->ip_private_);
    std::swap(bytes_available_, other->bytes_available_);
    games_running_.Swap(&other->games_running_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientGetClientDetailsResponse::GetTypeName() const {
  return "Sc.CMsgClientGetClientDetailsResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientGetClientAppList::kMediaFieldNumber;
const int CMsgClientGetClientAppList::kToolsFieldNumber;
const int CMsgClientGetClientAppList::kGamesFieldNumber;
const int CMsgClientGetClientAppList::kOnlyInstalledFieldNumber;
const int CMsgClientGetClientAppList::kOnlyChangingFieldNumber;
#endif  // !_MSC_VER

CMsgClientGetClientAppList::CMsgClientGetClientAppList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientGetClientAppList::InitAsDefaultInstance() {
}

CMsgClientGetClientAppList::CMsgClientGetClientAppList(const CMsgClientGetClientAppList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientGetClientAppList::SharedCtor() {
  _cached_size_ = 0;
  media_ = false;
  tools_ = false;
  games_ = false;
  only_installed_ = false;
  only_changing_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientGetClientAppList::~CMsgClientGetClientAppList() {
  SharedDtor();
}

void CMsgClientGetClientAppList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientGetClientAppList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientGetClientAppList& CMsgClientGetClientAppList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientGetClientAppList* CMsgClientGetClientAppList::default_instance_ = NULL;

CMsgClientGetClientAppList* CMsgClientGetClientAppList::New() const {
  return new CMsgClientGetClientAppList;
}

void CMsgClientGetClientAppList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    media_ = false;
    tools_ = false;
    games_ = false;
    only_installed_ = false;
    only_changing_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientGetClientAppList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool media = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &media_)));
          set_has_media();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tools;
        break;
      }

      // optional bool tools = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tools:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tools_)));
          set_has_tools();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_games;
        break;
      }

      // optional bool games = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_games:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &games_)));
          set_has_games();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_only_installed;
        break;
      }

      // optional bool only_installed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_only_installed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &only_installed_)));
          set_has_only_installed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_only_changing;
        break;
      }

      // optional bool only_changing = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_only_changing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &only_changing_)));
          set_has_only_changing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientGetClientAppList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool media = 1;
  if (has_media()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->media(), output);
  }

  // optional bool tools = 2;
  if (has_tools()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->tools(), output);
  }

  // optional bool games = 3;
  if (has_games()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->games(), output);
  }

  // optional bool only_installed = 4;
  if (has_only_installed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->only_installed(), output);
  }

  // optional bool only_changing = 5;
  if (has_only_changing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->only_changing(), output);
  }

}

int CMsgClientGetClientAppList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool media = 1;
    if (has_media()) {
      total_size += 1 + 1;
    }

    // optional bool tools = 2;
    if (has_tools()) {
      total_size += 1 + 1;
    }

    // optional bool games = 3;
    if (has_games()) {
      total_size += 1 + 1;
    }

    // optional bool only_installed = 4;
    if (has_only_installed()) {
      total_size += 1 + 1;
    }

    // optional bool only_changing = 5;
    if (has_only_changing()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGetClientAppList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientGetClientAppList*>(&from));
}

void CMsgClientGetClientAppList::MergeFrom(const CMsgClientGetClientAppList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_media()) {
      set_media(from.media());
    }
    if (from.has_tools()) {
      set_tools(from.tools());
    }
    if (from.has_games()) {
      set_games(from.games());
    }
    if (from.has_only_installed()) {
      set_only_installed(from.only_installed());
    }
    if (from.has_only_changing()) {
      set_only_changing(from.only_changing());
    }
  }
}

void CMsgClientGetClientAppList::CopyFrom(const CMsgClientGetClientAppList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetClientAppList::IsInitialized() const {

  return true;
}

void CMsgClientGetClientAppList::Swap(CMsgClientGetClientAppList* other) {
  if (other != this) {
    std::swap(media_, other->media_);
    std::swap(tools_, other->tools_);
    std::swap(games_, other->games_);
    std::swap(only_installed_, other->only_installed_);
    std::swap(only_changing_, other->only_changing_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientGetClientAppList::GetTypeName() const {
  return "Sc.CMsgClientGetClientAppList";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientGetClientAppListResponse_App_DLC::kAppidFieldNumber;
const int CMsgClientGetClientAppListResponse_App_DLC::kInstalledFieldNumber;
#endif  // !_MSC_VER

CMsgClientGetClientAppListResponse_App_DLC::CMsgClientGetClientAppListResponse_App_DLC()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientGetClientAppListResponse_App_DLC::InitAsDefaultInstance() {
}

CMsgClientGetClientAppListResponse_App_DLC::CMsgClientGetClientAppListResponse_App_DLC(const CMsgClientGetClientAppListResponse_App_DLC& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientGetClientAppListResponse_App_DLC::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0u;
  installed_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientGetClientAppListResponse_App_DLC::~CMsgClientGetClientAppListResponse_App_DLC() {
  SharedDtor();
}

void CMsgClientGetClientAppListResponse_App_DLC::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientGetClientAppListResponse_App_DLC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientGetClientAppListResponse_App_DLC& CMsgClientGetClientAppListResponse_App_DLC::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientGetClientAppListResponse_App_DLC* CMsgClientGetClientAppListResponse_App_DLC::default_instance_ = NULL;

CMsgClientGetClientAppListResponse_App_DLC* CMsgClientGetClientAppListResponse_App_DLC::New() const {
  return new CMsgClientGetClientAppListResponse_App_DLC;
}

void CMsgClientGetClientAppListResponse_App_DLC::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    appid_ = 0u;
    installed_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientGetClientAppListResponse_App_DLC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_installed;
        break;
      }

      // optional bool installed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_installed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &installed_)));
          set_has_installed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientGetClientAppListResponse_App_DLC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 appid = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional bool installed = 2;
  if (has_installed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->installed(), output);
  }

}

int CMsgClientGetClientAppListResponse_App_DLC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional bool installed = 2;
    if (has_installed()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGetClientAppListResponse_App_DLC::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientGetClientAppListResponse_App_DLC*>(&from));
}

void CMsgClientGetClientAppListResponse_App_DLC::MergeFrom(const CMsgClientGetClientAppListResponse_App_DLC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_installed()) {
      set_installed(from.installed());
    }
  }
}

void CMsgClientGetClientAppListResponse_App_DLC::CopyFrom(const CMsgClientGetClientAppListResponse_App_DLC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetClientAppListResponse_App_DLC::IsInitialized() const {

  return true;
}

void CMsgClientGetClientAppListResponse_App_DLC::Swap(CMsgClientGetClientAppListResponse_App_DLC* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(installed_, other->installed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientGetClientAppListResponse_App_DLC::GetTypeName() const {
  return "Sc.CMsgClientGetClientAppListResponse.App.DLC";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientGetClientAppListResponse_App::kAppidFieldNumber;
const int CMsgClientGetClientAppListResponse_App::kCategoryFieldNumber;
const int CMsgClientGetClientAppListResponse_App::kAppTypeFieldNumber;
const int CMsgClientGetClientAppListResponse_App::kFavoriteFieldNumber;
const int CMsgClientGetClientAppListResponse_App::kInstalledFieldNumber;
const int CMsgClientGetClientAppListResponse_App::kAutoUpdateFieldNumber;
const int CMsgClientGetClientAppListResponse_App::kBytesDownloadedFieldNumber;
const int CMsgClientGetClientAppListResponse_App::kBytesNeededFieldNumber;
const int CMsgClientGetClientAppListResponse_App::kBytesDownloadRateFieldNumber;
const int CMsgClientGetClientAppListResponse_App::kDownloadPausedFieldNumber;
const int CMsgClientGetClientAppListResponse_App::kNumDownloadingFieldNumber;
const int CMsgClientGetClientAppListResponse_App::kNumPausedFieldNumber;
const int CMsgClientGetClientAppListResponse_App::kChangingFieldNumber;
const int CMsgClientGetClientAppListResponse_App::kAvailableOnPlatformFieldNumber;
const int CMsgClientGetClientAppListResponse_App::kDlcsFieldNumber;
#endif  // !_MSC_VER

CMsgClientGetClientAppListResponse_App::CMsgClientGetClientAppListResponse_App()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientGetClientAppListResponse_App::InitAsDefaultInstance() {
}

CMsgClientGetClientAppListResponse_App::CMsgClientGetClientAppListResponse_App(const CMsgClientGetClientAppListResponse_App& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientGetClientAppListResponse_App::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0u;
  category_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  app_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  favorite_ = false;
  installed_ = false;
  auto_update_ = false;
  bytes_downloaded_ = GOOGLE_ULONGLONG(0);
  bytes_needed_ = GOOGLE_ULONGLONG(0);
  bytes_download_rate_ = 0u;
  download_paused_ = false;
  num_downloading_ = 0u;
  num_paused_ = 0u;
  changing_ = false;
  available_on_platform_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientGetClientAppListResponse_App::~CMsgClientGetClientAppListResponse_App() {
  SharedDtor();
}

void CMsgClientGetClientAppListResponse_App::SharedDtor() {
  if (category_ != &::google::protobuf::internal::kEmptyString) {
    delete category_;
  }
  if (app_type_ != &::google::protobuf::internal::kEmptyString) {
    delete app_type_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientGetClientAppListResponse_App::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientGetClientAppListResponse_App& CMsgClientGetClientAppListResponse_App::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientGetClientAppListResponse_App* CMsgClientGetClientAppListResponse_App::default_instance_ = NULL;

CMsgClientGetClientAppListResponse_App* CMsgClientGetClientAppListResponse_App::New() const {
  return new CMsgClientGetClientAppListResponse_App;
}

void CMsgClientGetClientAppListResponse_App::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    appid_ = 0u;
    if (has_category()) {
      if (category_ != &::google::protobuf::internal::kEmptyString) {
        category_->clear();
      }
    }
    if (has_app_type()) {
      if (app_type_ != &::google::protobuf::internal::kEmptyString) {
        app_type_->clear();
      }
    }
    favorite_ = false;
    installed_ = false;
    auto_update_ = false;
    bytes_downloaded_ = GOOGLE_ULONGLONG(0);
    bytes_needed_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    bytes_download_rate_ = 0u;
    download_paused_ = false;
    num_downloading_ = 0u;
    num_paused_ = 0u;
    changing_ = false;
    available_on_platform_ = false;
  }
  dlcs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientGetClientAppListResponse_App::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_category;
        break;
      }

      // optional string category = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_category:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_category()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_favorite;
        break;
      }

      // optional bool favorite = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_favorite:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &favorite_)));
          set_has_favorite();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_installed;
        break;
      }

      // optional bool installed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_installed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &installed_)));
          set_has_installed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_auto_update;
        break;
      }

      // optional bool auto_update = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_update:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_update_)));
          set_has_auto_update();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bytes_downloaded;
        break;
      }

      // optional uint64 bytes_downloaded = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bytes_downloaded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_downloaded_)));
          set_has_bytes_downloaded();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bytes_needed;
        break;
      }

      // optional uint64 bytes_needed = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bytes_needed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_needed_)));
          set_has_bytes_needed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bytes_download_rate;
        break;
      }

      // optional uint32 bytes_download_rate = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bytes_download_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bytes_download_rate_)));
          set_has_bytes_download_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_dlcs;
        break;
      }

      // repeated .Sc.CMsgClientGetClientAppListResponse.App.DLC dlcs = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dlcs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dlcs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_dlcs;
        if (input->ExpectTag(82)) goto parse_app_type;
        break;
      }

      // optional string app_type = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_download_paused;
        break;
      }

      // optional bool download_paused = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_download_paused:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &download_paused_)));
          set_has_download_paused();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_num_downloading;
        break;
      }

      // optional uint32 num_downloading = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_downloading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_downloading_)));
          set_has_num_downloading();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_num_paused;
        break;
      }

      // optional uint32 num_paused = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_paused:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_paused_)));
          set_has_num_paused();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_changing;
        break;
      }

      // optional bool changing = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_changing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &changing_)));
          set_has_changing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_available_on_platform;
        break;
      }

      // optional bool available_on_platform = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_available_on_platform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &available_on_platform_)));
          set_has_available_on_platform();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientGetClientAppListResponse_App::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 appid = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional string category = 2;
  if (has_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->category(), output);
  }

  // optional bool favorite = 3;
  if (has_favorite()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->favorite(), output);
  }

  // optional bool installed = 4;
  if (has_installed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->installed(), output);
  }

  // optional bool auto_update = 5;
  if (has_auto_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->auto_update(), output);
  }

  // optional uint64 bytes_downloaded = 6;
  if (has_bytes_downloaded()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->bytes_downloaded(), output);
  }

  // optional uint64 bytes_needed = 7;
  if (has_bytes_needed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->bytes_needed(), output);
  }

  // optional uint32 bytes_download_rate = 8;
  if (has_bytes_download_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->bytes_download_rate(), output);
  }

  // repeated .Sc.CMsgClientGetClientAppListResponse.App.DLC dlcs = 9;
  for (int i = 0; i < this->dlcs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->dlcs(i), output);
  }

  // optional string app_type = 10;
  if (has_app_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->app_type(), output);
  }

  // optional bool download_paused = 11;
  if (has_download_paused()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->download_paused(), output);
  }

  // optional uint32 num_downloading = 12;
  if (has_num_downloading()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->num_downloading(), output);
  }

  // optional uint32 num_paused = 13;
  if (has_num_paused()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->num_paused(), output);
  }

  // optional bool changing = 14;
  if (has_changing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->changing(), output);
  }

  // optional bool available_on_platform = 15;
  if (has_available_on_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->available_on_platform(), output);
  }

}

int CMsgClientGetClientAppListResponse_App::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional string category = 2;
    if (has_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->category());
    }

    // optional string app_type = 10;
    if (has_app_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_type());
    }

    // optional bool favorite = 3;
    if (has_favorite()) {
      total_size += 1 + 1;
    }

    // optional bool installed = 4;
    if (has_installed()) {
      total_size += 1 + 1;
    }

    // optional bool auto_update = 5;
    if (has_auto_update()) {
      total_size += 1 + 1;
    }

    // optional uint64 bytes_downloaded = 6;
    if (has_bytes_downloaded()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes_downloaded());
    }

    // optional uint64 bytes_needed = 7;
    if (has_bytes_needed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes_needed());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 bytes_download_rate = 8;
    if (has_bytes_download_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bytes_download_rate());
    }

    // optional bool download_paused = 11;
    if (has_download_paused()) {
      total_size += 1 + 1;
    }

    // optional uint32 num_downloading = 12;
    if (has_num_downloading()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_downloading());
    }

    // optional uint32 num_paused = 13;
    if (has_num_paused()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_paused());
    }

    // optional bool changing = 14;
    if (has_changing()) {
      total_size += 1 + 1;
    }

    // optional bool available_on_platform = 15;
    if (has_available_on_platform()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Sc.CMsgClientGetClientAppListResponse.App.DLC dlcs = 9;
  total_size += 1 * this->dlcs_size();
  for (int i = 0; i < this->dlcs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dlcs(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGetClientAppListResponse_App::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientGetClientAppListResponse_App*>(&from));
}

void CMsgClientGetClientAppListResponse_App::MergeFrom(const CMsgClientGetClientAppListResponse_App& from) {
  GOOGLE_CHECK_NE(&from, this);
  dlcs_.MergeFrom(from.dlcs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_category()) {
      set_category(from.category());
    }
    if (from.has_app_type()) {
      set_app_type(from.app_type());
    }
    if (from.has_favorite()) {
      set_favorite(from.favorite());
    }
    if (from.has_installed()) {
      set_installed(from.installed());
    }
    if (from.has_auto_update()) {
      set_auto_update(from.auto_update());
    }
    if (from.has_bytes_downloaded()) {
      set_bytes_downloaded(from.bytes_downloaded());
    }
    if (from.has_bytes_needed()) {
      set_bytes_needed(from.bytes_needed());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bytes_download_rate()) {
      set_bytes_download_rate(from.bytes_download_rate());
    }
    if (from.has_download_paused()) {
      set_download_paused(from.download_paused());
    }
    if (from.has_num_downloading()) {
      set_num_downloading(from.num_downloading());
    }
    if (from.has_num_paused()) {
      set_num_paused(from.num_paused());
    }
    if (from.has_changing()) {
      set_changing(from.changing());
    }
    if (from.has_available_on_platform()) {
      set_available_on_platform(from.available_on_platform());
    }
  }
}

void CMsgClientGetClientAppListResponse_App::CopyFrom(const CMsgClientGetClientAppListResponse_App& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetClientAppListResponse_App::IsInitialized() const {

  return true;
}

void CMsgClientGetClientAppListResponse_App::Swap(CMsgClientGetClientAppListResponse_App* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(category_, other->category_);
    std::swap(app_type_, other->app_type_);
    std::swap(favorite_, other->favorite_);
    std::swap(installed_, other->installed_);
    std::swap(auto_update_, other->auto_update_);
    std::swap(bytes_downloaded_, other->bytes_downloaded_);
    std::swap(bytes_needed_, other->bytes_needed_);
    std::swap(bytes_download_rate_, other->bytes_download_rate_);
    std::swap(download_paused_, other->download_paused_);
    std::swap(num_downloading_, other->num_downloading_);
    std::swap(num_paused_, other->num_paused_);
    std::swap(changing_, other->changing_);
    std::swap(available_on_platform_, other->available_on_platform_);
    dlcs_.Swap(&other->dlcs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientGetClientAppListResponse_App::GetTypeName() const {
  return "Sc.CMsgClientGetClientAppListResponse.App";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientGetClientAppListResponse::kAppsFieldNumber;
const int CMsgClientGetClientAppListResponse::kBytesAvailableFieldNumber;
#endif  // !_MSC_VER

CMsgClientGetClientAppListResponse::CMsgClientGetClientAppListResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientGetClientAppListResponse::InitAsDefaultInstance() {
}

CMsgClientGetClientAppListResponse::CMsgClientGetClientAppListResponse(const CMsgClientGetClientAppListResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientGetClientAppListResponse::SharedCtor() {
  _cached_size_ = 0;
  bytes_available_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientGetClientAppListResponse::~CMsgClientGetClientAppListResponse() {
  SharedDtor();
}

void CMsgClientGetClientAppListResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientGetClientAppListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientGetClientAppListResponse& CMsgClientGetClientAppListResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientGetClientAppListResponse* CMsgClientGetClientAppListResponse::default_instance_ = NULL;

CMsgClientGetClientAppListResponse* CMsgClientGetClientAppListResponse::New() const {
  return new CMsgClientGetClientAppListResponse;
}

void CMsgClientGetClientAppListResponse::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    bytes_available_ = GOOGLE_ULONGLONG(0);
  }
  apps_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientGetClientAppListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Sc.CMsgClientGetClientAppListResponse.App apps = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_apps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_apps()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_apps;
        if (input->ExpectTag(16)) goto parse_bytes_available;
        break;
      }

      // optional uint64 bytes_available = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bytes_available:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_available_)));
          set_has_bytes_available();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientGetClientAppListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Sc.CMsgClientGetClientAppListResponse.App apps = 1;
  for (int i = 0; i < this->apps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->apps(i), output);
  }

  // optional uint64 bytes_available = 2;
  if (has_bytes_available()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->bytes_available(), output);
  }

}

int CMsgClientGetClientAppListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 bytes_available = 2;
    if (has_bytes_available()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes_available());
    }

  }
  // repeated .Sc.CMsgClientGetClientAppListResponse.App apps = 1;
  total_size += 1 * this->apps_size();
  for (int i = 0; i < this->apps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->apps(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGetClientAppListResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientGetClientAppListResponse*>(&from));
}

void CMsgClientGetClientAppListResponse::MergeFrom(const CMsgClientGetClientAppListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  apps_.MergeFrom(from.apps_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_bytes_available()) {
      set_bytes_available(from.bytes_available());
    }
  }
}

void CMsgClientGetClientAppListResponse::CopyFrom(const CMsgClientGetClientAppListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetClientAppListResponse::IsInitialized() const {

  return true;
}

void CMsgClientGetClientAppListResponse::Swap(CMsgClientGetClientAppListResponse* other) {
  if (other != this) {
    apps_.Swap(&other->apps_);
    std::swap(bytes_available_, other->bytes_available_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientGetClientAppListResponse::GetTypeName() const {
  return "Sc.CMsgClientGetClientAppListResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientInstallClientApp::kAppidFieldNumber;
#endif  // !_MSC_VER

CMsgClientInstallClientApp::CMsgClientInstallClientApp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientInstallClientApp::InitAsDefaultInstance() {
}

CMsgClientInstallClientApp::CMsgClientInstallClientApp(const CMsgClientInstallClientApp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientInstallClientApp::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientInstallClientApp::~CMsgClientInstallClientApp() {
  SharedDtor();
}

void CMsgClientInstallClientApp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientInstallClientApp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientInstallClientApp& CMsgClientInstallClientApp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientInstallClientApp* CMsgClientInstallClientApp::default_instance_ = NULL;

CMsgClientInstallClientApp* CMsgClientInstallClientApp::New() const {
  return new CMsgClientInstallClientApp;
}

void CMsgClientInstallClientApp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    appid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientInstallClientApp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientInstallClientApp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 appid = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

}

int CMsgClientInstallClientApp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientInstallClientApp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientInstallClientApp*>(&from));
}

void CMsgClientInstallClientApp::MergeFrom(const CMsgClientInstallClientApp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
  }
}

void CMsgClientInstallClientApp::CopyFrom(const CMsgClientInstallClientApp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientInstallClientApp::IsInitialized() const {

  return true;
}

void CMsgClientInstallClientApp::Swap(CMsgClientInstallClientApp* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientInstallClientApp::GetTypeName() const {
  return "Sc.CMsgClientInstallClientApp";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientInstallClientAppResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CMsgClientInstallClientAppResponse::CMsgClientInstallClientAppResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientInstallClientAppResponse::InitAsDefaultInstance() {
}

CMsgClientInstallClientAppResponse::CMsgClientInstallClientAppResponse(const CMsgClientInstallClientAppResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientInstallClientAppResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientInstallClientAppResponse::~CMsgClientInstallClientAppResponse() {
  SharedDtor();
}

void CMsgClientInstallClientAppResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientInstallClientAppResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientInstallClientAppResponse& CMsgClientInstallClientAppResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientInstallClientAppResponse* CMsgClientInstallClientAppResponse::default_instance_ = NULL;

CMsgClientInstallClientAppResponse* CMsgClientInstallClientAppResponse::New() const {
  return new CMsgClientInstallClientAppResponse;
}

void CMsgClientInstallClientAppResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientInstallClientAppResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientInstallClientAppResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

}

int CMsgClientInstallClientAppResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientInstallClientAppResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientInstallClientAppResponse*>(&from));
}

void CMsgClientInstallClientAppResponse::MergeFrom(const CMsgClientInstallClientAppResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
}

void CMsgClientInstallClientAppResponse::CopyFrom(const CMsgClientInstallClientAppResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientInstallClientAppResponse::IsInitialized() const {

  return true;
}

void CMsgClientInstallClientAppResponse::Swap(CMsgClientInstallClientAppResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientInstallClientAppResponse::GetTypeName() const {
  return "Sc.CMsgClientInstallClientAppResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUninstallClientApp::kAppidFieldNumber;
#endif  // !_MSC_VER

CMsgClientUninstallClientApp::CMsgClientUninstallClientApp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUninstallClientApp::InitAsDefaultInstance() {
}

CMsgClientUninstallClientApp::CMsgClientUninstallClientApp(const CMsgClientUninstallClientApp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUninstallClientApp::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUninstallClientApp::~CMsgClientUninstallClientApp() {
  SharedDtor();
}

void CMsgClientUninstallClientApp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUninstallClientApp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUninstallClientApp& CMsgClientUninstallClientApp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUninstallClientApp* CMsgClientUninstallClientApp::default_instance_ = NULL;

CMsgClientUninstallClientApp* CMsgClientUninstallClientApp::New() const {
  return new CMsgClientUninstallClientApp;
}

void CMsgClientUninstallClientApp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    appid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUninstallClientApp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUninstallClientApp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 appid = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

}

int CMsgClientUninstallClientApp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUninstallClientApp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUninstallClientApp*>(&from));
}

void CMsgClientUninstallClientApp::MergeFrom(const CMsgClientUninstallClientApp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
  }
}

void CMsgClientUninstallClientApp::CopyFrom(const CMsgClientUninstallClientApp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUninstallClientApp::IsInitialized() const {

  return true;
}

void CMsgClientUninstallClientApp::Swap(CMsgClientUninstallClientApp* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUninstallClientApp::GetTypeName() const {
  return "Sc.CMsgClientUninstallClientApp";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUninstallClientAppResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CMsgClientUninstallClientAppResponse::CMsgClientUninstallClientAppResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUninstallClientAppResponse::InitAsDefaultInstance() {
}

CMsgClientUninstallClientAppResponse::CMsgClientUninstallClientAppResponse(const CMsgClientUninstallClientAppResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUninstallClientAppResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUninstallClientAppResponse::~CMsgClientUninstallClientAppResponse() {
  SharedDtor();
}

void CMsgClientUninstallClientAppResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUninstallClientAppResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUninstallClientAppResponse& CMsgClientUninstallClientAppResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUninstallClientAppResponse* CMsgClientUninstallClientAppResponse::default_instance_ = NULL;

CMsgClientUninstallClientAppResponse* CMsgClientUninstallClientAppResponse::New() const {
  return new CMsgClientUninstallClientAppResponse;
}

void CMsgClientUninstallClientAppResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUninstallClientAppResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUninstallClientAppResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

}

int CMsgClientUninstallClientAppResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUninstallClientAppResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUninstallClientAppResponse*>(&from));
}

void CMsgClientUninstallClientAppResponse::MergeFrom(const CMsgClientUninstallClientAppResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
}

void CMsgClientUninstallClientAppResponse::CopyFrom(const CMsgClientUninstallClientAppResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUninstallClientAppResponse::IsInitialized() const {

  return true;
}

void CMsgClientUninstallClientAppResponse::Swap(CMsgClientUninstallClientAppResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUninstallClientAppResponse::GetTypeName() const {
  return "Sc.CMsgClientUninstallClientAppResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientSetClientAppUpdateState::kAppidFieldNumber;
const int CMsgClientSetClientAppUpdateState::kUpdateFieldNumber;
#endif  // !_MSC_VER

CMsgClientSetClientAppUpdateState::CMsgClientSetClientAppUpdateState()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientSetClientAppUpdateState::InitAsDefaultInstance() {
}

CMsgClientSetClientAppUpdateState::CMsgClientSetClientAppUpdateState(const CMsgClientSetClientAppUpdateState& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientSetClientAppUpdateState::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0u;
  update_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientSetClientAppUpdateState::~CMsgClientSetClientAppUpdateState() {
  SharedDtor();
}

void CMsgClientSetClientAppUpdateState::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientSetClientAppUpdateState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientSetClientAppUpdateState& CMsgClientSetClientAppUpdateState::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientSetClientAppUpdateState* CMsgClientSetClientAppUpdateState::default_instance_ = NULL;

CMsgClientSetClientAppUpdateState* CMsgClientSetClientAppUpdateState::New() const {
  return new CMsgClientSetClientAppUpdateState;
}

void CMsgClientSetClientAppUpdateState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    appid_ = 0u;
    update_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientSetClientAppUpdateState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_update;
        break;
      }

      // optional bool update = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &update_)));
          set_has_update();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientSetClientAppUpdateState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 appid = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional bool update = 2;
  if (has_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->update(), output);
  }

}

int CMsgClientSetClientAppUpdateState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional bool update = 2;
    if (has_update()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientSetClientAppUpdateState::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientSetClientAppUpdateState*>(&from));
}

void CMsgClientSetClientAppUpdateState::MergeFrom(const CMsgClientSetClientAppUpdateState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_update()) {
      set_update(from.update());
    }
  }
}

void CMsgClientSetClientAppUpdateState::CopyFrom(const CMsgClientSetClientAppUpdateState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSetClientAppUpdateState::IsInitialized() const {

  return true;
}

void CMsgClientSetClientAppUpdateState::Swap(CMsgClientSetClientAppUpdateState* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(update_, other->update_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientSetClientAppUpdateState::GetTypeName() const {
  return "Sc.CMsgClientSetClientAppUpdateState";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientSetClientAppUpdateStateResponse::kResultFieldNumber;
#endif  // !_MSC_VER

CMsgClientSetClientAppUpdateStateResponse::CMsgClientSetClientAppUpdateStateResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientSetClientAppUpdateStateResponse::InitAsDefaultInstance() {
}

CMsgClientSetClientAppUpdateStateResponse::CMsgClientSetClientAppUpdateStateResponse(const CMsgClientSetClientAppUpdateStateResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientSetClientAppUpdateStateResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientSetClientAppUpdateStateResponse::~CMsgClientSetClientAppUpdateStateResponse() {
  SharedDtor();
}

void CMsgClientSetClientAppUpdateStateResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientSetClientAppUpdateStateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientSetClientAppUpdateStateResponse& CMsgClientSetClientAppUpdateStateResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientSetClientAppUpdateStateResponse* CMsgClientSetClientAppUpdateStateResponse::default_instance_ = NULL;

CMsgClientSetClientAppUpdateStateResponse* CMsgClientSetClientAppUpdateStateResponse::New() const {
  return new CMsgClientSetClientAppUpdateStateResponse;
}

void CMsgClientSetClientAppUpdateStateResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientSetClientAppUpdateStateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientSetClientAppUpdateStateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

}

int CMsgClientSetClientAppUpdateStateResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientSetClientAppUpdateStateResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientSetClientAppUpdateStateResponse*>(&from));
}

void CMsgClientSetClientAppUpdateStateResponse::MergeFrom(const CMsgClientSetClientAppUpdateStateResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
}

void CMsgClientSetClientAppUpdateStateResponse::CopyFrom(const CMsgClientSetClientAppUpdateStateResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSetClientAppUpdateStateResponse::IsInitialized() const {

  return true;
}

void CMsgClientSetClientAppUpdateStateResponse::Swap(CMsgClientSetClientAppUpdateStateResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientSetClientAppUpdateStateResponse::GetTypeName() const {
  return "Sc.CMsgClientSetClientAppUpdateStateResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUFSUploadFileRequest::kAppIdFieldNumber;
const int CMsgClientUFSUploadFileRequest::kFileSizeFieldNumber;
const int CMsgClientUFSUploadFileRequest::kRawFileSizeFieldNumber;
const int CMsgClientUFSUploadFileRequest::kShaFileFieldNumber;
const int CMsgClientUFSUploadFileRequest::kTimeStampFieldNumber;
const int CMsgClientUFSUploadFileRequest::kFileNameFieldNumber;
const int CMsgClientUFSUploadFileRequest::kPlatformsToSyncDeprecatedFieldNumber;
const int CMsgClientUFSUploadFileRequest::kPlatformsToSyncFieldNumber;
#endif  // !_MSC_VER

CMsgClientUFSUploadFileRequest::CMsgClientUFSUploadFileRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUFSUploadFileRequest::InitAsDefaultInstance() {
}

CMsgClientUFSUploadFileRequest::CMsgClientUFSUploadFileRequest(const CMsgClientUFSUploadFileRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUFSUploadFileRequest::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  file_size_ = 0u;
  raw_file_size_ = 0u;
  sha_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_stamp_ = GOOGLE_ULONGLONG(0);
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platforms_to_sync_deprecated_ = 0u;
  platforms_to_sync_ = 4294967295u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUFSUploadFileRequest::~CMsgClientUFSUploadFileRequest() {
  SharedDtor();
}

void CMsgClientUFSUploadFileRequest::SharedDtor() {
  if (sha_file_ != &::google::protobuf::internal::kEmptyString) {
    delete sha_file_;
  }
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUFSUploadFileRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUFSUploadFileRequest& CMsgClientUFSUploadFileRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUFSUploadFileRequest* CMsgClientUFSUploadFileRequest::default_instance_ = NULL;

CMsgClientUFSUploadFileRequest* CMsgClientUFSUploadFileRequest::New() const {
  return new CMsgClientUFSUploadFileRequest;
}

void CMsgClientUFSUploadFileRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    file_size_ = 0u;
    raw_file_size_ = 0u;
    if (has_sha_file()) {
      if (sha_file_ != &::google::protobuf::internal::kEmptyString) {
        sha_file_->clear();
      }
    }
    time_stamp_ = GOOGLE_ULONGLONG(0);
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::kEmptyString) {
        file_name_->clear();
      }
    }
    platforms_to_sync_deprecated_ = 0u;
    platforms_to_sync_ = 4294967295u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUFSUploadFileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_file_size;
        break;
      }

      // optional uint32 file_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_size_)));
          set_has_file_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_raw_file_size;
        break;
      }

      // optional uint32 raw_file_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_raw_file_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raw_file_size_)));
          set_has_raw_file_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sha_file;
        break;
      }

      // optional bytes sha_file = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sha_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_time_stamp;
        break;
      }

      // optional uint64 time_stamp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_file_name;
        break;
      }

      // optional string file_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_platforms_to_sync_deprecated;
        break;
      }

      // optional uint32 platforms_to_sync_deprecated = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platforms_to_sync_deprecated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platforms_to_sync_deprecated_)));
          set_has_platforms_to_sync_deprecated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_platforms_to_sync;
        break;
      }

      // optional uint32 platforms_to_sync = 8 [default = 4294967295];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platforms_to_sync:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platforms_to_sync_)));
          set_has_platforms_to_sync();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUFSUploadFileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional uint32 file_size = 2;
  if (has_file_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->file_size(), output);
  }

  // optional uint32 raw_file_size = 3;
  if (has_raw_file_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->raw_file_size(), output);
  }

  // optional bytes sha_file = 4;
  if (has_sha_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->sha_file(), output);
  }

  // optional uint64 time_stamp = 5;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->time_stamp(), output);
  }

  // optional string file_name = 6;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->file_name(), output);
  }

  // optional uint32 platforms_to_sync_deprecated = 7;
  if (has_platforms_to_sync_deprecated()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->platforms_to_sync_deprecated(), output);
  }

  // optional uint32 platforms_to_sync = 8 [default = 4294967295];
  if (has_platforms_to_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->platforms_to_sync(), output);
  }

}

int CMsgClientUFSUploadFileRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 file_size = 2;
    if (has_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_size());
    }

    // optional uint32 raw_file_size = 3;
    if (has_raw_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raw_file_size());
    }

    // optional bytes sha_file = 4;
    if (has_sha_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha_file());
    }

    // optional uint64 time_stamp = 5;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_stamp());
    }

    // optional string file_name = 6;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // optional uint32 platforms_to_sync_deprecated = 7;
    if (has_platforms_to_sync_deprecated()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->platforms_to_sync_deprecated());
    }

    // optional uint32 platforms_to_sync = 8 [default = 4294967295];
    if (has_platforms_to_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->platforms_to_sync());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUFSUploadFileRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUFSUploadFileRequest*>(&from));
}

void CMsgClientUFSUploadFileRequest::MergeFrom(const CMsgClientUFSUploadFileRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_file_size()) {
      set_file_size(from.file_size());
    }
    if (from.has_raw_file_size()) {
      set_raw_file_size(from.raw_file_size());
    }
    if (from.has_sha_file()) {
      set_sha_file(from.sha_file());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
    if (from.has_platforms_to_sync_deprecated()) {
      set_platforms_to_sync_deprecated(from.platforms_to_sync_deprecated());
    }
    if (from.has_platforms_to_sync()) {
      set_platforms_to_sync(from.platforms_to_sync());
    }
  }
}

void CMsgClientUFSUploadFileRequest::CopyFrom(const CMsgClientUFSUploadFileRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSUploadFileRequest::IsInitialized() const {

  return true;
}

void CMsgClientUFSUploadFileRequest::Swap(CMsgClientUFSUploadFileRequest* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(file_size_, other->file_size_);
    std::swap(raw_file_size_, other->raw_file_size_);
    std::swap(sha_file_, other->sha_file_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(file_name_, other->file_name_);
    std::swap(platforms_to_sync_deprecated_, other->platforms_to_sync_deprecated_);
    std::swap(platforms_to_sync_, other->platforms_to_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUFSUploadFileRequest::GetTypeName() const {
  return "Sc.CMsgClientUFSUploadFileRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUFSUploadFileResponse::kEresultFieldNumber;
const int CMsgClientUFSUploadFileResponse::kShaFileFieldNumber;
#endif  // !_MSC_VER

CMsgClientUFSUploadFileResponse::CMsgClientUFSUploadFileResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUFSUploadFileResponse::InitAsDefaultInstance() {
}

CMsgClientUFSUploadFileResponse::CMsgClientUFSUploadFileResponse(const CMsgClientUFSUploadFileResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUFSUploadFileResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  sha_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUFSUploadFileResponse::~CMsgClientUFSUploadFileResponse() {
  SharedDtor();
}

void CMsgClientUFSUploadFileResponse::SharedDtor() {
  if (sha_file_ != &::google::protobuf::internal::kEmptyString) {
    delete sha_file_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUFSUploadFileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUFSUploadFileResponse& CMsgClientUFSUploadFileResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUFSUploadFileResponse* CMsgClientUFSUploadFileResponse::default_instance_ = NULL;

CMsgClientUFSUploadFileResponse* CMsgClientUFSUploadFileResponse::New() const {
  return new CMsgClientUFSUploadFileResponse;
}

void CMsgClientUFSUploadFileResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    if (has_sha_file()) {
      if (sha_file_ != &::google::protobuf::internal::kEmptyString) {
        sha_file_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUFSUploadFileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sha_file;
        break;
      }

      // optional bytes sha_file = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sha_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUFSUploadFileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional bytes sha_file = 2;
  if (has_sha_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->sha_file(), output);
  }

}

int CMsgClientUFSUploadFileResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional bytes sha_file = 2;
    if (has_sha_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha_file());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUFSUploadFileResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUFSUploadFileResponse*>(&from));
}

void CMsgClientUFSUploadFileResponse::MergeFrom(const CMsgClientUFSUploadFileResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_sha_file()) {
      set_sha_file(from.sha_file());
    }
  }
}

void CMsgClientUFSUploadFileResponse::CopyFrom(const CMsgClientUFSUploadFileResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSUploadFileResponse::IsInitialized() const {

  return true;
}

void CMsgClientUFSUploadFileResponse::Swap(CMsgClientUFSUploadFileResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(sha_file_, other->sha_file_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUFSUploadFileResponse::GetTypeName() const {
  return "Sc.CMsgClientUFSUploadFileResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUFSFileChunk::kShaFileFieldNumber;
const int CMsgClientUFSFileChunk::kFileStartFieldNumber;
const int CMsgClientUFSFileChunk::kDataFieldNumber;
#endif  // !_MSC_VER

CMsgClientUFSFileChunk::CMsgClientUFSFileChunk()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUFSFileChunk::InitAsDefaultInstance() {
}

CMsgClientUFSFileChunk::CMsgClientUFSFileChunk(const CMsgClientUFSFileChunk& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUFSFileChunk::SharedCtor() {
  _cached_size_ = 0;
  sha_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_start_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUFSFileChunk::~CMsgClientUFSFileChunk() {
  SharedDtor();
}

void CMsgClientUFSFileChunk::SharedDtor() {
  if (sha_file_ != &::google::protobuf::internal::kEmptyString) {
    delete sha_file_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUFSFileChunk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUFSFileChunk& CMsgClientUFSFileChunk::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUFSFileChunk* CMsgClientUFSFileChunk::default_instance_ = NULL;

CMsgClientUFSFileChunk* CMsgClientUFSFileChunk::New() const {
  return new CMsgClientUFSFileChunk;
}

void CMsgClientUFSFileChunk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sha_file()) {
      if (sha_file_ != &::google::protobuf::internal::kEmptyString) {
        sha_file_->clear();
      }
    }
    file_start_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUFSFileChunk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes sha_file = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_file_start;
        break;
      }

      // optional uint32 file_start = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_start_)));
          set_has_file_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUFSFileChunk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes sha_file = 1;
  if (has_sha_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->sha_file(), output);
  }

  // optional uint32 file_start = 2;
  if (has_file_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->file_start(), output);
  }

  // optional bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->data(), output);
  }

}

int CMsgClientUFSFileChunk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes sha_file = 1;
    if (has_sha_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha_file());
    }

    // optional uint32 file_start = 2;
    if (has_file_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_start());
    }

    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUFSFileChunk::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUFSFileChunk*>(&from));
}

void CMsgClientUFSFileChunk::MergeFrom(const CMsgClientUFSFileChunk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sha_file()) {
      set_sha_file(from.sha_file());
    }
    if (from.has_file_start()) {
      set_file_start(from.file_start());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
}

void CMsgClientUFSFileChunk::CopyFrom(const CMsgClientUFSFileChunk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSFileChunk::IsInitialized() const {

  return true;
}

void CMsgClientUFSFileChunk::Swap(CMsgClientUFSFileChunk* other) {
  if (other != this) {
    std::swap(sha_file_, other->sha_file_);
    std::swap(file_start_, other->file_start_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUFSFileChunk::GetTypeName() const {
  return "Sc.CMsgClientUFSFileChunk";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgClientUFSTransferHeartbeat::CMsgClientUFSTransferHeartbeat()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUFSTransferHeartbeat::InitAsDefaultInstance() {
}

CMsgClientUFSTransferHeartbeat::CMsgClientUFSTransferHeartbeat(const CMsgClientUFSTransferHeartbeat& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUFSTransferHeartbeat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUFSTransferHeartbeat::~CMsgClientUFSTransferHeartbeat() {
  SharedDtor();
}

void CMsgClientUFSTransferHeartbeat::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUFSTransferHeartbeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUFSTransferHeartbeat& CMsgClientUFSTransferHeartbeat::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUFSTransferHeartbeat* CMsgClientUFSTransferHeartbeat::default_instance_ = NULL;

CMsgClientUFSTransferHeartbeat* CMsgClientUFSTransferHeartbeat::New() const {
  return new CMsgClientUFSTransferHeartbeat;
}

void CMsgClientUFSTransferHeartbeat::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUFSTransferHeartbeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void CMsgClientUFSTransferHeartbeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int CMsgClientUFSTransferHeartbeat::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUFSTransferHeartbeat::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUFSTransferHeartbeat*>(&from));
}

void CMsgClientUFSTransferHeartbeat::MergeFrom(const CMsgClientUFSTransferHeartbeat& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void CMsgClientUFSTransferHeartbeat::CopyFrom(const CMsgClientUFSTransferHeartbeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSTransferHeartbeat::IsInitialized() const {

  return true;
}

void CMsgClientUFSTransferHeartbeat::Swap(CMsgClientUFSTransferHeartbeat* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUFSTransferHeartbeat::GetTypeName() const {
  return "Sc.CMsgClientUFSTransferHeartbeat";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUFSUploadFileFinished::kEresultFieldNumber;
const int CMsgClientUFSUploadFileFinished::kShaFileFieldNumber;
#endif  // !_MSC_VER

CMsgClientUFSUploadFileFinished::CMsgClientUFSUploadFileFinished()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUFSUploadFileFinished::InitAsDefaultInstance() {
}

CMsgClientUFSUploadFileFinished::CMsgClientUFSUploadFileFinished(const CMsgClientUFSUploadFileFinished& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUFSUploadFileFinished::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  sha_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUFSUploadFileFinished::~CMsgClientUFSUploadFileFinished() {
  SharedDtor();
}

void CMsgClientUFSUploadFileFinished::SharedDtor() {
  if (sha_file_ != &::google::protobuf::internal::kEmptyString) {
    delete sha_file_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUFSUploadFileFinished::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUFSUploadFileFinished& CMsgClientUFSUploadFileFinished::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUFSUploadFileFinished* CMsgClientUFSUploadFileFinished::default_instance_ = NULL;

CMsgClientUFSUploadFileFinished* CMsgClientUFSUploadFileFinished::New() const {
  return new CMsgClientUFSUploadFileFinished;
}

void CMsgClientUFSUploadFileFinished::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    if (has_sha_file()) {
      if (sha_file_ != &::google::protobuf::internal::kEmptyString) {
        sha_file_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUFSUploadFileFinished::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sha_file;
        break;
      }

      // optional bytes sha_file = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sha_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUFSUploadFileFinished::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional bytes sha_file = 2;
  if (has_sha_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->sha_file(), output);
  }

}

int CMsgClientUFSUploadFileFinished::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional bytes sha_file = 2;
    if (has_sha_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha_file());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUFSUploadFileFinished::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUFSUploadFileFinished*>(&from));
}

void CMsgClientUFSUploadFileFinished::MergeFrom(const CMsgClientUFSUploadFileFinished& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_sha_file()) {
      set_sha_file(from.sha_file());
    }
  }
}

void CMsgClientUFSUploadFileFinished::CopyFrom(const CMsgClientUFSUploadFileFinished& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSUploadFileFinished::IsInitialized() const {

  return true;
}

void CMsgClientUFSUploadFileFinished::Swap(CMsgClientUFSUploadFileFinished* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(sha_file_, other->sha_file_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUFSUploadFileFinished::GetTypeName() const {
  return "Sc.CMsgClientUFSUploadFileFinished";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUFSDeleteFileRequest::kAppIdFieldNumber;
const int CMsgClientUFSDeleteFileRequest::kFileNameFieldNumber;
const int CMsgClientUFSDeleteFileRequest::kIsExplicitDeleteFieldNumber;
#endif  // !_MSC_VER

CMsgClientUFSDeleteFileRequest::CMsgClientUFSDeleteFileRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUFSDeleteFileRequest::InitAsDefaultInstance() {
}

CMsgClientUFSDeleteFileRequest::CMsgClientUFSDeleteFileRequest(const CMsgClientUFSDeleteFileRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUFSDeleteFileRequest::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_explicit_delete_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUFSDeleteFileRequest::~CMsgClientUFSDeleteFileRequest() {
  SharedDtor();
}

void CMsgClientUFSDeleteFileRequest::SharedDtor() {
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUFSDeleteFileRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUFSDeleteFileRequest& CMsgClientUFSDeleteFileRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUFSDeleteFileRequest* CMsgClientUFSDeleteFileRequest::default_instance_ = NULL;

CMsgClientUFSDeleteFileRequest* CMsgClientUFSDeleteFileRequest::New() const {
  return new CMsgClientUFSDeleteFileRequest;
}

void CMsgClientUFSDeleteFileRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::kEmptyString) {
        file_name_->clear();
      }
    }
    is_explicit_delete_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUFSDeleteFileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_file_name;
        break;
      }

      // optional string file_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_explicit_delete;
        break;
      }

      // optional bool is_explicit_delete = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_explicit_delete:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_explicit_delete_)));
          set_has_is_explicit_delete();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUFSDeleteFileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional string file_name = 2;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->file_name(), output);
  }

  // optional bool is_explicit_delete = 3;
  if (has_is_explicit_delete()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_explicit_delete(), output);
  }

}

int CMsgClientUFSDeleteFileRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional string file_name = 2;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // optional bool is_explicit_delete = 3;
    if (has_is_explicit_delete()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUFSDeleteFileRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUFSDeleteFileRequest*>(&from));
}

void CMsgClientUFSDeleteFileRequest::MergeFrom(const CMsgClientUFSDeleteFileRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
    if (from.has_is_explicit_delete()) {
      set_is_explicit_delete(from.is_explicit_delete());
    }
  }
}

void CMsgClientUFSDeleteFileRequest::CopyFrom(const CMsgClientUFSDeleteFileRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSDeleteFileRequest::IsInitialized() const {

  return true;
}

void CMsgClientUFSDeleteFileRequest::Swap(CMsgClientUFSDeleteFileRequest* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(file_name_, other->file_name_);
    std::swap(is_explicit_delete_, other->is_explicit_delete_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUFSDeleteFileRequest::GetTypeName() const {
  return "Sc.CMsgClientUFSDeleteFileRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUFSDeleteFileResponse::kEresultFieldNumber;
const int CMsgClientUFSDeleteFileResponse::kFileNameFieldNumber;
#endif  // !_MSC_VER

CMsgClientUFSDeleteFileResponse::CMsgClientUFSDeleteFileResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUFSDeleteFileResponse::InitAsDefaultInstance() {
}

CMsgClientUFSDeleteFileResponse::CMsgClientUFSDeleteFileResponse(const CMsgClientUFSDeleteFileResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUFSDeleteFileResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUFSDeleteFileResponse::~CMsgClientUFSDeleteFileResponse() {
  SharedDtor();
}

void CMsgClientUFSDeleteFileResponse::SharedDtor() {
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUFSDeleteFileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUFSDeleteFileResponse& CMsgClientUFSDeleteFileResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUFSDeleteFileResponse* CMsgClientUFSDeleteFileResponse::default_instance_ = NULL;

CMsgClientUFSDeleteFileResponse* CMsgClientUFSDeleteFileResponse::New() const {
  return new CMsgClientUFSDeleteFileResponse;
}

void CMsgClientUFSDeleteFileResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::kEmptyString) {
        file_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUFSDeleteFileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_file_name;
        break;
      }

      // optional string file_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUFSDeleteFileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional string file_name = 2;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->file_name(), output);
  }

}

int CMsgClientUFSDeleteFileResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional string file_name = 2;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUFSDeleteFileResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUFSDeleteFileResponse*>(&from));
}

void CMsgClientUFSDeleteFileResponse::MergeFrom(const CMsgClientUFSDeleteFileResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
  }
}

void CMsgClientUFSDeleteFileResponse::CopyFrom(const CMsgClientUFSDeleteFileResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSDeleteFileResponse::IsInitialized() const {

  return true;
}

void CMsgClientUFSDeleteFileResponse::Swap(CMsgClientUFSDeleteFileResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(file_name_, other->file_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUFSDeleteFileResponse::GetTypeName() const {
  return "Sc.CMsgClientUFSDeleteFileResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUFSGetFileListForApp::kAppsToQueryFieldNumber;
#endif  // !_MSC_VER

CMsgClientUFSGetFileListForApp::CMsgClientUFSGetFileListForApp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUFSGetFileListForApp::InitAsDefaultInstance() {
}

CMsgClientUFSGetFileListForApp::CMsgClientUFSGetFileListForApp(const CMsgClientUFSGetFileListForApp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUFSGetFileListForApp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUFSGetFileListForApp::~CMsgClientUFSGetFileListForApp() {
  SharedDtor();
}

void CMsgClientUFSGetFileListForApp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUFSGetFileListForApp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUFSGetFileListForApp& CMsgClientUFSGetFileListForApp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUFSGetFileListForApp* CMsgClientUFSGetFileListForApp::default_instance_ = NULL;

CMsgClientUFSGetFileListForApp* CMsgClientUFSGetFileListForApp::New() const {
  return new CMsgClientUFSGetFileListForApp;
}

void CMsgClientUFSGetFileListForApp::Clear() {
  apps_to_query_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUFSGetFileListForApp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 apps_to_query = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apps_to_query:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_apps_to_query())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_apps_to_query())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_apps_to_query;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUFSGetFileListForApp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 apps_to_query = 1;
  for (int i = 0; i < this->apps_to_query_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->apps_to_query(i), output);
  }

}

int CMsgClientUFSGetFileListForApp::ByteSize() const {
  int total_size = 0;

  // repeated uint32 apps_to_query = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->apps_to_query_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->apps_to_query(i));
    }
    total_size += 1 * this->apps_to_query_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUFSGetFileListForApp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUFSGetFileListForApp*>(&from));
}

void CMsgClientUFSGetFileListForApp::MergeFrom(const CMsgClientUFSGetFileListForApp& from) {
  GOOGLE_CHECK_NE(&from, this);
  apps_to_query_.MergeFrom(from.apps_to_query_);
}

void CMsgClientUFSGetFileListForApp::CopyFrom(const CMsgClientUFSGetFileListForApp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSGetFileListForApp::IsInitialized() const {

  return true;
}

void CMsgClientUFSGetFileListForApp::Swap(CMsgClientUFSGetFileListForApp* other) {
  if (other != this) {
    apps_to_query_.Swap(&other->apps_to_query_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUFSGetFileListForApp::GetTypeName() const {
  return "Sc.CMsgClientUFSGetFileListForApp";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUFSGetFileListForAppResponse_File::kAppIdFieldNumber;
const int CMsgClientUFSGetFileListForAppResponse_File::kFileNameFieldNumber;
const int CMsgClientUFSGetFileListForAppResponse_File::kShaFileFieldNumber;
const int CMsgClientUFSGetFileListForAppResponse_File::kTimeStampFieldNumber;
const int CMsgClientUFSGetFileListForAppResponse_File::kRawFileSizeFieldNumber;
const int CMsgClientUFSGetFileListForAppResponse_File::kIsExplicitDeleteFieldNumber;
const int CMsgClientUFSGetFileListForAppResponse_File::kPlatformsToSyncFieldNumber;
#endif  // !_MSC_VER

CMsgClientUFSGetFileListForAppResponse_File::CMsgClientUFSGetFileListForAppResponse_File()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUFSGetFileListForAppResponse_File::InitAsDefaultInstance() {
}

CMsgClientUFSGetFileListForAppResponse_File::CMsgClientUFSGetFileListForAppResponse_File(const CMsgClientUFSGetFileListForAppResponse_File& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUFSGetFileListForAppResponse_File::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sha_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_stamp_ = GOOGLE_ULONGLONG(0);
  raw_file_size_ = 0u;
  is_explicit_delete_ = false;
  platforms_to_sync_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUFSGetFileListForAppResponse_File::~CMsgClientUFSGetFileListForAppResponse_File() {
  SharedDtor();
}

void CMsgClientUFSGetFileListForAppResponse_File::SharedDtor() {
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_name_;
  }
  if (sha_file_ != &::google::protobuf::internal::kEmptyString) {
    delete sha_file_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUFSGetFileListForAppResponse_File::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUFSGetFileListForAppResponse_File& CMsgClientUFSGetFileListForAppResponse_File::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUFSGetFileListForAppResponse_File* CMsgClientUFSGetFileListForAppResponse_File::default_instance_ = NULL;

CMsgClientUFSGetFileListForAppResponse_File* CMsgClientUFSGetFileListForAppResponse_File::New() const {
  return new CMsgClientUFSGetFileListForAppResponse_File;
}

void CMsgClientUFSGetFileListForAppResponse_File::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::kEmptyString) {
        file_name_->clear();
      }
    }
    if (has_sha_file()) {
      if (sha_file_ != &::google::protobuf::internal::kEmptyString) {
        sha_file_->clear();
      }
    }
    time_stamp_ = GOOGLE_ULONGLONG(0);
    raw_file_size_ = 0u;
    is_explicit_delete_ = false;
    platforms_to_sync_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUFSGetFileListForAppResponse_File::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_file_name;
        break;
      }

      // optional string file_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sha_file;
        break;
      }

      // optional bytes sha_file = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sha_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time_stamp;
        break;
      }

      // optional uint64 time_stamp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_raw_file_size;
        break;
      }

      // optional uint32 raw_file_size = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_raw_file_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raw_file_size_)));
          set_has_raw_file_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_explicit_delete;
        break;
      }

      // optional bool is_explicit_delete = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_explicit_delete:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_explicit_delete_)));
          set_has_is_explicit_delete();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_platforms_to_sync;
        break;
      }

      // optional uint32 platforms_to_sync = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platforms_to_sync:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platforms_to_sync_)));
          set_has_platforms_to_sync();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUFSGetFileListForAppResponse_File::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional string file_name = 2;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->file_name(), output);
  }

  // optional bytes sha_file = 3;
  if (has_sha_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->sha_file(), output);
  }

  // optional uint64 time_stamp = 4;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->time_stamp(), output);
  }

  // optional uint32 raw_file_size = 5;
  if (has_raw_file_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->raw_file_size(), output);
  }

  // optional bool is_explicit_delete = 6;
  if (has_is_explicit_delete()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_explicit_delete(), output);
  }

  // optional uint32 platforms_to_sync = 7;
  if (has_platforms_to_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->platforms_to_sync(), output);
  }

}

int CMsgClientUFSGetFileListForAppResponse_File::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional string file_name = 2;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // optional bytes sha_file = 3;
    if (has_sha_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha_file());
    }

    // optional uint64 time_stamp = 4;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_stamp());
    }

    // optional uint32 raw_file_size = 5;
    if (has_raw_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raw_file_size());
    }

    // optional bool is_explicit_delete = 6;
    if (has_is_explicit_delete()) {
      total_size += 1 + 1;
    }

    // optional uint32 platforms_to_sync = 7;
    if (has_platforms_to_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->platforms_to_sync());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUFSGetFileListForAppResponse_File::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUFSGetFileListForAppResponse_File*>(&from));
}

void CMsgClientUFSGetFileListForAppResponse_File::MergeFrom(const CMsgClientUFSGetFileListForAppResponse_File& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
    if (from.has_sha_file()) {
      set_sha_file(from.sha_file());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
    if (from.has_raw_file_size()) {
      set_raw_file_size(from.raw_file_size());
    }
    if (from.has_is_explicit_delete()) {
      set_is_explicit_delete(from.is_explicit_delete());
    }
    if (from.has_platforms_to_sync()) {
      set_platforms_to_sync(from.platforms_to_sync());
    }
  }
}

void CMsgClientUFSGetFileListForAppResponse_File::CopyFrom(const CMsgClientUFSGetFileListForAppResponse_File& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSGetFileListForAppResponse_File::IsInitialized() const {

  return true;
}

void CMsgClientUFSGetFileListForAppResponse_File::Swap(CMsgClientUFSGetFileListForAppResponse_File* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(file_name_, other->file_name_);
    std::swap(sha_file_, other->sha_file_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(raw_file_size_, other->raw_file_size_);
    std::swap(is_explicit_delete_, other->is_explicit_delete_);
    std::swap(platforms_to_sync_, other->platforms_to_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUFSGetFileListForAppResponse_File::GetTypeName() const {
  return "Sc.CMsgClientUFSGetFileListForAppResponse.File";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientUFSGetFileListForAppResponse::kFilesFieldNumber;
#endif  // !_MSC_VER

CMsgClientUFSGetFileListForAppResponse::CMsgClientUFSGetFileListForAppResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUFSGetFileListForAppResponse::InitAsDefaultInstance() {
}

CMsgClientUFSGetFileListForAppResponse::CMsgClientUFSGetFileListForAppResponse(const CMsgClientUFSGetFileListForAppResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUFSGetFileListForAppResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUFSGetFileListForAppResponse::~CMsgClientUFSGetFileListForAppResponse() {
  SharedDtor();
}

void CMsgClientUFSGetFileListForAppResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUFSGetFileListForAppResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUFSGetFileListForAppResponse& CMsgClientUFSGetFileListForAppResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUFSGetFileListForAppResponse* CMsgClientUFSGetFileListForAppResponse::default_instance_ = NULL;

CMsgClientUFSGetFileListForAppResponse* CMsgClientUFSGetFileListForAppResponse::New() const {
  return new CMsgClientUFSGetFileListForAppResponse;
}

void CMsgClientUFSGetFileListForAppResponse::Clear() {
  files_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUFSGetFileListForAppResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Sc.CMsgClientUFSGetFileListForAppResponse.File files = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_files:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_files()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_files;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUFSGetFileListForAppResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Sc.CMsgClientUFSGetFileListForAppResponse.File files = 1;
  for (int i = 0; i < this->files_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->files(i), output);
  }

}

int CMsgClientUFSGetFileListForAppResponse::ByteSize() const {
  int total_size = 0;

  // repeated .Sc.CMsgClientUFSGetFileListForAppResponse.File files = 1;
  total_size += 1 * this->files_size();
  for (int i = 0; i < this->files_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->files(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUFSGetFileListForAppResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUFSGetFileListForAppResponse*>(&from));
}

void CMsgClientUFSGetFileListForAppResponse::MergeFrom(const CMsgClientUFSGetFileListForAppResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  files_.MergeFrom(from.files_);
}

void CMsgClientUFSGetFileListForAppResponse::CopyFrom(const CMsgClientUFSGetFileListForAppResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSGetFileListForAppResponse::IsInitialized() const {

  return true;
}

void CMsgClientUFSGetFileListForAppResponse::Swap(CMsgClientUFSGetFileListForAppResponse* other) {
  if (other != this) {
    files_.Swap(&other->files_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUFSGetFileListForAppResponse::GetTypeName() const {
  return "Sc.CMsgClientUFSGetFileListForAppResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUFSDownloadRequest::kAppIdFieldNumber;
const int CMsgClientUFSDownloadRequest::kFileNameFieldNumber;
#endif  // !_MSC_VER

CMsgClientUFSDownloadRequest::CMsgClientUFSDownloadRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUFSDownloadRequest::InitAsDefaultInstance() {
}

CMsgClientUFSDownloadRequest::CMsgClientUFSDownloadRequest(const CMsgClientUFSDownloadRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUFSDownloadRequest::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUFSDownloadRequest::~CMsgClientUFSDownloadRequest() {
  SharedDtor();
}

void CMsgClientUFSDownloadRequest::SharedDtor() {
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUFSDownloadRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUFSDownloadRequest& CMsgClientUFSDownloadRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUFSDownloadRequest* CMsgClientUFSDownloadRequest::default_instance_ = NULL;

CMsgClientUFSDownloadRequest* CMsgClientUFSDownloadRequest::New() const {
  return new CMsgClientUFSDownloadRequest;
}

void CMsgClientUFSDownloadRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::kEmptyString) {
        file_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUFSDownloadRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_file_name;
        break;
      }

      // optional string file_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUFSDownloadRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional string file_name = 2;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->file_name(), output);
  }

}

int CMsgClientUFSDownloadRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional string file_name = 2;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUFSDownloadRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUFSDownloadRequest*>(&from));
}

void CMsgClientUFSDownloadRequest::MergeFrom(const CMsgClientUFSDownloadRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
  }
}

void CMsgClientUFSDownloadRequest::CopyFrom(const CMsgClientUFSDownloadRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSDownloadRequest::IsInitialized() const {

  return true;
}

void CMsgClientUFSDownloadRequest::Swap(CMsgClientUFSDownloadRequest* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(file_name_, other->file_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUFSDownloadRequest::GetTypeName() const {
  return "Sc.CMsgClientUFSDownloadRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUFSDownloadResponse::kEresultFieldNumber;
const int CMsgClientUFSDownloadResponse::kAppIdFieldNumber;
const int CMsgClientUFSDownloadResponse::kFileSizeFieldNumber;
const int CMsgClientUFSDownloadResponse::kRawFileSizeFieldNumber;
const int CMsgClientUFSDownloadResponse::kShaFileFieldNumber;
const int CMsgClientUFSDownloadResponse::kTimeStampFieldNumber;
const int CMsgClientUFSDownloadResponse::kIsExplicitDeleteFieldNumber;
#endif  // !_MSC_VER

CMsgClientUFSDownloadResponse::CMsgClientUFSDownloadResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUFSDownloadResponse::InitAsDefaultInstance() {
}

CMsgClientUFSDownloadResponse::CMsgClientUFSDownloadResponse(const CMsgClientUFSDownloadResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUFSDownloadResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  app_id_ = 0u;
  file_size_ = 0u;
  raw_file_size_ = 0u;
  sha_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_stamp_ = GOOGLE_ULONGLONG(0);
  is_explicit_delete_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUFSDownloadResponse::~CMsgClientUFSDownloadResponse() {
  SharedDtor();
}

void CMsgClientUFSDownloadResponse::SharedDtor() {
  if (sha_file_ != &::google::protobuf::internal::kEmptyString) {
    delete sha_file_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUFSDownloadResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUFSDownloadResponse& CMsgClientUFSDownloadResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUFSDownloadResponse* CMsgClientUFSDownloadResponse::default_instance_ = NULL;

CMsgClientUFSDownloadResponse* CMsgClientUFSDownloadResponse::New() const {
  return new CMsgClientUFSDownloadResponse;
}

void CMsgClientUFSDownloadResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    app_id_ = 0u;
    file_size_ = 0u;
    raw_file_size_ = 0u;
    if (has_sha_file()) {
      if (sha_file_ != &::google::protobuf::internal::kEmptyString) {
        sha_file_->clear();
      }
    }
    time_stamp_ = GOOGLE_ULONGLONG(0);
    is_explicit_delete_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUFSDownloadResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_app_id;
        break;
      }

      // optional uint32 app_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_app_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_file_size;
        break;
      }

      // optional uint32 file_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_size_)));
          set_has_file_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_raw_file_size;
        break;
      }

      // optional uint32 raw_file_size = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_raw_file_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raw_file_size_)));
          set_has_raw_file_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_sha_file;
        break;
      }

      // optional bytes sha_file = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sha_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_time_stamp;
        break;
      }

      // optional uint64 time_stamp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_explicit_delete;
        break;
      }

      // optional bool is_explicit_delete = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_explicit_delete:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_explicit_delete_)));
          set_has_is_explicit_delete();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUFSDownloadResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional uint32 app_id = 2;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->app_id(), output);
  }

  // optional uint32 file_size = 3;
  if (has_file_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->file_size(), output);
  }

  // optional uint32 raw_file_size = 4;
  if (has_raw_file_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->raw_file_size(), output);
  }

  // optional bytes sha_file = 5;
  if (has_sha_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->sha_file(), output);
  }

  // optional uint64 time_stamp = 6;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->time_stamp(), output);
  }

  // optional bool is_explicit_delete = 7;
  if (has_is_explicit_delete()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_explicit_delete(), output);
  }

}

int CMsgClientUFSDownloadResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional uint32 app_id = 2;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 file_size = 3;
    if (has_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_size());
    }

    // optional uint32 raw_file_size = 4;
    if (has_raw_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raw_file_size());
    }

    // optional bytes sha_file = 5;
    if (has_sha_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha_file());
    }

    // optional uint64 time_stamp = 6;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_stamp());
    }

    // optional bool is_explicit_delete = 7;
    if (has_is_explicit_delete()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUFSDownloadResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUFSDownloadResponse*>(&from));
}

void CMsgClientUFSDownloadResponse::MergeFrom(const CMsgClientUFSDownloadResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_file_size()) {
      set_file_size(from.file_size());
    }
    if (from.has_raw_file_size()) {
      set_raw_file_size(from.raw_file_size());
    }
    if (from.has_sha_file()) {
      set_sha_file(from.sha_file());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
    if (from.has_is_explicit_delete()) {
      set_is_explicit_delete(from.is_explicit_delete());
    }
  }
}

void CMsgClientUFSDownloadResponse::CopyFrom(const CMsgClientUFSDownloadResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSDownloadResponse::IsInitialized() const {

  return true;
}

void CMsgClientUFSDownloadResponse::Swap(CMsgClientUFSDownloadResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(app_id_, other->app_id_);
    std::swap(file_size_, other->file_size_);
    std::swap(raw_file_size_, other->raw_file_size_);
    std::swap(sha_file_, other->sha_file_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(is_explicit_delete_, other->is_explicit_delete_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUFSDownloadResponse::GetTypeName() const {
  return "Sc.CMsgClientUFSDownloadResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUFSLoginRequest::kProtocolVersionFieldNumber;
const int CMsgClientUFSLoginRequest::kAmSessionTokenFieldNumber;
const int CMsgClientUFSLoginRequest::kAppsFieldNumber;
#endif  // !_MSC_VER

CMsgClientUFSLoginRequest::CMsgClientUFSLoginRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUFSLoginRequest::InitAsDefaultInstance() {
}

CMsgClientUFSLoginRequest::CMsgClientUFSLoginRequest(const CMsgClientUFSLoginRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUFSLoginRequest::SharedCtor() {
  _cached_size_ = 0;
  protocol_version_ = 0u;
  am_session_token_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUFSLoginRequest::~CMsgClientUFSLoginRequest() {
  SharedDtor();
}

void CMsgClientUFSLoginRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUFSLoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUFSLoginRequest& CMsgClientUFSLoginRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUFSLoginRequest* CMsgClientUFSLoginRequest::default_instance_ = NULL;

CMsgClientUFSLoginRequest* CMsgClientUFSLoginRequest::New() const {
  return new CMsgClientUFSLoginRequest;
}

void CMsgClientUFSLoginRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protocol_version_ = 0u;
    am_session_token_ = GOOGLE_ULONGLONG(0);
  }
  apps_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUFSLoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 protocol_version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_version_)));
          set_has_protocol_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_am_session_token;
        break;
      }

      // optional uint64 am_session_token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_am_session_token:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &am_session_token_)));
          set_has_am_session_token();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_apps;
        break;
      }

      // repeated uint32 apps = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_apps())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_apps())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_apps;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUFSLoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 protocol_version = 1;
  if (has_protocol_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->protocol_version(), output);
  }

  // optional uint64 am_session_token = 2;
  if (has_am_session_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->am_session_token(), output);
  }

  // repeated uint32 apps = 3;
  for (int i = 0; i < this->apps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->apps(i), output);
  }

}

int CMsgClientUFSLoginRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 protocol_version = 1;
    if (has_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protocol_version());
    }

    // optional uint64 am_session_token = 2;
    if (has_am_session_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->am_session_token());
    }

  }
  // repeated uint32 apps = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->apps_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->apps(i));
    }
    total_size += 1 * this->apps_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUFSLoginRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUFSLoginRequest*>(&from));
}

void CMsgClientUFSLoginRequest::MergeFrom(const CMsgClientUFSLoginRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  apps_.MergeFrom(from.apps_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protocol_version()) {
      set_protocol_version(from.protocol_version());
    }
    if (from.has_am_session_token()) {
      set_am_session_token(from.am_session_token());
    }
  }
}

void CMsgClientUFSLoginRequest::CopyFrom(const CMsgClientUFSLoginRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSLoginRequest::IsInitialized() const {

  return true;
}

void CMsgClientUFSLoginRequest::Swap(CMsgClientUFSLoginRequest* other) {
  if (other != this) {
    std::swap(protocol_version_, other->protocol_version_);
    std::swap(am_session_token_, other->am_session_token_);
    apps_.Swap(&other->apps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUFSLoginRequest::GetTypeName() const {
  return "Sc.CMsgClientUFSLoginRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUFSLoginResponse::kEresultFieldNumber;
#endif  // !_MSC_VER

CMsgClientUFSLoginResponse::CMsgClientUFSLoginResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUFSLoginResponse::InitAsDefaultInstance() {
}

CMsgClientUFSLoginResponse::CMsgClientUFSLoginResponse(const CMsgClientUFSLoginResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUFSLoginResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUFSLoginResponse::~CMsgClientUFSLoginResponse() {
  SharedDtor();
}

void CMsgClientUFSLoginResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUFSLoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUFSLoginResponse& CMsgClientUFSLoginResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUFSLoginResponse* CMsgClientUFSLoginResponse::default_instance_ = NULL;

CMsgClientUFSLoginResponse* CMsgClientUFSLoginResponse::New() const {
  return new CMsgClientUFSLoginResponse;
}

void CMsgClientUFSLoginResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUFSLoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUFSLoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

}

int CMsgClientUFSLoginResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUFSLoginResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUFSLoginResponse*>(&from));
}

void CMsgClientUFSLoginResponse::MergeFrom(const CMsgClientUFSLoginResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
  }
}

void CMsgClientUFSLoginResponse::CopyFrom(const CMsgClientUFSLoginResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSLoginResponse::IsInitialized() const {

  return true;
}

void CMsgClientUFSLoginResponse::Swap(CMsgClientUFSLoginResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUFSLoginResponse::GetTypeName() const {
  return "Sc.CMsgClientUFSLoginResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientRequestEncryptedAppTicket::kAppIdFieldNumber;
const int CMsgClientRequestEncryptedAppTicket::kUserdataFieldNumber;
#endif  // !_MSC_VER

CMsgClientRequestEncryptedAppTicket::CMsgClientRequestEncryptedAppTicket()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientRequestEncryptedAppTicket::InitAsDefaultInstance() {
}

CMsgClientRequestEncryptedAppTicket::CMsgClientRequestEncryptedAppTicket(const CMsgClientRequestEncryptedAppTicket& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRequestEncryptedAppTicket::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  userdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRequestEncryptedAppTicket::~CMsgClientRequestEncryptedAppTicket() {
  SharedDtor();
}

void CMsgClientRequestEncryptedAppTicket::SharedDtor() {
  if (userdata_ != &::google::protobuf::internal::kEmptyString) {
    delete userdata_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientRequestEncryptedAppTicket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientRequestEncryptedAppTicket& CMsgClientRequestEncryptedAppTicket::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientRequestEncryptedAppTicket* CMsgClientRequestEncryptedAppTicket::default_instance_ = NULL;

CMsgClientRequestEncryptedAppTicket* CMsgClientRequestEncryptedAppTicket::New() const {
  return new CMsgClientRequestEncryptedAppTicket;
}

void CMsgClientRequestEncryptedAppTicket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    if (has_userdata()) {
      if (userdata_ != &::google::protobuf::internal::kEmptyString) {
        userdata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientRequestEncryptedAppTicket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userdata;
        break;
      }

      // optional bytes userdata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientRequestEncryptedAppTicket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional bytes userdata = 2;
  if (has_userdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->userdata(), output);
  }

}

int CMsgClientRequestEncryptedAppTicket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional bytes userdata = 2;
    if (has_userdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->userdata());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRequestEncryptedAppTicket::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientRequestEncryptedAppTicket*>(&from));
}

void CMsgClientRequestEncryptedAppTicket::MergeFrom(const CMsgClientRequestEncryptedAppTicket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_userdata()) {
      set_userdata(from.userdata());
    }
  }
}

void CMsgClientRequestEncryptedAppTicket::CopyFrom(const CMsgClientRequestEncryptedAppTicket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestEncryptedAppTicket::IsInitialized() const {

  return true;
}

void CMsgClientRequestEncryptedAppTicket::Swap(CMsgClientRequestEncryptedAppTicket* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(userdata_, other->userdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientRequestEncryptedAppTicket::GetTypeName() const {
  return "Sc.CMsgClientRequestEncryptedAppTicket";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientRequestEncryptedAppTicketResponse::kAppIdFieldNumber;
const int CMsgClientRequestEncryptedAppTicketResponse::kEresultFieldNumber;
const int CMsgClientRequestEncryptedAppTicketResponse::kEncryptedAppTicketFieldNumber;
#endif  // !_MSC_VER

CMsgClientRequestEncryptedAppTicketResponse::CMsgClientRequestEncryptedAppTicketResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientRequestEncryptedAppTicketResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  encrypted_app_ticket_ = const_cast< ::Sc::EncryptedAppTicket*>(
      ::Sc::EncryptedAppTicket::internal_default_instance());
#else
  encrypted_app_ticket_ = const_cast< ::Sc::EncryptedAppTicket*>(&::Sc::EncryptedAppTicket::default_instance());
#endif
}

CMsgClientRequestEncryptedAppTicketResponse::CMsgClientRequestEncryptedAppTicketResponse(const CMsgClientRequestEncryptedAppTicketResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRequestEncryptedAppTicketResponse::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  eresult_ = 2;
  encrypted_app_ticket_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRequestEncryptedAppTicketResponse::~CMsgClientRequestEncryptedAppTicketResponse() {
  SharedDtor();
}

void CMsgClientRequestEncryptedAppTicketResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete encrypted_app_ticket_;
  }
}

void CMsgClientRequestEncryptedAppTicketResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientRequestEncryptedAppTicketResponse& CMsgClientRequestEncryptedAppTicketResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientRequestEncryptedAppTicketResponse* CMsgClientRequestEncryptedAppTicketResponse::default_instance_ = NULL;

CMsgClientRequestEncryptedAppTicketResponse* CMsgClientRequestEncryptedAppTicketResponse::New() const {
  return new CMsgClientRequestEncryptedAppTicketResponse;
}

void CMsgClientRequestEncryptedAppTicketResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    eresult_ = 2;
    if (has_encrypted_app_ticket()) {
      if (encrypted_app_ticket_ != NULL) encrypted_app_ticket_->::Sc::EncryptedAppTicket::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientRequestEncryptedAppTicketResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_eresult;
        break;
      }

      // optional int32 eresult = 2 [default = 2];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eresult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_encrypted_app_ticket;
        break;
      }

      // optional .Sc.EncryptedAppTicket encrypted_app_ticket = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_encrypted_app_ticket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_encrypted_app_ticket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientRequestEncryptedAppTicketResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional int32 eresult = 2 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->eresult(), output);
  }

  // optional .Sc.EncryptedAppTicket encrypted_app_ticket = 3;
  if (has_encrypted_app_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->encrypted_app_ticket(), output);
  }

}

int CMsgClientRequestEncryptedAppTicketResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional int32 eresult = 2 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional .Sc.EncryptedAppTicket encrypted_app_ticket = 3;
    if (has_encrypted_app_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->encrypted_app_ticket());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRequestEncryptedAppTicketResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientRequestEncryptedAppTicketResponse*>(&from));
}

void CMsgClientRequestEncryptedAppTicketResponse::MergeFrom(const CMsgClientRequestEncryptedAppTicketResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_encrypted_app_ticket()) {
      mutable_encrypted_app_ticket()->::Sc::EncryptedAppTicket::MergeFrom(from.encrypted_app_ticket());
    }
  }
}

void CMsgClientRequestEncryptedAppTicketResponse::CopyFrom(const CMsgClientRequestEncryptedAppTicketResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestEncryptedAppTicketResponse::IsInitialized() const {

  return true;
}

void CMsgClientRequestEncryptedAppTicketResponse::Swap(CMsgClientRequestEncryptedAppTicketResponse* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(eresult_, other->eresult_);
    std::swap(encrypted_app_ticket_, other->encrypted_app_ticket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientRequestEncryptedAppTicketResponse::GetTypeName() const {
  return "Sc.CMsgClientRequestEncryptedAppTicketResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientRequestOAuthTokenForApp::kAppIdFieldNumber;
const int CMsgClientRequestOAuthTokenForApp::kOauthScopeFieldNumber;
#endif  // !_MSC_VER

CMsgClientRequestOAuthTokenForApp::CMsgClientRequestOAuthTokenForApp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientRequestOAuthTokenForApp::InitAsDefaultInstance() {
}

CMsgClientRequestOAuthTokenForApp::CMsgClientRequestOAuthTokenForApp(const CMsgClientRequestOAuthTokenForApp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRequestOAuthTokenForApp::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  oauth_scope_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRequestOAuthTokenForApp::~CMsgClientRequestOAuthTokenForApp() {
  SharedDtor();
}

void CMsgClientRequestOAuthTokenForApp::SharedDtor() {
  if (oauth_scope_ != &::google::protobuf::internal::kEmptyString) {
    delete oauth_scope_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientRequestOAuthTokenForApp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientRequestOAuthTokenForApp& CMsgClientRequestOAuthTokenForApp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientRequestOAuthTokenForApp* CMsgClientRequestOAuthTokenForApp::default_instance_ = NULL;

CMsgClientRequestOAuthTokenForApp* CMsgClientRequestOAuthTokenForApp::New() const {
  return new CMsgClientRequestOAuthTokenForApp;
}

void CMsgClientRequestOAuthTokenForApp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    if (has_oauth_scope()) {
      if (oauth_scope_ != &::google::protobuf::internal::kEmptyString) {
        oauth_scope_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientRequestOAuthTokenForApp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_oauth_scope;
        break;
      }

      // optional string oauth_scope = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oauth_scope:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oauth_scope()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientRequestOAuthTokenForApp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional string oauth_scope = 2;
  if (has_oauth_scope()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->oauth_scope(), output);
  }

}

int CMsgClientRequestOAuthTokenForApp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional string oauth_scope = 2;
    if (has_oauth_scope()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oauth_scope());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRequestOAuthTokenForApp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientRequestOAuthTokenForApp*>(&from));
}

void CMsgClientRequestOAuthTokenForApp::MergeFrom(const CMsgClientRequestOAuthTokenForApp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_oauth_scope()) {
      set_oauth_scope(from.oauth_scope());
    }
  }
}

void CMsgClientRequestOAuthTokenForApp::CopyFrom(const CMsgClientRequestOAuthTokenForApp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestOAuthTokenForApp::IsInitialized() const {

  return true;
}

void CMsgClientRequestOAuthTokenForApp::Swap(CMsgClientRequestOAuthTokenForApp* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(oauth_scope_, other->oauth_scope_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientRequestOAuthTokenForApp::GetTypeName() const {
  return "Sc.CMsgClientRequestOAuthTokenForApp";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientRequestOAuthTokenForAppResponse::kAppIdFieldNumber;
const int CMsgClientRequestOAuthTokenForAppResponse::kEresultFieldNumber;
const int CMsgClientRequestOAuthTokenForAppResponse::kOauthTokenFieldNumber;
#endif  // !_MSC_VER

CMsgClientRequestOAuthTokenForAppResponse::CMsgClientRequestOAuthTokenForAppResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientRequestOAuthTokenForAppResponse::InitAsDefaultInstance() {
}

CMsgClientRequestOAuthTokenForAppResponse::CMsgClientRequestOAuthTokenForAppResponse(const CMsgClientRequestOAuthTokenForAppResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRequestOAuthTokenForAppResponse::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  eresult_ = 2;
  oauth_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRequestOAuthTokenForAppResponse::~CMsgClientRequestOAuthTokenForAppResponse() {
  SharedDtor();
}

void CMsgClientRequestOAuthTokenForAppResponse::SharedDtor() {
  if (oauth_token_ != &::google::protobuf::internal::kEmptyString) {
    delete oauth_token_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientRequestOAuthTokenForAppResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientRequestOAuthTokenForAppResponse& CMsgClientRequestOAuthTokenForAppResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientRequestOAuthTokenForAppResponse* CMsgClientRequestOAuthTokenForAppResponse::default_instance_ = NULL;

CMsgClientRequestOAuthTokenForAppResponse* CMsgClientRequestOAuthTokenForAppResponse::New() const {
  return new CMsgClientRequestOAuthTokenForAppResponse;
}

void CMsgClientRequestOAuthTokenForAppResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    eresult_ = 2;
    if (has_oauth_token()) {
      if (oauth_token_ != &::google::protobuf::internal::kEmptyString) {
        oauth_token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientRequestOAuthTokenForAppResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_eresult;
        break;
      }

      // optional int32 eresult = 2 [default = 2];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eresult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_oauth_token;
        break;
      }

      // optional string oauth_token = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oauth_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oauth_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientRequestOAuthTokenForAppResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional int32 eresult = 2 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->eresult(), output);
  }

  // optional string oauth_token = 3;
  if (has_oauth_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->oauth_token(), output);
  }

}

int CMsgClientRequestOAuthTokenForAppResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional int32 eresult = 2 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional string oauth_token = 3;
    if (has_oauth_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oauth_token());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRequestOAuthTokenForAppResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientRequestOAuthTokenForAppResponse*>(&from));
}

void CMsgClientRequestOAuthTokenForAppResponse::MergeFrom(const CMsgClientRequestOAuthTokenForAppResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_oauth_token()) {
      set_oauth_token(from.oauth_token());
    }
  }
}

void CMsgClientRequestOAuthTokenForAppResponse::CopyFrom(const CMsgClientRequestOAuthTokenForAppResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestOAuthTokenForAppResponse::IsInitialized() const {

  return true;
}

void CMsgClientRequestOAuthTokenForAppResponse::Swap(CMsgClientRequestOAuthTokenForAppResponse* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(eresult_, other->eresult_);
    std::swap(oauth_token_, other->oauth_token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientRequestOAuthTokenForAppResponse::GetTypeName() const {
  return "Sc.CMsgClientRequestOAuthTokenForAppResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientWalletInfoUpdate::kHasWalletFieldNumber;
const int CMsgClientWalletInfoUpdate::kBalanceFieldNumber;
const int CMsgClientWalletInfoUpdate::kCurrencyFieldNumber;
#endif  // !_MSC_VER

CMsgClientWalletInfoUpdate::CMsgClientWalletInfoUpdate()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientWalletInfoUpdate::InitAsDefaultInstance() {
}

CMsgClientWalletInfoUpdate::CMsgClientWalletInfoUpdate(const CMsgClientWalletInfoUpdate& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientWalletInfoUpdate::SharedCtor() {
  _cached_size_ = 0;
  has_wallet_ = false;
  balance_ = 0;
  currency_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientWalletInfoUpdate::~CMsgClientWalletInfoUpdate() {
  SharedDtor();
}

void CMsgClientWalletInfoUpdate::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientWalletInfoUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientWalletInfoUpdate& CMsgClientWalletInfoUpdate::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientWalletInfoUpdate* CMsgClientWalletInfoUpdate::default_instance_ = NULL;

CMsgClientWalletInfoUpdate* CMsgClientWalletInfoUpdate::New() const {
  return new CMsgClientWalletInfoUpdate;
}

void CMsgClientWalletInfoUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    has_wallet_ = false;
    balance_ = 0;
    currency_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientWalletInfoUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool has_wallet = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_wallet_)));
          set_has_has_wallet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_balance;
        break;
      }

      // optional int32 balance = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_balance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &balance_)));
          set_has_balance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_currency;
        break;
      }

      // optional int32 currency = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currency_)));
          set_has_currency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientWalletInfoUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool has_wallet = 1;
  if (has_has_wallet()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->has_wallet(), output);
  }

  // optional int32 balance = 2;
  if (has_balance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->balance(), output);
  }

  // optional int32 currency = 3;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->currency(), output);
  }

}

int CMsgClientWalletInfoUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool has_wallet = 1;
    if (has_has_wallet()) {
      total_size += 1 + 1;
    }

    // optional int32 balance = 2;
    if (has_balance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->balance());
    }

    // optional int32 currency = 3;
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currency());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientWalletInfoUpdate::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientWalletInfoUpdate*>(&from));
}

void CMsgClientWalletInfoUpdate::MergeFrom(const CMsgClientWalletInfoUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_has_wallet()) {
      set_has_wallet(from.has_wallet());
    }
    if (from.has_balance()) {
      set_balance(from.balance());
    }
    if (from.has_currency()) {
      set_currency(from.currency());
    }
  }
}

void CMsgClientWalletInfoUpdate::CopyFrom(const CMsgClientWalletInfoUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientWalletInfoUpdate::IsInitialized() const {

  return true;
}

void CMsgClientWalletInfoUpdate::Swap(CMsgClientWalletInfoUpdate* other) {
  if (other != this) {
    std::swap(has_wallet_, other->has_wallet_);
    std::swap(balance_, other->balance_);
    std::swap(currency_, other->currency_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientWalletInfoUpdate::GetTypeName() const {
  return "Sc.CMsgClientWalletInfoUpdate";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientAppInfoUpdate::kLastChangenumberFieldNumber;
const int CMsgClientAppInfoUpdate::kSendChangelistFieldNumber;
#endif  // !_MSC_VER

CMsgClientAppInfoUpdate::CMsgClientAppInfoUpdate()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientAppInfoUpdate::InitAsDefaultInstance() {
}

CMsgClientAppInfoUpdate::CMsgClientAppInfoUpdate(const CMsgClientAppInfoUpdate& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientAppInfoUpdate::SharedCtor() {
  _cached_size_ = 0;
  last_changenumber_ = 0u;
  send_changelist_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientAppInfoUpdate::~CMsgClientAppInfoUpdate() {
  SharedDtor();
}

void CMsgClientAppInfoUpdate::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientAppInfoUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientAppInfoUpdate& CMsgClientAppInfoUpdate::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientAppInfoUpdate* CMsgClientAppInfoUpdate::default_instance_ = NULL;

CMsgClientAppInfoUpdate* CMsgClientAppInfoUpdate::New() const {
  return new CMsgClientAppInfoUpdate;
}

void CMsgClientAppInfoUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    last_changenumber_ = 0u;
    send_changelist_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientAppInfoUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 last_changenumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_changenumber_)));
          set_has_last_changenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_send_changelist;
        break;
      }

      // optional bool send_changelist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_changelist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &send_changelist_)));
          set_has_send_changelist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientAppInfoUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 last_changenumber = 1;
  if (has_last_changenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->last_changenumber(), output);
  }

  // optional bool send_changelist = 2;
  if (has_send_changelist()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->send_changelist(), output);
  }

}

int CMsgClientAppInfoUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 last_changenumber = 1;
    if (has_last_changenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_changenumber());
    }

    // optional bool send_changelist = 2;
    if (has_send_changelist()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAppInfoUpdate::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientAppInfoUpdate*>(&from));
}

void CMsgClientAppInfoUpdate::MergeFrom(const CMsgClientAppInfoUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_changenumber()) {
      set_last_changenumber(from.last_changenumber());
    }
    if (from.has_send_changelist()) {
      set_send_changelist(from.send_changelist());
    }
  }
}

void CMsgClientAppInfoUpdate::CopyFrom(const CMsgClientAppInfoUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAppInfoUpdate::IsInitialized() const {

  return true;
}

void CMsgClientAppInfoUpdate::Swap(CMsgClientAppInfoUpdate* other) {
  if (other != this) {
    std::swap(last_changenumber_, other->last_changenumber_);
    std::swap(send_changelist_, other->send_changelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientAppInfoUpdate::GetTypeName() const {
  return "Sc.CMsgClientAppInfoUpdate";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientAppInfoChanges::kCurrentChangeNumberFieldNumber;
const int CMsgClientAppInfoChanges::kForceFullUpdateFieldNumber;
const int CMsgClientAppInfoChanges::kAppIDsFieldNumber;
#endif  // !_MSC_VER

CMsgClientAppInfoChanges::CMsgClientAppInfoChanges()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientAppInfoChanges::InitAsDefaultInstance() {
}

CMsgClientAppInfoChanges::CMsgClientAppInfoChanges(const CMsgClientAppInfoChanges& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientAppInfoChanges::SharedCtor() {
  _cached_size_ = 0;
  current_change_number_ = 0u;
  force_full_update_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientAppInfoChanges::~CMsgClientAppInfoChanges() {
  SharedDtor();
}

void CMsgClientAppInfoChanges::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientAppInfoChanges::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientAppInfoChanges& CMsgClientAppInfoChanges::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientAppInfoChanges* CMsgClientAppInfoChanges::default_instance_ = NULL;

CMsgClientAppInfoChanges* CMsgClientAppInfoChanges::New() const {
  return new CMsgClientAppInfoChanges;
}

void CMsgClientAppInfoChanges::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    current_change_number_ = 0u;
    force_full_update_ = false;
  }
  appids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientAppInfoChanges::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 current_change_number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_change_number_)));
          set_has_current_change_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_force_full_update;
        break;
      }

      // optional bool force_full_update = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_force_full_update:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_full_update_)));
          set_has_force_full_update();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_appIDs;
        break;
      }

      // repeated uint32 appIDs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appIDs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_appids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_appids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_appIDs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientAppInfoChanges::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 current_change_number = 1;
  if (has_current_change_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->current_change_number(), output);
  }

  // optional bool force_full_update = 2;
  if (has_force_full_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->force_full_update(), output);
  }

  // repeated uint32 appIDs = 3;
  for (int i = 0; i < this->appids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->appids(i), output);
  }

}

int CMsgClientAppInfoChanges::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 current_change_number = 1;
    if (has_current_change_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_change_number());
    }

    // optional bool force_full_update = 2;
    if (has_force_full_update()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint32 appIDs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->appids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->appids(i));
    }
    total_size += 1 * this->appids_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAppInfoChanges::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientAppInfoChanges*>(&from));
}

void CMsgClientAppInfoChanges::MergeFrom(const CMsgClientAppInfoChanges& from) {
  GOOGLE_CHECK_NE(&from, this);
  appids_.MergeFrom(from.appids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_current_change_number()) {
      set_current_change_number(from.current_change_number());
    }
    if (from.has_force_full_update()) {
      set_force_full_update(from.force_full_update());
    }
  }
}

void CMsgClientAppInfoChanges::CopyFrom(const CMsgClientAppInfoChanges& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAppInfoChanges::IsInitialized() const {

  return true;
}

void CMsgClientAppInfoChanges::Swap(CMsgClientAppInfoChanges* other) {
  if (other != this) {
    std::swap(current_change_number_, other->current_change_number_);
    std::swap(force_full_update_, other->force_full_update_);
    appids_.Swap(&other->appids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientAppInfoChanges::GetTypeName() const {
  return "Sc.CMsgClientAppInfoChanges";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientAppInfoRequest_App::kAppIdFieldNumber;
const int CMsgClientAppInfoRequest_App::kSectionFlagsFieldNumber;
const int CMsgClientAppInfoRequest_App::kSectionCRCFieldNumber;
#endif  // !_MSC_VER

CMsgClientAppInfoRequest_App::CMsgClientAppInfoRequest_App()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientAppInfoRequest_App::InitAsDefaultInstance() {
}

CMsgClientAppInfoRequest_App::CMsgClientAppInfoRequest_App(const CMsgClientAppInfoRequest_App& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientAppInfoRequest_App::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  section_flags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientAppInfoRequest_App::~CMsgClientAppInfoRequest_App() {
  SharedDtor();
}

void CMsgClientAppInfoRequest_App::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientAppInfoRequest_App::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientAppInfoRequest_App& CMsgClientAppInfoRequest_App::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientAppInfoRequest_App* CMsgClientAppInfoRequest_App::default_instance_ = NULL;

CMsgClientAppInfoRequest_App* CMsgClientAppInfoRequest_App::New() const {
  return new CMsgClientAppInfoRequest_App;
}

void CMsgClientAppInfoRequest_App::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    section_flags_ = 0u;
  }
  section_crc_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientAppInfoRequest_App::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_section_flags;
        break;
      }

      // optional uint32 section_flags = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_section_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &section_flags_)));
          set_has_section_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_section_CRC;
        break;
      }

      // repeated uint32 section_CRC = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_section_CRC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_section_crc())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_section_crc())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_section_CRC;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientAppInfoRequest_App::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional uint32 section_flags = 2;
  if (has_section_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->section_flags(), output);
  }

  // repeated uint32 section_CRC = 3;
  for (int i = 0; i < this->section_crc_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->section_crc(i), output);
  }

}

int CMsgClientAppInfoRequest_App::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 section_flags = 2;
    if (has_section_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->section_flags());
    }

  }
  // repeated uint32 section_CRC = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->section_crc_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->section_crc(i));
    }
    total_size += 1 * this->section_crc_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAppInfoRequest_App::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientAppInfoRequest_App*>(&from));
}

void CMsgClientAppInfoRequest_App::MergeFrom(const CMsgClientAppInfoRequest_App& from) {
  GOOGLE_CHECK_NE(&from, this);
  section_crc_.MergeFrom(from.section_crc_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_section_flags()) {
      set_section_flags(from.section_flags());
    }
  }
}

void CMsgClientAppInfoRequest_App::CopyFrom(const CMsgClientAppInfoRequest_App& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAppInfoRequest_App::IsInitialized() const {

  return true;
}

void CMsgClientAppInfoRequest_App::Swap(CMsgClientAppInfoRequest_App* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(section_flags_, other->section_flags_);
    section_crc_.Swap(&other->section_crc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientAppInfoRequest_App::GetTypeName() const {
  return "Sc.CMsgClientAppInfoRequest.App";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientAppInfoRequest::kAppsFieldNumber;
const int CMsgClientAppInfoRequest::kSupportsBatchesFieldNumber;
#endif  // !_MSC_VER

CMsgClientAppInfoRequest::CMsgClientAppInfoRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientAppInfoRequest::InitAsDefaultInstance() {
}

CMsgClientAppInfoRequest::CMsgClientAppInfoRequest(const CMsgClientAppInfoRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientAppInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  supports_batches_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientAppInfoRequest::~CMsgClientAppInfoRequest() {
  SharedDtor();
}

void CMsgClientAppInfoRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientAppInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientAppInfoRequest& CMsgClientAppInfoRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientAppInfoRequest* CMsgClientAppInfoRequest::default_instance_ = NULL;

CMsgClientAppInfoRequest* CMsgClientAppInfoRequest::New() const {
  return new CMsgClientAppInfoRequest;
}

void CMsgClientAppInfoRequest::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    supports_batches_ = false;
  }
  apps_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientAppInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Sc.CMsgClientAppInfoRequest.App apps = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_apps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_apps()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_apps;
        if (input->ExpectTag(16)) goto parse_supports_batches;
        break;
      }

      // optional bool supports_batches = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_supports_batches:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &supports_batches_)));
          set_has_supports_batches();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientAppInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Sc.CMsgClientAppInfoRequest.App apps = 1;
  for (int i = 0; i < this->apps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->apps(i), output);
  }

  // optional bool supports_batches = 2 [default = false];
  if (has_supports_batches()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->supports_batches(), output);
  }

}

int CMsgClientAppInfoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool supports_batches = 2 [default = false];
    if (has_supports_batches()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Sc.CMsgClientAppInfoRequest.App apps = 1;
  total_size += 1 * this->apps_size();
  for (int i = 0; i < this->apps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->apps(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAppInfoRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientAppInfoRequest*>(&from));
}

void CMsgClientAppInfoRequest::MergeFrom(const CMsgClientAppInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  apps_.MergeFrom(from.apps_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_supports_batches()) {
      set_supports_batches(from.supports_batches());
    }
  }
}

void CMsgClientAppInfoRequest::CopyFrom(const CMsgClientAppInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAppInfoRequest::IsInitialized() const {

  return true;
}

void CMsgClientAppInfoRequest::Swap(CMsgClientAppInfoRequest* other) {
  if (other != this) {
    apps_.Swap(&other->apps_);
    std::swap(supports_batches_, other->supports_batches_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientAppInfoRequest::GetTypeName() const {
  return "Sc.CMsgClientAppInfoRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientAppInfoResponse_App_Section::kSectionIdFieldNumber;
const int CMsgClientAppInfoResponse_App_Section::kSectionKvFieldNumber;
#endif  // !_MSC_VER

CMsgClientAppInfoResponse_App_Section::CMsgClientAppInfoResponse_App_Section()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientAppInfoResponse_App_Section::InitAsDefaultInstance() {
}

CMsgClientAppInfoResponse_App_Section::CMsgClientAppInfoResponse_App_Section(const CMsgClientAppInfoResponse_App_Section& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientAppInfoResponse_App_Section::SharedCtor() {
  _cached_size_ = 0;
  section_id_ = 0u;
  section_kv_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientAppInfoResponse_App_Section::~CMsgClientAppInfoResponse_App_Section() {
  SharedDtor();
}

void CMsgClientAppInfoResponse_App_Section::SharedDtor() {
  if (section_kv_ != &::google::protobuf::internal::kEmptyString) {
    delete section_kv_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientAppInfoResponse_App_Section::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientAppInfoResponse_App_Section& CMsgClientAppInfoResponse_App_Section::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientAppInfoResponse_App_Section* CMsgClientAppInfoResponse_App_Section::default_instance_ = NULL;

CMsgClientAppInfoResponse_App_Section* CMsgClientAppInfoResponse_App_Section::New() const {
  return new CMsgClientAppInfoResponse_App_Section;
}

void CMsgClientAppInfoResponse_App_Section::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    section_id_ = 0u;
    if (has_section_kv()) {
      if (section_kv_ != &::google::protobuf::internal::kEmptyString) {
        section_kv_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientAppInfoResponse_App_Section::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 section_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &section_id_)));
          set_has_section_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_section_kv;
        break;
      }

      // optional bytes section_kv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_section_kv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_section_kv()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientAppInfoResponse_App_Section::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 section_id = 1;
  if (has_section_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->section_id(), output);
  }

  // optional bytes section_kv = 2;
  if (has_section_kv()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->section_kv(), output);
  }

}

int CMsgClientAppInfoResponse_App_Section::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 section_id = 1;
    if (has_section_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->section_id());
    }

    // optional bytes section_kv = 2;
    if (has_section_kv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->section_kv());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAppInfoResponse_App_Section::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientAppInfoResponse_App_Section*>(&from));
}

void CMsgClientAppInfoResponse_App_Section::MergeFrom(const CMsgClientAppInfoResponse_App_Section& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_section_id()) {
      set_section_id(from.section_id());
    }
    if (from.has_section_kv()) {
      set_section_kv(from.section_kv());
    }
  }
}

void CMsgClientAppInfoResponse_App_Section::CopyFrom(const CMsgClientAppInfoResponse_App_Section& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAppInfoResponse_App_Section::IsInitialized() const {

  return true;
}

void CMsgClientAppInfoResponse_App_Section::Swap(CMsgClientAppInfoResponse_App_Section* other) {
  if (other != this) {
    std::swap(section_id_, other->section_id_);
    std::swap(section_kv_, other->section_kv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientAppInfoResponse_App_Section::GetTypeName() const {
  return "Sc.CMsgClientAppInfoResponse.App.Section";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientAppInfoResponse_App::kAppIdFieldNumber;
const int CMsgClientAppInfoResponse_App::kChangeNumberFieldNumber;
const int CMsgClientAppInfoResponse_App::kSectionsFieldNumber;
#endif  // !_MSC_VER

CMsgClientAppInfoResponse_App::CMsgClientAppInfoResponse_App()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientAppInfoResponse_App::InitAsDefaultInstance() {
}

CMsgClientAppInfoResponse_App::CMsgClientAppInfoResponse_App(const CMsgClientAppInfoResponse_App& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientAppInfoResponse_App::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  change_number_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientAppInfoResponse_App::~CMsgClientAppInfoResponse_App() {
  SharedDtor();
}

void CMsgClientAppInfoResponse_App::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientAppInfoResponse_App::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientAppInfoResponse_App& CMsgClientAppInfoResponse_App::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientAppInfoResponse_App* CMsgClientAppInfoResponse_App::default_instance_ = NULL;

CMsgClientAppInfoResponse_App* CMsgClientAppInfoResponse_App::New() const {
  return new CMsgClientAppInfoResponse_App;
}

void CMsgClientAppInfoResponse_App::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    change_number_ = 0u;
  }
  sections_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientAppInfoResponse_App::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_change_number;
        break;
      }

      // optional uint32 change_number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &change_number_)));
          set_has_change_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sections;
        break;
      }

      // repeated .Sc.CMsgClientAppInfoResponse.App.Section sections = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sections:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sections()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sections;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientAppInfoResponse_App::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional uint32 change_number = 2;
  if (has_change_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->change_number(), output);
  }

  // repeated .Sc.CMsgClientAppInfoResponse.App.Section sections = 3;
  for (int i = 0; i < this->sections_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->sections(i), output);
  }

}

int CMsgClientAppInfoResponse_App::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 change_number = 2;
    if (has_change_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->change_number());
    }

  }
  // repeated .Sc.CMsgClientAppInfoResponse.App.Section sections = 3;
  total_size += 1 * this->sections_size();
  for (int i = 0; i < this->sections_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sections(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAppInfoResponse_App::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientAppInfoResponse_App*>(&from));
}

void CMsgClientAppInfoResponse_App::MergeFrom(const CMsgClientAppInfoResponse_App& from) {
  GOOGLE_CHECK_NE(&from, this);
  sections_.MergeFrom(from.sections_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_change_number()) {
      set_change_number(from.change_number());
    }
  }
}

void CMsgClientAppInfoResponse_App::CopyFrom(const CMsgClientAppInfoResponse_App& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAppInfoResponse_App::IsInitialized() const {

  return true;
}

void CMsgClientAppInfoResponse_App::Swap(CMsgClientAppInfoResponse_App* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(change_number_, other->change_number_);
    sections_.Swap(&other->sections_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientAppInfoResponse_App::GetTypeName() const {
  return "Sc.CMsgClientAppInfoResponse.App";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientAppInfoResponse::kAppsFieldNumber;
const int CMsgClientAppInfoResponse::kAppsUnknownFieldNumber;
const int CMsgClientAppInfoResponse::kAppsPendingFieldNumber;
#endif  // !_MSC_VER

CMsgClientAppInfoResponse::CMsgClientAppInfoResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientAppInfoResponse::InitAsDefaultInstance() {
}

CMsgClientAppInfoResponse::CMsgClientAppInfoResponse(const CMsgClientAppInfoResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientAppInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  apps_pending_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientAppInfoResponse::~CMsgClientAppInfoResponse() {
  SharedDtor();
}

void CMsgClientAppInfoResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientAppInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientAppInfoResponse& CMsgClientAppInfoResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientAppInfoResponse* CMsgClientAppInfoResponse::default_instance_ = NULL;

CMsgClientAppInfoResponse* CMsgClientAppInfoResponse::New() const {
  return new CMsgClientAppInfoResponse;
}

void CMsgClientAppInfoResponse::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    apps_pending_ = 0u;
  }
  apps_.Clear();
  apps_unknown_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientAppInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Sc.CMsgClientAppInfoResponse.App apps = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_apps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_apps()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_apps;
        if (input->ExpectTag(16)) goto parse_apps_unknown;
        break;
      }

      // repeated uint32 apps_unknown = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apps_unknown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_apps_unknown())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_apps_unknown())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_apps_unknown;
        if (input->ExpectTag(24)) goto parse_apps_pending;
        break;
      }

      // optional uint32 apps_pending = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apps_pending:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &apps_pending_)));
          set_has_apps_pending();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientAppInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Sc.CMsgClientAppInfoResponse.App apps = 1;
  for (int i = 0; i < this->apps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->apps(i), output);
  }

  // repeated uint32 apps_unknown = 2;
  for (int i = 0; i < this->apps_unknown_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->apps_unknown(i), output);
  }

  // optional uint32 apps_pending = 3;
  if (has_apps_pending()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->apps_pending(), output);
  }

}

int CMsgClientAppInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 apps_pending = 3;
    if (has_apps_pending()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->apps_pending());
    }

  }
  // repeated .Sc.CMsgClientAppInfoResponse.App apps = 1;
  total_size += 1 * this->apps_size();
  for (int i = 0; i < this->apps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->apps(i));
  }

  // repeated uint32 apps_unknown = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->apps_unknown_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->apps_unknown(i));
    }
    total_size += 1 * this->apps_unknown_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAppInfoResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientAppInfoResponse*>(&from));
}

void CMsgClientAppInfoResponse::MergeFrom(const CMsgClientAppInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  apps_.MergeFrom(from.apps_);
  apps_unknown_.MergeFrom(from.apps_unknown_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_apps_pending()) {
      set_apps_pending(from.apps_pending());
    }
  }
}

void CMsgClientAppInfoResponse::CopyFrom(const CMsgClientAppInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAppInfoResponse::IsInitialized() const {

  return true;
}

void CMsgClientAppInfoResponse::Swap(CMsgClientAppInfoResponse* other) {
  if (other != this) {
    apps_.Swap(&other->apps_);
    apps_unknown_.Swap(&other->apps_unknown_);
    std::swap(apps_pending_, other->apps_pending_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientAppInfoResponse::GetTypeName() const {
  return "Sc.CMsgClientAppInfoResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientPackageInfoRequest::kPackageIdsFieldNumber;
const int CMsgClientPackageInfoRequest::kMetaDataOnlyFieldNumber;
#endif  // !_MSC_VER

CMsgClientPackageInfoRequest::CMsgClientPackageInfoRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientPackageInfoRequest::InitAsDefaultInstance() {
}

CMsgClientPackageInfoRequest::CMsgClientPackageInfoRequest(const CMsgClientPackageInfoRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientPackageInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  meta_data_only_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientPackageInfoRequest::~CMsgClientPackageInfoRequest() {
  SharedDtor();
}

void CMsgClientPackageInfoRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientPackageInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientPackageInfoRequest& CMsgClientPackageInfoRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientPackageInfoRequest* CMsgClientPackageInfoRequest::default_instance_ = NULL;

CMsgClientPackageInfoRequest* CMsgClientPackageInfoRequest::New() const {
  return new CMsgClientPackageInfoRequest;
}

void CMsgClientPackageInfoRequest::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    meta_data_only_ = false;
  }
  package_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientPackageInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 package_ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_package_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_package_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_package_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_package_ids;
        if (input->ExpectTag(16)) goto parse_meta_data_only;
        break;
      }

      // optional bool meta_data_only = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_meta_data_only:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &meta_data_only_)));
          set_has_meta_data_only();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientPackageInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 package_ids = 1;
  for (int i = 0; i < this->package_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->package_ids(i), output);
  }

  // optional bool meta_data_only = 2;
  if (has_meta_data_only()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->meta_data_only(), output);
  }

}

int CMsgClientPackageInfoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool meta_data_only = 2;
    if (has_meta_data_only()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint32 package_ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->package_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->package_ids(i));
    }
    total_size += 1 * this->package_ids_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientPackageInfoRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientPackageInfoRequest*>(&from));
}

void CMsgClientPackageInfoRequest::MergeFrom(const CMsgClientPackageInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  package_ids_.MergeFrom(from.package_ids_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_meta_data_only()) {
      set_meta_data_only(from.meta_data_only());
    }
  }
}

void CMsgClientPackageInfoRequest::CopyFrom(const CMsgClientPackageInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPackageInfoRequest::IsInitialized() const {

  return true;
}

void CMsgClientPackageInfoRequest::Swap(CMsgClientPackageInfoRequest* other) {
  if (other != this) {
    package_ids_.Swap(&other->package_ids_);
    std::swap(meta_data_only_, other->meta_data_only_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientPackageInfoRequest::GetTypeName() const {
  return "Sc.CMsgClientPackageInfoRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientPackageInfoResponse_Package::kPackageIdFieldNumber;
const int CMsgClientPackageInfoResponse_Package::kChangeNumberFieldNumber;
const int CMsgClientPackageInfoResponse_Package::kShaFieldNumber;
const int CMsgClientPackageInfoResponse_Package::kBufferFieldNumber;
#endif  // !_MSC_VER

CMsgClientPackageInfoResponse_Package::CMsgClientPackageInfoResponse_Package()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientPackageInfoResponse_Package::InitAsDefaultInstance() {
}

CMsgClientPackageInfoResponse_Package::CMsgClientPackageInfoResponse_Package(const CMsgClientPackageInfoResponse_Package& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientPackageInfoResponse_Package::SharedCtor() {
  _cached_size_ = 0;
  package_id_ = 0u;
  change_number_ = 0u;
  sha_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  buffer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientPackageInfoResponse_Package::~CMsgClientPackageInfoResponse_Package() {
  SharedDtor();
}

void CMsgClientPackageInfoResponse_Package::SharedDtor() {
  if (sha_ != &::google::protobuf::internal::kEmptyString) {
    delete sha_;
  }
  if (buffer_ != &::google::protobuf::internal::kEmptyString) {
    delete buffer_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientPackageInfoResponse_Package::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientPackageInfoResponse_Package& CMsgClientPackageInfoResponse_Package::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientPackageInfoResponse_Package* CMsgClientPackageInfoResponse_Package::default_instance_ = NULL;

CMsgClientPackageInfoResponse_Package* CMsgClientPackageInfoResponse_Package::New() const {
  return new CMsgClientPackageInfoResponse_Package;
}

void CMsgClientPackageInfoResponse_Package::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    package_id_ = 0u;
    change_number_ = 0u;
    if (has_sha()) {
      if (sha_ != &::google::protobuf::internal::kEmptyString) {
        sha_->clear();
      }
    }
    if (has_buffer()) {
      if (buffer_ != &::google::protobuf::internal::kEmptyString) {
        buffer_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientPackageInfoResponse_Package::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 package_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &package_id_)));
          set_has_package_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_change_number;
        break;
      }

      // optional uint32 change_number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &change_number_)));
          set_has_change_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sha;
        break;
      }

      // optional bytes sha = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sha:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_buffer;
        break;
      }

      // optional bytes buffer = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buffer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buffer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientPackageInfoResponse_Package::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 package_id = 1;
  if (has_package_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->package_id(), output);
  }

  // optional uint32 change_number = 2;
  if (has_change_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->change_number(), output);
  }

  // optional bytes sha = 3;
  if (has_sha()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->sha(), output);
  }

  // optional bytes buffer = 4;
  if (has_buffer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->buffer(), output);
  }

}

int CMsgClientPackageInfoResponse_Package::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 package_id = 1;
    if (has_package_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->package_id());
    }

    // optional uint32 change_number = 2;
    if (has_change_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->change_number());
    }

    // optional bytes sha = 3;
    if (has_sha()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha());
    }

    // optional bytes buffer = 4;
    if (has_buffer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->buffer());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientPackageInfoResponse_Package::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientPackageInfoResponse_Package*>(&from));
}

void CMsgClientPackageInfoResponse_Package::MergeFrom(const CMsgClientPackageInfoResponse_Package& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_package_id()) {
      set_package_id(from.package_id());
    }
    if (from.has_change_number()) {
      set_change_number(from.change_number());
    }
    if (from.has_sha()) {
      set_sha(from.sha());
    }
    if (from.has_buffer()) {
      set_buffer(from.buffer());
    }
  }
}

void CMsgClientPackageInfoResponse_Package::CopyFrom(const CMsgClientPackageInfoResponse_Package& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPackageInfoResponse_Package::IsInitialized() const {

  return true;
}

void CMsgClientPackageInfoResponse_Package::Swap(CMsgClientPackageInfoResponse_Package* other) {
  if (other != this) {
    std::swap(package_id_, other->package_id_);
    std::swap(change_number_, other->change_number_);
    std::swap(sha_, other->sha_);
    std::swap(buffer_, other->buffer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientPackageInfoResponse_Package::GetTypeName() const {
  return "Sc.CMsgClientPackageInfoResponse.Package";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientPackageInfoResponse::kPackagesFieldNumber;
const int CMsgClientPackageInfoResponse::kPackagesUnknownFieldNumber;
const int CMsgClientPackageInfoResponse::kPackagesPendingFieldNumber;
#endif  // !_MSC_VER

CMsgClientPackageInfoResponse::CMsgClientPackageInfoResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientPackageInfoResponse::InitAsDefaultInstance() {
}

CMsgClientPackageInfoResponse::CMsgClientPackageInfoResponse(const CMsgClientPackageInfoResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientPackageInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  packages_pending_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientPackageInfoResponse::~CMsgClientPackageInfoResponse() {
  SharedDtor();
}

void CMsgClientPackageInfoResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientPackageInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientPackageInfoResponse& CMsgClientPackageInfoResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientPackageInfoResponse* CMsgClientPackageInfoResponse::default_instance_ = NULL;

CMsgClientPackageInfoResponse* CMsgClientPackageInfoResponse::New() const {
  return new CMsgClientPackageInfoResponse;
}

void CMsgClientPackageInfoResponse::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    packages_pending_ = 0u;
  }
  packages_.Clear();
  packages_unknown_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientPackageInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Sc.CMsgClientPackageInfoResponse.Package packages = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_packages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_packages()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_packages;
        if (input->ExpectTag(16)) goto parse_packages_unknown;
        break;
      }

      // repeated uint32 packages_unknown = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_packages_unknown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_packages_unknown())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_packages_unknown())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_packages_unknown;
        if (input->ExpectTag(24)) goto parse_packages_pending;
        break;
      }

      // optional uint32 packages_pending = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_packages_pending:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packages_pending_)));
          set_has_packages_pending();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientPackageInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Sc.CMsgClientPackageInfoResponse.Package packages = 1;
  for (int i = 0; i < this->packages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->packages(i), output);
  }

  // repeated uint32 packages_unknown = 2;
  for (int i = 0; i < this->packages_unknown_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->packages_unknown(i), output);
  }

  // optional uint32 packages_pending = 3;
  if (has_packages_pending()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->packages_pending(), output);
  }

}

int CMsgClientPackageInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 packages_pending = 3;
    if (has_packages_pending()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packages_pending());
    }

  }
  // repeated .Sc.CMsgClientPackageInfoResponse.Package packages = 1;
  total_size += 1 * this->packages_size();
  for (int i = 0; i < this->packages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->packages(i));
  }

  // repeated uint32 packages_unknown = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->packages_unknown_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->packages_unknown(i));
    }
    total_size += 1 * this->packages_unknown_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientPackageInfoResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientPackageInfoResponse*>(&from));
}

void CMsgClientPackageInfoResponse::MergeFrom(const CMsgClientPackageInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  packages_.MergeFrom(from.packages_);
  packages_unknown_.MergeFrom(from.packages_unknown_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_packages_pending()) {
      set_packages_pending(from.packages_pending());
    }
  }
}

void CMsgClientPackageInfoResponse::CopyFrom(const CMsgClientPackageInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPackageInfoResponse::IsInitialized() const {

  return true;
}

void CMsgClientPackageInfoResponse::Swap(CMsgClientPackageInfoResponse* other) {
  if (other != this) {
    packages_.Swap(&other->packages_);
    packages_unknown_.Swap(&other->packages_unknown_);
    std::swap(packages_pending_, other->packages_pending_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientPackageInfoResponse::GetTypeName() const {
  return "Sc.CMsgClientPackageInfoResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPICSChangesSinceRequest::kSinceChangeNumberFieldNumber;
const int CMsgPICSChangesSinceRequest::kSendAppInfoChangesFieldNumber;
const int CMsgPICSChangesSinceRequest::kSendPackageInfoChangesFieldNumber;
#endif  // !_MSC_VER

CMsgPICSChangesSinceRequest::CMsgPICSChangesSinceRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgPICSChangesSinceRequest::InitAsDefaultInstance() {
}

CMsgPICSChangesSinceRequest::CMsgPICSChangesSinceRequest(const CMsgPICSChangesSinceRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgPICSChangesSinceRequest::SharedCtor() {
  _cached_size_ = 0;
  since_change_number_ = 0u;
  send_app_info_changes_ = false;
  send_package_info_changes_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPICSChangesSinceRequest::~CMsgPICSChangesSinceRequest() {
  SharedDtor();
}

void CMsgPICSChangesSinceRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgPICSChangesSinceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgPICSChangesSinceRequest& CMsgPICSChangesSinceRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgPICSChangesSinceRequest* CMsgPICSChangesSinceRequest::default_instance_ = NULL;

CMsgPICSChangesSinceRequest* CMsgPICSChangesSinceRequest::New() const {
  return new CMsgPICSChangesSinceRequest;
}

void CMsgPICSChangesSinceRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    since_change_number_ = 0u;
    send_app_info_changes_ = false;
    send_package_info_changes_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgPICSChangesSinceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 since_change_number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &since_change_number_)));
          set_has_since_change_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_send_app_info_changes;
        break;
      }

      // optional bool send_app_info_changes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_app_info_changes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &send_app_info_changes_)));
          set_has_send_app_info_changes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_send_package_info_changes;
        break;
      }

      // optional bool send_package_info_changes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_package_info_changes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &send_package_info_changes_)));
          set_has_send_package_info_changes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgPICSChangesSinceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 since_change_number = 1;
  if (has_since_change_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->since_change_number(), output);
  }

  // optional bool send_app_info_changes = 2;
  if (has_send_app_info_changes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->send_app_info_changes(), output);
  }

  // optional bool send_package_info_changes = 3;
  if (has_send_package_info_changes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->send_package_info_changes(), output);
  }

}

int CMsgPICSChangesSinceRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 since_change_number = 1;
    if (has_since_change_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->since_change_number());
    }

    // optional bool send_app_info_changes = 2;
    if (has_send_app_info_changes()) {
      total_size += 1 + 1;
    }

    // optional bool send_package_info_changes = 3;
    if (has_send_package_info_changes()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPICSChangesSinceRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgPICSChangesSinceRequest*>(&from));
}

void CMsgPICSChangesSinceRequest::MergeFrom(const CMsgPICSChangesSinceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_since_change_number()) {
      set_since_change_number(from.since_change_number());
    }
    if (from.has_send_app_info_changes()) {
      set_send_app_info_changes(from.send_app_info_changes());
    }
    if (from.has_send_package_info_changes()) {
      set_send_package_info_changes(from.send_package_info_changes());
    }
  }
}

void CMsgPICSChangesSinceRequest::CopyFrom(const CMsgPICSChangesSinceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPICSChangesSinceRequest::IsInitialized() const {

  return true;
}

void CMsgPICSChangesSinceRequest::Swap(CMsgPICSChangesSinceRequest* other) {
  if (other != this) {
    std::swap(since_change_number_, other->since_change_number_);
    std::swap(send_app_info_changes_, other->send_app_info_changes_);
    std::swap(send_package_info_changes_, other->send_package_info_changes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgPICSChangesSinceRequest::GetTypeName() const {
  return "Sc.CMsgPICSChangesSinceRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPICSChangesSinceResponse_PackageChange::kPackageidFieldNumber;
const int CMsgPICSChangesSinceResponse_PackageChange::kChangeNumberFieldNumber;
const int CMsgPICSChangesSinceResponse_PackageChange::kNeedsTokenFieldNumber;
#endif  // !_MSC_VER

CMsgPICSChangesSinceResponse_PackageChange::CMsgPICSChangesSinceResponse_PackageChange()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgPICSChangesSinceResponse_PackageChange::InitAsDefaultInstance() {
}

CMsgPICSChangesSinceResponse_PackageChange::CMsgPICSChangesSinceResponse_PackageChange(const CMsgPICSChangesSinceResponse_PackageChange& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgPICSChangesSinceResponse_PackageChange::SharedCtor() {
  _cached_size_ = 0;
  packageid_ = 0u;
  change_number_ = 0u;
  needs_token_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPICSChangesSinceResponse_PackageChange::~CMsgPICSChangesSinceResponse_PackageChange() {
  SharedDtor();
}

void CMsgPICSChangesSinceResponse_PackageChange::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgPICSChangesSinceResponse_PackageChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgPICSChangesSinceResponse_PackageChange& CMsgPICSChangesSinceResponse_PackageChange::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgPICSChangesSinceResponse_PackageChange* CMsgPICSChangesSinceResponse_PackageChange::default_instance_ = NULL;

CMsgPICSChangesSinceResponse_PackageChange* CMsgPICSChangesSinceResponse_PackageChange::New() const {
  return new CMsgPICSChangesSinceResponse_PackageChange;
}

void CMsgPICSChangesSinceResponse_PackageChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packageid_ = 0u;
    change_number_ = 0u;
    needs_token_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgPICSChangesSinceResponse_PackageChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 packageid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packageid_)));
          set_has_packageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_change_number;
        break;
      }

      // optional uint32 change_number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &change_number_)));
          set_has_change_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_needs_token;
        break;
      }

      // optional bool needs_token = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needs_token:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needs_token_)));
          set_has_needs_token();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgPICSChangesSinceResponse_PackageChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 packageid = 1;
  if (has_packageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->packageid(), output);
  }

  // optional uint32 change_number = 2;
  if (has_change_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->change_number(), output);
  }

  // optional bool needs_token = 3;
  if (has_needs_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->needs_token(), output);
  }

}

int CMsgPICSChangesSinceResponse_PackageChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 packageid = 1;
    if (has_packageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packageid());
    }

    // optional uint32 change_number = 2;
    if (has_change_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->change_number());
    }

    // optional bool needs_token = 3;
    if (has_needs_token()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPICSChangesSinceResponse_PackageChange::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgPICSChangesSinceResponse_PackageChange*>(&from));
}

void CMsgPICSChangesSinceResponse_PackageChange::MergeFrom(const CMsgPICSChangesSinceResponse_PackageChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packageid()) {
      set_packageid(from.packageid());
    }
    if (from.has_change_number()) {
      set_change_number(from.change_number());
    }
    if (from.has_needs_token()) {
      set_needs_token(from.needs_token());
    }
  }
}

void CMsgPICSChangesSinceResponse_PackageChange::CopyFrom(const CMsgPICSChangesSinceResponse_PackageChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPICSChangesSinceResponse_PackageChange::IsInitialized() const {

  return true;
}

void CMsgPICSChangesSinceResponse_PackageChange::Swap(CMsgPICSChangesSinceResponse_PackageChange* other) {
  if (other != this) {
    std::swap(packageid_, other->packageid_);
    std::swap(change_number_, other->change_number_);
    std::swap(needs_token_, other->needs_token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgPICSChangesSinceResponse_PackageChange::GetTypeName() const {
  return "Sc.CMsgPICSChangesSinceResponse.PackageChange";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgPICSChangesSinceResponse_AppChange::kAppidFieldNumber;
const int CMsgPICSChangesSinceResponse_AppChange::kChangeNumberFieldNumber;
const int CMsgPICSChangesSinceResponse_AppChange::kNeedsTokenFieldNumber;
#endif  // !_MSC_VER

CMsgPICSChangesSinceResponse_AppChange::CMsgPICSChangesSinceResponse_AppChange()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgPICSChangesSinceResponse_AppChange::InitAsDefaultInstance() {
}

CMsgPICSChangesSinceResponse_AppChange::CMsgPICSChangesSinceResponse_AppChange(const CMsgPICSChangesSinceResponse_AppChange& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgPICSChangesSinceResponse_AppChange::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0u;
  change_number_ = 0u;
  needs_token_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPICSChangesSinceResponse_AppChange::~CMsgPICSChangesSinceResponse_AppChange() {
  SharedDtor();
}

void CMsgPICSChangesSinceResponse_AppChange::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgPICSChangesSinceResponse_AppChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgPICSChangesSinceResponse_AppChange& CMsgPICSChangesSinceResponse_AppChange::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgPICSChangesSinceResponse_AppChange* CMsgPICSChangesSinceResponse_AppChange::default_instance_ = NULL;

CMsgPICSChangesSinceResponse_AppChange* CMsgPICSChangesSinceResponse_AppChange::New() const {
  return new CMsgPICSChangesSinceResponse_AppChange;
}

void CMsgPICSChangesSinceResponse_AppChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    appid_ = 0u;
    change_number_ = 0u;
    needs_token_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgPICSChangesSinceResponse_AppChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_change_number;
        break;
      }

      // optional uint32 change_number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &change_number_)));
          set_has_change_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_needs_token;
        break;
      }

      // optional bool needs_token = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needs_token:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needs_token_)));
          set_has_needs_token();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgPICSChangesSinceResponse_AppChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 appid = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint32 change_number = 2;
  if (has_change_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->change_number(), output);
  }

  // optional bool needs_token = 3;
  if (has_needs_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->needs_token(), output);
  }

}

int CMsgPICSChangesSinceResponse_AppChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 change_number = 2;
    if (has_change_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->change_number());
    }

    // optional bool needs_token = 3;
    if (has_needs_token()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPICSChangesSinceResponse_AppChange::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgPICSChangesSinceResponse_AppChange*>(&from));
}

void CMsgPICSChangesSinceResponse_AppChange::MergeFrom(const CMsgPICSChangesSinceResponse_AppChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_change_number()) {
      set_change_number(from.change_number());
    }
    if (from.has_needs_token()) {
      set_needs_token(from.needs_token());
    }
  }
}

void CMsgPICSChangesSinceResponse_AppChange::CopyFrom(const CMsgPICSChangesSinceResponse_AppChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPICSChangesSinceResponse_AppChange::IsInitialized() const {

  return true;
}

void CMsgPICSChangesSinceResponse_AppChange::Swap(CMsgPICSChangesSinceResponse_AppChange* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(change_number_, other->change_number_);
    std::swap(needs_token_, other->needs_token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgPICSChangesSinceResponse_AppChange::GetTypeName() const {
  return "Sc.CMsgPICSChangesSinceResponse.AppChange";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgPICSChangesSinceResponse::kCurrentChangeNumberFieldNumber;
const int CMsgPICSChangesSinceResponse::kSinceChangeNumberFieldNumber;
const int CMsgPICSChangesSinceResponse::kForceFullUpdateFieldNumber;
const int CMsgPICSChangesSinceResponse::kPackageChangesFieldNumber;
const int CMsgPICSChangesSinceResponse::kAppChangesFieldNumber;
#endif  // !_MSC_VER

CMsgPICSChangesSinceResponse::CMsgPICSChangesSinceResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgPICSChangesSinceResponse::InitAsDefaultInstance() {
}

CMsgPICSChangesSinceResponse::CMsgPICSChangesSinceResponse(const CMsgPICSChangesSinceResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgPICSChangesSinceResponse::SharedCtor() {
  _cached_size_ = 0;
  current_change_number_ = 0u;
  since_change_number_ = 0u;
  force_full_update_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPICSChangesSinceResponse::~CMsgPICSChangesSinceResponse() {
  SharedDtor();
}

void CMsgPICSChangesSinceResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgPICSChangesSinceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgPICSChangesSinceResponse& CMsgPICSChangesSinceResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgPICSChangesSinceResponse* CMsgPICSChangesSinceResponse::default_instance_ = NULL;

CMsgPICSChangesSinceResponse* CMsgPICSChangesSinceResponse::New() const {
  return new CMsgPICSChangesSinceResponse;
}

void CMsgPICSChangesSinceResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    current_change_number_ = 0u;
    since_change_number_ = 0u;
    force_full_update_ = false;
  }
  package_changes_.Clear();
  app_changes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgPICSChangesSinceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 current_change_number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_change_number_)));
          set_has_current_change_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_since_change_number;
        break;
      }

      // optional uint32 since_change_number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_since_change_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &since_change_number_)));
          set_has_since_change_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_force_full_update;
        break;
      }

      // optional bool force_full_update = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_force_full_update:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_full_update_)));
          set_has_force_full_update();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_package_changes;
        break;
      }

      // repeated .Sc.CMsgPICSChangesSinceResponse.PackageChange package_changes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_package_changes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_package_changes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_package_changes;
        if (input->ExpectTag(42)) goto parse_app_changes;
        break;
      }

      // repeated .Sc.CMsgPICSChangesSinceResponse.AppChange app_changes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app_changes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_app_changes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_app_changes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgPICSChangesSinceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 current_change_number = 1;
  if (has_current_change_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->current_change_number(), output);
  }

  // optional uint32 since_change_number = 2;
  if (has_since_change_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->since_change_number(), output);
  }

  // optional bool force_full_update = 3;
  if (has_force_full_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->force_full_update(), output);
  }

  // repeated .Sc.CMsgPICSChangesSinceResponse.PackageChange package_changes = 4;
  for (int i = 0; i < this->package_changes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->package_changes(i), output);
  }

  // repeated .Sc.CMsgPICSChangesSinceResponse.AppChange app_changes = 5;
  for (int i = 0; i < this->app_changes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->app_changes(i), output);
  }

}

int CMsgPICSChangesSinceResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 current_change_number = 1;
    if (has_current_change_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_change_number());
    }

    // optional uint32 since_change_number = 2;
    if (has_since_change_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->since_change_number());
    }

    // optional bool force_full_update = 3;
    if (has_force_full_update()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Sc.CMsgPICSChangesSinceResponse.PackageChange package_changes = 4;
  total_size += 1 * this->package_changes_size();
  for (int i = 0; i < this->package_changes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->package_changes(i));
  }

  // repeated .Sc.CMsgPICSChangesSinceResponse.AppChange app_changes = 5;
  total_size += 1 * this->app_changes_size();
  for (int i = 0; i < this->app_changes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->app_changes(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPICSChangesSinceResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgPICSChangesSinceResponse*>(&from));
}

void CMsgPICSChangesSinceResponse::MergeFrom(const CMsgPICSChangesSinceResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  package_changes_.MergeFrom(from.package_changes_);
  app_changes_.MergeFrom(from.app_changes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_current_change_number()) {
      set_current_change_number(from.current_change_number());
    }
    if (from.has_since_change_number()) {
      set_since_change_number(from.since_change_number());
    }
    if (from.has_force_full_update()) {
      set_force_full_update(from.force_full_update());
    }
  }
}

void CMsgPICSChangesSinceResponse::CopyFrom(const CMsgPICSChangesSinceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPICSChangesSinceResponse::IsInitialized() const {

  return true;
}

void CMsgPICSChangesSinceResponse::Swap(CMsgPICSChangesSinceResponse* other) {
  if (other != this) {
    std::swap(current_change_number_, other->current_change_number_);
    std::swap(since_change_number_, other->since_change_number_);
    std::swap(force_full_update_, other->force_full_update_);
    package_changes_.Swap(&other->package_changes_);
    app_changes_.Swap(&other->app_changes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgPICSChangesSinceResponse::GetTypeName() const {
  return "Sc.CMsgPICSChangesSinceResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPICSProductInfoRequest_AppInfo::kAppidFieldNumber;
const int CMsgPICSProductInfoRequest_AppInfo::kAccessTokenFieldNumber;
const int CMsgPICSProductInfoRequest_AppInfo::kOnlyPublicFieldNumber;
#endif  // !_MSC_VER

CMsgPICSProductInfoRequest_AppInfo::CMsgPICSProductInfoRequest_AppInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgPICSProductInfoRequest_AppInfo::InitAsDefaultInstance() {
}

CMsgPICSProductInfoRequest_AppInfo::CMsgPICSProductInfoRequest_AppInfo(const CMsgPICSProductInfoRequest_AppInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgPICSProductInfoRequest_AppInfo::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0u;
  access_token_ = GOOGLE_ULONGLONG(0);
  only_public_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPICSProductInfoRequest_AppInfo::~CMsgPICSProductInfoRequest_AppInfo() {
  SharedDtor();
}

void CMsgPICSProductInfoRequest_AppInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgPICSProductInfoRequest_AppInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgPICSProductInfoRequest_AppInfo& CMsgPICSProductInfoRequest_AppInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgPICSProductInfoRequest_AppInfo* CMsgPICSProductInfoRequest_AppInfo::default_instance_ = NULL;

CMsgPICSProductInfoRequest_AppInfo* CMsgPICSProductInfoRequest_AppInfo::New() const {
  return new CMsgPICSProductInfoRequest_AppInfo;
}

void CMsgPICSProductInfoRequest_AppInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    appid_ = 0u;
    access_token_ = GOOGLE_ULONGLONG(0);
    only_public_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgPICSProductInfoRequest_AppInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_access_token;
        break;
      }

      // optional uint64 access_token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_access_token:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &access_token_)));
          set_has_access_token();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_only_public;
        break;
      }

      // optional bool only_public = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_only_public:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &only_public_)));
          set_has_only_public();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgPICSProductInfoRequest_AppInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 appid = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint64 access_token = 2;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->access_token(), output);
  }

  // optional bool only_public = 3;
  if (has_only_public()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->only_public(), output);
  }

}

int CMsgPICSProductInfoRequest_AppInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint64 access_token = 2;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->access_token());
    }

    // optional bool only_public = 3;
    if (has_only_public()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPICSProductInfoRequest_AppInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgPICSProductInfoRequest_AppInfo*>(&from));
}

void CMsgPICSProductInfoRequest_AppInfo::MergeFrom(const CMsgPICSProductInfoRequest_AppInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
    if (from.has_only_public()) {
      set_only_public(from.only_public());
    }
  }
}

void CMsgPICSProductInfoRequest_AppInfo::CopyFrom(const CMsgPICSProductInfoRequest_AppInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPICSProductInfoRequest_AppInfo::IsInitialized() const {

  return true;
}

void CMsgPICSProductInfoRequest_AppInfo::Swap(CMsgPICSProductInfoRequest_AppInfo* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(access_token_, other->access_token_);
    std::swap(only_public_, other->only_public_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgPICSProductInfoRequest_AppInfo::GetTypeName() const {
  return "Sc.CMsgPICSProductInfoRequest.AppInfo";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgPICSProductInfoRequest_PackageInfo::kPackageidFieldNumber;
const int CMsgPICSProductInfoRequest_PackageInfo::kAccessTokenFieldNumber;
#endif  // !_MSC_VER

CMsgPICSProductInfoRequest_PackageInfo::CMsgPICSProductInfoRequest_PackageInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgPICSProductInfoRequest_PackageInfo::InitAsDefaultInstance() {
}

CMsgPICSProductInfoRequest_PackageInfo::CMsgPICSProductInfoRequest_PackageInfo(const CMsgPICSProductInfoRequest_PackageInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgPICSProductInfoRequest_PackageInfo::SharedCtor() {
  _cached_size_ = 0;
  packageid_ = 0u;
  access_token_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPICSProductInfoRequest_PackageInfo::~CMsgPICSProductInfoRequest_PackageInfo() {
  SharedDtor();
}

void CMsgPICSProductInfoRequest_PackageInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgPICSProductInfoRequest_PackageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgPICSProductInfoRequest_PackageInfo& CMsgPICSProductInfoRequest_PackageInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgPICSProductInfoRequest_PackageInfo* CMsgPICSProductInfoRequest_PackageInfo::default_instance_ = NULL;

CMsgPICSProductInfoRequest_PackageInfo* CMsgPICSProductInfoRequest_PackageInfo::New() const {
  return new CMsgPICSProductInfoRequest_PackageInfo;
}

void CMsgPICSProductInfoRequest_PackageInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packageid_ = 0u;
    access_token_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgPICSProductInfoRequest_PackageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 packageid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packageid_)));
          set_has_packageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_access_token;
        break;
      }

      // optional uint64 access_token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_access_token:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &access_token_)));
          set_has_access_token();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgPICSProductInfoRequest_PackageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 packageid = 1;
  if (has_packageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->packageid(), output);
  }

  // optional uint64 access_token = 2;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->access_token(), output);
  }

}

int CMsgPICSProductInfoRequest_PackageInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 packageid = 1;
    if (has_packageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packageid());
    }

    // optional uint64 access_token = 2;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->access_token());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPICSProductInfoRequest_PackageInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgPICSProductInfoRequest_PackageInfo*>(&from));
}

void CMsgPICSProductInfoRequest_PackageInfo::MergeFrom(const CMsgPICSProductInfoRequest_PackageInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packageid()) {
      set_packageid(from.packageid());
    }
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
  }
}

void CMsgPICSProductInfoRequest_PackageInfo::CopyFrom(const CMsgPICSProductInfoRequest_PackageInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPICSProductInfoRequest_PackageInfo::IsInitialized() const {

  return true;
}

void CMsgPICSProductInfoRequest_PackageInfo::Swap(CMsgPICSProductInfoRequest_PackageInfo* other) {
  if (other != this) {
    std::swap(packageid_, other->packageid_);
    std::swap(access_token_, other->access_token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgPICSProductInfoRequest_PackageInfo::GetTypeName() const {
  return "Sc.CMsgPICSProductInfoRequest.PackageInfo";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgPICSProductInfoRequest::kPackagesFieldNumber;
const int CMsgPICSProductInfoRequest::kAppsFieldNumber;
const int CMsgPICSProductInfoRequest::kMetaDataOnlyFieldNumber;
const int CMsgPICSProductInfoRequest::kNumPrevFailedFieldNumber;
#endif  // !_MSC_VER

CMsgPICSProductInfoRequest::CMsgPICSProductInfoRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgPICSProductInfoRequest::InitAsDefaultInstance() {
}

CMsgPICSProductInfoRequest::CMsgPICSProductInfoRequest(const CMsgPICSProductInfoRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgPICSProductInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  meta_data_only_ = false;
  num_prev_failed_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPICSProductInfoRequest::~CMsgPICSProductInfoRequest() {
  SharedDtor();
}

void CMsgPICSProductInfoRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgPICSProductInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgPICSProductInfoRequest& CMsgPICSProductInfoRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgPICSProductInfoRequest* CMsgPICSProductInfoRequest::default_instance_ = NULL;

CMsgPICSProductInfoRequest* CMsgPICSProductInfoRequest::New() const {
  return new CMsgPICSProductInfoRequest;
}

void CMsgPICSProductInfoRequest::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    meta_data_only_ = false;
    num_prev_failed_ = 0u;
  }
  packages_.Clear();
  apps_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgPICSProductInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Sc.CMsgPICSProductInfoRequest.PackageInfo packages = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_packages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_packages()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_packages;
        if (input->ExpectTag(18)) goto parse_apps;
        break;
      }

      // repeated .Sc.CMsgPICSProductInfoRequest.AppInfo apps = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_apps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_apps()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_apps;
        if (input->ExpectTag(24)) goto parse_meta_data_only;
        break;
      }

      // optional bool meta_data_only = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_meta_data_only:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &meta_data_only_)));
          set_has_meta_data_only();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_num_prev_failed;
        break;
      }

      // optional uint32 num_prev_failed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_prev_failed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_prev_failed_)));
          set_has_num_prev_failed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgPICSProductInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Sc.CMsgPICSProductInfoRequest.PackageInfo packages = 1;
  for (int i = 0; i < this->packages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->packages(i), output);
  }

  // repeated .Sc.CMsgPICSProductInfoRequest.AppInfo apps = 2;
  for (int i = 0; i < this->apps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->apps(i), output);
  }

  // optional bool meta_data_only = 3;
  if (has_meta_data_only()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->meta_data_only(), output);
  }

  // optional uint32 num_prev_failed = 4;
  if (has_num_prev_failed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->num_prev_failed(), output);
  }

}

int CMsgPICSProductInfoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional bool meta_data_only = 3;
    if (has_meta_data_only()) {
      total_size += 1 + 1;
    }

    // optional uint32 num_prev_failed = 4;
    if (has_num_prev_failed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_prev_failed());
    }

  }
  // repeated .Sc.CMsgPICSProductInfoRequest.PackageInfo packages = 1;
  total_size += 1 * this->packages_size();
  for (int i = 0; i < this->packages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->packages(i));
  }

  // repeated .Sc.CMsgPICSProductInfoRequest.AppInfo apps = 2;
  total_size += 1 * this->apps_size();
  for (int i = 0; i < this->apps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->apps(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPICSProductInfoRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgPICSProductInfoRequest*>(&from));
}

void CMsgPICSProductInfoRequest::MergeFrom(const CMsgPICSProductInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  packages_.MergeFrom(from.packages_);
  apps_.MergeFrom(from.apps_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_meta_data_only()) {
      set_meta_data_only(from.meta_data_only());
    }
    if (from.has_num_prev_failed()) {
      set_num_prev_failed(from.num_prev_failed());
    }
  }
}

void CMsgPICSProductInfoRequest::CopyFrom(const CMsgPICSProductInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPICSProductInfoRequest::IsInitialized() const {

  return true;
}

void CMsgPICSProductInfoRequest::Swap(CMsgPICSProductInfoRequest* other) {
  if (other != this) {
    packages_.Swap(&other->packages_);
    apps_.Swap(&other->apps_);
    std::swap(meta_data_only_, other->meta_data_only_);
    std::swap(num_prev_failed_, other->num_prev_failed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgPICSProductInfoRequest::GetTypeName() const {
  return "Sc.CMsgPICSProductInfoRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPICSProductInfoResponse_AppInfo::kAppidFieldNumber;
const int CMsgPICSProductInfoResponse_AppInfo::kChangeNumberFieldNumber;
const int CMsgPICSProductInfoResponse_AppInfo::kMissingTokenFieldNumber;
const int CMsgPICSProductInfoResponse_AppInfo::kShaFieldNumber;
const int CMsgPICSProductInfoResponse_AppInfo::kBufferFieldNumber;
const int CMsgPICSProductInfoResponse_AppInfo::kOnlyPublicFieldNumber;
#endif  // !_MSC_VER

CMsgPICSProductInfoResponse_AppInfo::CMsgPICSProductInfoResponse_AppInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgPICSProductInfoResponse_AppInfo::InitAsDefaultInstance() {
}

CMsgPICSProductInfoResponse_AppInfo::CMsgPICSProductInfoResponse_AppInfo(const CMsgPICSProductInfoResponse_AppInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgPICSProductInfoResponse_AppInfo::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0u;
  change_number_ = 0u;
  missing_token_ = false;
  sha_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  buffer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  only_public_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPICSProductInfoResponse_AppInfo::~CMsgPICSProductInfoResponse_AppInfo() {
  SharedDtor();
}

void CMsgPICSProductInfoResponse_AppInfo::SharedDtor() {
  if (sha_ != &::google::protobuf::internal::kEmptyString) {
    delete sha_;
  }
  if (buffer_ != &::google::protobuf::internal::kEmptyString) {
    delete buffer_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgPICSProductInfoResponse_AppInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgPICSProductInfoResponse_AppInfo& CMsgPICSProductInfoResponse_AppInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgPICSProductInfoResponse_AppInfo* CMsgPICSProductInfoResponse_AppInfo::default_instance_ = NULL;

CMsgPICSProductInfoResponse_AppInfo* CMsgPICSProductInfoResponse_AppInfo::New() const {
  return new CMsgPICSProductInfoResponse_AppInfo;
}

void CMsgPICSProductInfoResponse_AppInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    appid_ = 0u;
    change_number_ = 0u;
    missing_token_ = false;
    if (has_sha()) {
      if (sha_ != &::google::protobuf::internal::kEmptyString) {
        sha_->clear();
      }
    }
    if (has_buffer()) {
      if (buffer_ != &::google::protobuf::internal::kEmptyString) {
        buffer_->clear();
      }
    }
    only_public_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgPICSProductInfoResponse_AppInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_change_number;
        break;
      }

      // optional uint32 change_number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &change_number_)));
          set_has_change_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_missing_token;
        break;
      }

      // optional bool missing_token = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_missing_token:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &missing_token_)));
          set_has_missing_token();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sha;
        break;
      }

      // optional bytes sha = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sha:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_buffer;
        break;
      }

      // optional bytes buffer = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buffer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buffer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_only_public;
        break;
      }

      // optional bool only_public = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_only_public:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &only_public_)));
          set_has_only_public();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgPICSProductInfoResponse_AppInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 appid = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint32 change_number = 2;
  if (has_change_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->change_number(), output);
  }

  // optional bool missing_token = 3;
  if (has_missing_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->missing_token(), output);
  }

  // optional bytes sha = 4;
  if (has_sha()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->sha(), output);
  }

  // optional bytes buffer = 5;
  if (has_buffer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->buffer(), output);
  }

  // optional bool only_public = 6;
  if (has_only_public()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->only_public(), output);
  }

}

int CMsgPICSProductInfoResponse_AppInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 change_number = 2;
    if (has_change_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->change_number());
    }

    // optional bool missing_token = 3;
    if (has_missing_token()) {
      total_size += 1 + 1;
    }

    // optional bytes sha = 4;
    if (has_sha()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha());
    }

    // optional bytes buffer = 5;
    if (has_buffer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->buffer());
    }

    // optional bool only_public = 6;
    if (has_only_public()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPICSProductInfoResponse_AppInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgPICSProductInfoResponse_AppInfo*>(&from));
}

void CMsgPICSProductInfoResponse_AppInfo::MergeFrom(const CMsgPICSProductInfoResponse_AppInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_change_number()) {
      set_change_number(from.change_number());
    }
    if (from.has_missing_token()) {
      set_missing_token(from.missing_token());
    }
    if (from.has_sha()) {
      set_sha(from.sha());
    }
    if (from.has_buffer()) {
      set_buffer(from.buffer());
    }
    if (from.has_only_public()) {
      set_only_public(from.only_public());
    }
  }
}

void CMsgPICSProductInfoResponse_AppInfo::CopyFrom(const CMsgPICSProductInfoResponse_AppInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPICSProductInfoResponse_AppInfo::IsInitialized() const {

  return true;
}

void CMsgPICSProductInfoResponse_AppInfo::Swap(CMsgPICSProductInfoResponse_AppInfo* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(change_number_, other->change_number_);
    std::swap(missing_token_, other->missing_token_);
    std::swap(sha_, other->sha_);
    std::swap(buffer_, other->buffer_);
    std::swap(only_public_, other->only_public_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgPICSProductInfoResponse_AppInfo::GetTypeName() const {
  return "Sc.CMsgPICSProductInfoResponse.AppInfo";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgPICSProductInfoResponse_PackageInfo::kPackageidFieldNumber;
const int CMsgPICSProductInfoResponse_PackageInfo::kChangeNumberFieldNumber;
const int CMsgPICSProductInfoResponse_PackageInfo::kMissingTokenFieldNumber;
const int CMsgPICSProductInfoResponse_PackageInfo::kShaFieldNumber;
const int CMsgPICSProductInfoResponse_PackageInfo::kBufferFieldNumber;
#endif  // !_MSC_VER

CMsgPICSProductInfoResponse_PackageInfo::CMsgPICSProductInfoResponse_PackageInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgPICSProductInfoResponse_PackageInfo::InitAsDefaultInstance() {
}

CMsgPICSProductInfoResponse_PackageInfo::CMsgPICSProductInfoResponse_PackageInfo(const CMsgPICSProductInfoResponse_PackageInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgPICSProductInfoResponse_PackageInfo::SharedCtor() {
  _cached_size_ = 0;
  packageid_ = 0u;
  change_number_ = 0u;
  missing_token_ = false;
  sha_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  buffer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPICSProductInfoResponse_PackageInfo::~CMsgPICSProductInfoResponse_PackageInfo() {
  SharedDtor();
}

void CMsgPICSProductInfoResponse_PackageInfo::SharedDtor() {
  if (sha_ != &::google::protobuf::internal::kEmptyString) {
    delete sha_;
  }
  if (buffer_ != &::google::protobuf::internal::kEmptyString) {
    delete buffer_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgPICSProductInfoResponse_PackageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgPICSProductInfoResponse_PackageInfo& CMsgPICSProductInfoResponse_PackageInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgPICSProductInfoResponse_PackageInfo* CMsgPICSProductInfoResponse_PackageInfo::default_instance_ = NULL;

CMsgPICSProductInfoResponse_PackageInfo* CMsgPICSProductInfoResponse_PackageInfo::New() const {
  return new CMsgPICSProductInfoResponse_PackageInfo;
}

void CMsgPICSProductInfoResponse_PackageInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packageid_ = 0u;
    change_number_ = 0u;
    missing_token_ = false;
    if (has_sha()) {
      if (sha_ != &::google::protobuf::internal::kEmptyString) {
        sha_->clear();
      }
    }
    if (has_buffer()) {
      if (buffer_ != &::google::protobuf::internal::kEmptyString) {
        buffer_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgPICSProductInfoResponse_PackageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 packageid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packageid_)));
          set_has_packageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_change_number;
        break;
      }

      // optional uint32 change_number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &change_number_)));
          set_has_change_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_missing_token;
        break;
      }

      // optional bool missing_token = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_missing_token:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &missing_token_)));
          set_has_missing_token();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sha;
        break;
      }

      // optional bytes sha = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sha:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_buffer;
        break;
      }

      // optional bytes buffer = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buffer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buffer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgPICSProductInfoResponse_PackageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 packageid = 1;
  if (has_packageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->packageid(), output);
  }

  // optional uint32 change_number = 2;
  if (has_change_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->change_number(), output);
  }

  // optional bool missing_token = 3;
  if (has_missing_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->missing_token(), output);
  }

  // optional bytes sha = 4;
  if (has_sha()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->sha(), output);
  }

  // optional bytes buffer = 5;
  if (has_buffer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->buffer(), output);
  }

}

int CMsgPICSProductInfoResponse_PackageInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 packageid = 1;
    if (has_packageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packageid());
    }

    // optional uint32 change_number = 2;
    if (has_change_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->change_number());
    }

    // optional bool missing_token = 3;
    if (has_missing_token()) {
      total_size += 1 + 1;
    }

    // optional bytes sha = 4;
    if (has_sha()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha());
    }

    // optional bytes buffer = 5;
    if (has_buffer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->buffer());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPICSProductInfoResponse_PackageInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgPICSProductInfoResponse_PackageInfo*>(&from));
}

void CMsgPICSProductInfoResponse_PackageInfo::MergeFrom(const CMsgPICSProductInfoResponse_PackageInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packageid()) {
      set_packageid(from.packageid());
    }
    if (from.has_change_number()) {
      set_change_number(from.change_number());
    }
    if (from.has_missing_token()) {
      set_missing_token(from.missing_token());
    }
    if (from.has_sha()) {
      set_sha(from.sha());
    }
    if (from.has_buffer()) {
      set_buffer(from.buffer());
    }
  }
}

void CMsgPICSProductInfoResponse_PackageInfo::CopyFrom(const CMsgPICSProductInfoResponse_PackageInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPICSProductInfoResponse_PackageInfo::IsInitialized() const {

  return true;
}

void CMsgPICSProductInfoResponse_PackageInfo::Swap(CMsgPICSProductInfoResponse_PackageInfo* other) {
  if (other != this) {
    std::swap(packageid_, other->packageid_);
    std::swap(change_number_, other->change_number_);
    std::swap(missing_token_, other->missing_token_);
    std::swap(sha_, other->sha_);
    std::swap(buffer_, other->buffer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgPICSProductInfoResponse_PackageInfo::GetTypeName() const {
  return "Sc.CMsgPICSProductInfoResponse.PackageInfo";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgPICSProductInfoResponse::kAppsFieldNumber;
const int CMsgPICSProductInfoResponse::kUnknownAppidsFieldNumber;
const int CMsgPICSProductInfoResponse::kPackagesFieldNumber;
const int CMsgPICSProductInfoResponse::kUnknownPackageidsFieldNumber;
const int CMsgPICSProductInfoResponse::kMetaDataOnlyFieldNumber;
const int CMsgPICSProductInfoResponse::kResponsePendingFieldNumber;
#endif  // !_MSC_VER

CMsgPICSProductInfoResponse::CMsgPICSProductInfoResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgPICSProductInfoResponse::InitAsDefaultInstance() {
}

CMsgPICSProductInfoResponse::CMsgPICSProductInfoResponse(const CMsgPICSProductInfoResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgPICSProductInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  meta_data_only_ = false;
  response_pending_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPICSProductInfoResponse::~CMsgPICSProductInfoResponse() {
  SharedDtor();
}

void CMsgPICSProductInfoResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgPICSProductInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgPICSProductInfoResponse& CMsgPICSProductInfoResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgPICSProductInfoResponse* CMsgPICSProductInfoResponse::default_instance_ = NULL;

CMsgPICSProductInfoResponse* CMsgPICSProductInfoResponse::New() const {
  return new CMsgPICSProductInfoResponse;
}

void CMsgPICSProductInfoResponse::Clear() {
  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    meta_data_only_ = false;
    response_pending_ = false;
  }
  apps_.Clear();
  unknown_appids_.Clear();
  packages_.Clear();
  unknown_packageids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgPICSProductInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Sc.CMsgPICSProductInfoResponse.AppInfo apps = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_apps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_apps()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_apps;
        if (input->ExpectTag(16)) goto parse_unknown_appids;
        break;
      }

      // repeated uint32 unknown_appids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unknown_appids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_unknown_appids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_unknown_appids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_unknown_appids;
        if (input->ExpectTag(26)) goto parse_packages;
        break;
      }

      // repeated .Sc.CMsgPICSProductInfoResponse.PackageInfo packages = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_packages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_packages()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_packages;
        if (input->ExpectTag(32)) goto parse_unknown_packageids;
        break;
      }

      // repeated uint32 unknown_packageids = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unknown_packageids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_unknown_packageids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_unknown_packageids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_unknown_packageids;
        if (input->ExpectTag(40)) goto parse_meta_data_only;
        break;
      }

      // optional bool meta_data_only = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_meta_data_only:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &meta_data_only_)));
          set_has_meta_data_only();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_response_pending;
        break;
      }

      // optional bool response_pending = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_response_pending:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &response_pending_)));
          set_has_response_pending();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgPICSProductInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Sc.CMsgPICSProductInfoResponse.AppInfo apps = 1;
  for (int i = 0; i < this->apps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->apps(i), output);
  }

  // repeated uint32 unknown_appids = 2;
  for (int i = 0; i < this->unknown_appids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->unknown_appids(i), output);
  }

  // repeated .Sc.CMsgPICSProductInfoResponse.PackageInfo packages = 3;
  for (int i = 0; i < this->packages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->packages(i), output);
  }

  // repeated uint32 unknown_packageids = 4;
  for (int i = 0; i < this->unknown_packageids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->unknown_packageids(i), output);
  }

  // optional bool meta_data_only = 5;
  if (has_meta_data_only()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->meta_data_only(), output);
  }

  // optional bool response_pending = 6;
  if (has_response_pending()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->response_pending(), output);
  }

}

int CMsgPICSProductInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    // optional bool meta_data_only = 5;
    if (has_meta_data_only()) {
      total_size += 1 + 1;
    }

    // optional bool response_pending = 6;
    if (has_response_pending()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Sc.CMsgPICSProductInfoResponse.AppInfo apps = 1;
  total_size += 1 * this->apps_size();
  for (int i = 0; i < this->apps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->apps(i));
  }

  // repeated uint32 unknown_appids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->unknown_appids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->unknown_appids(i));
    }
    total_size += 1 * this->unknown_appids_size() + data_size;
  }

  // repeated .Sc.CMsgPICSProductInfoResponse.PackageInfo packages = 3;
  total_size += 1 * this->packages_size();
  for (int i = 0; i < this->packages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->packages(i));
  }

  // repeated uint32 unknown_packageids = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->unknown_packageids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->unknown_packageids(i));
    }
    total_size += 1 * this->unknown_packageids_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPICSProductInfoResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgPICSProductInfoResponse*>(&from));
}

void CMsgPICSProductInfoResponse::MergeFrom(const CMsgPICSProductInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  apps_.MergeFrom(from.apps_);
  unknown_appids_.MergeFrom(from.unknown_appids_);
  packages_.MergeFrom(from.packages_);
  unknown_packageids_.MergeFrom(from.unknown_packageids_);
  if (from._has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    if (from.has_meta_data_only()) {
      set_meta_data_only(from.meta_data_only());
    }
    if (from.has_response_pending()) {
      set_response_pending(from.response_pending());
    }
  }
}

void CMsgPICSProductInfoResponse::CopyFrom(const CMsgPICSProductInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPICSProductInfoResponse::IsInitialized() const {

  return true;
}

void CMsgPICSProductInfoResponse::Swap(CMsgPICSProductInfoResponse* other) {
  if (other != this) {
    apps_.Swap(&other->apps_);
    unknown_appids_.Swap(&other->unknown_appids_);
    packages_.Swap(&other->packages_);
    unknown_packageids_.Swap(&other->unknown_packageids_);
    std::swap(meta_data_only_, other->meta_data_only_);
    std::swap(response_pending_, other->response_pending_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgPICSProductInfoResponse::GetTypeName() const {
  return "Sc.CMsgPICSProductInfoResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPICSAccessTokenRequest::kPackageidsFieldNumber;
const int CMsgPICSAccessTokenRequest::kAppidsFieldNumber;
#endif  // !_MSC_VER

CMsgPICSAccessTokenRequest::CMsgPICSAccessTokenRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgPICSAccessTokenRequest::InitAsDefaultInstance() {
}

CMsgPICSAccessTokenRequest::CMsgPICSAccessTokenRequest(const CMsgPICSAccessTokenRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgPICSAccessTokenRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPICSAccessTokenRequest::~CMsgPICSAccessTokenRequest() {
  SharedDtor();
}

void CMsgPICSAccessTokenRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgPICSAccessTokenRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgPICSAccessTokenRequest& CMsgPICSAccessTokenRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgPICSAccessTokenRequest* CMsgPICSAccessTokenRequest::default_instance_ = NULL;

CMsgPICSAccessTokenRequest* CMsgPICSAccessTokenRequest::New() const {
  return new CMsgPICSAccessTokenRequest;
}

void CMsgPICSAccessTokenRequest::Clear() {
  packageids_.Clear();
  appids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgPICSAccessTokenRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 packageids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_packageids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_packageids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_packageids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_packageids;
        if (input->ExpectTag(16)) goto parse_appids;
        break;
      }

      // repeated uint32 appids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_appids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_appids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_appids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgPICSAccessTokenRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 packageids = 1;
  for (int i = 0; i < this->packageids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->packageids(i), output);
  }

  // repeated uint32 appids = 2;
  for (int i = 0; i < this->appids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->appids(i), output);
  }

}

int CMsgPICSAccessTokenRequest::ByteSize() const {
  int total_size = 0;

  // repeated uint32 packageids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->packageids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->packageids(i));
    }
    total_size += 1 * this->packageids_size() + data_size;
  }

  // repeated uint32 appids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->appids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->appids(i));
    }
    total_size += 1 * this->appids_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPICSAccessTokenRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgPICSAccessTokenRequest*>(&from));
}

void CMsgPICSAccessTokenRequest::MergeFrom(const CMsgPICSAccessTokenRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  packageids_.MergeFrom(from.packageids_);
  appids_.MergeFrom(from.appids_);
}

void CMsgPICSAccessTokenRequest::CopyFrom(const CMsgPICSAccessTokenRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPICSAccessTokenRequest::IsInitialized() const {

  return true;
}

void CMsgPICSAccessTokenRequest::Swap(CMsgPICSAccessTokenRequest* other) {
  if (other != this) {
    packageids_.Swap(&other->packageids_);
    appids_.Swap(&other->appids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgPICSAccessTokenRequest::GetTypeName() const {
  return "Sc.CMsgPICSAccessTokenRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgPICSAccessTokenResponse_PackageToken::kPackageidFieldNumber;
const int CMsgPICSAccessTokenResponse_PackageToken::kAccessTokenFieldNumber;
#endif  // !_MSC_VER

CMsgPICSAccessTokenResponse_PackageToken::CMsgPICSAccessTokenResponse_PackageToken()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgPICSAccessTokenResponse_PackageToken::InitAsDefaultInstance() {
}

CMsgPICSAccessTokenResponse_PackageToken::CMsgPICSAccessTokenResponse_PackageToken(const CMsgPICSAccessTokenResponse_PackageToken& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgPICSAccessTokenResponse_PackageToken::SharedCtor() {
  _cached_size_ = 0;
  packageid_ = 0u;
  access_token_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPICSAccessTokenResponse_PackageToken::~CMsgPICSAccessTokenResponse_PackageToken() {
  SharedDtor();
}

void CMsgPICSAccessTokenResponse_PackageToken::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgPICSAccessTokenResponse_PackageToken::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgPICSAccessTokenResponse_PackageToken& CMsgPICSAccessTokenResponse_PackageToken::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgPICSAccessTokenResponse_PackageToken* CMsgPICSAccessTokenResponse_PackageToken::default_instance_ = NULL;

CMsgPICSAccessTokenResponse_PackageToken* CMsgPICSAccessTokenResponse_PackageToken::New() const {
  return new CMsgPICSAccessTokenResponse_PackageToken;
}

void CMsgPICSAccessTokenResponse_PackageToken::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packageid_ = 0u;
    access_token_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgPICSAccessTokenResponse_PackageToken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 packageid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packageid_)));
          set_has_packageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_access_token;
        break;
      }

      // optional uint64 access_token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_access_token:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &access_token_)));
          set_has_access_token();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgPICSAccessTokenResponse_PackageToken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 packageid = 1;
  if (has_packageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->packageid(), output);
  }

  // optional uint64 access_token = 2;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->access_token(), output);
  }

}

int CMsgPICSAccessTokenResponse_PackageToken::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 packageid = 1;
    if (has_packageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packageid());
    }

    // optional uint64 access_token = 2;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->access_token());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPICSAccessTokenResponse_PackageToken::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgPICSAccessTokenResponse_PackageToken*>(&from));
}

void CMsgPICSAccessTokenResponse_PackageToken::MergeFrom(const CMsgPICSAccessTokenResponse_PackageToken& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packageid()) {
      set_packageid(from.packageid());
    }
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
  }
}

void CMsgPICSAccessTokenResponse_PackageToken::CopyFrom(const CMsgPICSAccessTokenResponse_PackageToken& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPICSAccessTokenResponse_PackageToken::IsInitialized() const {

  return true;
}

void CMsgPICSAccessTokenResponse_PackageToken::Swap(CMsgPICSAccessTokenResponse_PackageToken* other) {
  if (other != this) {
    std::swap(packageid_, other->packageid_);
    std::swap(access_token_, other->access_token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgPICSAccessTokenResponse_PackageToken::GetTypeName() const {
  return "Sc.CMsgPICSAccessTokenResponse.PackageToken";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgPICSAccessTokenResponse_AppToken::kAppidFieldNumber;
const int CMsgPICSAccessTokenResponse_AppToken::kAccessTokenFieldNumber;
#endif  // !_MSC_VER

CMsgPICSAccessTokenResponse_AppToken::CMsgPICSAccessTokenResponse_AppToken()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgPICSAccessTokenResponse_AppToken::InitAsDefaultInstance() {
}

CMsgPICSAccessTokenResponse_AppToken::CMsgPICSAccessTokenResponse_AppToken(const CMsgPICSAccessTokenResponse_AppToken& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgPICSAccessTokenResponse_AppToken::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0u;
  access_token_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPICSAccessTokenResponse_AppToken::~CMsgPICSAccessTokenResponse_AppToken() {
  SharedDtor();
}

void CMsgPICSAccessTokenResponse_AppToken::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgPICSAccessTokenResponse_AppToken::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgPICSAccessTokenResponse_AppToken& CMsgPICSAccessTokenResponse_AppToken::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgPICSAccessTokenResponse_AppToken* CMsgPICSAccessTokenResponse_AppToken::default_instance_ = NULL;

CMsgPICSAccessTokenResponse_AppToken* CMsgPICSAccessTokenResponse_AppToken::New() const {
  return new CMsgPICSAccessTokenResponse_AppToken;
}

void CMsgPICSAccessTokenResponse_AppToken::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    appid_ = 0u;
    access_token_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgPICSAccessTokenResponse_AppToken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_access_token;
        break;
      }

      // optional uint64 access_token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_access_token:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &access_token_)));
          set_has_access_token();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgPICSAccessTokenResponse_AppToken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 appid = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint64 access_token = 2;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->access_token(), output);
  }

}

int CMsgPICSAccessTokenResponse_AppToken::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint64 access_token = 2;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->access_token());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPICSAccessTokenResponse_AppToken::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgPICSAccessTokenResponse_AppToken*>(&from));
}

void CMsgPICSAccessTokenResponse_AppToken::MergeFrom(const CMsgPICSAccessTokenResponse_AppToken& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
  }
}

void CMsgPICSAccessTokenResponse_AppToken::CopyFrom(const CMsgPICSAccessTokenResponse_AppToken& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPICSAccessTokenResponse_AppToken::IsInitialized() const {

  return true;
}

void CMsgPICSAccessTokenResponse_AppToken::Swap(CMsgPICSAccessTokenResponse_AppToken* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(access_token_, other->access_token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgPICSAccessTokenResponse_AppToken::GetTypeName() const {
  return "Sc.CMsgPICSAccessTokenResponse.AppToken";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgPICSAccessTokenResponse::kPackageAccessTokensFieldNumber;
const int CMsgPICSAccessTokenResponse::kPackageDeniedTokensFieldNumber;
const int CMsgPICSAccessTokenResponse::kAppAccessTokensFieldNumber;
const int CMsgPICSAccessTokenResponse::kAppDeniedTokensFieldNumber;
#endif  // !_MSC_VER

CMsgPICSAccessTokenResponse::CMsgPICSAccessTokenResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgPICSAccessTokenResponse::InitAsDefaultInstance() {
}

CMsgPICSAccessTokenResponse::CMsgPICSAccessTokenResponse(const CMsgPICSAccessTokenResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgPICSAccessTokenResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgPICSAccessTokenResponse::~CMsgPICSAccessTokenResponse() {
  SharedDtor();
}

void CMsgPICSAccessTokenResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgPICSAccessTokenResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgPICSAccessTokenResponse& CMsgPICSAccessTokenResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgPICSAccessTokenResponse* CMsgPICSAccessTokenResponse::default_instance_ = NULL;

CMsgPICSAccessTokenResponse* CMsgPICSAccessTokenResponse::New() const {
  return new CMsgPICSAccessTokenResponse;
}

void CMsgPICSAccessTokenResponse::Clear() {
  package_access_tokens_.Clear();
  package_denied_tokens_.Clear();
  app_access_tokens_.Clear();
  app_denied_tokens_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgPICSAccessTokenResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Sc.CMsgPICSAccessTokenResponse.PackageToken package_access_tokens = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_package_access_tokens:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_package_access_tokens()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_package_access_tokens;
        if (input->ExpectTag(16)) goto parse_package_denied_tokens;
        break;
      }

      // repeated uint32 package_denied_tokens = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_package_denied_tokens:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_package_denied_tokens())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_package_denied_tokens())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_package_denied_tokens;
        if (input->ExpectTag(26)) goto parse_app_access_tokens;
        break;
      }

      // repeated .Sc.CMsgPICSAccessTokenResponse.AppToken app_access_tokens = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app_access_tokens:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_app_access_tokens()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_app_access_tokens;
        if (input->ExpectTag(32)) goto parse_app_denied_tokens;
        break;
      }

      // repeated uint32 app_denied_tokens = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_app_denied_tokens:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_app_denied_tokens())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_app_denied_tokens())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_app_denied_tokens;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgPICSAccessTokenResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Sc.CMsgPICSAccessTokenResponse.PackageToken package_access_tokens = 1;
  for (int i = 0; i < this->package_access_tokens_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->package_access_tokens(i), output);
  }

  // repeated uint32 package_denied_tokens = 2;
  for (int i = 0; i < this->package_denied_tokens_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->package_denied_tokens(i), output);
  }

  // repeated .Sc.CMsgPICSAccessTokenResponse.AppToken app_access_tokens = 3;
  for (int i = 0; i < this->app_access_tokens_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->app_access_tokens(i), output);
  }

  // repeated uint32 app_denied_tokens = 4;
  for (int i = 0; i < this->app_denied_tokens_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->app_denied_tokens(i), output);
  }

}

int CMsgPICSAccessTokenResponse::ByteSize() const {
  int total_size = 0;

  // repeated .Sc.CMsgPICSAccessTokenResponse.PackageToken package_access_tokens = 1;
  total_size += 1 * this->package_access_tokens_size();
  for (int i = 0; i < this->package_access_tokens_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->package_access_tokens(i));
  }

  // repeated uint32 package_denied_tokens = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->package_denied_tokens_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->package_denied_tokens(i));
    }
    total_size += 1 * this->package_denied_tokens_size() + data_size;
  }

  // repeated .Sc.CMsgPICSAccessTokenResponse.AppToken app_access_tokens = 3;
  total_size += 1 * this->app_access_tokens_size();
  for (int i = 0; i < this->app_access_tokens_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->app_access_tokens(i));
  }

  // repeated uint32 app_denied_tokens = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->app_denied_tokens_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->app_denied_tokens(i));
    }
    total_size += 1 * this->app_denied_tokens_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPICSAccessTokenResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgPICSAccessTokenResponse*>(&from));
}

void CMsgPICSAccessTokenResponse::MergeFrom(const CMsgPICSAccessTokenResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  package_access_tokens_.MergeFrom(from.package_access_tokens_);
  package_denied_tokens_.MergeFrom(from.package_denied_tokens_);
  app_access_tokens_.MergeFrom(from.app_access_tokens_);
  app_denied_tokens_.MergeFrom(from.app_denied_tokens_);
}

void CMsgPICSAccessTokenResponse::CopyFrom(const CMsgPICSAccessTokenResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPICSAccessTokenResponse::IsInitialized() const {

  return true;
}

void CMsgPICSAccessTokenResponse::Swap(CMsgPICSAccessTokenResponse* other) {
  if (other != this) {
    package_access_tokens_.Swap(&other->package_access_tokens_);
    package_denied_tokens_.Swap(&other->package_denied_tokens_);
    app_access_tokens_.Swap(&other->app_access_tokens_);
    app_denied_tokens_.Swap(&other->app_denied_tokens_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgPICSAccessTokenResponse::GetTypeName() const {
  return "Sc.CMsgPICSAccessTokenResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUFSGetUGCDetails::kHcontentFieldNumber;
#endif  // !_MSC_VER

CMsgClientUFSGetUGCDetails::CMsgClientUFSGetUGCDetails()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUFSGetUGCDetails::InitAsDefaultInstance() {
}

CMsgClientUFSGetUGCDetails::CMsgClientUFSGetUGCDetails(const CMsgClientUFSGetUGCDetails& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUFSGetUGCDetails::SharedCtor() {
  _cached_size_ = 0;
  hcontent_ = GOOGLE_ULONGLONG(18446744073709551615);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUFSGetUGCDetails::~CMsgClientUFSGetUGCDetails() {
  SharedDtor();
}

void CMsgClientUFSGetUGCDetails::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUFSGetUGCDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUFSGetUGCDetails& CMsgClientUFSGetUGCDetails::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUFSGetUGCDetails* CMsgClientUFSGetUGCDetails::default_instance_ = NULL;

CMsgClientUFSGetUGCDetails* CMsgClientUFSGetUGCDetails::New() const {
  return new CMsgClientUFSGetUGCDetails;
}

void CMsgClientUFSGetUGCDetails::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hcontent_ = GOOGLE_ULONGLONG(18446744073709551615);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUFSGetUGCDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 hcontent = 1 [default = 18446744073709551615];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &hcontent_)));
          set_has_hcontent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUFSGetUGCDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 hcontent = 1 [default = 18446744073709551615];
  if (has_hcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->hcontent(), output);
  }

}

int CMsgClientUFSGetUGCDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 hcontent = 1 [default = 18446744073709551615];
    if (has_hcontent()) {
      total_size += 1 + 8;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUFSGetUGCDetails::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUFSGetUGCDetails*>(&from));
}

void CMsgClientUFSGetUGCDetails::MergeFrom(const CMsgClientUFSGetUGCDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hcontent()) {
      set_hcontent(from.hcontent());
    }
  }
}

void CMsgClientUFSGetUGCDetails::CopyFrom(const CMsgClientUFSGetUGCDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSGetUGCDetails::IsInitialized() const {

  return true;
}

void CMsgClientUFSGetUGCDetails::Swap(CMsgClientUFSGetUGCDetails* other) {
  if (other != this) {
    std::swap(hcontent_, other->hcontent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUFSGetUGCDetails::GetTypeName() const {
  return "Sc.CMsgClientUFSGetUGCDetails";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUFSGetUGCDetailsResponse::kEresultFieldNumber;
const int CMsgClientUFSGetUGCDetailsResponse::kUrlFieldNumber;
const int CMsgClientUFSGetUGCDetailsResponse::kAppIdFieldNumber;
const int CMsgClientUFSGetUGCDetailsResponse::kFilenameFieldNumber;
const int CMsgClientUFSGetUGCDetailsResponse::kSteamidCreatorFieldNumber;
const int CMsgClientUFSGetUGCDetailsResponse::kFileSizeFieldNumber;
#endif  // !_MSC_VER

CMsgClientUFSGetUGCDetailsResponse::CMsgClientUFSGetUGCDetailsResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUFSGetUGCDetailsResponse::InitAsDefaultInstance() {
}

CMsgClientUFSGetUGCDetailsResponse::CMsgClientUFSGetUGCDetailsResponse(const CMsgClientUFSGetUGCDetailsResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUFSGetUGCDetailsResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  app_id_ = 0u;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  steamid_creator_ = GOOGLE_ULONGLONG(0);
  file_size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUFSGetUGCDetailsResponse::~CMsgClientUFSGetUGCDetailsResponse() {
  SharedDtor();
}

void CMsgClientUFSGetUGCDetailsResponse::SharedDtor() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUFSGetUGCDetailsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUFSGetUGCDetailsResponse& CMsgClientUFSGetUGCDetailsResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUFSGetUGCDetailsResponse* CMsgClientUFSGetUGCDetailsResponse::default_instance_ = NULL;

CMsgClientUFSGetUGCDetailsResponse* CMsgClientUFSGetUGCDetailsResponse::New() const {
  return new CMsgClientUFSGetUGCDetailsResponse;
}

void CMsgClientUFSGetUGCDetailsResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
    app_id_ = 0u;
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    steamid_creator_ = GOOGLE_ULONGLONG(0);
    file_size_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUFSGetUGCDetailsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }

      // optional string url = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_app_id;
        break;
      }

      // optional uint32 app_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_app_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_filename;
        break;
      }

      // optional string filename = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_steamid_creator;
        break;
      }

      // optional fixed64 steamid_creator = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steamid_creator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_creator_)));
          set_has_steamid_creator();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_file_size;
        break;
      }

      // optional uint32 file_size = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_size_)));
          set_has_file_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUFSGetUGCDetailsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional string url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->url(), output);
  }

  // optional uint32 app_id = 3;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->app_id(), output);
  }

  // optional string filename = 4;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->filename(), output);
  }

  // optional fixed64 steamid_creator = 5;
  if (has_steamid_creator()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->steamid_creator(), output);
  }

  // optional uint32 file_size = 6;
  if (has_file_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->file_size(), output);
  }

}

int CMsgClientUFSGetUGCDetailsResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional uint32 app_id = 3;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional string filename = 4;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional fixed64 steamid_creator = 5;
    if (has_steamid_creator()) {
      total_size += 1 + 8;
    }

    // optional uint32 file_size = 6;
    if (has_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_size());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUFSGetUGCDetailsResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUFSGetUGCDetailsResponse*>(&from));
}

void CMsgClientUFSGetUGCDetailsResponse::MergeFrom(const CMsgClientUFSGetUGCDetailsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_steamid_creator()) {
      set_steamid_creator(from.steamid_creator());
    }
    if (from.has_file_size()) {
      set_file_size(from.file_size());
    }
  }
}

void CMsgClientUFSGetUGCDetailsResponse::CopyFrom(const CMsgClientUFSGetUGCDetailsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSGetUGCDetailsResponse::IsInitialized() const {

  return true;
}

void CMsgClientUFSGetUGCDetailsResponse::Swap(CMsgClientUFSGetUGCDetailsResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(url_, other->url_);
    std::swap(app_id_, other->app_id_);
    std::swap(filename_, other->filename_);
    std::swap(steamid_creator_, other->steamid_creator_);
    std::swap(file_size_, other->file_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUFSGetUGCDetailsResponse::GetTypeName() const {
  return "Sc.CMsgClientUFSGetUGCDetailsResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUFSGetSingleFileInfo::kAppIdFieldNumber;
const int CMsgClientUFSGetSingleFileInfo::kFileNameFieldNumber;
#endif  // !_MSC_VER

CMsgClientUFSGetSingleFileInfo::CMsgClientUFSGetSingleFileInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUFSGetSingleFileInfo::InitAsDefaultInstance() {
}

CMsgClientUFSGetSingleFileInfo::CMsgClientUFSGetSingleFileInfo(const CMsgClientUFSGetSingleFileInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUFSGetSingleFileInfo::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUFSGetSingleFileInfo::~CMsgClientUFSGetSingleFileInfo() {
  SharedDtor();
}

void CMsgClientUFSGetSingleFileInfo::SharedDtor() {
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUFSGetSingleFileInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUFSGetSingleFileInfo& CMsgClientUFSGetSingleFileInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUFSGetSingleFileInfo* CMsgClientUFSGetSingleFileInfo::default_instance_ = NULL;

CMsgClientUFSGetSingleFileInfo* CMsgClientUFSGetSingleFileInfo::New() const {
  return new CMsgClientUFSGetSingleFileInfo;
}

void CMsgClientUFSGetSingleFileInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::kEmptyString) {
        file_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUFSGetSingleFileInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_file_name;
        break;
      }

      // optional string file_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUFSGetSingleFileInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional string file_name = 2;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->file_name(), output);
  }

}

int CMsgClientUFSGetSingleFileInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional string file_name = 2;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUFSGetSingleFileInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUFSGetSingleFileInfo*>(&from));
}

void CMsgClientUFSGetSingleFileInfo::MergeFrom(const CMsgClientUFSGetSingleFileInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
  }
}

void CMsgClientUFSGetSingleFileInfo::CopyFrom(const CMsgClientUFSGetSingleFileInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSGetSingleFileInfo::IsInitialized() const {

  return true;
}

void CMsgClientUFSGetSingleFileInfo::Swap(CMsgClientUFSGetSingleFileInfo* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(file_name_, other->file_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUFSGetSingleFileInfo::GetTypeName() const {
  return "Sc.CMsgClientUFSGetSingleFileInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUFSGetSingleFileInfoResponse::kEresultFieldNumber;
const int CMsgClientUFSGetSingleFileInfoResponse::kAppIdFieldNumber;
const int CMsgClientUFSGetSingleFileInfoResponse::kFileNameFieldNumber;
const int CMsgClientUFSGetSingleFileInfoResponse::kShaFileFieldNumber;
const int CMsgClientUFSGetSingleFileInfoResponse::kTimeStampFieldNumber;
const int CMsgClientUFSGetSingleFileInfoResponse::kRawFileSizeFieldNumber;
const int CMsgClientUFSGetSingleFileInfoResponse::kIsExplicitDeleteFieldNumber;
#endif  // !_MSC_VER

CMsgClientUFSGetSingleFileInfoResponse::CMsgClientUFSGetSingleFileInfoResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUFSGetSingleFileInfoResponse::InitAsDefaultInstance() {
}

CMsgClientUFSGetSingleFileInfoResponse::CMsgClientUFSGetSingleFileInfoResponse(const CMsgClientUFSGetSingleFileInfoResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUFSGetSingleFileInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  app_id_ = 0u;
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sha_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_stamp_ = GOOGLE_ULONGLONG(0);
  raw_file_size_ = 0u;
  is_explicit_delete_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUFSGetSingleFileInfoResponse::~CMsgClientUFSGetSingleFileInfoResponse() {
  SharedDtor();
}

void CMsgClientUFSGetSingleFileInfoResponse::SharedDtor() {
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_name_;
  }
  if (sha_file_ != &::google::protobuf::internal::kEmptyString) {
    delete sha_file_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUFSGetSingleFileInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUFSGetSingleFileInfoResponse& CMsgClientUFSGetSingleFileInfoResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUFSGetSingleFileInfoResponse* CMsgClientUFSGetSingleFileInfoResponse::default_instance_ = NULL;

CMsgClientUFSGetSingleFileInfoResponse* CMsgClientUFSGetSingleFileInfoResponse::New() const {
  return new CMsgClientUFSGetSingleFileInfoResponse;
}

void CMsgClientUFSGetSingleFileInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    app_id_ = 0u;
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::kEmptyString) {
        file_name_->clear();
      }
    }
    if (has_sha_file()) {
      if (sha_file_ != &::google::protobuf::internal::kEmptyString) {
        sha_file_->clear();
      }
    }
    time_stamp_ = GOOGLE_ULONGLONG(0);
    raw_file_size_ = 0u;
    is_explicit_delete_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUFSGetSingleFileInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_app_id;
        break;
      }

      // optional uint32 app_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_app_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_file_name;
        break;
      }

      // optional string file_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sha_file;
        break;
      }

      // optional bytes sha_file = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sha_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_time_stamp;
        break;
      }

      // optional uint64 time_stamp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_raw_file_size;
        break;
      }

      // optional uint32 raw_file_size = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_raw_file_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raw_file_size_)));
          set_has_raw_file_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_explicit_delete;
        break;
      }

      // optional bool is_explicit_delete = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_explicit_delete:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_explicit_delete_)));
          set_has_is_explicit_delete();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUFSGetSingleFileInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional uint32 app_id = 2;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->app_id(), output);
  }

  // optional string file_name = 3;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->file_name(), output);
  }

  // optional bytes sha_file = 4;
  if (has_sha_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->sha_file(), output);
  }

  // optional uint64 time_stamp = 5;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->time_stamp(), output);
  }

  // optional uint32 raw_file_size = 6;
  if (has_raw_file_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->raw_file_size(), output);
  }

  // optional bool is_explicit_delete = 7;
  if (has_is_explicit_delete()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_explicit_delete(), output);
  }

}

int CMsgClientUFSGetSingleFileInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional uint32 app_id = 2;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional string file_name = 3;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // optional bytes sha_file = 4;
    if (has_sha_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha_file());
    }

    // optional uint64 time_stamp = 5;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_stamp());
    }

    // optional uint32 raw_file_size = 6;
    if (has_raw_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raw_file_size());
    }

    // optional bool is_explicit_delete = 7;
    if (has_is_explicit_delete()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUFSGetSingleFileInfoResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUFSGetSingleFileInfoResponse*>(&from));
}

void CMsgClientUFSGetSingleFileInfoResponse::MergeFrom(const CMsgClientUFSGetSingleFileInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
    if (from.has_sha_file()) {
      set_sha_file(from.sha_file());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
    if (from.has_raw_file_size()) {
      set_raw_file_size(from.raw_file_size());
    }
    if (from.has_is_explicit_delete()) {
      set_is_explicit_delete(from.is_explicit_delete());
    }
  }
}

void CMsgClientUFSGetSingleFileInfoResponse::CopyFrom(const CMsgClientUFSGetSingleFileInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSGetSingleFileInfoResponse::IsInitialized() const {

  return true;
}

void CMsgClientUFSGetSingleFileInfoResponse::Swap(CMsgClientUFSGetSingleFileInfoResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(app_id_, other->app_id_);
    std::swap(file_name_, other->file_name_);
    std::swap(sha_file_, other->sha_file_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(raw_file_size_, other->raw_file_size_);
    std::swap(is_explicit_delete_, other->is_explicit_delete_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUFSGetSingleFileInfoResponse::GetTypeName() const {
  return "Sc.CMsgClientUFSGetSingleFileInfoResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUFSShareFile::kAppIdFieldNumber;
const int CMsgClientUFSShareFile::kFileNameFieldNumber;
#endif  // !_MSC_VER

CMsgClientUFSShareFile::CMsgClientUFSShareFile()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUFSShareFile::InitAsDefaultInstance() {
}

CMsgClientUFSShareFile::CMsgClientUFSShareFile(const CMsgClientUFSShareFile& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUFSShareFile::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUFSShareFile::~CMsgClientUFSShareFile() {
  SharedDtor();
}

void CMsgClientUFSShareFile::SharedDtor() {
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUFSShareFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUFSShareFile& CMsgClientUFSShareFile::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUFSShareFile* CMsgClientUFSShareFile::default_instance_ = NULL;

CMsgClientUFSShareFile* CMsgClientUFSShareFile::New() const {
  return new CMsgClientUFSShareFile;
}

void CMsgClientUFSShareFile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::kEmptyString) {
        file_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUFSShareFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_file_name;
        break;
      }

      // optional string file_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUFSShareFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional string file_name = 2;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->file_name(), output);
  }

}

int CMsgClientUFSShareFile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional string file_name = 2;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUFSShareFile::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUFSShareFile*>(&from));
}

void CMsgClientUFSShareFile::MergeFrom(const CMsgClientUFSShareFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
  }
}

void CMsgClientUFSShareFile::CopyFrom(const CMsgClientUFSShareFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSShareFile::IsInitialized() const {

  return true;
}

void CMsgClientUFSShareFile::Swap(CMsgClientUFSShareFile* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(file_name_, other->file_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUFSShareFile::GetTypeName() const {
  return "Sc.CMsgClientUFSShareFile";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUFSShareFileResponse::kEresultFieldNumber;
const int CMsgClientUFSShareFileResponse::kHcontentFieldNumber;
#endif  // !_MSC_VER

CMsgClientUFSShareFileResponse::CMsgClientUFSShareFileResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUFSShareFileResponse::InitAsDefaultInstance() {
}

CMsgClientUFSShareFileResponse::CMsgClientUFSShareFileResponse(const CMsgClientUFSShareFileResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUFSShareFileResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  hcontent_ = GOOGLE_ULONGLONG(18446744073709551615);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUFSShareFileResponse::~CMsgClientUFSShareFileResponse() {
  SharedDtor();
}

void CMsgClientUFSShareFileResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUFSShareFileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUFSShareFileResponse& CMsgClientUFSShareFileResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUFSShareFileResponse* CMsgClientUFSShareFileResponse::default_instance_ = NULL;

CMsgClientUFSShareFileResponse* CMsgClientUFSShareFileResponse::New() const {
  return new CMsgClientUFSShareFileResponse;
}

void CMsgClientUFSShareFileResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    hcontent_ = GOOGLE_ULONGLONG(18446744073709551615);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUFSShareFileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_hcontent;
        break;
      }

      // optional fixed64 hcontent = 2 [default = 18446744073709551615];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_hcontent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &hcontent_)));
          set_has_hcontent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUFSShareFileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional fixed64 hcontent = 2 [default = 18446744073709551615];
  if (has_hcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->hcontent(), output);
  }

}

int CMsgClientUFSShareFileResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional fixed64 hcontent = 2 [default = 18446744073709551615];
    if (has_hcontent()) {
      total_size += 1 + 8;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUFSShareFileResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUFSShareFileResponse*>(&from));
}

void CMsgClientUFSShareFileResponse::MergeFrom(const CMsgClientUFSShareFileResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_hcontent()) {
      set_hcontent(from.hcontent());
    }
  }
}

void CMsgClientUFSShareFileResponse::CopyFrom(const CMsgClientUFSShareFileResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUFSShareFileResponse::IsInitialized() const {

  return true;
}

void CMsgClientUFSShareFileResponse::Swap(CMsgClientUFSShareFileResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(hcontent_, other->hcontent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUFSShareFileResponse::GetTypeName() const {
  return "Sc.CMsgClientUFSShareFileResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientNewLoginKey::kUniqueIdFieldNumber;
const int CMsgClientNewLoginKey::kLoginKeyFieldNumber;
#endif  // !_MSC_VER

CMsgClientNewLoginKey::CMsgClientNewLoginKey()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientNewLoginKey::InitAsDefaultInstance() {
}

CMsgClientNewLoginKey::CMsgClientNewLoginKey(const CMsgClientNewLoginKey& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientNewLoginKey::SharedCtor() {
  _cached_size_ = 0;
  unique_id_ = 0u;
  login_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientNewLoginKey::~CMsgClientNewLoginKey() {
  SharedDtor();
}

void CMsgClientNewLoginKey::SharedDtor() {
  if (login_key_ != &::google::protobuf::internal::kEmptyString) {
    delete login_key_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientNewLoginKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientNewLoginKey& CMsgClientNewLoginKey::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientNewLoginKey* CMsgClientNewLoginKey::default_instance_ = NULL;

CMsgClientNewLoginKey* CMsgClientNewLoginKey::New() const {
  return new CMsgClientNewLoginKey;
}

void CMsgClientNewLoginKey::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unique_id_ = 0u;
    if (has_login_key()) {
      if (login_key_ != &::google::protobuf::internal::kEmptyString) {
        login_key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientNewLoginKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 unique_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unique_id_)));
          set_has_unique_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_login_key;
        break;
      }

      // optional string login_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_login_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientNewLoginKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 unique_id = 1;
  if (has_unique_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unique_id(), output);
  }

  // optional string login_key = 2;
  if (has_login_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->login_key(), output);
  }

}

int CMsgClientNewLoginKey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 unique_id = 1;
    if (has_unique_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unique_id());
    }

    // optional string login_key = 2;
    if (has_login_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->login_key());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientNewLoginKey::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientNewLoginKey*>(&from));
}

void CMsgClientNewLoginKey::MergeFrom(const CMsgClientNewLoginKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unique_id()) {
      set_unique_id(from.unique_id());
    }
    if (from.has_login_key()) {
      set_login_key(from.login_key());
    }
  }
}

void CMsgClientNewLoginKey::CopyFrom(const CMsgClientNewLoginKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientNewLoginKey::IsInitialized() const {

  return true;
}

void CMsgClientNewLoginKey::Swap(CMsgClientNewLoginKey* other) {
  if (other != this) {
    std::swap(unique_id_, other->unique_id_);
    std::swap(login_key_, other->login_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientNewLoginKey::GetTypeName() const {
  return "Sc.CMsgClientNewLoginKey";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientNewLoginKeyAccepted::kUniqueIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientNewLoginKeyAccepted::CMsgClientNewLoginKeyAccepted()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientNewLoginKeyAccepted::InitAsDefaultInstance() {
}

CMsgClientNewLoginKeyAccepted::CMsgClientNewLoginKeyAccepted(const CMsgClientNewLoginKeyAccepted& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientNewLoginKeyAccepted::SharedCtor() {
  _cached_size_ = 0;
  unique_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientNewLoginKeyAccepted::~CMsgClientNewLoginKeyAccepted() {
  SharedDtor();
}

void CMsgClientNewLoginKeyAccepted::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientNewLoginKeyAccepted::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientNewLoginKeyAccepted& CMsgClientNewLoginKeyAccepted::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientNewLoginKeyAccepted* CMsgClientNewLoginKeyAccepted::default_instance_ = NULL;

CMsgClientNewLoginKeyAccepted* CMsgClientNewLoginKeyAccepted::New() const {
  return new CMsgClientNewLoginKeyAccepted;
}

void CMsgClientNewLoginKeyAccepted::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unique_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientNewLoginKeyAccepted::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 unique_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unique_id_)));
          set_has_unique_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientNewLoginKeyAccepted::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 unique_id = 1;
  if (has_unique_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unique_id(), output);
  }

}

int CMsgClientNewLoginKeyAccepted::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 unique_id = 1;
    if (has_unique_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unique_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientNewLoginKeyAccepted::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientNewLoginKeyAccepted*>(&from));
}

void CMsgClientNewLoginKeyAccepted::MergeFrom(const CMsgClientNewLoginKeyAccepted& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unique_id()) {
      set_unique_id(from.unique_id());
    }
  }
}

void CMsgClientNewLoginKeyAccepted::CopyFrom(const CMsgClientNewLoginKeyAccepted& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientNewLoginKeyAccepted::IsInitialized() const {

  return true;
}

void CMsgClientNewLoginKeyAccepted::Swap(CMsgClientNewLoginKeyAccepted* other) {
  if (other != this) {
    std::swap(unique_id_, other->unique_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientNewLoginKeyAccepted::GetTypeName() const {
  return "Sc.CMsgClientNewLoginKeyAccepted";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientAMGetClanOfficers::kSteamidClanFieldNumber;
#endif  // !_MSC_VER

CMsgClientAMGetClanOfficers::CMsgClientAMGetClanOfficers()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientAMGetClanOfficers::InitAsDefaultInstance() {
}

CMsgClientAMGetClanOfficers::CMsgClientAMGetClanOfficers(const CMsgClientAMGetClanOfficers& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientAMGetClanOfficers::SharedCtor() {
  _cached_size_ = 0;
  steamid_clan_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientAMGetClanOfficers::~CMsgClientAMGetClanOfficers() {
  SharedDtor();
}

void CMsgClientAMGetClanOfficers::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientAMGetClanOfficers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientAMGetClanOfficers& CMsgClientAMGetClanOfficers::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientAMGetClanOfficers* CMsgClientAMGetClanOfficers::default_instance_ = NULL;

CMsgClientAMGetClanOfficers* CMsgClientAMGetClanOfficers::New() const {
  return new CMsgClientAMGetClanOfficers;
}

void CMsgClientAMGetClanOfficers::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steamid_clan_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientAMGetClanOfficers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid_clan = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_clan_)));
          set_has_steamid_clan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientAMGetClanOfficers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steamid_clan = 1;
  if (has_steamid_clan()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid_clan(), output);
  }

}

int CMsgClientAMGetClanOfficers::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steamid_clan = 1;
    if (has_steamid_clan()) {
      total_size += 1 + 8;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAMGetClanOfficers::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientAMGetClanOfficers*>(&from));
}

void CMsgClientAMGetClanOfficers::MergeFrom(const CMsgClientAMGetClanOfficers& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamid_clan()) {
      set_steamid_clan(from.steamid_clan());
    }
  }
}

void CMsgClientAMGetClanOfficers::CopyFrom(const CMsgClientAMGetClanOfficers& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAMGetClanOfficers::IsInitialized() const {

  return true;
}

void CMsgClientAMGetClanOfficers::Swap(CMsgClientAMGetClanOfficers* other) {
  if (other != this) {
    std::swap(steamid_clan_, other->steamid_clan_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientAMGetClanOfficers::GetTypeName() const {
  return "Sc.CMsgClientAMGetClanOfficers";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientAMGetClanOfficersResponse::kEresultFieldNumber;
const int CMsgClientAMGetClanOfficersResponse::kSteamidClanFieldNumber;
const int CMsgClientAMGetClanOfficersResponse::kOfficerCountFieldNumber;
#endif  // !_MSC_VER

CMsgClientAMGetClanOfficersResponse::CMsgClientAMGetClanOfficersResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientAMGetClanOfficersResponse::InitAsDefaultInstance() {
}

CMsgClientAMGetClanOfficersResponse::CMsgClientAMGetClanOfficersResponse(const CMsgClientAMGetClanOfficersResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientAMGetClanOfficersResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  steamid_clan_ = GOOGLE_ULONGLONG(0);
  officer_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientAMGetClanOfficersResponse::~CMsgClientAMGetClanOfficersResponse() {
  SharedDtor();
}

void CMsgClientAMGetClanOfficersResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientAMGetClanOfficersResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientAMGetClanOfficersResponse& CMsgClientAMGetClanOfficersResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientAMGetClanOfficersResponse* CMsgClientAMGetClanOfficersResponse::default_instance_ = NULL;

CMsgClientAMGetClanOfficersResponse* CMsgClientAMGetClanOfficersResponse::New() const {
  return new CMsgClientAMGetClanOfficersResponse;
}

void CMsgClientAMGetClanOfficersResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    steamid_clan_ = GOOGLE_ULONGLONG(0);
    officer_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientAMGetClanOfficersResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_steamid_clan;
        break;
      }

      // optional fixed64 steamid_clan = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steamid_clan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_clan_)));
          set_has_steamid_clan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_officer_count;
        break;
      }

      // optional int32 officer_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_officer_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &officer_count_)));
          set_has_officer_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientAMGetClanOfficersResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional fixed64 steamid_clan = 2;
  if (has_steamid_clan()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steamid_clan(), output);
  }

  // optional int32 officer_count = 3;
  if (has_officer_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->officer_count(), output);
  }

}

int CMsgClientAMGetClanOfficersResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional fixed64 steamid_clan = 2;
    if (has_steamid_clan()) {
      total_size += 1 + 8;
    }

    // optional int32 officer_count = 3;
    if (has_officer_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->officer_count());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAMGetClanOfficersResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientAMGetClanOfficersResponse*>(&from));
}

void CMsgClientAMGetClanOfficersResponse::MergeFrom(const CMsgClientAMGetClanOfficersResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_steamid_clan()) {
      set_steamid_clan(from.steamid_clan());
    }
    if (from.has_officer_count()) {
      set_officer_count(from.officer_count());
    }
  }
}

void CMsgClientAMGetClanOfficersResponse::CopyFrom(const CMsgClientAMGetClanOfficersResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAMGetClanOfficersResponse::IsInitialized() const {

  return true;
}

void CMsgClientAMGetClanOfficersResponse::Swap(CMsgClientAMGetClanOfficersResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(steamid_clan_, other->steamid_clan_);
    std::swap(officer_count_, other->officer_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientAMGetClanOfficersResponse::GetTypeName() const {
  return "Sc.CMsgClientAMGetClanOfficersResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientAMGetPersonaNameHistory_IdInstance::kSteamidFieldNumber;
#endif  // !_MSC_VER

CMsgClientAMGetPersonaNameHistory_IdInstance::CMsgClientAMGetPersonaNameHistory_IdInstance()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientAMGetPersonaNameHistory_IdInstance::InitAsDefaultInstance() {
}

CMsgClientAMGetPersonaNameHistory_IdInstance::CMsgClientAMGetPersonaNameHistory_IdInstance(const CMsgClientAMGetPersonaNameHistory_IdInstance& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientAMGetPersonaNameHistory_IdInstance::SharedCtor() {
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientAMGetPersonaNameHistory_IdInstance::~CMsgClientAMGetPersonaNameHistory_IdInstance() {
  SharedDtor();
}

void CMsgClientAMGetPersonaNameHistory_IdInstance::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientAMGetPersonaNameHistory_IdInstance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientAMGetPersonaNameHistory_IdInstance& CMsgClientAMGetPersonaNameHistory_IdInstance::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientAMGetPersonaNameHistory_IdInstance* CMsgClientAMGetPersonaNameHistory_IdInstance::default_instance_ = NULL;

CMsgClientAMGetPersonaNameHistory_IdInstance* CMsgClientAMGetPersonaNameHistory_IdInstance::New() const {
  return new CMsgClientAMGetPersonaNameHistory_IdInstance;
}

void CMsgClientAMGetPersonaNameHistory_IdInstance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steamid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientAMGetPersonaNameHistory_IdInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
          set_has_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientAMGetPersonaNameHistory_IdInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

}

int CMsgClientAMGetPersonaNameHistory_IdInstance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAMGetPersonaNameHistory_IdInstance::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientAMGetPersonaNameHistory_IdInstance*>(&from));
}

void CMsgClientAMGetPersonaNameHistory_IdInstance::MergeFrom(const CMsgClientAMGetPersonaNameHistory_IdInstance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
  }
}

void CMsgClientAMGetPersonaNameHistory_IdInstance::CopyFrom(const CMsgClientAMGetPersonaNameHistory_IdInstance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAMGetPersonaNameHistory_IdInstance::IsInitialized() const {

  return true;
}

void CMsgClientAMGetPersonaNameHistory_IdInstance::Swap(CMsgClientAMGetPersonaNameHistory_IdInstance* other) {
  if (other != this) {
    std::swap(steamid_, other->steamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientAMGetPersonaNameHistory_IdInstance::GetTypeName() const {
  return "Sc.CMsgClientAMGetPersonaNameHistory.IdInstance";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientAMGetPersonaNameHistory::kIdCountFieldNumber;
const int CMsgClientAMGetPersonaNameHistory::kIdsFieldNumber;
#endif  // !_MSC_VER

CMsgClientAMGetPersonaNameHistory::CMsgClientAMGetPersonaNameHistory()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientAMGetPersonaNameHistory::InitAsDefaultInstance() {
}

CMsgClientAMGetPersonaNameHistory::CMsgClientAMGetPersonaNameHistory(const CMsgClientAMGetPersonaNameHistory& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientAMGetPersonaNameHistory::SharedCtor() {
  _cached_size_ = 0;
  id_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientAMGetPersonaNameHistory::~CMsgClientAMGetPersonaNameHistory() {
  SharedDtor();
}

void CMsgClientAMGetPersonaNameHistory::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientAMGetPersonaNameHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientAMGetPersonaNameHistory& CMsgClientAMGetPersonaNameHistory::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientAMGetPersonaNameHistory* CMsgClientAMGetPersonaNameHistory::default_instance_ = NULL;

CMsgClientAMGetPersonaNameHistory* CMsgClientAMGetPersonaNameHistory::New() const {
  return new CMsgClientAMGetPersonaNameHistory;
}

void CMsgClientAMGetPersonaNameHistory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_count_ = 0;
  }
  ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientAMGetPersonaNameHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_count_)));
          set_has_id_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Ids;
        break;
      }

      // repeated .Sc.CMsgClientAMGetPersonaNameHistory.IdInstance Ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientAMGetPersonaNameHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id_count = 1;
  if (has_id_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id_count(), output);
  }

  // repeated .Sc.CMsgClientAMGetPersonaNameHistory.IdInstance Ids = 2;
  for (int i = 0; i < this->ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->ids(i), output);
  }

}

int CMsgClientAMGetPersonaNameHistory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id_count = 1;
    if (has_id_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id_count());
    }

  }
  // repeated .Sc.CMsgClientAMGetPersonaNameHistory.IdInstance Ids = 2;
  total_size += 1 * this->ids_size();
  for (int i = 0; i < this->ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ids(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAMGetPersonaNameHistory::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientAMGetPersonaNameHistory*>(&from));
}

void CMsgClientAMGetPersonaNameHistory::MergeFrom(const CMsgClientAMGetPersonaNameHistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  ids_.MergeFrom(from.ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id_count()) {
      set_id_count(from.id_count());
    }
  }
}

void CMsgClientAMGetPersonaNameHistory::CopyFrom(const CMsgClientAMGetPersonaNameHistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAMGetPersonaNameHistory::IsInitialized() const {

  return true;
}

void CMsgClientAMGetPersonaNameHistory::Swap(CMsgClientAMGetPersonaNameHistory* other) {
  if (other != this) {
    std::swap(id_count_, other->id_count_);
    ids_.Swap(&other->ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientAMGetPersonaNameHistory::GetTypeName() const {
  return "Sc.CMsgClientAMGetPersonaNameHistory";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::kNameSinceFieldNumber;
const int CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::kNameFieldNumber;
#endif  // !_MSC_VER

CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::InitAsDefaultInstance() {
}

CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance(const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::SharedCtor() {
  _cached_size_ = 0;
  name_since_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::~CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance() {
  SharedDtor();
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance& CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance* CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::default_instance_ = NULL;

CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance* CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::New() const {
  return new CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance;
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    name_since_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 name_since = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &name_since_)));
          set_has_name_since();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 name_since = 1;
  if (has_name_since()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->name_since(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

}

int CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 name_since = 1;
    if (has_name_since()) {
      total_size += 1 + 4;
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance*>(&from));
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::MergeFrom(const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name_since()) {
      set_name_since(from.name_since());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::CopyFrom(const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::IsInitialized() const {

  return true;
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::Swap(CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance* other) {
  if (other != this) {
    std::swap(name_since_, other->name_since_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance::GetTypeName() const {
  return "Sc.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::kEresultFieldNumber;
const int CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::kSteamidFieldNumber;
const int CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::kNamesFieldNumber;
#endif  // !_MSC_VER

CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::InitAsDefaultInstance() {
}

CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance(const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  steamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::~CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance() {
  SharedDtor();
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance& CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance* CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::default_instance_ = NULL;

CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance* CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::New() const {
  return new CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance;
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    steamid_ = GOOGLE_ULONGLONG(0);
  }
  names_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_steamid;
        break;
      }

      // optional fixed64 steamid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
          set_has_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_names;
        break;
      }

      // repeated .Sc.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance names = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_names()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_names;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional fixed64 steamid = 2;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steamid(), output);
  }

  // repeated .Sc.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance names = 3;
  for (int i = 0; i < this->names_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->names(i), output);
  }

}

int CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional fixed64 steamid = 2;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

  }
  // repeated .Sc.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance names = 3;
  total_size += 1 * this->names_size();
  for (int i = 0; i < this->names_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->names(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance*>(&from));
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::MergeFrom(const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance& from) {
  GOOGLE_CHECK_NE(&from, this);
  names_.MergeFrom(from.names_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
  }
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::CopyFrom(const CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::IsInitialized() const {

  return true;
}

void CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::Swap(CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(steamid_, other->steamid_);
    names_.Swap(&other->names_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance::GetTypeName() const {
  return "Sc.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientAMGetPersonaNameHistoryResponse::kResponsesFieldNumber;
#endif  // !_MSC_VER

CMsgClientAMGetPersonaNameHistoryResponse::CMsgClientAMGetPersonaNameHistoryResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientAMGetPersonaNameHistoryResponse::InitAsDefaultInstance() {
}

CMsgClientAMGetPersonaNameHistoryResponse::CMsgClientAMGetPersonaNameHistoryResponse(const CMsgClientAMGetPersonaNameHistoryResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientAMGetPersonaNameHistoryResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientAMGetPersonaNameHistoryResponse::~CMsgClientAMGetPersonaNameHistoryResponse() {
  SharedDtor();
}

void CMsgClientAMGetPersonaNameHistoryResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientAMGetPersonaNameHistoryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientAMGetPersonaNameHistoryResponse& CMsgClientAMGetPersonaNameHistoryResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientAMGetPersonaNameHistoryResponse* CMsgClientAMGetPersonaNameHistoryResponse::default_instance_ = NULL;

CMsgClientAMGetPersonaNameHistoryResponse* CMsgClientAMGetPersonaNameHistoryResponse::New() const {
  return new CMsgClientAMGetPersonaNameHistoryResponse;
}

void CMsgClientAMGetPersonaNameHistoryResponse::Clear() {
  responses_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientAMGetPersonaNameHistoryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Sc.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance responses = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_responses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_responses()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_responses;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientAMGetPersonaNameHistoryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Sc.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance responses = 2;
  for (int i = 0; i < this->responses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->responses(i), output);
  }

}

int CMsgClientAMGetPersonaNameHistoryResponse::ByteSize() const {
  int total_size = 0;

  // repeated .Sc.CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance responses = 2;
  total_size += 1 * this->responses_size();
  for (int i = 0; i < this->responses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->responses(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAMGetPersonaNameHistoryResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientAMGetPersonaNameHistoryResponse*>(&from));
}

void CMsgClientAMGetPersonaNameHistoryResponse::MergeFrom(const CMsgClientAMGetPersonaNameHistoryResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  responses_.MergeFrom(from.responses_);
}

void CMsgClientAMGetPersonaNameHistoryResponse::CopyFrom(const CMsgClientAMGetPersonaNameHistoryResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAMGetPersonaNameHistoryResponse::IsInitialized() const {

  return true;
}

void CMsgClientAMGetPersonaNameHistoryResponse::Swap(CMsgClientAMGetPersonaNameHistoryResponse* other) {
  if (other != this) {
    responses_.Swap(&other->responses_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientAMGetPersonaNameHistoryResponse::GetTypeName() const {
  return "Sc.CMsgClientAMGetPersonaNameHistoryResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientDeregisterWithServer::kEservertypeFieldNumber;
const int CMsgClientDeregisterWithServer::kAppIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientDeregisterWithServer::CMsgClientDeregisterWithServer()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientDeregisterWithServer::InitAsDefaultInstance() {
}

CMsgClientDeregisterWithServer::CMsgClientDeregisterWithServer(const CMsgClientDeregisterWithServer& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientDeregisterWithServer::SharedCtor() {
  _cached_size_ = 0;
  eservertype_ = 0u;
  app_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientDeregisterWithServer::~CMsgClientDeregisterWithServer() {
  SharedDtor();
}

void CMsgClientDeregisterWithServer::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientDeregisterWithServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientDeregisterWithServer& CMsgClientDeregisterWithServer::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientDeregisterWithServer* CMsgClientDeregisterWithServer::default_instance_ = NULL;

CMsgClientDeregisterWithServer* CMsgClientDeregisterWithServer::New() const {
  return new CMsgClientDeregisterWithServer;
}

void CMsgClientDeregisterWithServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eservertype_ = 0u;
    app_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientDeregisterWithServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eservertype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eservertype_)));
          set_has_eservertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_app_id;
        break;
      }

      // optional uint32 app_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_app_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientDeregisterWithServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 eservertype = 1;
  if (has_eservertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eservertype(), output);
  }

  // optional uint32 app_id = 2;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->app_id(), output);
  }

}

int CMsgClientDeregisterWithServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 eservertype = 1;
    if (has_eservertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eservertype());
    }

    // optional uint32 app_id = 2;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientDeregisterWithServer::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientDeregisterWithServer*>(&from));
}

void CMsgClientDeregisterWithServer::MergeFrom(const CMsgClientDeregisterWithServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eservertype()) {
      set_eservertype(from.eservertype());
    }
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
  }
}

void CMsgClientDeregisterWithServer::CopyFrom(const CMsgClientDeregisterWithServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientDeregisterWithServer::IsInitialized() const {

  return true;
}

void CMsgClientDeregisterWithServer::Swap(CMsgClientDeregisterWithServer* other) {
  if (other != this) {
    std::swap(eservertype_, other->eservertype_);
    std::swap(app_id_, other->app_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientDeregisterWithServer::GetTypeName() const {
  return "Sc.CMsgClientDeregisterWithServer";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientClanState_NameInfo::kClanNameFieldNumber;
const int CMsgClientClanState_NameInfo::kShaAvatarFieldNumber;
#endif  // !_MSC_VER

CMsgClientClanState_NameInfo::CMsgClientClanState_NameInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientClanState_NameInfo::InitAsDefaultInstance() {
}

CMsgClientClanState_NameInfo::CMsgClientClanState_NameInfo(const CMsgClientClanState_NameInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientClanState_NameInfo::SharedCtor() {
  _cached_size_ = 0;
  clan_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sha_avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientClanState_NameInfo::~CMsgClientClanState_NameInfo() {
  SharedDtor();
}

void CMsgClientClanState_NameInfo::SharedDtor() {
  if (clan_name_ != &::google::protobuf::internal::kEmptyString) {
    delete clan_name_;
  }
  if (sha_avatar_ != &::google::protobuf::internal::kEmptyString) {
    delete sha_avatar_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientClanState_NameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientClanState_NameInfo& CMsgClientClanState_NameInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientClanState_NameInfo* CMsgClientClanState_NameInfo::default_instance_ = NULL;

CMsgClientClanState_NameInfo* CMsgClientClanState_NameInfo::New() const {
  return new CMsgClientClanState_NameInfo;
}

void CMsgClientClanState_NameInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_clan_name()) {
      if (clan_name_ != &::google::protobuf::internal::kEmptyString) {
        clan_name_->clear();
      }
    }
    if (has_sha_avatar()) {
      if (sha_avatar_ != &::google::protobuf::internal::kEmptyString) {
        sha_avatar_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientClanState_NameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string clan_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clan_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sha_avatar;
        break;
      }

      // optional bytes sha_avatar = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sha_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha_avatar()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientClanState_NameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string clan_name = 1;
  if (has_clan_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->clan_name(), output);
  }

  // optional bytes sha_avatar = 2;
  if (has_sha_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->sha_avatar(), output);
  }

}

int CMsgClientClanState_NameInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string clan_name = 1;
    if (has_clan_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clan_name());
    }

    // optional bytes sha_avatar = 2;
    if (has_sha_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha_avatar());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientClanState_NameInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientClanState_NameInfo*>(&from));
}

void CMsgClientClanState_NameInfo::MergeFrom(const CMsgClientClanState_NameInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clan_name()) {
      set_clan_name(from.clan_name());
    }
    if (from.has_sha_avatar()) {
      set_sha_avatar(from.sha_avatar());
    }
  }
}

void CMsgClientClanState_NameInfo::CopyFrom(const CMsgClientClanState_NameInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientClanState_NameInfo::IsInitialized() const {

  return true;
}

void CMsgClientClanState_NameInfo::Swap(CMsgClientClanState_NameInfo* other) {
  if (other != this) {
    std::swap(clan_name_, other->clan_name_);
    std::swap(sha_avatar_, other->sha_avatar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientClanState_NameInfo::GetTypeName() const {
  return "Sc.CMsgClientClanState.NameInfo";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientClanState_UserCounts::kMembersFieldNumber;
const int CMsgClientClanState_UserCounts::kOnlineFieldNumber;
const int CMsgClientClanState_UserCounts::kChattingFieldNumber;
const int CMsgClientClanState_UserCounts::kInGameFieldNumber;
#endif  // !_MSC_VER

CMsgClientClanState_UserCounts::CMsgClientClanState_UserCounts()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientClanState_UserCounts::InitAsDefaultInstance() {
}

CMsgClientClanState_UserCounts::CMsgClientClanState_UserCounts(const CMsgClientClanState_UserCounts& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientClanState_UserCounts::SharedCtor() {
  _cached_size_ = 0;
  members_ = 0u;
  online_ = 0u;
  chatting_ = 0u;
  in_game_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientClanState_UserCounts::~CMsgClientClanState_UserCounts() {
  SharedDtor();
}

void CMsgClientClanState_UserCounts::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientClanState_UserCounts::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientClanState_UserCounts& CMsgClientClanState_UserCounts::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientClanState_UserCounts* CMsgClientClanState_UserCounts::default_instance_ = NULL;

CMsgClientClanState_UserCounts* CMsgClientClanState_UserCounts::New() const {
  return new CMsgClientClanState_UserCounts;
}

void CMsgClientClanState_UserCounts::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    members_ = 0u;
    online_ = 0u;
    chatting_ = 0u;
    in_game_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientClanState_UserCounts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 members = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &members_)));
          set_has_members();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_online;
        break;
      }

      // optional uint32 online = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_chatting;
        break;
      }

      // optional uint32 chatting = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chatting:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chatting_)));
          set_has_chatting();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_in_game;
        break;
      }

      // optional uint32 in_game = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_in_game:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &in_game_)));
          set_has_in_game();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientClanState_UserCounts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 members = 1;
  if (has_members()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->members(), output);
  }

  // optional uint32 online = 2;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->online(), output);
  }

  // optional uint32 chatting = 3;
  if (has_chatting()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->chatting(), output);
  }

  // optional uint32 in_game = 4;
  if (has_in_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->in_game(), output);
  }

}

int CMsgClientClanState_UserCounts::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 members = 1;
    if (has_members()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->members());
    }

    // optional uint32 online = 2;
    if (has_online()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online());
    }

    // optional uint32 chatting = 3;
    if (has_chatting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chatting());
    }

    // optional uint32 in_game = 4;
    if (has_in_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->in_game());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientClanState_UserCounts::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientClanState_UserCounts*>(&from));
}

void CMsgClientClanState_UserCounts::MergeFrom(const CMsgClientClanState_UserCounts& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_members()) {
      set_members(from.members());
    }
    if (from.has_online()) {
      set_online(from.online());
    }
    if (from.has_chatting()) {
      set_chatting(from.chatting());
    }
    if (from.has_in_game()) {
      set_in_game(from.in_game());
    }
  }
}

void CMsgClientClanState_UserCounts::CopyFrom(const CMsgClientClanState_UserCounts& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientClanState_UserCounts::IsInitialized() const {

  return true;
}

void CMsgClientClanState_UserCounts::Swap(CMsgClientClanState_UserCounts* other) {
  if (other != this) {
    std::swap(members_, other->members_);
    std::swap(online_, other->online_);
    std::swap(chatting_, other->chatting_);
    std::swap(in_game_, other->in_game_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientClanState_UserCounts::GetTypeName() const {
  return "Sc.CMsgClientClanState.UserCounts";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientClanState_Event::kGidFieldNumber;
const int CMsgClientClanState_Event::kEventTimeFieldNumber;
const int CMsgClientClanState_Event::kHeadlineFieldNumber;
const int CMsgClientClanState_Event::kGameIdFieldNumber;
const int CMsgClientClanState_Event::kJustPostedFieldNumber;
#endif  // !_MSC_VER

CMsgClientClanState_Event::CMsgClientClanState_Event()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientClanState_Event::InitAsDefaultInstance() {
}

CMsgClientClanState_Event::CMsgClientClanState_Event(const CMsgClientClanState_Event& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientClanState_Event::SharedCtor() {
  _cached_size_ = 0;
  gid_ = GOOGLE_ULONGLONG(0);
  event_time_ = 0u;
  headline_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  game_id_ = GOOGLE_ULONGLONG(0);
  just_posted_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientClanState_Event::~CMsgClientClanState_Event() {
  SharedDtor();
}

void CMsgClientClanState_Event::SharedDtor() {
  if (headline_ != &::google::protobuf::internal::kEmptyString) {
    delete headline_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientClanState_Event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientClanState_Event& CMsgClientClanState_Event::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientClanState_Event* CMsgClientClanState_Event::default_instance_ = NULL;

CMsgClientClanState_Event* CMsgClientClanState_Event::New() const {
  return new CMsgClientClanState_Event;
}

void CMsgClientClanState_Event::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gid_ = GOOGLE_ULONGLONG(0);
    event_time_ = 0u;
    if (has_headline()) {
      if (headline_ != &::google::protobuf::internal::kEmptyString) {
        headline_->clear();
      }
    }
    game_id_ = GOOGLE_ULONGLONG(0);
    just_posted_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientClanState_Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 gid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_event_time;
        break;
      }

      // optional uint32 event_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_time_)));
          set_has_event_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_headline;
        break;
      }

      // optional string headline = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_headline:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headline()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_game_id;
        break;
      }

      // optional fixed64 game_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_just_posted;
        break;
      }

      // optional bool just_posted = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_just_posted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &just_posted_)));
          set_has_just_posted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientClanState_Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 gid = 1;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->gid(), output);
  }

  // optional uint32 event_time = 2;
  if (has_event_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->event_time(), output);
  }

  // optional string headline = 3;
  if (has_headline()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->headline(), output);
  }

  // optional fixed64 game_id = 4;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->game_id(), output);
  }

  // optional bool just_posted = 5;
  if (has_just_posted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->just_posted(), output);
  }

}

int CMsgClientClanState_Event::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 gid = 1;
    if (has_gid()) {
      total_size += 1 + 8;
    }

    // optional uint32 event_time = 2;
    if (has_event_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_time());
    }

    // optional string headline = 3;
    if (has_headline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headline());
    }

    // optional fixed64 game_id = 4;
    if (has_game_id()) {
      total_size += 1 + 8;
    }

    // optional bool just_posted = 5;
    if (has_just_posted()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientClanState_Event::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientClanState_Event*>(&from));
}

void CMsgClientClanState_Event::MergeFrom(const CMsgClientClanState_Event& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_event_time()) {
      set_event_time(from.event_time());
    }
    if (from.has_headline()) {
      set_headline(from.headline());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_just_posted()) {
      set_just_posted(from.just_posted());
    }
  }
}

void CMsgClientClanState_Event::CopyFrom(const CMsgClientClanState_Event& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientClanState_Event::IsInitialized() const {

  return true;
}

void CMsgClientClanState_Event::Swap(CMsgClientClanState_Event* other) {
  if (other != this) {
    std::swap(gid_, other->gid_);
    std::swap(event_time_, other->event_time_);
    std::swap(headline_, other->headline_);
    std::swap(game_id_, other->game_id_);
    std::swap(just_posted_, other->just_posted_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientClanState_Event::GetTypeName() const {
  return "Sc.CMsgClientClanState.Event";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientClanState::kSteamidClanFieldNumber;
const int CMsgClientClanState::kMUnStatusFlagsFieldNumber;
const int CMsgClientClanState::kClanAccountFlagsFieldNumber;
const int CMsgClientClanState::kNameInfoFieldNumber;
const int CMsgClientClanState::kUserCountsFieldNumber;
const int CMsgClientClanState::kEventsFieldNumber;
const int CMsgClientClanState::kAnnouncementsFieldNumber;
#endif  // !_MSC_VER

CMsgClientClanState::CMsgClientClanState()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientClanState::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  name_info_ = const_cast< ::Sc::CMsgClientClanState_NameInfo*>(
      ::Sc::CMsgClientClanState_NameInfo::internal_default_instance());
#else
  name_info_ = const_cast< ::Sc::CMsgClientClanState_NameInfo*>(&::Sc::CMsgClientClanState_NameInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  user_counts_ = const_cast< ::Sc::CMsgClientClanState_UserCounts*>(
      ::Sc::CMsgClientClanState_UserCounts::internal_default_instance());
#else
  user_counts_ = const_cast< ::Sc::CMsgClientClanState_UserCounts*>(&::Sc::CMsgClientClanState_UserCounts::default_instance());
#endif
}

CMsgClientClanState::CMsgClientClanState(const CMsgClientClanState& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientClanState::SharedCtor() {
  _cached_size_ = 0;
  steamid_clan_ = GOOGLE_ULONGLONG(0);
  m_unstatusflags_ = 0u;
  clan_account_flags_ = 0u;
  name_info_ = NULL;
  user_counts_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientClanState::~CMsgClientClanState() {
  SharedDtor();
}

void CMsgClientClanState::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete name_info_;
    delete user_counts_;
  }
}

void CMsgClientClanState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientClanState& CMsgClientClanState::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientClanState* CMsgClientClanState::default_instance_ = NULL;

CMsgClientClanState* CMsgClientClanState::New() const {
  return new CMsgClientClanState;
}

void CMsgClientClanState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steamid_clan_ = GOOGLE_ULONGLONG(0);
    m_unstatusflags_ = 0u;
    clan_account_flags_ = 0u;
    if (has_name_info()) {
      if (name_info_ != NULL) name_info_->::Sc::CMsgClientClanState_NameInfo::Clear();
    }
    if (has_user_counts()) {
      if (user_counts_ != NULL) user_counts_->::Sc::CMsgClientClanState_UserCounts::Clear();
    }
  }
  events_.Clear();
  announcements_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientClanState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid_clan = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_clan_)));
          set_has_steamid_clan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_unStatusFlags;
        break;
      }

      // optional uint32 m_unStatusFlags = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_unStatusFlags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_unstatusflags_)));
          set_has_m_unstatusflags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_clan_account_flags;
        break;
      }

      // optional uint32 clan_account_flags = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clan_account_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clan_account_flags_)));
          set_has_clan_account_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name_info;
        break;
      }

      // optional .Sc.CMsgClientClanState.NameInfo name_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_name_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_user_counts;
        break;
      }

      // optional .Sc.CMsgClientClanState.UserCounts user_counts = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_counts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_counts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_events;
        break;
      }

      // repeated .Sc.CMsgClientClanState.Event events = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_events:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_events()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_events;
        if (input->ExpectTag(58)) goto parse_announcements;
        break;
      }

      // repeated .Sc.CMsgClientClanState.Event announcements = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_announcements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_announcements()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_announcements;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientClanState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steamid_clan = 1;
  if (has_steamid_clan()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid_clan(), output);
  }

  // optional uint32 m_unStatusFlags = 2;
  if (has_m_unstatusflags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->m_unstatusflags(), output);
  }

  // optional uint32 clan_account_flags = 3;
  if (has_clan_account_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->clan_account_flags(), output);
  }

  // optional .Sc.CMsgClientClanState.NameInfo name_info = 4;
  if (has_name_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->name_info(), output);
  }

  // optional .Sc.CMsgClientClanState.UserCounts user_counts = 5;
  if (has_user_counts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->user_counts(), output);
  }

  // repeated .Sc.CMsgClientClanState.Event events = 6;
  for (int i = 0; i < this->events_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->events(i), output);
  }

  // repeated .Sc.CMsgClientClanState.Event announcements = 7;
  for (int i = 0; i < this->announcements_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->announcements(i), output);
  }

}

int CMsgClientClanState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steamid_clan = 1;
    if (has_steamid_clan()) {
      total_size += 1 + 8;
    }

    // optional uint32 m_unStatusFlags = 2;
    if (has_m_unstatusflags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_unstatusflags());
    }

    // optional uint32 clan_account_flags = 3;
    if (has_clan_account_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clan_account_flags());
    }

    // optional .Sc.CMsgClientClanState.NameInfo name_info = 4;
    if (has_name_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->name_info());
    }

    // optional .Sc.CMsgClientClanState.UserCounts user_counts = 5;
    if (has_user_counts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_counts());
    }

  }
  // repeated .Sc.CMsgClientClanState.Event events = 6;
  total_size += 1 * this->events_size();
  for (int i = 0; i < this->events_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->events(i));
  }

  // repeated .Sc.CMsgClientClanState.Event announcements = 7;
  total_size += 1 * this->announcements_size();
  for (int i = 0; i < this->announcements_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->announcements(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientClanState::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientClanState*>(&from));
}

void CMsgClientClanState::MergeFrom(const CMsgClientClanState& from) {
  GOOGLE_CHECK_NE(&from, this);
  events_.MergeFrom(from.events_);
  announcements_.MergeFrom(from.announcements_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamid_clan()) {
      set_steamid_clan(from.steamid_clan());
    }
    if (from.has_m_unstatusflags()) {
      set_m_unstatusflags(from.m_unstatusflags());
    }
    if (from.has_clan_account_flags()) {
      set_clan_account_flags(from.clan_account_flags());
    }
    if (from.has_name_info()) {
      mutable_name_info()->::Sc::CMsgClientClanState_NameInfo::MergeFrom(from.name_info());
    }
    if (from.has_user_counts()) {
      mutable_user_counts()->::Sc::CMsgClientClanState_UserCounts::MergeFrom(from.user_counts());
    }
  }
}

void CMsgClientClanState::CopyFrom(const CMsgClientClanState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientClanState::IsInitialized() const {

  return true;
}

void CMsgClientClanState::Swap(CMsgClientClanState* other) {
  if (other != this) {
    std::swap(steamid_clan_, other->steamid_clan_);
    std::swap(m_unstatusflags_, other->m_unstatusflags_);
    std::swap(clan_account_flags_, other->clan_account_flags_);
    std::swap(name_info_, other->name_info_);
    std::swap(user_counts_, other->user_counts_);
    events_.Swap(&other->events_);
    announcements_.Swap(&other->announcements_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientClanState::GetTypeName() const {
  return "Sc.CMsgClientClanState";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientFriendMsg::kSteamidFieldNumber;
const int CMsgClientFriendMsg::kChatEntryTypeFieldNumber;
const int CMsgClientFriendMsg::kMessageFieldNumber;
#endif  // !_MSC_VER

CMsgClientFriendMsg::CMsgClientFriendMsg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientFriendMsg::InitAsDefaultInstance() {
}

CMsgClientFriendMsg::CMsgClientFriendMsg(const CMsgClientFriendMsg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientFriendMsg::SharedCtor() {
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
  chat_entry_type_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientFriendMsg::~CMsgClientFriendMsg() {
  SharedDtor();
}

void CMsgClientFriendMsg::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientFriendMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientFriendMsg& CMsgClientFriendMsg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientFriendMsg* CMsgClientFriendMsg::default_instance_ = NULL;

CMsgClientFriendMsg* CMsgClientFriendMsg::New() const {
  return new CMsgClientFriendMsg;
}

void CMsgClientFriendMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steamid_ = GOOGLE_ULONGLONG(0);
    chat_entry_type_ = 0;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientFriendMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
          set_has_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chat_entry_type;
        break;
      }

      // optional int32 chat_entry_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chat_entry_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chat_entry_type_)));
          set_has_chat_entry_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_message;
        break;
      }

      // optional bytes message = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientFriendMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional int32 chat_entry_type = 2;
  if (has_chat_entry_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chat_entry_type(), output);
  }

  // optional bytes message = 3;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->message(), output);
  }

}

int CMsgClientFriendMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional int32 chat_entry_type = 2;
    if (has_chat_entry_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chat_entry_type());
    }

    // optional bytes message = 3;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->message());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientFriendMsg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientFriendMsg*>(&from));
}

void CMsgClientFriendMsg::MergeFrom(const CMsgClientFriendMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
    if (from.has_chat_entry_type()) {
      set_chat_entry_type(from.chat_entry_type());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
}

void CMsgClientFriendMsg::CopyFrom(const CMsgClientFriendMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFriendMsg::IsInitialized() const {

  return true;
}

void CMsgClientFriendMsg::Swap(CMsgClientFriendMsg* other) {
  if (other != this) {
    std::swap(steamid_, other->steamid_);
    std::swap(chat_entry_type_, other->chat_entry_type_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientFriendMsg::GetTypeName() const {
  return "Sc.CMsgClientFriendMsg";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientFriendMsgIncoming::kSteamidFromFieldNumber;
const int CMsgClientFriendMsgIncoming::kChatEntryTypeFieldNumber;
const int CMsgClientFriendMsgIncoming::kFromLimitedAccountFieldNumber;
const int CMsgClientFriendMsgIncoming::kMessageFieldNumber;
#endif  // !_MSC_VER

CMsgClientFriendMsgIncoming::CMsgClientFriendMsgIncoming()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientFriendMsgIncoming::InitAsDefaultInstance() {
}

CMsgClientFriendMsgIncoming::CMsgClientFriendMsgIncoming(const CMsgClientFriendMsgIncoming& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientFriendMsgIncoming::SharedCtor() {
  _cached_size_ = 0;
  steamid_from_ = GOOGLE_ULONGLONG(0);
  chat_entry_type_ = 0;
  from_limited_account_ = false;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientFriendMsgIncoming::~CMsgClientFriendMsgIncoming() {
  SharedDtor();
}

void CMsgClientFriendMsgIncoming::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientFriendMsgIncoming::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientFriendMsgIncoming& CMsgClientFriendMsgIncoming::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientFriendMsgIncoming* CMsgClientFriendMsgIncoming::default_instance_ = NULL;

CMsgClientFriendMsgIncoming* CMsgClientFriendMsgIncoming::New() const {
  return new CMsgClientFriendMsgIncoming;
}

void CMsgClientFriendMsgIncoming::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steamid_from_ = GOOGLE_ULONGLONG(0);
    chat_entry_type_ = 0;
    from_limited_account_ = false;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientFriendMsgIncoming::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid_from = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_from_)));
          set_has_steamid_from();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chat_entry_type;
        break;
      }

      // optional int32 chat_entry_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chat_entry_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chat_entry_type_)));
          set_has_chat_entry_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_from_limited_account;
        break;
      }

      // optional bool from_limited_account = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_limited_account:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &from_limited_account_)));
          set_has_from_limited_account();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_message;
        break;
      }

      // optional bytes message = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientFriendMsgIncoming::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steamid_from = 1;
  if (has_steamid_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid_from(), output);
  }

  // optional int32 chat_entry_type = 2;
  if (has_chat_entry_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chat_entry_type(), output);
  }

  // optional bool from_limited_account = 3;
  if (has_from_limited_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->from_limited_account(), output);
  }

  // optional bytes message = 4;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->message(), output);
  }

}

int CMsgClientFriendMsgIncoming::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steamid_from = 1;
    if (has_steamid_from()) {
      total_size += 1 + 8;
    }

    // optional int32 chat_entry_type = 2;
    if (has_chat_entry_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chat_entry_type());
    }

    // optional bool from_limited_account = 3;
    if (has_from_limited_account()) {
      total_size += 1 + 1;
    }

    // optional bytes message = 4;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->message());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientFriendMsgIncoming::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientFriendMsgIncoming*>(&from));
}

void CMsgClientFriendMsgIncoming::MergeFrom(const CMsgClientFriendMsgIncoming& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamid_from()) {
      set_steamid_from(from.steamid_from());
    }
    if (from.has_chat_entry_type()) {
      set_chat_entry_type(from.chat_entry_type());
    }
    if (from.has_from_limited_account()) {
      set_from_limited_account(from.from_limited_account());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
}

void CMsgClientFriendMsgIncoming::CopyFrom(const CMsgClientFriendMsgIncoming& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFriendMsgIncoming::IsInitialized() const {

  return true;
}

void CMsgClientFriendMsgIncoming::Swap(CMsgClientFriendMsgIncoming* other) {
  if (other != this) {
    std::swap(steamid_from_, other->steamid_from_);
    std::swap(chat_entry_type_, other->chat_entry_type_);
    std::swap(from_limited_account_, other->from_limited_account_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientFriendMsgIncoming::GetTypeName() const {
  return "Sc.CMsgClientFriendMsgIncoming";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientAddFriend::kSteamidToAddFieldNumber;
const int CMsgClientAddFriend::kAccountnameOrEmailToAddFieldNumber;
#endif  // !_MSC_VER

CMsgClientAddFriend::CMsgClientAddFriend()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientAddFriend::InitAsDefaultInstance() {
}

CMsgClientAddFriend::CMsgClientAddFriend(const CMsgClientAddFriend& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientAddFriend::SharedCtor() {
  _cached_size_ = 0;
  steamid_to_add_ = GOOGLE_ULONGLONG(0);
  accountname_or_email_to_add_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientAddFriend::~CMsgClientAddFriend() {
  SharedDtor();
}

void CMsgClientAddFriend::SharedDtor() {
  if (accountname_or_email_to_add_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_or_email_to_add_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientAddFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientAddFriend& CMsgClientAddFriend::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientAddFriend* CMsgClientAddFriend::default_instance_ = NULL;

CMsgClientAddFriend* CMsgClientAddFriend::New() const {
  return new CMsgClientAddFriend;
}

void CMsgClientAddFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steamid_to_add_ = GOOGLE_ULONGLONG(0);
    if (has_accountname_or_email_to_add()) {
      if (accountname_or_email_to_add_ != &::google::protobuf::internal::kEmptyString) {
        accountname_or_email_to_add_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientAddFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid_to_add = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_to_add_)));
          set_has_steamid_to_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_accountname_or_email_to_add;
        break;
      }

      // optional string accountname_or_email_to_add = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accountname_or_email_to_add:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountname_or_email_to_add()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientAddFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steamid_to_add = 1;
  if (has_steamid_to_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid_to_add(), output);
  }

  // optional string accountname_or_email_to_add = 2;
  if (has_accountname_or_email_to_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->accountname_or_email_to_add(), output);
  }

}

int CMsgClientAddFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steamid_to_add = 1;
    if (has_steamid_to_add()) {
      total_size += 1 + 8;
    }

    // optional string accountname_or_email_to_add = 2;
    if (has_accountname_or_email_to_add()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountname_or_email_to_add());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAddFriend::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientAddFriend*>(&from));
}

void CMsgClientAddFriend::MergeFrom(const CMsgClientAddFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamid_to_add()) {
      set_steamid_to_add(from.steamid_to_add());
    }
    if (from.has_accountname_or_email_to_add()) {
      set_accountname_or_email_to_add(from.accountname_or_email_to_add());
    }
  }
}

void CMsgClientAddFriend::CopyFrom(const CMsgClientAddFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAddFriend::IsInitialized() const {

  return true;
}

void CMsgClientAddFriend::Swap(CMsgClientAddFriend* other) {
  if (other != this) {
    std::swap(steamid_to_add_, other->steamid_to_add_);
    std::swap(accountname_or_email_to_add_, other->accountname_or_email_to_add_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientAddFriend::GetTypeName() const {
  return "Sc.CMsgClientAddFriend";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientAddFriendResponse::kEresultFieldNumber;
const int CMsgClientAddFriendResponse::kSteamIdAddedFieldNumber;
const int CMsgClientAddFriendResponse::kPersonaNameAddedFieldNumber;
#endif  // !_MSC_VER

CMsgClientAddFriendResponse::CMsgClientAddFriendResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientAddFriendResponse::InitAsDefaultInstance() {
}

CMsgClientAddFriendResponse::CMsgClientAddFriendResponse(const CMsgClientAddFriendResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientAddFriendResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  steam_id_added_ = GOOGLE_ULONGLONG(0);
  persona_name_added_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientAddFriendResponse::~CMsgClientAddFriendResponse() {
  SharedDtor();
}

void CMsgClientAddFriendResponse::SharedDtor() {
  if (persona_name_added_ != &::google::protobuf::internal::kEmptyString) {
    delete persona_name_added_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientAddFriendResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientAddFriendResponse& CMsgClientAddFriendResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientAddFriendResponse* CMsgClientAddFriendResponse::default_instance_ = NULL;

CMsgClientAddFriendResponse* CMsgClientAddFriendResponse::New() const {
  return new CMsgClientAddFriendResponse;
}

void CMsgClientAddFriendResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    steam_id_added_ = GOOGLE_ULONGLONG(0);
    if (has_persona_name_added()) {
      if (persona_name_added_ != &::google::protobuf::internal::kEmptyString) {
        persona_name_added_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientAddFriendResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_steam_id_added;
        break;
      }

      // optional fixed64 steam_id_added = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steam_id_added:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_added_)));
          set_has_steam_id_added();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_persona_name_added;
        break;
      }

      // optional string persona_name_added = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_persona_name_added:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona_name_added()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientAddFriendResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional fixed64 steam_id_added = 2;
  if (has_steam_id_added()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id_added(), output);
  }

  // optional string persona_name_added = 3;
  if (has_persona_name_added()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->persona_name_added(), output);
  }

}

int CMsgClientAddFriendResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional fixed64 steam_id_added = 2;
    if (has_steam_id_added()) {
      total_size += 1 + 8;
    }

    // optional string persona_name_added = 3;
    if (has_persona_name_added()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona_name_added());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAddFriendResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientAddFriendResponse*>(&from));
}

void CMsgClientAddFriendResponse::MergeFrom(const CMsgClientAddFriendResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_steam_id_added()) {
      set_steam_id_added(from.steam_id_added());
    }
    if (from.has_persona_name_added()) {
      set_persona_name_added(from.persona_name_added());
    }
  }
}

void CMsgClientAddFriendResponse::CopyFrom(const CMsgClientAddFriendResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAddFriendResponse::IsInitialized() const {

  return true;
}

void CMsgClientAddFriendResponse::Swap(CMsgClientAddFriendResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(steam_id_added_, other->steam_id_added_);
    std::swap(persona_name_added_, other->persona_name_added_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientAddFriendResponse::GetTypeName() const {
  return "Sc.CMsgClientAddFriendResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientRemoveFriend::kFriendidFieldNumber;
#endif  // !_MSC_VER

CMsgClientRemoveFriend::CMsgClientRemoveFriend()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientRemoveFriend::InitAsDefaultInstance() {
}

CMsgClientRemoveFriend::CMsgClientRemoveFriend(const CMsgClientRemoveFriend& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRemoveFriend::SharedCtor() {
  _cached_size_ = 0;
  friendid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRemoveFriend::~CMsgClientRemoveFriend() {
  SharedDtor();
}

void CMsgClientRemoveFriend::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientRemoveFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientRemoveFriend& CMsgClientRemoveFriend::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientRemoveFriend* CMsgClientRemoveFriend::default_instance_ = NULL;

CMsgClientRemoveFriend* CMsgClientRemoveFriend::New() const {
  return new CMsgClientRemoveFriend;
}

void CMsgClientRemoveFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    friendid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientRemoveFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 friendid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &friendid_)));
          set_has_friendid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientRemoveFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 friendid = 1;
  if (has_friendid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->friendid(), output);
  }

}

int CMsgClientRemoveFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 friendid = 1;
    if (has_friendid()) {
      total_size += 1 + 8;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRemoveFriend::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientRemoveFriend*>(&from));
}

void CMsgClientRemoveFriend::MergeFrom(const CMsgClientRemoveFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friendid()) {
      set_friendid(from.friendid());
    }
  }
}

void CMsgClientRemoveFriend::CopyFrom(const CMsgClientRemoveFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRemoveFriend::IsInitialized() const {

  return true;
}

void CMsgClientRemoveFriend::Swap(CMsgClientRemoveFriend* other) {
  if (other != this) {
    std::swap(friendid_, other->friendid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientRemoveFriend::GetTypeName() const {
  return "Sc.CMsgClientRemoveFriend";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientHideFriend::kFriendidFieldNumber;
const int CMsgClientHideFriend::kHideFieldNumber;
#endif  // !_MSC_VER

CMsgClientHideFriend::CMsgClientHideFriend()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientHideFriend::InitAsDefaultInstance() {
}

CMsgClientHideFriend::CMsgClientHideFriend(const CMsgClientHideFriend& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientHideFriend::SharedCtor() {
  _cached_size_ = 0;
  friendid_ = GOOGLE_ULONGLONG(0);
  hide_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientHideFriend::~CMsgClientHideFriend() {
  SharedDtor();
}

void CMsgClientHideFriend::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientHideFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientHideFriend& CMsgClientHideFriend::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientHideFriend* CMsgClientHideFriend::default_instance_ = NULL;

CMsgClientHideFriend* CMsgClientHideFriend::New() const {
  return new CMsgClientHideFriend;
}

void CMsgClientHideFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    friendid_ = GOOGLE_ULONGLONG(0);
    hide_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientHideFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 friendid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &friendid_)));
          set_has_friendid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hide;
        break;
      }

      // optional bool hide = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hide_)));
          set_has_hide();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientHideFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 friendid = 1;
  if (has_friendid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->friendid(), output);
  }

  // optional bool hide = 2;
  if (has_hide()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->hide(), output);
  }

}

int CMsgClientHideFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 friendid = 1;
    if (has_friendid()) {
      total_size += 1 + 8;
    }

    // optional bool hide = 2;
    if (has_hide()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientHideFriend::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientHideFriend*>(&from));
}

void CMsgClientHideFriend::MergeFrom(const CMsgClientHideFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friendid()) {
      set_friendid(from.friendid());
    }
    if (from.has_hide()) {
      set_hide(from.hide());
    }
  }
}

void CMsgClientHideFriend::CopyFrom(const CMsgClientHideFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientHideFriend::IsInitialized() const {

  return true;
}

void CMsgClientHideFriend::Swap(CMsgClientHideFriend* other) {
  if (other != this) {
    std::swap(friendid_, other->friendid_);
    std::swap(hide_, other->hide_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientHideFriend::GetTypeName() const {
  return "Sc.CMsgClientHideFriend";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUCMAddScreenshot_Tag::kTagNameFieldNumber;
const int CMsgClientUCMAddScreenshot_Tag::kTagValueFieldNumber;
#endif  // !_MSC_VER

CMsgClientUCMAddScreenshot_Tag::CMsgClientUCMAddScreenshot_Tag()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUCMAddScreenshot_Tag::InitAsDefaultInstance() {
}

CMsgClientUCMAddScreenshot_Tag::CMsgClientUCMAddScreenshot_Tag(const CMsgClientUCMAddScreenshot_Tag& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUCMAddScreenshot_Tag::SharedCtor() {
  _cached_size_ = 0;
  tag_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tag_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUCMAddScreenshot_Tag::~CMsgClientUCMAddScreenshot_Tag() {
  SharedDtor();
}

void CMsgClientUCMAddScreenshot_Tag::SharedDtor() {
  if (tag_name_ != &::google::protobuf::internal::kEmptyString) {
    delete tag_name_;
  }
  if (tag_value_ != &::google::protobuf::internal::kEmptyString) {
    delete tag_value_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUCMAddScreenshot_Tag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUCMAddScreenshot_Tag& CMsgClientUCMAddScreenshot_Tag::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUCMAddScreenshot_Tag* CMsgClientUCMAddScreenshot_Tag::default_instance_ = NULL;

CMsgClientUCMAddScreenshot_Tag* CMsgClientUCMAddScreenshot_Tag::New() const {
  return new CMsgClientUCMAddScreenshot_Tag;
}

void CMsgClientUCMAddScreenshot_Tag::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tag_name()) {
      if (tag_name_ != &::google::protobuf::internal::kEmptyString) {
        tag_name_->clear();
      }
    }
    if (has_tag_value()) {
      if (tag_value_ != &::google::protobuf::internal::kEmptyString) {
        tag_value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUCMAddScreenshot_Tag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tag_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tag_value;
        break;
      }

      // optional string tag_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tag_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUCMAddScreenshot_Tag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string tag_name = 1;
  if (has_tag_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->tag_name(), output);
  }

  // optional string tag_value = 2;
  if (has_tag_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->tag_value(), output);
  }

}

int CMsgClientUCMAddScreenshot_Tag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string tag_name = 1;
    if (has_tag_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag_name());
    }

    // optional string tag_value = 2;
    if (has_tag_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag_value());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUCMAddScreenshot_Tag::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUCMAddScreenshot_Tag*>(&from));
}

void CMsgClientUCMAddScreenshot_Tag::MergeFrom(const CMsgClientUCMAddScreenshot_Tag& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tag_name()) {
      set_tag_name(from.tag_name());
    }
    if (from.has_tag_value()) {
      set_tag_value(from.tag_value());
    }
  }
}

void CMsgClientUCMAddScreenshot_Tag::CopyFrom(const CMsgClientUCMAddScreenshot_Tag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUCMAddScreenshot_Tag::IsInitialized() const {

  return true;
}

void CMsgClientUCMAddScreenshot_Tag::Swap(CMsgClientUCMAddScreenshot_Tag* other) {
  if (other != this) {
    std::swap(tag_name_, other->tag_name_);
    std::swap(tag_value_, other->tag_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUCMAddScreenshot_Tag::GetTypeName() const {
  return "Sc.CMsgClientUCMAddScreenshot.Tag";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientUCMAddScreenshot::kAppidFieldNumber;
const int CMsgClientUCMAddScreenshot::kFilenameFieldNumber;
const int CMsgClientUCMAddScreenshot::kThumbnameFieldNumber;
const int CMsgClientUCMAddScreenshot::kRtime32CreatedFieldNumber;
const int CMsgClientUCMAddScreenshot::kWidthFieldNumber;
const int CMsgClientUCMAddScreenshot::kHeightFieldNumber;
const int CMsgClientUCMAddScreenshot::kPermissionsFieldNumber;
const int CMsgClientUCMAddScreenshot::kCaptionFieldNumber;
const int CMsgClientUCMAddScreenshot::kShortcutNameFieldNumber;
const int CMsgClientUCMAddScreenshot::kTagFieldNumber;
const int CMsgClientUCMAddScreenshot::kTaggedSteamidFieldNumber;
const int CMsgClientUCMAddScreenshot::kSpoilerTagFieldNumber;
const int CMsgClientUCMAddScreenshot::kTaggedPublishedfileidFieldNumber;
#endif  // !_MSC_VER

CMsgClientUCMAddScreenshot::CMsgClientUCMAddScreenshot()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUCMAddScreenshot::InitAsDefaultInstance() {
}

CMsgClientUCMAddScreenshot::CMsgClientUCMAddScreenshot(const CMsgClientUCMAddScreenshot& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUCMAddScreenshot::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0u;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  thumbname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rtime32_created_ = 0u;
  width_ = 0u;
  height_ = 0u;
  permissions_ = 0u;
  caption_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  shortcut_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  spoiler_tag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUCMAddScreenshot::~CMsgClientUCMAddScreenshot() {
  SharedDtor();
}

void CMsgClientUCMAddScreenshot::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (thumbname_ != &::google::protobuf::internal::kEmptyString) {
    delete thumbname_;
  }
  if (caption_ != &::google::protobuf::internal::kEmptyString) {
    delete caption_;
  }
  if (shortcut_name_ != &::google::protobuf::internal::kEmptyString) {
    delete shortcut_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUCMAddScreenshot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUCMAddScreenshot& CMsgClientUCMAddScreenshot::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUCMAddScreenshot* CMsgClientUCMAddScreenshot::default_instance_ = NULL;

CMsgClientUCMAddScreenshot* CMsgClientUCMAddScreenshot::New() const {
  return new CMsgClientUCMAddScreenshot;
}

void CMsgClientUCMAddScreenshot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    appid_ = 0u;
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    if (has_thumbname()) {
      if (thumbname_ != &::google::protobuf::internal::kEmptyString) {
        thumbname_->clear();
      }
    }
    rtime32_created_ = 0u;
    width_ = 0u;
    height_ = 0u;
    permissions_ = 0u;
    if (has_caption()) {
      if (caption_ != &::google::protobuf::internal::kEmptyString) {
        caption_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_shortcut_name()) {
      if (shortcut_name_ != &::google::protobuf::internal::kEmptyString) {
        shortcut_name_->clear();
      }
    }
    spoiler_tag_ = false;
  }
  tag_.Clear();
  tagged_steamid_.Clear();
  tagged_publishedfileid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUCMAddScreenshot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_filename;
        break;
      }

      // optional string filename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_thumbname;
        break;
      }

      // optional string thumbname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_thumbname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thumbname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_rtime32_created;
        break;
      }

      // optional fixed32 rtime32_created = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rtime32_created:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &rtime32_created_)));
          set_has_rtime32_created();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_width;
        break;
      }

      // optional uint32 width = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_height;
        break;
      }

      // optional uint32 height = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_permissions;
        break;
      }

      // optional uint32 permissions = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_permissions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &permissions_)));
          set_has_permissions();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_caption;
        break;
      }

      // optional string caption = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_caption:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_caption()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_shortcut_name;
        break;
      }

      // optional string shortcut_name = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shortcut_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shortcut_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_tag;
        break;
      }

      // repeated .Sc.CMsgClientUCMAddScreenshot.Tag tag = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_tag;
        if (input->ExpectTag(89)) goto parse_tagged_steamid;
        break;
      }

      // repeated fixed64 tagged_steamid = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_tagged_steamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 89, input, this->mutable_tagged_steamid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_tagged_steamid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_tagged_steamid;
        if (input->ExpectTag(96)) goto parse_spoiler_tag;
        break;
      }

      // optional bool spoiler_tag = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spoiler_tag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &spoiler_tag_)));
          set_has_spoiler_tag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_tagged_publishedfileid;
        break;
      }

      // repeated uint64 tagged_publishedfileid = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tagged_publishedfileid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 104, input, this->mutable_tagged_publishedfileid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_tagged_publishedfileid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_tagged_publishedfileid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUCMAddScreenshot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 appid = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional string filename = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->filename(), output);
  }

  // optional string thumbname = 3;
  if (has_thumbname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->thumbname(), output);
  }

  // optional fixed32 rtime32_created = 4;
  if (has_rtime32_created()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->rtime32_created(), output);
  }

  // optional uint32 width = 5;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->width(), output);
  }

  // optional uint32 height = 6;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->height(), output);
  }

  // optional uint32 permissions = 7;
  if (has_permissions()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->permissions(), output);
  }

  // optional string caption = 8;
  if (has_caption()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->caption(), output);
  }

  // optional string shortcut_name = 9;
  if (has_shortcut_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->shortcut_name(), output);
  }

  // repeated .Sc.CMsgClientUCMAddScreenshot.Tag tag = 10;
  for (int i = 0; i < this->tag_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->tag(i), output);
  }

  // repeated fixed64 tagged_steamid = 11;
  for (int i = 0; i < this->tagged_steamid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      11, this->tagged_steamid(i), output);
  }

  // optional bool spoiler_tag = 12;
  if (has_spoiler_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->spoiler_tag(), output);
  }

  // repeated uint64 tagged_publishedfileid = 13;
  for (int i = 0; i < this->tagged_publishedfileid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      13, this->tagged_publishedfileid(i), output);
  }

}

int CMsgClientUCMAddScreenshot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional string filename = 2;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional string thumbname = 3;
    if (has_thumbname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->thumbname());
    }

    // optional fixed32 rtime32_created = 4;
    if (has_rtime32_created()) {
      total_size += 1 + 4;
    }

    // optional uint32 width = 5;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // optional uint32 height = 6;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // optional uint32 permissions = 7;
    if (has_permissions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->permissions());
    }

    // optional string caption = 8;
    if (has_caption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->caption());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string shortcut_name = 9;
    if (has_shortcut_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shortcut_name());
    }

    // optional bool spoiler_tag = 12;
    if (has_spoiler_tag()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Sc.CMsgClientUCMAddScreenshot.Tag tag = 10;
  total_size += 1 * this->tag_size();
  for (int i = 0; i < this->tag_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tag(i));
  }

  // repeated fixed64 tagged_steamid = 11;
  {
    int data_size = 0;
    data_size = 8 * this->tagged_steamid_size();
    total_size += 1 * this->tagged_steamid_size() + data_size;
  }

  // repeated uint64 tagged_publishedfileid = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->tagged_publishedfileid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->tagged_publishedfileid(i));
    }
    total_size += 1 * this->tagged_publishedfileid_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUCMAddScreenshot::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUCMAddScreenshot*>(&from));
}

void CMsgClientUCMAddScreenshot::MergeFrom(const CMsgClientUCMAddScreenshot& from) {
  GOOGLE_CHECK_NE(&from, this);
  tag_.MergeFrom(from.tag_);
  tagged_steamid_.MergeFrom(from.tagged_steamid_);
  tagged_publishedfileid_.MergeFrom(from.tagged_publishedfileid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_thumbname()) {
      set_thumbname(from.thumbname());
    }
    if (from.has_rtime32_created()) {
      set_rtime32_created(from.rtime32_created());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_permissions()) {
      set_permissions(from.permissions());
    }
    if (from.has_caption()) {
      set_caption(from.caption());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_shortcut_name()) {
      set_shortcut_name(from.shortcut_name());
    }
    if (from.has_spoiler_tag()) {
      set_spoiler_tag(from.spoiler_tag());
    }
  }
}

void CMsgClientUCMAddScreenshot::CopyFrom(const CMsgClientUCMAddScreenshot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUCMAddScreenshot::IsInitialized() const {

  return true;
}

void CMsgClientUCMAddScreenshot::Swap(CMsgClientUCMAddScreenshot* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(filename_, other->filename_);
    std::swap(thumbname_, other->thumbname_);
    std::swap(rtime32_created_, other->rtime32_created_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(permissions_, other->permissions_);
    std::swap(caption_, other->caption_);
    std::swap(shortcut_name_, other->shortcut_name_);
    tag_.Swap(&other->tag_);
    tagged_steamid_.Swap(&other->tagged_steamid_);
    std::swap(spoiler_tag_, other->spoiler_tag_);
    tagged_publishedfileid_.Swap(&other->tagged_publishedfileid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUCMAddScreenshot::GetTypeName() const {
  return "Sc.CMsgClientUCMAddScreenshot";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUCMAddScreenshotResponse::kEresultFieldNumber;
const int CMsgClientUCMAddScreenshotResponse::kScreenshotidFieldNumber;
#endif  // !_MSC_VER

CMsgClientUCMAddScreenshotResponse::CMsgClientUCMAddScreenshotResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUCMAddScreenshotResponse::InitAsDefaultInstance() {
}

CMsgClientUCMAddScreenshotResponse::CMsgClientUCMAddScreenshotResponse(const CMsgClientUCMAddScreenshotResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUCMAddScreenshotResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  screenshotid_ = GOOGLE_ULONGLONG(18446744073709551615);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUCMAddScreenshotResponse::~CMsgClientUCMAddScreenshotResponse() {
  SharedDtor();
}

void CMsgClientUCMAddScreenshotResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUCMAddScreenshotResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUCMAddScreenshotResponse& CMsgClientUCMAddScreenshotResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUCMAddScreenshotResponse* CMsgClientUCMAddScreenshotResponse::default_instance_ = NULL;

CMsgClientUCMAddScreenshotResponse* CMsgClientUCMAddScreenshotResponse::New() const {
  return new CMsgClientUCMAddScreenshotResponse;
}

void CMsgClientUCMAddScreenshotResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    screenshotid_ = GOOGLE_ULONGLONG(18446744073709551615);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUCMAddScreenshotResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_screenshotid;
        break;
      }

      // optional fixed64 screenshotid = 2 [default = 18446744073709551615];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_screenshotid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &screenshotid_)));
          set_has_screenshotid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUCMAddScreenshotResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional fixed64 screenshotid = 2 [default = 18446744073709551615];
  if (has_screenshotid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->screenshotid(), output);
  }

}

int CMsgClientUCMAddScreenshotResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional fixed64 screenshotid = 2 [default = 18446744073709551615];
    if (has_screenshotid()) {
      total_size += 1 + 8;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUCMAddScreenshotResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUCMAddScreenshotResponse*>(&from));
}

void CMsgClientUCMAddScreenshotResponse::MergeFrom(const CMsgClientUCMAddScreenshotResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_screenshotid()) {
      set_screenshotid(from.screenshotid());
    }
  }
}

void CMsgClientUCMAddScreenshotResponse::CopyFrom(const CMsgClientUCMAddScreenshotResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUCMAddScreenshotResponse::IsInitialized() const {

  return true;
}

void CMsgClientUCMAddScreenshotResponse::Swap(CMsgClientUCMAddScreenshotResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(screenshotid_, other->screenshotid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUCMAddScreenshotResponse::GetTypeName() const {
  return "Sc.CMsgClientUCMAddScreenshotResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUCMDeleteScreenshot::kScreenshotidFieldNumber;
#endif  // !_MSC_VER

CMsgClientUCMDeleteScreenshot::CMsgClientUCMDeleteScreenshot()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUCMDeleteScreenshot::InitAsDefaultInstance() {
}

CMsgClientUCMDeleteScreenshot::CMsgClientUCMDeleteScreenshot(const CMsgClientUCMDeleteScreenshot& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUCMDeleteScreenshot::SharedCtor() {
  _cached_size_ = 0;
  screenshotid_ = GOOGLE_ULONGLONG(18446744073709551615);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUCMDeleteScreenshot::~CMsgClientUCMDeleteScreenshot() {
  SharedDtor();
}

void CMsgClientUCMDeleteScreenshot::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUCMDeleteScreenshot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUCMDeleteScreenshot& CMsgClientUCMDeleteScreenshot::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUCMDeleteScreenshot* CMsgClientUCMDeleteScreenshot::default_instance_ = NULL;

CMsgClientUCMDeleteScreenshot* CMsgClientUCMDeleteScreenshot::New() const {
  return new CMsgClientUCMDeleteScreenshot;
}

void CMsgClientUCMDeleteScreenshot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    screenshotid_ = GOOGLE_ULONGLONG(18446744073709551615);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUCMDeleteScreenshot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 screenshotid = 1 [default = 18446744073709551615];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &screenshotid_)));
          set_has_screenshotid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUCMDeleteScreenshot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 screenshotid = 1 [default = 18446744073709551615];
  if (has_screenshotid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->screenshotid(), output);
  }

}

int CMsgClientUCMDeleteScreenshot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 screenshotid = 1 [default = 18446744073709551615];
    if (has_screenshotid()) {
      total_size += 1 + 8;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUCMDeleteScreenshot::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUCMDeleteScreenshot*>(&from));
}

void CMsgClientUCMDeleteScreenshot::MergeFrom(const CMsgClientUCMDeleteScreenshot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_screenshotid()) {
      set_screenshotid(from.screenshotid());
    }
  }
}

void CMsgClientUCMDeleteScreenshot::CopyFrom(const CMsgClientUCMDeleteScreenshot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUCMDeleteScreenshot::IsInitialized() const {

  return true;
}

void CMsgClientUCMDeleteScreenshot::Swap(CMsgClientUCMDeleteScreenshot* other) {
  if (other != this) {
    std::swap(screenshotid_, other->screenshotid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUCMDeleteScreenshot::GetTypeName() const {
  return "Sc.CMsgClientUCMDeleteScreenshot";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUCMDeleteScreenshotResponse::kEresultFieldNumber;
#endif  // !_MSC_VER

CMsgClientUCMDeleteScreenshotResponse::CMsgClientUCMDeleteScreenshotResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUCMDeleteScreenshotResponse::InitAsDefaultInstance() {
}

CMsgClientUCMDeleteScreenshotResponse::CMsgClientUCMDeleteScreenshotResponse(const CMsgClientUCMDeleteScreenshotResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUCMDeleteScreenshotResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUCMDeleteScreenshotResponse::~CMsgClientUCMDeleteScreenshotResponse() {
  SharedDtor();
}

void CMsgClientUCMDeleteScreenshotResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUCMDeleteScreenshotResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUCMDeleteScreenshotResponse& CMsgClientUCMDeleteScreenshotResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUCMDeleteScreenshotResponse* CMsgClientUCMDeleteScreenshotResponse::default_instance_ = NULL;

CMsgClientUCMDeleteScreenshotResponse* CMsgClientUCMDeleteScreenshotResponse::New() const {
  return new CMsgClientUCMDeleteScreenshotResponse;
}

void CMsgClientUCMDeleteScreenshotResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUCMDeleteScreenshotResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUCMDeleteScreenshotResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

}

int CMsgClientUCMDeleteScreenshotResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUCMDeleteScreenshotResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUCMDeleteScreenshotResponse*>(&from));
}

void CMsgClientUCMDeleteScreenshotResponse::MergeFrom(const CMsgClientUCMDeleteScreenshotResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
  }
}

void CMsgClientUCMDeleteScreenshotResponse::CopyFrom(const CMsgClientUCMDeleteScreenshotResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUCMDeleteScreenshotResponse::IsInitialized() const {

  return true;
}

void CMsgClientUCMDeleteScreenshotResponse::Swap(CMsgClientUCMDeleteScreenshotResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUCMDeleteScreenshotResponse::GetTypeName() const {
  return "Sc.CMsgClientUCMDeleteScreenshotResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUCMPublishFile::kAppIdFieldNumber;
const int CMsgClientUCMPublishFile::kFileNameFieldNumber;
const int CMsgClientUCMPublishFile::kPreviewFileNameFieldNumber;
const int CMsgClientUCMPublishFile::kConsumerAppIdFieldNumber;
const int CMsgClientUCMPublishFile::kTitleFieldNumber;
const int CMsgClientUCMPublishFile::kDescriptionFieldNumber;
const int CMsgClientUCMPublishFile::kTagsFieldNumber;
const int CMsgClientUCMPublishFile::kWorkshopFileFieldNumber;
const int CMsgClientUCMPublishFile::kVisibilityFieldNumber;
const int CMsgClientUCMPublishFile::kFileTypeFieldNumber;
const int CMsgClientUCMPublishFile::kUrlFieldNumber;
const int CMsgClientUCMPublishFile::kVideoProviderFieldNumber;
const int CMsgClientUCMPublishFile::kVideoAccountNameFieldNumber;
const int CMsgClientUCMPublishFile::kVideoIdentifierFieldNumber;
#endif  // !_MSC_VER

CMsgClientUCMPublishFile::CMsgClientUCMPublishFile()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUCMPublishFile::InitAsDefaultInstance() {
}

CMsgClientUCMPublishFile::CMsgClientUCMPublishFile(const CMsgClientUCMPublishFile& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUCMPublishFile::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  preview_file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  consumer_app_id_ = 0u;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  workshop_file_ = false;
  visibility_ = 0;
  file_type_ = 0u;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  video_provider_ = 0u;
  video_account_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  video_identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUCMPublishFile::~CMsgClientUCMPublishFile() {
  SharedDtor();
}

void CMsgClientUCMPublishFile::SharedDtor() {
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_name_;
  }
  if (preview_file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete preview_file_name_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (video_account_name_ != &::google::protobuf::internal::kEmptyString) {
    delete video_account_name_;
  }
  if (video_identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete video_identifier_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUCMPublishFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUCMPublishFile& CMsgClientUCMPublishFile::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUCMPublishFile* CMsgClientUCMPublishFile::default_instance_ = NULL;

CMsgClientUCMPublishFile* CMsgClientUCMPublishFile::New() const {
  return new CMsgClientUCMPublishFile;
}

void CMsgClientUCMPublishFile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::kEmptyString) {
        file_name_->clear();
      }
    }
    if (has_preview_file_name()) {
      if (preview_file_name_ != &::google::protobuf::internal::kEmptyString) {
        preview_file_name_->clear();
      }
    }
    consumer_app_id_ = 0u;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
    workshop_file_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    visibility_ = 0;
    file_type_ = 0u;
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
    video_provider_ = 0u;
    if (has_video_account_name()) {
      if (video_account_name_ != &::google::protobuf::internal::kEmptyString) {
        video_account_name_->clear();
      }
    }
    if (has_video_identifier()) {
      if (video_identifier_ != &::google::protobuf::internal::kEmptyString) {
        video_identifier_->clear();
      }
    }
  }
  tags_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUCMPublishFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_file_name;
        break;
      }

      // optional string file_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_preview_file_name;
        break;
      }

      // optional string preview_file_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_preview_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_preview_file_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_consumer_app_id;
        break;
      }

      // optional uint32 consumer_app_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consumer_app_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consumer_app_id_)));
          set_has_consumer_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_title;
        break;
      }

      // optional string title = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_description;
        break;
      }

      // optional string description = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_tags;
        break;
      }

      // repeated string tags = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_tags;
        if (input->ExpectTag(72)) goto parse_workshop_file;
        break;
      }

      // optional bool workshop_file = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_workshop_file:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &workshop_file_)));
          set_has_workshop_file();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_visibility;
        break;
      }

      // optional int32 visibility = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_visibility:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &visibility_)));
          set_has_visibility();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_file_type;
        break;
      }

      // optional uint32 file_type = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_type_)));
          set_has_file_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_url;
        break;
      }

      // optional string url = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_video_provider;
        break;
      }

      // optional uint32 video_provider = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_video_provider:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &video_provider_)));
          set_has_video_provider();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_video_account_name;
        break;
      }

      // optional string video_account_name = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_video_account_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_video_account_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_video_identifier;
        break;
      }

      // optional string video_identifier = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_video_identifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_video_identifier()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUCMPublishFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional string file_name = 2;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->file_name(), output);
  }

  // optional string preview_file_name = 3;
  if (has_preview_file_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->preview_file_name(), output);
  }

  // optional uint32 consumer_app_id = 4;
  if (has_consumer_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->consumer_app_id(), output);
  }

  // optional string title = 5;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->title(), output);
  }

  // optional string description = 6;
  if (has_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->description(), output);
  }

  // repeated string tags = 8;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->tags(i), output);
  }

  // optional bool workshop_file = 9;
  if (has_workshop_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->workshop_file(), output);
  }

  // optional int32 visibility = 10;
  if (has_visibility()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->visibility(), output);
  }

  // optional uint32 file_type = 11;
  if (has_file_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->file_type(), output);
  }

  // optional string url = 12;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->url(), output);
  }

  // optional uint32 video_provider = 13;
  if (has_video_provider()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->video_provider(), output);
  }

  // optional string video_account_name = 14;
  if (has_video_account_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->video_account_name(), output);
  }

  // optional string video_identifier = 15;
  if (has_video_identifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->video_identifier(), output);
  }

}

int CMsgClientUCMPublishFile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional string file_name = 2;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // optional string preview_file_name = 3;
    if (has_preview_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->preview_file_name());
    }

    // optional uint32 consumer_app_id = 4;
    if (has_consumer_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consumer_app_id());
    }

    // optional string title = 5;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string description = 6;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional bool workshop_file = 9;
    if (has_workshop_file()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 visibility = 10;
    if (has_visibility()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->visibility());
    }

    // optional uint32 file_type = 11;
    if (has_file_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_type());
    }

    // optional string url = 12;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional uint32 video_provider = 13;
    if (has_video_provider()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->video_provider());
    }

    // optional string video_account_name = 14;
    if (has_video_account_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->video_account_name());
    }

    // optional string video_identifier = 15;
    if (has_video_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->video_identifier());
    }

  }
  // repeated string tags = 8;
  total_size += 1 * this->tags_size();
  for (int i = 0; i < this->tags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUCMPublishFile::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUCMPublishFile*>(&from));
}

void CMsgClientUCMPublishFile::MergeFrom(const CMsgClientUCMPublishFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  tags_.MergeFrom(from.tags_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
    if (from.has_preview_file_name()) {
      set_preview_file_name(from.preview_file_name());
    }
    if (from.has_consumer_app_id()) {
      set_consumer_app_id(from.consumer_app_id());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_workshop_file()) {
      set_workshop_file(from.workshop_file());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_visibility()) {
      set_visibility(from.visibility());
    }
    if (from.has_file_type()) {
      set_file_type(from.file_type());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_video_provider()) {
      set_video_provider(from.video_provider());
    }
    if (from.has_video_account_name()) {
      set_video_account_name(from.video_account_name());
    }
    if (from.has_video_identifier()) {
      set_video_identifier(from.video_identifier());
    }
  }
}

void CMsgClientUCMPublishFile::CopyFrom(const CMsgClientUCMPublishFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUCMPublishFile::IsInitialized() const {

  return true;
}

void CMsgClientUCMPublishFile::Swap(CMsgClientUCMPublishFile* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(file_name_, other->file_name_);
    std::swap(preview_file_name_, other->preview_file_name_);
    std::swap(consumer_app_id_, other->consumer_app_id_);
    std::swap(title_, other->title_);
    std::swap(description_, other->description_);
    tags_.Swap(&other->tags_);
    std::swap(workshop_file_, other->workshop_file_);
    std::swap(visibility_, other->visibility_);
    std::swap(file_type_, other->file_type_);
    std::swap(url_, other->url_);
    std::swap(video_provider_, other->video_provider_);
    std::swap(video_account_name_, other->video_account_name_);
    std::swap(video_identifier_, other->video_identifier_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUCMPublishFile::GetTypeName() const {
  return "Sc.CMsgClientUCMPublishFile";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUCMPublishFileResponse::kEresultFieldNumber;
const int CMsgClientUCMPublishFileResponse::kPublishedFileIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientUCMPublishFileResponse::CMsgClientUCMPublishFileResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUCMPublishFileResponse::InitAsDefaultInstance() {
}

CMsgClientUCMPublishFileResponse::CMsgClientUCMPublishFileResponse(const CMsgClientUCMPublishFileResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUCMPublishFileResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  published_file_id_ = GOOGLE_ULONGLONG(18446744073709551615);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUCMPublishFileResponse::~CMsgClientUCMPublishFileResponse() {
  SharedDtor();
}

void CMsgClientUCMPublishFileResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUCMPublishFileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUCMPublishFileResponse& CMsgClientUCMPublishFileResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUCMPublishFileResponse* CMsgClientUCMPublishFileResponse::default_instance_ = NULL;

CMsgClientUCMPublishFileResponse* CMsgClientUCMPublishFileResponse::New() const {
  return new CMsgClientUCMPublishFileResponse;
}

void CMsgClientUCMPublishFileResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    published_file_id_ = GOOGLE_ULONGLONG(18446744073709551615);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUCMPublishFileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_published_file_id;
        break;
      }

      // optional fixed64 published_file_id = 2 [default = 18446744073709551615];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_published_file_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &published_file_id_)));
          set_has_published_file_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUCMPublishFileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional fixed64 published_file_id = 2 [default = 18446744073709551615];
  if (has_published_file_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->published_file_id(), output);
  }

}

int CMsgClientUCMPublishFileResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional fixed64 published_file_id = 2 [default = 18446744073709551615];
    if (has_published_file_id()) {
      total_size += 1 + 8;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUCMPublishFileResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUCMPublishFileResponse*>(&from));
}

void CMsgClientUCMPublishFileResponse::MergeFrom(const CMsgClientUCMPublishFileResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_published_file_id()) {
      set_published_file_id(from.published_file_id());
    }
  }
}

void CMsgClientUCMPublishFileResponse::CopyFrom(const CMsgClientUCMPublishFileResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUCMPublishFileResponse::IsInitialized() const {

  return true;
}

void CMsgClientUCMPublishFileResponse::Swap(CMsgClientUCMPublishFileResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(published_file_id_, other->published_file_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUCMPublishFileResponse::GetTypeName() const {
  return "Sc.CMsgClientUCMPublishFileResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUCMUpdatePublishedFile::kAppIdFieldNumber;
const int CMsgClientUCMUpdatePublishedFile::kPublishedFileIdFieldNumber;
const int CMsgClientUCMUpdatePublishedFile::kFileNameFieldNumber;
const int CMsgClientUCMUpdatePublishedFile::kPreviewFileNameFieldNumber;
const int CMsgClientUCMUpdatePublishedFile::kTitleFieldNumber;
const int CMsgClientUCMUpdatePublishedFile::kDescriptionFieldNumber;
const int CMsgClientUCMUpdatePublishedFile::kTagsFieldNumber;
const int CMsgClientUCMUpdatePublishedFile::kVisibilityFieldNumber;
const int CMsgClientUCMUpdatePublishedFile::kUpdateFileFieldNumber;
const int CMsgClientUCMUpdatePublishedFile::kUpdatePreviewFileFieldNumber;
const int CMsgClientUCMUpdatePublishedFile::kUpdateTitleFieldNumber;
const int CMsgClientUCMUpdatePublishedFile::kUpdateDescriptionFieldNumber;
const int CMsgClientUCMUpdatePublishedFile::kUpdateTagsFieldNumber;
const int CMsgClientUCMUpdatePublishedFile::kUpdateVisibilityFieldNumber;
const int CMsgClientUCMUpdatePublishedFile::kChangeDescriptionFieldNumber;
const int CMsgClientUCMUpdatePublishedFile::kUpdateUrlFieldNumber;
const int CMsgClientUCMUpdatePublishedFile::kUrlFieldNumber;
#endif  // !_MSC_VER

CMsgClientUCMUpdatePublishedFile::CMsgClientUCMUpdatePublishedFile()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUCMUpdatePublishedFile::InitAsDefaultInstance() {
}

CMsgClientUCMUpdatePublishedFile::CMsgClientUCMUpdatePublishedFile(const CMsgClientUCMUpdatePublishedFile& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUCMUpdatePublishedFile::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  published_file_id_ = GOOGLE_ULONGLONG(0);
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  preview_file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  visibility_ = 0;
  update_file_ = false;
  update_preview_file_ = false;
  update_title_ = false;
  update_description_ = false;
  update_tags_ = false;
  update_visibility_ = false;
  change_description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  update_url_ = false;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUCMUpdatePublishedFile::~CMsgClientUCMUpdatePublishedFile() {
  SharedDtor();
}

void CMsgClientUCMUpdatePublishedFile::SharedDtor() {
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_name_;
  }
  if (preview_file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete preview_file_name_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (change_description_ != &::google::protobuf::internal::kEmptyString) {
    delete change_description_;
  }
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUCMUpdatePublishedFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUCMUpdatePublishedFile& CMsgClientUCMUpdatePublishedFile::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUCMUpdatePublishedFile* CMsgClientUCMUpdatePublishedFile::default_instance_ = NULL;

CMsgClientUCMUpdatePublishedFile* CMsgClientUCMUpdatePublishedFile::New() const {
  return new CMsgClientUCMUpdatePublishedFile;
}

void CMsgClientUCMUpdatePublishedFile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    published_file_id_ = GOOGLE_ULONGLONG(0);
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::kEmptyString) {
        file_name_->clear();
      }
    }
    if (has_preview_file_name()) {
      if (preview_file_name_ != &::google::protobuf::internal::kEmptyString) {
        preview_file_name_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
    visibility_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    update_file_ = false;
    update_preview_file_ = false;
    update_title_ = false;
    update_description_ = false;
    update_tags_ = false;
    update_visibility_ = false;
    if (has_change_description()) {
      if (change_description_ != &::google::protobuf::internal::kEmptyString) {
        change_description_->clear();
      }
    }
    update_url_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
  }
  tags_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUCMUpdatePublishedFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_published_file_id;
        break;
      }

      // optional fixed64 published_file_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_published_file_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &published_file_id_)));
          set_has_published_file_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_file_name;
        break;
      }

      // optional string file_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_preview_file_name;
        break;
      }

      // optional string preview_file_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_preview_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_preview_file_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_title;
        break;
      }

      // optional string title = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_description;
        break;
      }

      // optional string description = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_tags;
        break;
      }

      // repeated string tags = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_tags;
        if (input->ExpectTag(64)) goto parse_visibility;
        break;
      }

      // optional int32 visibility = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_visibility:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &visibility_)));
          set_has_visibility();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_update_file;
        break;
      }

      // optional bool update_file = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_file:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &update_file_)));
          set_has_update_file();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_update_preview_file;
        break;
      }

      // optional bool update_preview_file = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_preview_file:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &update_preview_file_)));
          set_has_update_preview_file();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_update_title;
        break;
      }

      // optional bool update_title = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_title:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &update_title_)));
          set_has_update_title();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_update_description;
        break;
      }

      // optional bool update_description = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_description:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &update_description_)));
          set_has_update_description();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_update_tags;
        break;
      }

      // optional bool update_tags = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_tags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &update_tags_)));
          set_has_update_tags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_update_visibility;
        break;
      }

      // optional bool update_visibility = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_visibility:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &update_visibility_)));
          set_has_update_visibility();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_change_description;
        break;
      }

      // optional string change_description = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_change_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_change_description()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_update_url;
        break;
      }

      // optional bool update_url = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_url:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &update_url_)));
          set_has_update_url();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_url;
        break;
      }

      // optional string url = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUCMUpdatePublishedFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 published_file_id = 2;
  if (has_published_file_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->published_file_id(), output);
  }

  // optional string file_name = 3;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->file_name(), output);
  }

  // optional string preview_file_name = 4;
  if (has_preview_file_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->preview_file_name(), output);
  }

  // optional string title = 5;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->title(), output);
  }

  // optional string description = 6;
  if (has_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->description(), output);
  }

  // repeated string tags = 7;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->tags(i), output);
  }

  // optional int32 visibility = 8;
  if (has_visibility()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->visibility(), output);
  }

  // optional bool update_file = 9;
  if (has_update_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->update_file(), output);
  }

  // optional bool update_preview_file = 10;
  if (has_update_preview_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->update_preview_file(), output);
  }

  // optional bool update_title = 11;
  if (has_update_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->update_title(), output);
  }

  // optional bool update_description = 12;
  if (has_update_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->update_description(), output);
  }

  // optional bool update_tags = 13;
  if (has_update_tags()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->update_tags(), output);
  }

  // optional bool update_visibility = 14;
  if (has_update_visibility()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->update_visibility(), output);
  }

  // optional string change_description = 15;
  if (has_change_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->change_description(), output);
  }

  // optional bool update_url = 16;
  if (has_update_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->update_url(), output);
  }

  // optional string url = 17;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->url(), output);
  }

}

int CMsgClientUCMUpdatePublishedFile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional fixed64 published_file_id = 2;
    if (has_published_file_id()) {
      total_size += 1 + 8;
    }

    // optional string file_name = 3;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // optional string preview_file_name = 4;
    if (has_preview_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->preview_file_name());
    }

    // optional string title = 5;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string description = 6;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional int32 visibility = 8;
    if (has_visibility()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->visibility());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool update_file = 9;
    if (has_update_file()) {
      total_size += 1 + 1;
    }

    // optional bool update_preview_file = 10;
    if (has_update_preview_file()) {
      total_size += 1 + 1;
    }

    // optional bool update_title = 11;
    if (has_update_title()) {
      total_size += 1 + 1;
    }

    // optional bool update_description = 12;
    if (has_update_description()) {
      total_size += 1 + 1;
    }

    // optional bool update_tags = 13;
    if (has_update_tags()) {
      total_size += 1 + 1;
    }

    // optional bool update_visibility = 14;
    if (has_update_visibility()) {
      total_size += 1 + 1;
    }

    // optional string change_description = 15;
    if (has_change_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->change_description());
    }

    // optional bool update_url = 16;
    if (has_update_url()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string url = 17;
    if (has_url()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

  }
  // repeated string tags = 7;
  total_size += 1 * this->tags_size();
  for (int i = 0; i < this->tags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUCMUpdatePublishedFile::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUCMUpdatePublishedFile*>(&from));
}

void CMsgClientUCMUpdatePublishedFile::MergeFrom(const CMsgClientUCMUpdatePublishedFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  tags_.MergeFrom(from.tags_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_published_file_id()) {
      set_published_file_id(from.published_file_id());
    }
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
    if (from.has_preview_file_name()) {
      set_preview_file_name(from.preview_file_name());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_visibility()) {
      set_visibility(from.visibility());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_update_file()) {
      set_update_file(from.update_file());
    }
    if (from.has_update_preview_file()) {
      set_update_preview_file(from.update_preview_file());
    }
    if (from.has_update_title()) {
      set_update_title(from.update_title());
    }
    if (from.has_update_description()) {
      set_update_description(from.update_description());
    }
    if (from.has_update_tags()) {
      set_update_tags(from.update_tags());
    }
    if (from.has_update_visibility()) {
      set_update_visibility(from.update_visibility());
    }
    if (from.has_change_description()) {
      set_change_description(from.change_description());
    }
    if (from.has_update_url()) {
      set_update_url(from.update_url());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_url()) {
      set_url(from.url());
    }
  }
}

void CMsgClientUCMUpdatePublishedFile::CopyFrom(const CMsgClientUCMUpdatePublishedFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUCMUpdatePublishedFile::IsInitialized() const {

  return true;
}

void CMsgClientUCMUpdatePublishedFile::Swap(CMsgClientUCMUpdatePublishedFile* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(published_file_id_, other->published_file_id_);
    std::swap(file_name_, other->file_name_);
    std::swap(preview_file_name_, other->preview_file_name_);
    std::swap(title_, other->title_);
    std::swap(description_, other->description_);
    tags_.Swap(&other->tags_);
    std::swap(visibility_, other->visibility_);
    std::swap(update_file_, other->update_file_);
    std::swap(update_preview_file_, other->update_preview_file_);
    std::swap(update_title_, other->update_title_);
    std::swap(update_description_, other->update_description_);
    std::swap(update_tags_, other->update_tags_);
    std::swap(update_visibility_, other->update_visibility_);
    std::swap(change_description_, other->change_description_);
    std::swap(update_url_, other->update_url_);
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUCMUpdatePublishedFile::GetTypeName() const {
  return "Sc.CMsgClientUCMUpdatePublishedFile";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUCMUpdatePublishedFileResponse::kEresultFieldNumber;
#endif  // !_MSC_VER

CMsgClientUCMUpdatePublishedFileResponse::CMsgClientUCMUpdatePublishedFileResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUCMUpdatePublishedFileResponse::InitAsDefaultInstance() {
}

CMsgClientUCMUpdatePublishedFileResponse::CMsgClientUCMUpdatePublishedFileResponse(const CMsgClientUCMUpdatePublishedFileResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUCMUpdatePublishedFileResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUCMUpdatePublishedFileResponse::~CMsgClientUCMUpdatePublishedFileResponse() {
  SharedDtor();
}

void CMsgClientUCMUpdatePublishedFileResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUCMUpdatePublishedFileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUCMUpdatePublishedFileResponse& CMsgClientUCMUpdatePublishedFileResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUCMUpdatePublishedFileResponse* CMsgClientUCMUpdatePublishedFileResponse::default_instance_ = NULL;

CMsgClientUCMUpdatePublishedFileResponse* CMsgClientUCMUpdatePublishedFileResponse::New() const {
  return new CMsgClientUCMUpdatePublishedFileResponse;
}

void CMsgClientUCMUpdatePublishedFileResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUCMUpdatePublishedFileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUCMUpdatePublishedFileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

}

int CMsgClientUCMUpdatePublishedFileResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUCMUpdatePublishedFileResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUCMUpdatePublishedFileResponse*>(&from));
}

void CMsgClientUCMUpdatePublishedFileResponse::MergeFrom(const CMsgClientUCMUpdatePublishedFileResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
  }
}

void CMsgClientUCMUpdatePublishedFileResponse::CopyFrom(const CMsgClientUCMUpdatePublishedFileResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUCMUpdatePublishedFileResponse::IsInitialized() const {

  return true;
}

void CMsgClientUCMUpdatePublishedFileResponse::Swap(CMsgClientUCMUpdatePublishedFileResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUCMUpdatePublishedFileResponse::GetTypeName() const {
  return "Sc.CMsgClientUCMUpdatePublishedFileResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUCMGetPublishedFileDetails::kPublishedFileIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientUCMGetPublishedFileDetails::CMsgClientUCMGetPublishedFileDetails()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUCMGetPublishedFileDetails::InitAsDefaultInstance() {
}

CMsgClientUCMGetPublishedFileDetails::CMsgClientUCMGetPublishedFileDetails(const CMsgClientUCMGetPublishedFileDetails& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUCMGetPublishedFileDetails::SharedCtor() {
  _cached_size_ = 0;
  published_file_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUCMGetPublishedFileDetails::~CMsgClientUCMGetPublishedFileDetails() {
  SharedDtor();
}

void CMsgClientUCMGetPublishedFileDetails::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUCMGetPublishedFileDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUCMGetPublishedFileDetails& CMsgClientUCMGetPublishedFileDetails::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUCMGetPublishedFileDetails* CMsgClientUCMGetPublishedFileDetails::default_instance_ = NULL;

CMsgClientUCMGetPublishedFileDetails* CMsgClientUCMGetPublishedFileDetails::New() const {
  return new CMsgClientUCMGetPublishedFileDetails;
}

void CMsgClientUCMGetPublishedFileDetails::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    published_file_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUCMGetPublishedFileDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 published_file_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &published_file_id_)));
          set_has_published_file_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUCMGetPublishedFileDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 published_file_id = 1;
  if (has_published_file_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->published_file_id(), output);
  }

}

int CMsgClientUCMGetPublishedFileDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 published_file_id = 1;
    if (has_published_file_id()) {
      total_size += 1 + 8;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUCMGetPublishedFileDetails::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUCMGetPublishedFileDetails*>(&from));
}

void CMsgClientUCMGetPublishedFileDetails::MergeFrom(const CMsgClientUCMGetPublishedFileDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_published_file_id()) {
      set_published_file_id(from.published_file_id());
    }
  }
}

void CMsgClientUCMGetPublishedFileDetails::CopyFrom(const CMsgClientUCMGetPublishedFileDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUCMGetPublishedFileDetails::IsInitialized() const {

  return true;
}

void CMsgClientUCMGetPublishedFileDetails::Swap(CMsgClientUCMGetPublishedFileDetails* other) {
  if (other != this) {
    std::swap(published_file_id_, other->published_file_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUCMGetPublishedFileDetails::GetTypeName() const {
  return "Sc.CMsgClientUCMGetPublishedFileDetails";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUCMGetPublishedFileDetailsResponse::kEresultFieldNumber;
const int CMsgClientUCMGetPublishedFileDetailsResponse::kPublishedFileIdFieldNumber;
const int CMsgClientUCMGetPublishedFileDetailsResponse::kCreatorSteamIdFieldNumber;
const int CMsgClientUCMGetPublishedFileDetailsResponse::kCreatorAppIdFieldNumber;
const int CMsgClientUCMGetPublishedFileDetailsResponse::kConsumerAppIdFieldNumber;
const int CMsgClientUCMGetPublishedFileDetailsResponse::kFileHcontentFieldNumber;
const int CMsgClientUCMGetPublishedFileDetailsResponse::kPreviewHcontentFieldNumber;
const int CMsgClientUCMGetPublishedFileDetailsResponse::kTitleFieldNumber;
const int CMsgClientUCMGetPublishedFileDetailsResponse::kDescriptionFieldNumber;
const int CMsgClientUCMGetPublishedFileDetailsResponse::kRtime32CreatedFieldNumber;
const int CMsgClientUCMGetPublishedFileDetailsResponse::kRtime32UpdatedFieldNumber;
const int CMsgClientUCMGetPublishedFileDetailsResponse::kVisibilityFieldNumber;
const int CMsgClientUCMGetPublishedFileDetailsResponse::kBannedFieldNumber;
const int CMsgClientUCMGetPublishedFileDetailsResponse::kTagFieldNumber;
const int CMsgClientUCMGetPublishedFileDetailsResponse::kFilenameFieldNumber;
const int CMsgClientUCMGetPublishedFileDetailsResponse::kFileSizeFieldNumber;
const int CMsgClientUCMGetPublishedFileDetailsResponse::kPreviewFileSizeFieldNumber;
const int CMsgClientUCMGetPublishedFileDetailsResponse::kUrlFieldNumber;
const int CMsgClientUCMGetPublishedFileDetailsResponse::kFileTypeFieldNumber;
#endif  // !_MSC_VER

CMsgClientUCMGetPublishedFileDetailsResponse::CMsgClientUCMGetPublishedFileDetailsResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUCMGetPublishedFileDetailsResponse::InitAsDefaultInstance() {
}

CMsgClientUCMGetPublishedFileDetailsResponse::CMsgClientUCMGetPublishedFileDetailsResponse(const CMsgClientUCMGetPublishedFileDetailsResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUCMGetPublishedFileDetailsResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  published_file_id_ = GOOGLE_ULONGLONG(18446744073709551615);
  creator_steam_id_ = GOOGLE_ULONGLONG(0);
  creator_app_id_ = 0u;
  consumer_app_id_ = 0u;
  file_hcontent_ = GOOGLE_ULONGLONG(18446744073709551615);
  preview_hcontent_ = GOOGLE_ULONGLONG(18446744073709551615);
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rtime32_created_ = 0u;
  rtime32_updated_ = 0u;
  visibility_ = 0;
  banned_ = false;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_size_ = 0u;
  preview_file_size_ = 0u;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUCMGetPublishedFileDetailsResponse::~CMsgClientUCMGetPublishedFileDetailsResponse() {
  SharedDtor();
}

void CMsgClientUCMGetPublishedFileDetailsResponse::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUCMGetPublishedFileDetailsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUCMGetPublishedFileDetailsResponse& CMsgClientUCMGetPublishedFileDetailsResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUCMGetPublishedFileDetailsResponse* CMsgClientUCMGetPublishedFileDetailsResponse::default_instance_ = NULL;

CMsgClientUCMGetPublishedFileDetailsResponse* CMsgClientUCMGetPublishedFileDetailsResponse::New() const {
  return new CMsgClientUCMGetPublishedFileDetailsResponse;
}

void CMsgClientUCMGetPublishedFileDetailsResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    published_file_id_ = GOOGLE_ULONGLONG(18446744073709551615);
    creator_steam_id_ = GOOGLE_ULONGLONG(0);
    creator_app_id_ = 0u;
    consumer_app_id_ = 0u;
    file_hcontent_ = GOOGLE_ULONGLONG(18446744073709551615);
    preview_hcontent_ = GOOGLE_ULONGLONG(18446744073709551615);
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
    rtime32_created_ = 0u;
    rtime32_updated_ = 0u;
    visibility_ = 0;
    banned_ = false;
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    file_size_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    preview_file_size_ = 0u;
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
    file_type_ = 0u;
  }
  tag_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUCMGetPublishedFileDetailsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_published_file_id;
        break;
      }

      // optional fixed64 published_file_id = 2 [default = 18446744073709551615];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_published_file_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &published_file_id_)));
          set_has_published_file_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_creator_steam_id;
        break;
      }

      // optional fixed64 creator_steam_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_creator_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &creator_steam_id_)));
          set_has_creator_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_creator_app_id;
        break;
      }

      // optional uint32 creator_app_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_creator_app_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creator_app_id_)));
          set_has_creator_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_consumer_app_id;
        break;
      }

      // optional uint32 consumer_app_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consumer_app_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consumer_app_id_)));
          set_has_consumer_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_file_hcontent;
        break;
      }

      // optional fixed64 file_hcontent = 6 [default = 18446744073709551615];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_file_hcontent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &file_hcontent_)));
          set_has_file_hcontent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_preview_hcontent;
        break;
      }

      // optional fixed64 preview_hcontent = 7 [default = 18446744073709551615];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_preview_hcontent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &preview_hcontent_)));
          set_has_preview_hcontent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_title;
        break;
      }

      // optional string title = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_description;
        break;
      }

      // optional string description = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_rtime32_created;
        break;
      }

      // optional fixed32 rtime32_created = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rtime32_created:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &rtime32_created_)));
          set_has_rtime32_created();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_rtime32_updated;
        break;
      }

      // optional fixed32 rtime32_updated = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rtime32_updated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &rtime32_updated_)));
          set_has_rtime32_updated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_visibility;
        break;
      }

      // optional int32 visibility = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_visibility:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &visibility_)));
          set_has_visibility();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_banned;
        break;
      }

      // optional bool banned = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_banned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &banned_)));
          set_has_banned();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_tag;
        break;
      }

      // repeated string tag = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_tag;
        if (input->ExpectTag(122)) goto parse_filename;
        break;
      }

      // optional string filename = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_file_size;
        break;
      }

      // optional uint32 file_size = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_size_)));
          set_has_file_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_preview_file_size;
        break;
      }

      // optional uint32 preview_file_size = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_preview_file_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &preview_file_size_)));
          set_has_preview_file_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_url;
        break;
      }

      // optional string url = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_file_type;
        break;
      }

      // optional uint32 file_type = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_type_)));
          set_has_file_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUCMGetPublishedFileDetailsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional fixed64 published_file_id = 2 [default = 18446744073709551615];
  if (has_published_file_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->published_file_id(), output);
  }

  // optional fixed64 creator_steam_id = 3;
  if (has_creator_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->creator_steam_id(), output);
  }

  // optional uint32 creator_app_id = 4;
  if (has_creator_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->creator_app_id(), output);
  }

  // optional uint32 consumer_app_id = 5;
  if (has_consumer_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->consumer_app_id(), output);
  }

  // optional fixed64 file_hcontent = 6 [default = 18446744073709551615];
  if (has_file_hcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->file_hcontent(), output);
  }

  // optional fixed64 preview_hcontent = 7 [default = 18446744073709551615];
  if (has_preview_hcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->preview_hcontent(), output);
  }

  // optional string title = 8;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->title(), output);
  }

  // optional string description = 9;
  if (has_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->description(), output);
  }

  // optional fixed32 rtime32_created = 10;
  if (has_rtime32_created()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(10, this->rtime32_created(), output);
  }

  // optional fixed32 rtime32_updated = 11;
  if (has_rtime32_updated()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(11, this->rtime32_updated(), output);
  }

  // optional int32 visibility = 12;
  if (has_visibility()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->visibility(), output);
  }

  // optional bool banned = 13;
  if (has_banned()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->banned(), output);
  }

  // repeated string tag = 14;
  for (int i = 0; i < this->tag_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->tag(i), output);
  }

  // optional string filename = 15;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->filename(), output);
  }

  // optional uint32 file_size = 16;
  if (has_file_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->file_size(), output);
  }

  // optional uint32 preview_file_size = 17;
  if (has_preview_file_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->preview_file_size(), output);
  }

  // optional string url = 18;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->url(), output);
  }

  // optional uint32 file_type = 19;
  if (has_file_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->file_type(), output);
  }

}

int CMsgClientUCMGetPublishedFileDetailsResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional fixed64 published_file_id = 2 [default = 18446744073709551615];
    if (has_published_file_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 creator_steam_id = 3;
    if (has_creator_steam_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 creator_app_id = 4;
    if (has_creator_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creator_app_id());
    }

    // optional uint32 consumer_app_id = 5;
    if (has_consumer_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consumer_app_id());
    }

    // optional fixed64 file_hcontent = 6 [default = 18446744073709551615];
    if (has_file_hcontent()) {
      total_size += 1 + 8;
    }

    // optional fixed64 preview_hcontent = 7 [default = 18446744073709551615];
    if (has_preview_hcontent()) {
      total_size += 1 + 8;
    }

    // optional string title = 8;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string description = 9;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional fixed32 rtime32_created = 10;
    if (has_rtime32_created()) {
      total_size += 1 + 4;
    }

    // optional fixed32 rtime32_updated = 11;
    if (has_rtime32_updated()) {
      total_size += 1 + 4;
    }

    // optional int32 visibility = 12;
    if (has_visibility()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->visibility());
    }

    // optional bool banned = 13;
    if (has_banned()) {
      total_size += 1 + 1;
    }

    // optional string filename = 15;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional uint32 file_size = 16;
    if (has_file_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_size());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 preview_file_size = 17;
    if (has_preview_file_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->preview_file_size());
    }

    // optional string url = 18;
    if (has_url()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional uint32 file_type = 19;
    if (has_file_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_type());
    }

  }
  // repeated string tag = 14;
  total_size += 1 * this->tag_size();
  for (int i = 0; i < this->tag_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tag(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUCMGetPublishedFileDetailsResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUCMGetPublishedFileDetailsResponse*>(&from));
}

void CMsgClientUCMGetPublishedFileDetailsResponse::MergeFrom(const CMsgClientUCMGetPublishedFileDetailsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  tag_.MergeFrom(from.tag_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_published_file_id()) {
      set_published_file_id(from.published_file_id());
    }
    if (from.has_creator_steam_id()) {
      set_creator_steam_id(from.creator_steam_id());
    }
    if (from.has_creator_app_id()) {
      set_creator_app_id(from.creator_app_id());
    }
    if (from.has_consumer_app_id()) {
      set_consumer_app_id(from.consumer_app_id());
    }
    if (from.has_file_hcontent()) {
      set_file_hcontent(from.file_hcontent());
    }
    if (from.has_preview_hcontent()) {
      set_preview_hcontent(from.preview_hcontent());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_rtime32_created()) {
      set_rtime32_created(from.rtime32_created());
    }
    if (from.has_rtime32_updated()) {
      set_rtime32_updated(from.rtime32_updated());
    }
    if (from.has_visibility()) {
      set_visibility(from.visibility());
    }
    if (from.has_banned()) {
      set_banned(from.banned());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_file_size()) {
      set_file_size(from.file_size());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_preview_file_size()) {
      set_preview_file_size(from.preview_file_size());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_file_type()) {
      set_file_type(from.file_type());
    }
  }
}

void CMsgClientUCMGetPublishedFileDetailsResponse::CopyFrom(const CMsgClientUCMGetPublishedFileDetailsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUCMGetPublishedFileDetailsResponse::IsInitialized() const {

  return true;
}

void CMsgClientUCMGetPublishedFileDetailsResponse::Swap(CMsgClientUCMGetPublishedFileDetailsResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(published_file_id_, other->published_file_id_);
    std::swap(creator_steam_id_, other->creator_steam_id_);
    std::swap(creator_app_id_, other->creator_app_id_);
    std::swap(consumer_app_id_, other->consumer_app_id_);
    std::swap(file_hcontent_, other->file_hcontent_);
    std::swap(preview_hcontent_, other->preview_hcontent_);
    std::swap(title_, other->title_);
    std::swap(description_, other->description_);
    std::swap(rtime32_created_, other->rtime32_created_);
    std::swap(rtime32_updated_, other->rtime32_updated_);
    std::swap(visibility_, other->visibility_);
    std::swap(banned_, other->banned_);
    tag_.Swap(&other->tag_);
    std::swap(filename_, other->filename_);
    std::swap(file_size_, other->file_size_);
    std::swap(preview_file_size_, other->preview_file_size_);
    std::swap(url_, other->url_);
    std::swap(file_type_, other->file_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUCMGetPublishedFileDetailsResponse::GetTypeName() const {
  return "Sc.CMsgClientUCMGetPublishedFileDetailsResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUCMDeletePublishedFile::kPublishedFileIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientUCMDeletePublishedFile::CMsgClientUCMDeletePublishedFile()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUCMDeletePublishedFile::InitAsDefaultInstance() {
}

CMsgClientUCMDeletePublishedFile::CMsgClientUCMDeletePublishedFile(const CMsgClientUCMDeletePublishedFile& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUCMDeletePublishedFile::SharedCtor() {
  _cached_size_ = 0;
  published_file_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUCMDeletePublishedFile::~CMsgClientUCMDeletePublishedFile() {
  SharedDtor();
}

void CMsgClientUCMDeletePublishedFile::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUCMDeletePublishedFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUCMDeletePublishedFile& CMsgClientUCMDeletePublishedFile::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUCMDeletePublishedFile* CMsgClientUCMDeletePublishedFile::default_instance_ = NULL;

CMsgClientUCMDeletePublishedFile* CMsgClientUCMDeletePublishedFile::New() const {
  return new CMsgClientUCMDeletePublishedFile;
}

void CMsgClientUCMDeletePublishedFile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    published_file_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUCMDeletePublishedFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 published_file_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &published_file_id_)));
          set_has_published_file_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUCMDeletePublishedFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 published_file_id = 1;
  if (has_published_file_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->published_file_id(), output);
  }

}

int CMsgClientUCMDeletePublishedFile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 published_file_id = 1;
    if (has_published_file_id()) {
      total_size += 1 + 8;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUCMDeletePublishedFile::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUCMDeletePublishedFile*>(&from));
}

void CMsgClientUCMDeletePublishedFile::MergeFrom(const CMsgClientUCMDeletePublishedFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_published_file_id()) {
      set_published_file_id(from.published_file_id());
    }
  }
}

void CMsgClientUCMDeletePublishedFile::CopyFrom(const CMsgClientUCMDeletePublishedFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUCMDeletePublishedFile::IsInitialized() const {

  return true;
}

void CMsgClientUCMDeletePublishedFile::Swap(CMsgClientUCMDeletePublishedFile* other) {
  if (other != this) {
    std::swap(published_file_id_, other->published_file_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUCMDeletePublishedFile::GetTypeName() const {
  return "Sc.CMsgClientUCMDeletePublishedFile";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUCMDeletePublishedFileResponse::kEresultFieldNumber;
#endif  // !_MSC_VER

CMsgClientUCMDeletePublishedFileResponse::CMsgClientUCMDeletePublishedFileResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUCMDeletePublishedFileResponse::InitAsDefaultInstance() {
}

CMsgClientUCMDeletePublishedFileResponse::CMsgClientUCMDeletePublishedFileResponse(const CMsgClientUCMDeletePublishedFileResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUCMDeletePublishedFileResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUCMDeletePublishedFileResponse::~CMsgClientUCMDeletePublishedFileResponse() {
  SharedDtor();
}

void CMsgClientUCMDeletePublishedFileResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUCMDeletePublishedFileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUCMDeletePublishedFileResponse& CMsgClientUCMDeletePublishedFileResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUCMDeletePublishedFileResponse* CMsgClientUCMDeletePublishedFileResponse::default_instance_ = NULL;

CMsgClientUCMDeletePublishedFileResponse* CMsgClientUCMDeletePublishedFileResponse::New() const {
  return new CMsgClientUCMDeletePublishedFileResponse;
}

void CMsgClientUCMDeletePublishedFileResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUCMDeletePublishedFileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUCMDeletePublishedFileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

}

int CMsgClientUCMDeletePublishedFileResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUCMDeletePublishedFileResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUCMDeletePublishedFileResponse*>(&from));
}

void CMsgClientUCMDeletePublishedFileResponse::MergeFrom(const CMsgClientUCMDeletePublishedFileResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
  }
}

void CMsgClientUCMDeletePublishedFileResponse::CopyFrom(const CMsgClientUCMDeletePublishedFileResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUCMDeletePublishedFileResponse::IsInitialized() const {

  return true;
}

void CMsgClientUCMDeletePublishedFileResponse::Swap(CMsgClientUCMDeletePublishedFileResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUCMDeletePublishedFileResponse::GetTypeName() const {
  return "Sc.CMsgClientUCMDeletePublishedFileResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUCMEnumerateUserPublishedFiles::kAppIdFieldNumber;
const int CMsgClientUCMEnumerateUserPublishedFiles::kStartIndexFieldNumber;
const int CMsgClientUCMEnumerateUserPublishedFiles::kSortOrderFieldNumber;
#endif  // !_MSC_VER

CMsgClientUCMEnumerateUserPublishedFiles::CMsgClientUCMEnumerateUserPublishedFiles()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUCMEnumerateUserPublishedFiles::InitAsDefaultInstance() {
}

CMsgClientUCMEnumerateUserPublishedFiles::CMsgClientUCMEnumerateUserPublishedFiles(const CMsgClientUCMEnumerateUserPublishedFiles& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUCMEnumerateUserPublishedFiles::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  start_index_ = 0u;
  sort_order_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUCMEnumerateUserPublishedFiles::~CMsgClientUCMEnumerateUserPublishedFiles() {
  SharedDtor();
}

void CMsgClientUCMEnumerateUserPublishedFiles::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUCMEnumerateUserPublishedFiles::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUCMEnumerateUserPublishedFiles& CMsgClientUCMEnumerateUserPublishedFiles::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUCMEnumerateUserPublishedFiles* CMsgClientUCMEnumerateUserPublishedFiles::default_instance_ = NULL;

CMsgClientUCMEnumerateUserPublishedFiles* CMsgClientUCMEnumerateUserPublishedFiles::New() const {
  return new CMsgClientUCMEnumerateUserPublishedFiles;
}

void CMsgClientUCMEnumerateUserPublishedFiles::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    start_index_ = 0u;
    sort_order_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUCMEnumerateUserPublishedFiles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_start_index;
        break;
      }

      // optional uint32 start_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_index_)));
          set_has_start_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sort_order;
        break;
      }

      // optional uint32 sort_order = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sort_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sort_order_)));
          set_has_sort_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUCMEnumerateUserPublishedFiles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional uint32 start_index = 2;
  if (has_start_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->start_index(), output);
  }

  // optional uint32 sort_order = 3;
  if (has_sort_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sort_order(), output);
  }

}

int CMsgClientUCMEnumerateUserPublishedFiles::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 start_index = 2;
    if (has_start_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_index());
    }

    // optional uint32 sort_order = 3;
    if (has_sort_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sort_order());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUCMEnumerateUserPublishedFiles::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUCMEnumerateUserPublishedFiles*>(&from));
}

void CMsgClientUCMEnumerateUserPublishedFiles::MergeFrom(const CMsgClientUCMEnumerateUserPublishedFiles& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_start_index()) {
      set_start_index(from.start_index());
    }
    if (from.has_sort_order()) {
      set_sort_order(from.sort_order());
    }
  }
}

void CMsgClientUCMEnumerateUserPublishedFiles::CopyFrom(const CMsgClientUCMEnumerateUserPublishedFiles& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUCMEnumerateUserPublishedFiles::IsInitialized() const {

  return true;
}

void CMsgClientUCMEnumerateUserPublishedFiles::Swap(CMsgClientUCMEnumerateUserPublishedFiles* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(start_index_, other->start_index_);
    std::swap(sort_order_, other->sort_order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUCMEnumerateUserPublishedFiles::GetTypeName() const {
  return "Sc.CMsgClientUCMEnumerateUserPublishedFiles";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId::kPublishedFileIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId::CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId::InitAsDefaultInstance() {
}

CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId::CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId(const CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId::SharedCtor() {
  _cached_size_ = 0;
  published_file_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId::~CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId() {
  SharedDtor();
}

void CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId& CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId* CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId::default_instance_ = NULL;

CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId* CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId::New() const {
  return new CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId;
}

void CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    published_file_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 published_file_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &published_file_id_)));
          set_has_published_file_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 published_file_id = 1;
  if (has_published_file_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->published_file_id(), output);
  }

}

int CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 published_file_id = 1;
    if (has_published_file_id()) {
      total_size += 1 + 8;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId*>(&from));
}

void CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId::MergeFrom(const CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_published_file_id()) {
      set_published_file_id(from.published_file_id());
    }
  }
}

void CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId::CopyFrom(const CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId::IsInitialized() const {

  return true;
}

void CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId::Swap(CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId* other) {
  if (other != this) {
    std::swap(published_file_id_, other->published_file_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId::GetTypeName() const {
  return "Sc.CMsgClientUCMEnumerateUserPublishedFilesResponse.PublishedFileId";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientUCMEnumerateUserPublishedFilesResponse::kEresultFieldNumber;
const int CMsgClientUCMEnumerateUserPublishedFilesResponse::kPublishedFilesFieldNumber;
const int CMsgClientUCMEnumerateUserPublishedFilesResponse::kTotalResultsFieldNumber;
#endif  // !_MSC_VER

CMsgClientUCMEnumerateUserPublishedFilesResponse::CMsgClientUCMEnumerateUserPublishedFilesResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUCMEnumerateUserPublishedFilesResponse::InitAsDefaultInstance() {
}

CMsgClientUCMEnumerateUserPublishedFilesResponse::CMsgClientUCMEnumerateUserPublishedFilesResponse(const CMsgClientUCMEnumerateUserPublishedFilesResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUCMEnumerateUserPublishedFilesResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  total_results_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUCMEnumerateUserPublishedFilesResponse::~CMsgClientUCMEnumerateUserPublishedFilesResponse() {
  SharedDtor();
}

void CMsgClientUCMEnumerateUserPublishedFilesResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUCMEnumerateUserPublishedFilesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUCMEnumerateUserPublishedFilesResponse& CMsgClientUCMEnumerateUserPublishedFilesResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUCMEnumerateUserPublishedFilesResponse* CMsgClientUCMEnumerateUserPublishedFilesResponse::default_instance_ = NULL;

CMsgClientUCMEnumerateUserPublishedFilesResponse* CMsgClientUCMEnumerateUserPublishedFilesResponse::New() const {
  return new CMsgClientUCMEnumerateUserPublishedFilesResponse;
}

void CMsgClientUCMEnumerateUserPublishedFilesResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    total_results_ = 0u;
  }
  published_files_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUCMEnumerateUserPublishedFilesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_published_files;
        break;
      }

      // repeated .Sc.CMsgClientUCMEnumerateUserPublishedFilesResponse.PublishedFileId published_files = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_published_files:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_published_files()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_published_files;
        if (input->ExpectTag(24)) goto parse_total_results;
        break;
      }

      // optional uint32 total_results = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_results:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_results_)));
          set_has_total_results();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUCMEnumerateUserPublishedFilesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // repeated .Sc.CMsgClientUCMEnumerateUserPublishedFilesResponse.PublishedFileId published_files = 2;
  for (int i = 0; i < this->published_files_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->published_files(i), output);
  }

  // optional uint32 total_results = 3;
  if (has_total_results()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->total_results(), output);
  }

}

int CMsgClientUCMEnumerateUserPublishedFilesResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional uint32 total_results = 3;
    if (has_total_results()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_results());
    }

  }
  // repeated .Sc.CMsgClientUCMEnumerateUserPublishedFilesResponse.PublishedFileId published_files = 2;
  total_size += 1 * this->published_files_size();
  for (int i = 0; i < this->published_files_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->published_files(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUCMEnumerateUserPublishedFilesResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUCMEnumerateUserPublishedFilesResponse*>(&from));
}

void CMsgClientUCMEnumerateUserPublishedFilesResponse::MergeFrom(const CMsgClientUCMEnumerateUserPublishedFilesResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  published_files_.MergeFrom(from.published_files_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_total_results()) {
      set_total_results(from.total_results());
    }
  }
}

void CMsgClientUCMEnumerateUserPublishedFilesResponse::CopyFrom(const CMsgClientUCMEnumerateUserPublishedFilesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUCMEnumerateUserPublishedFilesResponse::IsInitialized() const {

  return true;
}

void CMsgClientUCMEnumerateUserPublishedFilesResponse::Swap(CMsgClientUCMEnumerateUserPublishedFilesResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    published_files_.Swap(&other->published_files_);
    std::swap(total_results_, other->total_results_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUCMEnumerateUserPublishedFilesResponse::GetTypeName() const {
  return "Sc.CMsgClientUCMEnumerateUserPublishedFilesResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUCMSubscribePublishedFile::kAppIdFieldNumber;
const int CMsgClientUCMSubscribePublishedFile::kPublishedFileIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientUCMSubscribePublishedFile::CMsgClientUCMSubscribePublishedFile()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUCMSubscribePublishedFile::InitAsDefaultInstance() {
}

CMsgClientUCMSubscribePublishedFile::CMsgClientUCMSubscribePublishedFile(const CMsgClientUCMSubscribePublishedFile& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUCMSubscribePublishedFile::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  published_file_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUCMSubscribePublishedFile::~CMsgClientUCMSubscribePublishedFile() {
  SharedDtor();
}

void CMsgClientUCMSubscribePublishedFile::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUCMSubscribePublishedFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUCMSubscribePublishedFile& CMsgClientUCMSubscribePublishedFile::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUCMSubscribePublishedFile* CMsgClientUCMSubscribePublishedFile::default_instance_ = NULL;

CMsgClientUCMSubscribePublishedFile* CMsgClientUCMSubscribePublishedFile::New() const {
  return new CMsgClientUCMSubscribePublishedFile;
}

void CMsgClientUCMSubscribePublishedFile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    published_file_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUCMSubscribePublishedFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_published_file_id;
        break;
      }

      // optional fixed64 published_file_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_published_file_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &published_file_id_)));
          set_has_published_file_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUCMSubscribePublishedFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 published_file_id = 2;
  if (has_published_file_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->published_file_id(), output);
  }

}

int CMsgClientUCMSubscribePublishedFile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional fixed64 published_file_id = 2;
    if (has_published_file_id()) {
      total_size += 1 + 8;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUCMSubscribePublishedFile::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUCMSubscribePublishedFile*>(&from));
}

void CMsgClientUCMSubscribePublishedFile::MergeFrom(const CMsgClientUCMSubscribePublishedFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_published_file_id()) {
      set_published_file_id(from.published_file_id());
    }
  }
}

void CMsgClientUCMSubscribePublishedFile::CopyFrom(const CMsgClientUCMSubscribePublishedFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUCMSubscribePublishedFile::IsInitialized() const {

  return true;
}

void CMsgClientUCMSubscribePublishedFile::Swap(CMsgClientUCMSubscribePublishedFile* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(published_file_id_, other->published_file_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUCMSubscribePublishedFile::GetTypeName() const {
  return "Sc.CMsgClientUCMSubscribePublishedFile";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUCMSubscribePublishedFileResponse::kEresultFieldNumber;
#endif  // !_MSC_VER

CMsgClientUCMSubscribePublishedFileResponse::CMsgClientUCMSubscribePublishedFileResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUCMSubscribePublishedFileResponse::InitAsDefaultInstance() {
}

CMsgClientUCMSubscribePublishedFileResponse::CMsgClientUCMSubscribePublishedFileResponse(const CMsgClientUCMSubscribePublishedFileResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUCMSubscribePublishedFileResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUCMSubscribePublishedFileResponse::~CMsgClientUCMSubscribePublishedFileResponse() {
  SharedDtor();
}

void CMsgClientUCMSubscribePublishedFileResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUCMSubscribePublishedFileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUCMSubscribePublishedFileResponse& CMsgClientUCMSubscribePublishedFileResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUCMSubscribePublishedFileResponse* CMsgClientUCMSubscribePublishedFileResponse::default_instance_ = NULL;

CMsgClientUCMSubscribePublishedFileResponse* CMsgClientUCMSubscribePublishedFileResponse::New() const {
  return new CMsgClientUCMSubscribePublishedFileResponse;
}

void CMsgClientUCMSubscribePublishedFileResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUCMSubscribePublishedFileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUCMSubscribePublishedFileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

}

int CMsgClientUCMSubscribePublishedFileResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUCMSubscribePublishedFileResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUCMSubscribePublishedFileResponse*>(&from));
}

void CMsgClientUCMSubscribePublishedFileResponse::MergeFrom(const CMsgClientUCMSubscribePublishedFileResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
  }
}

void CMsgClientUCMSubscribePublishedFileResponse::CopyFrom(const CMsgClientUCMSubscribePublishedFileResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUCMSubscribePublishedFileResponse::IsInitialized() const {

  return true;
}

void CMsgClientUCMSubscribePublishedFileResponse::Swap(CMsgClientUCMSubscribePublishedFileResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUCMSubscribePublishedFileResponse::GetTypeName() const {
  return "Sc.CMsgClientUCMSubscribePublishedFileResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUCMEnumerateUserSubscribedFiles::kAppIdFieldNumber;
const int CMsgClientUCMEnumerateUserSubscribedFiles::kStartIndexFieldNumber;
const int CMsgClientUCMEnumerateUserSubscribedFiles::kListTypeFieldNumber;
const int CMsgClientUCMEnumerateUserSubscribedFiles::kMatchingFileTypeFieldNumber;
#endif  // !_MSC_VER

CMsgClientUCMEnumerateUserSubscribedFiles::CMsgClientUCMEnumerateUserSubscribedFiles()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUCMEnumerateUserSubscribedFiles::InitAsDefaultInstance() {
}

CMsgClientUCMEnumerateUserSubscribedFiles::CMsgClientUCMEnumerateUserSubscribedFiles(const CMsgClientUCMEnumerateUserSubscribedFiles& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUCMEnumerateUserSubscribedFiles::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  start_index_ = 0u;
  list_type_ = 1u;
  matching_file_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUCMEnumerateUserSubscribedFiles::~CMsgClientUCMEnumerateUserSubscribedFiles() {
  SharedDtor();
}

void CMsgClientUCMEnumerateUserSubscribedFiles::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUCMEnumerateUserSubscribedFiles::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUCMEnumerateUserSubscribedFiles& CMsgClientUCMEnumerateUserSubscribedFiles::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUCMEnumerateUserSubscribedFiles* CMsgClientUCMEnumerateUserSubscribedFiles::default_instance_ = NULL;

CMsgClientUCMEnumerateUserSubscribedFiles* CMsgClientUCMEnumerateUserSubscribedFiles::New() const {
  return new CMsgClientUCMEnumerateUserSubscribedFiles;
}

void CMsgClientUCMEnumerateUserSubscribedFiles::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    start_index_ = 0u;
    list_type_ = 1u;
    matching_file_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUCMEnumerateUserSubscribedFiles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_start_index;
        break;
      }

      // optional uint32 start_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_index_)));
          set_has_start_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_list_type;
        break;
      }

      // optional uint32 list_type = 3 [default = 1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_list_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &list_type_)));
          set_has_list_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_matching_file_type;
        break;
      }

      // optional uint32 matching_file_type = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matching_file_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matching_file_type_)));
          set_has_matching_file_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUCMEnumerateUserSubscribedFiles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional uint32 start_index = 2;
  if (has_start_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->start_index(), output);
  }

  // optional uint32 list_type = 3 [default = 1];
  if (has_list_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->list_type(), output);
  }

  // optional uint32 matching_file_type = 4 [default = 0];
  if (has_matching_file_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->matching_file_type(), output);
  }

}

int CMsgClientUCMEnumerateUserSubscribedFiles::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 start_index = 2;
    if (has_start_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_index());
    }

    // optional uint32 list_type = 3 [default = 1];
    if (has_list_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->list_type());
    }

    // optional uint32 matching_file_type = 4 [default = 0];
    if (has_matching_file_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matching_file_type());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUCMEnumerateUserSubscribedFiles::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUCMEnumerateUserSubscribedFiles*>(&from));
}

void CMsgClientUCMEnumerateUserSubscribedFiles::MergeFrom(const CMsgClientUCMEnumerateUserSubscribedFiles& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_start_index()) {
      set_start_index(from.start_index());
    }
    if (from.has_list_type()) {
      set_list_type(from.list_type());
    }
    if (from.has_matching_file_type()) {
      set_matching_file_type(from.matching_file_type());
    }
  }
}

void CMsgClientUCMEnumerateUserSubscribedFiles::CopyFrom(const CMsgClientUCMEnumerateUserSubscribedFiles& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUCMEnumerateUserSubscribedFiles::IsInitialized() const {

  return true;
}

void CMsgClientUCMEnumerateUserSubscribedFiles::Swap(CMsgClientUCMEnumerateUserSubscribedFiles* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(start_index_, other->start_index_);
    std::swap(list_type_, other->list_type_);
    std::swap(matching_file_type_, other->matching_file_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUCMEnumerateUserSubscribedFiles::GetTypeName() const {
  return "Sc.CMsgClientUCMEnumerateUserSubscribedFiles";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId::kPublishedFileIdFieldNumber;
const int CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId::kRtime32SubscribedFieldNumber;
#endif  // !_MSC_VER

CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId::CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId::InitAsDefaultInstance() {
}

CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId::CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId(const CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId::SharedCtor() {
  _cached_size_ = 0;
  published_file_id_ = GOOGLE_ULONGLONG(0);
  rtime32_subscribed_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId::~CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId() {
  SharedDtor();
}

void CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId& CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId* CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId::default_instance_ = NULL;

CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId* CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId::New() const {
  return new CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId;
}

void CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    published_file_id_ = GOOGLE_ULONGLONG(0);
    rtime32_subscribed_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 published_file_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &published_file_id_)));
          set_has_published_file_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_rtime32_subscribed;
        break;
      }

      // optional fixed32 rtime32_subscribed = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rtime32_subscribed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &rtime32_subscribed_)));
          set_has_rtime32_subscribed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 published_file_id = 1;
  if (has_published_file_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->published_file_id(), output);
  }

  // optional fixed32 rtime32_subscribed = 2 [default = 0];
  if (has_rtime32_subscribed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->rtime32_subscribed(), output);
  }

}

int CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 published_file_id = 1;
    if (has_published_file_id()) {
      total_size += 1 + 8;
    }

    // optional fixed32 rtime32_subscribed = 2 [default = 0];
    if (has_rtime32_subscribed()) {
      total_size += 1 + 4;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId*>(&from));
}

void CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId::MergeFrom(const CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_published_file_id()) {
      set_published_file_id(from.published_file_id());
    }
    if (from.has_rtime32_subscribed()) {
      set_rtime32_subscribed(from.rtime32_subscribed());
    }
  }
}

void CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId::CopyFrom(const CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId::IsInitialized() const {

  return true;
}

void CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId::Swap(CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId* other) {
  if (other != this) {
    std::swap(published_file_id_, other->published_file_id_);
    std::swap(rtime32_subscribed_, other->rtime32_subscribed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId::GetTypeName() const {
  return "Sc.CMsgClientUCMEnumerateUserSubscribedFilesResponse.PublishedFileId";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientUCMEnumerateUserSubscribedFilesResponse::kEresultFieldNumber;
const int CMsgClientUCMEnumerateUserSubscribedFilesResponse::kSubscribedFilesFieldNumber;
const int CMsgClientUCMEnumerateUserSubscribedFilesResponse::kTotalResultsFieldNumber;
#endif  // !_MSC_VER

CMsgClientUCMEnumerateUserSubscribedFilesResponse::CMsgClientUCMEnumerateUserSubscribedFilesResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUCMEnumerateUserSubscribedFilesResponse::InitAsDefaultInstance() {
}

CMsgClientUCMEnumerateUserSubscribedFilesResponse::CMsgClientUCMEnumerateUserSubscribedFilesResponse(const CMsgClientUCMEnumerateUserSubscribedFilesResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUCMEnumerateUserSubscribedFilesResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  total_results_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUCMEnumerateUserSubscribedFilesResponse::~CMsgClientUCMEnumerateUserSubscribedFilesResponse() {
  SharedDtor();
}

void CMsgClientUCMEnumerateUserSubscribedFilesResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUCMEnumerateUserSubscribedFilesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUCMEnumerateUserSubscribedFilesResponse& CMsgClientUCMEnumerateUserSubscribedFilesResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUCMEnumerateUserSubscribedFilesResponse* CMsgClientUCMEnumerateUserSubscribedFilesResponse::default_instance_ = NULL;

CMsgClientUCMEnumerateUserSubscribedFilesResponse* CMsgClientUCMEnumerateUserSubscribedFilesResponse::New() const {
  return new CMsgClientUCMEnumerateUserSubscribedFilesResponse;
}

void CMsgClientUCMEnumerateUserSubscribedFilesResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    total_results_ = 0u;
  }
  subscribed_files_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUCMEnumerateUserSubscribedFilesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_subscribed_files;
        break;
      }

      // repeated .Sc.CMsgClientUCMEnumerateUserSubscribedFilesResponse.PublishedFileId subscribed_files = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subscribed_files:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subscribed_files()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_subscribed_files;
        if (input->ExpectTag(24)) goto parse_total_results;
        break;
      }

      // optional uint32 total_results = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_results:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_results_)));
          set_has_total_results();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUCMEnumerateUserSubscribedFilesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // repeated .Sc.CMsgClientUCMEnumerateUserSubscribedFilesResponse.PublishedFileId subscribed_files = 2;
  for (int i = 0; i < this->subscribed_files_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->subscribed_files(i), output);
  }

  // optional uint32 total_results = 3;
  if (has_total_results()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->total_results(), output);
  }

}

int CMsgClientUCMEnumerateUserSubscribedFilesResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional uint32 total_results = 3;
    if (has_total_results()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_results());
    }

  }
  // repeated .Sc.CMsgClientUCMEnumerateUserSubscribedFilesResponse.PublishedFileId subscribed_files = 2;
  total_size += 1 * this->subscribed_files_size();
  for (int i = 0; i < this->subscribed_files_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subscribed_files(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUCMEnumerateUserSubscribedFilesResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUCMEnumerateUserSubscribedFilesResponse*>(&from));
}

void CMsgClientUCMEnumerateUserSubscribedFilesResponse::MergeFrom(const CMsgClientUCMEnumerateUserSubscribedFilesResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  subscribed_files_.MergeFrom(from.subscribed_files_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_total_results()) {
      set_total_results(from.total_results());
    }
  }
}

void CMsgClientUCMEnumerateUserSubscribedFilesResponse::CopyFrom(const CMsgClientUCMEnumerateUserSubscribedFilesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUCMEnumerateUserSubscribedFilesResponse::IsInitialized() const {

  return true;
}

void CMsgClientUCMEnumerateUserSubscribedFilesResponse::Swap(CMsgClientUCMEnumerateUserSubscribedFilesResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    subscribed_files_.Swap(&other->subscribed_files_);
    std::swap(total_results_, other->total_results_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUCMEnumerateUserSubscribedFilesResponse::GetTypeName() const {
  return "Sc.CMsgClientUCMEnumerateUserSubscribedFilesResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates::kAppIdFieldNumber;
const int CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates::kStartIndexFieldNumber;
const int CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates::kStartTimeFieldNumber;
#endif  // !_MSC_VER

CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates::CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates::InitAsDefaultInstance() {
}

CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates::CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates(const CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  start_index_ = 0u;
  start_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates::~CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates() {
  SharedDtor();
}

void CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates& CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates* CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates::default_instance_ = NULL;

CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates* CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates::New() const {
  return new CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates;
}

void CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    start_index_ = 0u;
    start_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_start_index;
        break;
      }

      // optional uint32 start_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_index_)));
          set_has_start_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_start_time;
        break;
      }

      // optional fixed32 start_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional uint32 start_index = 2;
  if (has_start_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->start_index(), output);
  }

  // optional fixed32 start_time = 3;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->start_time(), output);
  }

}

int CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 start_index = 2;
    if (has_start_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_index());
    }

    // optional fixed32 start_time = 3;
    if (has_start_time()) {
      total_size += 1 + 4;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates*>(&from));
}

void CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates::MergeFrom(const CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_start_index()) {
      set_start_index(from.start_index());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
  }
}

void CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates::CopyFrom(const CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates::IsInitialized() const {

  return true;
}

void CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates::Swap(CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(start_index_, other->start_index_);
    std::swap(start_time_, other->start_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates::GetTypeName() const {
  return "Sc.CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId::kPublishedFileIdFieldNumber;
const int CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId::kRtime32SubscribedFieldNumber;
const int CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId::kAppidFieldNumber;
const int CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId::kFileHcontentFieldNumber;
const int CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId::kFileSizeFieldNumber;
const int CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId::kRtime32LastUpdatedFieldNumber;
#endif  // !_MSC_VER

CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId::CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId::InitAsDefaultInstance() {
}

CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId::CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId(const CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId::SharedCtor() {
  _cached_size_ = 0;
  published_file_id_ = GOOGLE_ULONGLONG(0);
  rtime32_subscribed_ = 0u;
  appid_ = 0u;
  file_hcontent_ = GOOGLE_ULONGLONG(0);
  file_size_ = 0u;
  rtime32_last_updated_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId::~CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId() {
  SharedDtor();
}

void CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId& CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId* CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId::default_instance_ = NULL;

CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId* CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId::New() const {
  return new CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId;
}

void CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    published_file_id_ = GOOGLE_ULONGLONG(0);
    rtime32_subscribed_ = 0u;
    appid_ = 0u;
    file_hcontent_ = GOOGLE_ULONGLONG(0);
    file_size_ = 0u;
    rtime32_last_updated_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 published_file_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &published_file_id_)));
          set_has_published_file_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_rtime32_subscribed;
        break;
      }

      // optional fixed32 rtime32_subscribed = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rtime32_subscribed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &rtime32_subscribed_)));
          set_has_rtime32_subscribed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_appid;
        break;
      }

      // optional uint32 appid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_file_hcontent;
        break;
      }

      // optional fixed64 file_hcontent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_file_hcontent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &file_hcontent_)));
          set_has_file_hcontent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_file_size;
        break;
      }

      // optional uint32 file_size = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_size_)));
          set_has_file_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_rtime32_last_updated;
        break;
      }

      // optional fixed32 rtime32_last_updated = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rtime32_last_updated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &rtime32_last_updated_)));
          set_has_rtime32_last_updated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 published_file_id = 1;
  if (has_published_file_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->published_file_id(), output);
  }

  // optional fixed32 rtime32_subscribed = 2 [default = 0];
  if (has_rtime32_subscribed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->rtime32_subscribed(), output);
  }

  // optional uint32 appid = 3;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->appid(), output);
  }

  // optional fixed64 file_hcontent = 4;
  if (has_file_hcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->file_hcontent(), output);
  }

  // optional uint32 file_size = 5;
  if (has_file_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->file_size(), output);
  }

  // optional fixed32 rtime32_last_updated = 6;
  if (has_rtime32_last_updated()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->rtime32_last_updated(), output);
  }

}

int CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 published_file_id = 1;
    if (has_published_file_id()) {
      total_size += 1 + 8;
    }

    // optional fixed32 rtime32_subscribed = 2 [default = 0];
    if (has_rtime32_subscribed()) {
      total_size += 1 + 4;
    }

    // optional uint32 appid = 3;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional fixed64 file_hcontent = 4;
    if (has_file_hcontent()) {
      total_size += 1 + 8;
    }

    // optional uint32 file_size = 5;
    if (has_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_size());
    }

    // optional fixed32 rtime32_last_updated = 6;
    if (has_rtime32_last_updated()) {
      total_size += 1 + 4;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId*>(&from));
}

void CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId::MergeFrom(const CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_published_file_id()) {
      set_published_file_id(from.published_file_id());
    }
    if (from.has_rtime32_subscribed()) {
      set_rtime32_subscribed(from.rtime32_subscribed());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_file_hcontent()) {
      set_file_hcontent(from.file_hcontent());
    }
    if (from.has_file_size()) {
      set_file_size(from.file_size());
    }
    if (from.has_rtime32_last_updated()) {
      set_rtime32_last_updated(from.rtime32_last_updated());
    }
  }
}

void CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId::CopyFrom(const CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId::IsInitialized() const {

  return true;
}

void CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId::Swap(CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId* other) {
  if (other != this) {
    std::swap(published_file_id_, other->published_file_id_);
    std::swap(rtime32_subscribed_, other->rtime32_subscribed_);
    std::swap(appid_, other->appid_);
    std::swap(file_hcontent_, other->file_hcontent_);
    std::swap(file_size_, other->file_size_);
    std::swap(rtime32_last_updated_, other->rtime32_last_updated_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId::GetTypeName() const {
  return "Sc.CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse.PublishedFileId";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse::kEresultFieldNumber;
const int CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse::kSubscribedFilesFieldNumber;
const int CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse::kTotalResultsFieldNumber;
#endif  // !_MSC_VER

CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse::CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse::InitAsDefaultInstance() {
}

CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse::CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse(const CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  total_results_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse::~CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse() {
  SharedDtor();
}

void CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse& CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse* CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse::default_instance_ = NULL;

CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse* CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse::New() const {
  return new CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse;
}

void CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    total_results_ = 0u;
  }
  subscribed_files_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_subscribed_files;
        break;
      }

      // repeated .Sc.CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse.PublishedFileId subscribed_files = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subscribed_files:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subscribed_files()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_subscribed_files;
        if (input->ExpectTag(24)) goto parse_total_results;
        break;
      }

      // optional uint32 total_results = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_results:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_results_)));
          set_has_total_results();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // repeated .Sc.CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse.PublishedFileId subscribed_files = 2;
  for (int i = 0; i < this->subscribed_files_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->subscribed_files(i), output);
  }

  // optional uint32 total_results = 3;
  if (has_total_results()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->total_results(), output);
  }

}

int CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional uint32 total_results = 3;
    if (has_total_results()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_results());
    }

  }
  // repeated .Sc.CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse.PublishedFileId subscribed_files = 2;
  total_size += 1 * this->subscribed_files_size();
  for (int i = 0; i < this->subscribed_files_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subscribed_files(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse*>(&from));
}

void CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse::MergeFrom(const CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  subscribed_files_.MergeFrom(from.subscribed_files_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_total_results()) {
      set_total_results(from.total_results());
    }
  }
}

void CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse::CopyFrom(const CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse::IsInitialized() const {

  return true;
}

void CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse::Swap(CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    subscribed_files_.Swap(&other->subscribed_files_);
    std::swap(total_results_, other->total_results_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse::GetTypeName() const {
  return "Sc.CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUCMUnsubscribePublishedFile::kAppIdFieldNumber;
const int CMsgClientUCMUnsubscribePublishedFile::kPublishedFileIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientUCMUnsubscribePublishedFile::CMsgClientUCMUnsubscribePublishedFile()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUCMUnsubscribePublishedFile::InitAsDefaultInstance() {
}

CMsgClientUCMUnsubscribePublishedFile::CMsgClientUCMUnsubscribePublishedFile(const CMsgClientUCMUnsubscribePublishedFile& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUCMUnsubscribePublishedFile::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  published_file_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUCMUnsubscribePublishedFile::~CMsgClientUCMUnsubscribePublishedFile() {
  SharedDtor();
}

void CMsgClientUCMUnsubscribePublishedFile::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUCMUnsubscribePublishedFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUCMUnsubscribePublishedFile& CMsgClientUCMUnsubscribePublishedFile::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUCMUnsubscribePublishedFile* CMsgClientUCMUnsubscribePublishedFile::default_instance_ = NULL;

CMsgClientUCMUnsubscribePublishedFile* CMsgClientUCMUnsubscribePublishedFile::New() const {
  return new CMsgClientUCMUnsubscribePublishedFile;
}

void CMsgClientUCMUnsubscribePublishedFile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    published_file_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUCMUnsubscribePublishedFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_published_file_id;
        break;
      }

      // optional fixed64 published_file_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_published_file_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &published_file_id_)));
          set_has_published_file_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUCMUnsubscribePublishedFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 published_file_id = 2;
  if (has_published_file_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->published_file_id(), output);
  }

}

int CMsgClientUCMUnsubscribePublishedFile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional fixed64 published_file_id = 2;
    if (has_published_file_id()) {
      total_size += 1 + 8;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUCMUnsubscribePublishedFile::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUCMUnsubscribePublishedFile*>(&from));
}

void CMsgClientUCMUnsubscribePublishedFile::MergeFrom(const CMsgClientUCMUnsubscribePublishedFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_published_file_id()) {
      set_published_file_id(from.published_file_id());
    }
  }
}

void CMsgClientUCMUnsubscribePublishedFile::CopyFrom(const CMsgClientUCMUnsubscribePublishedFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUCMUnsubscribePublishedFile::IsInitialized() const {

  return true;
}

void CMsgClientUCMUnsubscribePublishedFile::Swap(CMsgClientUCMUnsubscribePublishedFile* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(published_file_id_, other->published_file_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUCMUnsubscribePublishedFile::GetTypeName() const {
  return "Sc.CMsgClientUCMUnsubscribePublishedFile";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUCMUnsubscribePublishedFileResponse::kEresultFieldNumber;
#endif  // !_MSC_VER

CMsgClientUCMUnsubscribePublishedFileResponse::CMsgClientUCMUnsubscribePublishedFileResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUCMUnsubscribePublishedFileResponse::InitAsDefaultInstance() {
}

CMsgClientUCMUnsubscribePublishedFileResponse::CMsgClientUCMUnsubscribePublishedFileResponse(const CMsgClientUCMUnsubscribePublishedFileResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUCMUnsubscribePublishedFileResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUCMUnsubscribePublishedFileResponse::~CMsgClientUCMUnsubscribePublishedFileResponse() {
  SharedDtor();
}

void CMsgClientUCMUnsubscribePublishedFileResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUCMUnsubscribePublishedFileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUCMUnsubscribePublishedFileResponse& CMsgClientUCMUnsubscribePublishedFileResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUCMUnsubscribePublishedFileResponse* CMsgClientUCMUnsubscribePublishedFileResponse::default_instance_ = NULL;

CMsgClientUCMUnsubscribePublishedFileResponse* CMsgClientUCMUnsubscribePublishedFileResponse::New() const {
  return new CMsgClientUCMUnsubscribePublishedFileResponse;
}

void CMsgClientUCMUnsubscribePublishedFileResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUCMUnsubscribePublishedFileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUCMUnsubscribePublishedFileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

}

int CMsgClientUCMUnsubscribePublishedFileResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUCMUnsubscribePublishedFileResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUCMUnsubscribePublishedFileResponse*>(&from));
}

void CMsgClientUCMUnsubscribePublishedFileResponse::MergeFrom(const CMsgClientUCMUnsubscribePublishedFileResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
  }
}

void CMsgClientUCMUnsubscribePublishedFileResponse::CopyFrom(const CMsgClientUCMUnsubscribePublishedFileResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUCMUnsubscribePublishedFileResponse::IsInitialized() const {

  return true;
}

void CMsgClientUCMUnsubscribePublishedFileResponse::Swap(CMsgClientUCMUnsubscribePublishedFileResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUCMUnsubscribePublishedFileResponse::GetTypeName() const {
  return "Sc.CMsgClientUCMUnsubscribePublishedFileResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUCMPublishedFileSubscribed::kPublishedFileIdFieldNumber;
const int CMsgClientUCMPublishedFileSubscribed::kAppIdFieldNumber;
const int CMsgClientUCMPublishedFileSubscribed::kFileHcontentFieldNumber;
const int CMsgClientUCMPublishedFileSubscribed::kFileSizeFieldNumber;
#endif  // !_MSC_VER

CMsgClientUCMPublishedFileSubscribed::CMsgClientUCMPublishedFileSubscribed()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUCMPublishedFileSubscribed::InitAsDefaultInstance() {
}

CMsgClientUCMPublishedFileSubscribed::CMsgClientUCMPublishedFileSubscribed(const CMsgClientUCMPublishedFileSubscribed& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUCMPublishedFileSubscribed::SharedCtor() {
  _cached_size_ = 0;
  published_file_id_ = GOOGLE_ULONGLONG(0);
  app_id_ = 0u;
  file_hcontent_ = GOOGLE_ULONGLONG(0);
  file_size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUCMPublishedFileSubscribed::~CMsgClientUCMPublishedFileSubscribed() {
  SharedDtor();
}

void CMsgClientUCMPublishedFileSubscribed::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUCMPublishedFileSubscribed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUCMPublishedFileSubscribed& CMsgClientUCMPublishedFileSubscribed::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUCMPublishedFileSubscribed* CMsgClientUCMPublishedFileSubscribed::default_instance_ = NULL;

CMsgClientUCMPublishedFileSubscribed* CMsgClientUCMPublishedFileSubscribed::New() const {
  return new CMsgClientUCMPublishedFileSubscribed;
}

void CMsgClientUCMPublishedFileSubscribed::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    published_file_id_ = GOOGLE_ULONGLONG(0);
    app_id_ = 0u;
    file_hcontent_ = GOOGLE_ULONGLONG(0);
    file_size_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUCMPublishedFileSubscribed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 published_file_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &published_file_id_)));
          set_has_published_file_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_app_id;
        break;
      }

      // optional uint32 app_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_app_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_file_hcontent;
        break;
      }

      // optional fixed64 file_hcontent = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_file_hcontent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &file_hcontent_)));
          set_has_file_hcontent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_file_size;
        break;
      }

      // optional uint32 file_size = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_size_)));
          set_has_file_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUCMPublishedFileSubscribed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 published_file_id = 1;
  if (has_published_file_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->published_file_id(), output);
  }

  // optional uint32 app_id = 2;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->app_id(), output);
  }

  // optional fixed64 file_hcontent = 3;
  if (has_file_hcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->file_hcontent(), output);
  }

  // optional uint32 file_size = 4;
  if (has_file_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->file_size(), output);
  }

}

int CMsgClientUCMPublishedFileSubscribed::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 published_file_id = 1;
    if (has_published_file_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 2;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional fixed64 file_hcontent = 3;
    if (has_file_hcontent()) {
      total_size += 1 + 8;
    }

    // optional uint32 file_size = 4;
    if (has_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_size());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUCMPublishedFileSubscribed::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUCMPublishedFileSubscribed*>(&from));
}

void CMsgClientUCMPublishedFileSubscribed::MergeFrom(const CMsgClientUCMPublishedFileSubscribed& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_published_file_id()) {
      set_published_file_id(from.published_file_id());
    }
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_file_hcontent()) {
      set_file_hcontent(from.file_hcontent());
    }
    if (from.has_file_size()) {
      set_file_size(from.file_size());
    }
  }
}

void CMsgClientUCMPublishedFileSubscribed::CopyFrom(const CMsgClientUCMPublishedFileSubscribed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUCMPublishedFileSubscribed::IsInitialized() const {

  return true;
}

void CMsgClientUCMPublishedFileSubscribed::Swap(CMsgClientUCMPublishedFileSubscribed* other) {
  if (other != this) {
    std::swap(published_file_id_, other->published_file_id_);
    std::swap(app_id_, other->app_id_);
    std::swap(file_hcontent_, other->file_hcontent_);
    std::swap(file_size_, other->file_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUCMPublishedFileSubscribed::GetTypeName() const {
  return "Sc.CMsgClientUCMPublishedFileSubscribed";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUCMPublishedFileUnsubscribed::kPublishedFileIdFieldNumber;
const int CMsgClientUCMPublishedFileUnsubscribed::kAppIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientUCMPublishedFileUnsubscribed::CMsgClientUCMPublishedFileUnsubscribed()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUCMPublishedFileUnsubscribed::InitAsDefaultInstance() {
}

CMsgClientUCMPublishedFileUnsubscribed::CMsgClientUCMPublishedFileUnsubscribed(const CMsgClientUCMPublishedFileUnsubscribed& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUCMPublishedFileUnsubscribed::SharedCtor() {
  _cached_size_ = 0;
  published_file_id_ = GOOGLE_ULONGLONG(0);
  app_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUCMPublishedFileUnsubscribed::~CMsgClientUCMPublishedFileUnsubscribed() {
  SharedDtor();
}

void CMsgClientUCMPublishedFileUnsubscribed::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUCMPublishedFileUnsubscribed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUCMPublishedFileUnsubscribed& CMsgClientUCMPublishedFileUnsubscribed::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUCMPublishedFileUnsubscribed* CMsgClientUCMPublishedFileUnsubscribed::default_instance_ = NULL;

CMsgClientUCMPublishedFileUnsubscribed* CMsgClientUCMPublishedFileUnsubscribed::New() const {
  return new CMsgClientUCMPublishedFileUnsubscribed;
}

void CMsgClientUCMPublishedFileUnsubscribed::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    published_file_id_ = GOOGLE_ULONGLONG(0);
    app_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUCMPublishedFileUnsubscribed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 published_file_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &published_file_id_)));
          set_has_published_file_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_app_id;
        break;
      }

      // optional uint32 app_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_app_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUCMPublishedFileUnsubscribed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 published_file_id = 1;
  if (has_published_file_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->published_file_id(), output);
  }

  // optional uint32 app_id = 2;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->app_id(), output);
  }

}

int CMsgClientUCMPublishedFileUnsubscribed::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 published_file_id = 1;
    if (has_published_file_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 2;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUCMPublishedFileUnsubscribed::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUCMPublishedFileUnsubscribed*>(&from));
}

void CMsgClientUCMPublishedFileUnsubscribed::MergeFrom(const CMsgClientUCMPublishedFileUnsubscribed& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_published_file_id()) {
      set_published_file_id(from.published_file_id());
    }
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
  }
}

void CMsgClientUCMPublishedFileUnsubscribed::CopyFrom(const CMsgClientUCMPublishedFileUnsubscribed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUCMPublishedFileUnsubscribed::IsInitialized() const {

  return true;
}

void CMsgClientUCMPublishedFileUnsubscribed::Swap(CMsgClientUCMPublishedFileUnsubscribed* other) {
  if (other != this) {
    std::swap(published_file_id_, other->published_file_id_);
    std::swap(app_id_, other->app_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUCMPublishedFileUnsubscribed::GetTypeName() const {
  return "Sc.CMsgClientUCMPublishedFileUnsubscribed";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUCMPublishedFileDeleted::kPublishedFileIdFieldNumber;
const int CMsgClientUCMPublishedFileDeleted::kAppIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientUCMPublishedFileDeleted::CMsgClientUCMPublishedFileDeleted()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUCMPublishedFileDeleted::InitAsDefaultInstance() {
}

CMsgClientUCMPublishedFileDeleted::CMsgClientUCMPublishedFileDeleted(const CMsgClientUCMPublishedFileDeleted& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUCMPublishedFileDeleted::SharedCtor() {
  _cached_size_ = 0;
  published_file_id_ = GOOGLE_ULONGLONG(0);
  app_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUCMPublishedFileDeleted::~CMsgClientUCMPublishedFileDeleted() {
  SharedDtor();
}

void CMsgClientUCMPublishedFileDeleted::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUCMPublishedFileDeleted::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUCMPublishedFileDeleted& CMsgClientUCMPublishedFileDeleted::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUCMPublishedFileDeleted* CMsgClientUCMPublishedFileDeleted::default_instance_ = NULL;

CMsgClientUCMPublishedFileDeleted* CMsgClientUCMPublishedFileDeleted::New() const {
  return new CMsgClientUCMPublishedFileDeleted;
}

void CMsgClientUCMPublishedFileDeleted::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    published_file_id_ = GOOGLE_ULONGLONG(0);
    app_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUCMPublishedFileDeleted::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 published_file_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &published_file_id_)));
          set_has_published_file_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_app_id;
        break;
      }

      // optional uint32 app_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_app_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUCMPublishedFileDeleted::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 published_file_id = 1;
  if (has_published_file_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->published_file_id(), output);
  }

  // optional uint32 app_id = 2;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->app_id(), output);
  }

}

int CMsgClientUCMPublishedFileDeleted::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 published_file_id = 1;
    if (has_published_file_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 2;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUCMPublishedFileDeleted::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUCMPublishedFileDeleted*>(&from));
}

void CMsgClientUCMPublishedFileDeleted::MergeFrom(const CMsgClientUCMPublishedFileDeleted& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_published_file_id()) {
      set_published_file_id(from.published_file_id());
    }
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
  }
}

void CMsgClientUCMPublishedFileDeleted::CopyFrom(const CMsgClientUCMPublishedFileDeleted& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUCMPublishedFileDeleted::IsInitialized() const {

  return true;
}

void CMsgClientUCMPublishedFileDeleted::Swap(CMsgClientUCMPublishedFileDeleted* other) {
  if (other != this) {
    std::swap(published_file_id_, other->published_file_id_);
    std::swap(app_id_, other->app_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUCMPublishedFileDeleted::GetTypeName() const {
  return "Sc.CMsgClientUCMPublishedFileDeleted";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUCMGetPublishedFilesForUser::kAppIdFieldNumber;
const int CMsgClientUCMGetPublishedFilesForUser::kCreatorSteamIdFieldNumber;
const int CMsgClientUCMGetPublishedFilesForUser::kRequiredTagsFieldNumber;
const int CMsgClientUCMGetPublishedFilesForUser::kExcludedTagsFieldNumber;
const int CMsgClientUCMGetPublishedFilesForUser::kStartIndexFieldNumber;
#endif  // !_MSC_VER

CMsgClientUCMGetPublishedFilesForUser::CMsgClientUCMGetPublishedFilesForUser()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUCMGetPublishedFilesForUser::InitAsDefaultInstance() {
}

CMsgClientUCMGetPublishedFilesForUser::CMsgClientUCMGetPublishedFilesForUser(const CMsgClientUCMGetPublishedFilesForUser& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUCMGetPublishedFilesForUser::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  creator_steam_id_ = GOOGLE_ULONGLONG(0);
  start_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUCMGetPublishedFilesForUser::~CMsgClientUCMGetPublishedFilesForUser() {
  SharedDtor();
}

void CMsgClientUCMGetPublishedFilesForUser::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUCMGetPublishedFilesForUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUCMGetPublishedFilesForUser& CMsgClientUCMGetPublishedFilesForUser::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUCMGetPublishedFilesForUser* CMsgClientUCMGetPublishedFilesForUser::default_instance_ = NULL;

CMsgClientUCMGetPublishedFilesForUser* CMsgClientUCMGetPublishedFilesForUser::New() const {
  return new CMsgClientUCMGetPublishedFilesForUser;
}

void CMsgClientUCMGetPublishedFilesForUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    creator_steam_id_ = GOOGLE_ULONGLONG(0);
    start_index_ = 0u;
  }
  required_tags_.Clear();
  excluded_tags_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUCMGetPublishedFilesForUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_creator_steam_id;
        break;
      }

      // optional fixed64 creator_steam_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_creator_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &creator_steam_id_)));
          set_has_creator_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_required_tags;
        break;
      }

      // repeated string required_tags = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_required_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_required_tags()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_required_tags;
        if (input->ExpectTag(34)) goto parse_excluded_tags;
        break;
      }

      // repeated string excluded_tags = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_excluded_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_excluded_tags()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_excluded_tags;
        if (input->ExpectTag(40)) goto parse_start_index;
        break;
      }

      // optional uint32 start_index = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_index_)));
          set_has_start_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUCMGetPublishedFilesForUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional fixed64 creator_steam_id = 2;
  if (has_creator_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->creator_steam_id(), output);
  }

  // repeated string required_tags = 3;
  for (int i = 0; i < this->required_tags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->required_tags(i), output);
  }

  // repeated string excluded_tags = 4;
  for (int i = 0; i < this->excluded_tags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->excluded_tags(i), output);
  }

  // optional uint32 start_index = 5;
  if (has_start_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->start_index(), output);
  }

}

int CMsgClientUCMGetPublishedFilesForUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional fixed64 creator_steam_id = 2;
    if (has_creator_steam_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 start_index = 5;
    if (has_start_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_index());
    }

  }
  // repeated string required_tags = 3;
  total_size += 1 * this->required_tags_size();
  for (int i = 0; i < this->required_tags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->required_tags(i));
  }

  // repeated string excluded_tags = 4;
  total_size += 1 * this->excluded_tags_size();
  for (int i = 0; i < this->excluded_tags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->excluded_tags(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUCMGetPublishedFilesForUser::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUCMGetPublishedFilesForUser*>(&from));
}

void CMsgClientUCMGetPublishedFilesForUser::MergeFrom(const CMsgClientUCMGetPublishedFilesForUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  required_tags_.MergeFrom(from.required_tags_);
  excluded_tags_.MergeFrom(from.excluded_tags_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_creator_steam_id()) {
      set_creator_steam_id(from.creator_steam_id());
    }
    if (from.has_start_index()) {
      set_start_index(from.start_index());
    }
  }
}

void CMsgClientUCMGetPublishedFilesForUser::CopyFrom(const CMsgClientUCMGetPublishedFilesForUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUCMGetPublishedFilesForUser::IsInitialized() const {

  return true;
}

void CMsgClientUCMGetPublishedFilesForUser::Swap(CMsgClientUCMGetPublishedFilesForUser* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(creator_steam_id_, other->creator_steam_id_);
    required_tags_.Swap(&other->required_tags_);
    excluded_tags_.Swap(&other->excluded_tags_);
    std::swap(start_index_, other->start_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUCMGetPublishedFilesForUser::GetTypeName() const {
  return "Sc.CMsgClientUCMGetPublishedFilesForUser";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId::kPublishedFileIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId::CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId::InitAsDefaultInstance() {
}

CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId::CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId(const CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId::SharedCtor() {
  _cached_size_ = 0;
  published_file_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId::~CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId() {
  SharedDtor();
}

void CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId& CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId* CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId::default_instance_ = NULL;

CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId* CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId::New() const {
  return new CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId;
}

void CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    published_file_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 published_file_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &published_file_id_)));
          set_has_published_file_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 published_file_id = 1;
  if (has_published_file_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->published_file_id(), output);
  }

}

int CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 published_file_id = 1;
    if (has_published_file_id()) {
      total_size += 1 + 8;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId*>(&from));
}

void CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId::MergeFrom(const CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_published_file_id()) {
      set_published_file_id(from.published_file_id());
    }
  }
}

void CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId::CopyFrom(const CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId::IsInitialized() const {

  return true;
}

void CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId::Swap(CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId* other) {
  if (other != this) {
    std::swap(published_file_id_, other->published_file_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId::GetTypeName() const {
  return "Sc.CMsgClientUCMGetPublishedFilesForUserResponse.PublishedFileId";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientUCMGetPublishedFilesForUserResponse::kEresultFieldNumber;
const int CMsgClientUCMGetPublishedFilesForUserResponse::kPublishedFilesFieldNumber;
const int CMsgClientUCMGetPublishedFilesForUserResponse::kTotalResultsFieldNumber;
#endif  // !_MSC_VER

CMsgClientUCMGetPublishedFilesForUserResponse::CMsgClientUCMGetPublishedFilesForUserResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUCMGetPublishedFilesForUserResponse::InitAsDefaultInstance() {
}

CMsgClientUCMGetPublishedFilesForUserResponse::CMsgClientUCMGetPublishedFilesForUserResponse(const CMsgClientUCMGetPublishedFilesForUserResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUCMGetPublishedFilesForUserResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  total_results_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUCMGetPublishedFilesForUserResponse::~CMsgClientUCMGetPublishedFilesForUserResponse() {
  SharedDtor();
}

void CMsgClientUCMGetPublishedFilesForUserResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUCMGetPublishedFilesForUserResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUCMGetPublishedFilesForUserResponse& CMsgClientUCMGetPublishedFilesForUserResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUCMGetPublishedFilesForUserResponse* CMsgClientUCMGetPublishedFilesForUserResponse::default_instance_ = NULL;

CMsgClientUCMGetPublishedFilesForUserResponse* CMsgClientUCMGetPublishedFilesForUserResponse::New() const {
  return new CMsgClientUCMGetPublishedFilesForUserResponse;
}

void CMsgClientUCMGetPublishedFilesForUserResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    total_results_ = 0u;
  }
  published_files_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUCMGetPublishedFilesForUserResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_published_files;
        break;
      }

      // repeated .Sc.CMsgClientUCMGetPublishedFilesForUserResponse.PublishedFileId published_files = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_published_files:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_published_files()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_published_files;
        if (input->ExpectTag(24)) goto parse_total_results;
        break;
      }

      // optional uint32 total_results = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_results:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_results_)));
          set_has_total_results();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUCMGetPublishedFilesForUserResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // repeated .Sc.CMsgClientUCMGetPublishedFilesForUserResponse.PublishedFileId published_files = 2;
  for (int i = 0; i < this->published_files_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->published_files(i), output);
  }

  // optional uint32 total_results = 3;
  if (has_total_results()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->total_results(), output);
  }

}

int CMsgClientUCMGetPublishedFilesForUserResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional uint32 total_results = 3;
    if (has_total_results()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_results());
    }

  }
  // repeated .Sc.CMsgClientUCMGetPublishedFilesForUserResponse.PublishedFileId published_files = 2;
  total_size += 1 * this->published_files_size();
  for (int i = 0; i < this->published_files_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->published_files(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUCMGetPublishedFilesForUserResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUCMGetPublishedFilesForUserResponse*>(&from));
}

void CMsgClientUCMGetPublishedFilesForUserResponse::MergeFrom(const CMsgClientUCMGetPublishedFilesForUserResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  published_files_.MergeFrom(from.published_files_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_total_results()) {
      set_total_results(from.total_results());
    }
  }
}

void CMsgClientUCMGetPublishedFilesForUserResponse::CopyFrom(const CMsgClientUCMGetPublishedFilesForUserResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUCMGetPublishedFilesForUserResponse::IsInitialized() const {

  return true;
}

void CMsgClientUCMGetPublishedFilesForUserResponse::Swap(CMsgClientUCMGetPublishedFilesForUserResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    published_files_.Swap(&other->published_files_);
    std::swap(total_results_, other->total_results_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUCMGetPublishedFilesForUserResponse::GetTypeName() const {
  return "Sc.CMsgClientUCMGetPublishedFilesForUserResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUCMSetUserPublishedFileAction::kPublishedFileIdFieldNumber;
const int CMsgClientUCMSetUserPublishedFileAction::kAppIdFieldNumber;
const int CMsgClientUCMSetUserPublishedFileAction::kActionFieldNumber;
#endif  // !_MSC_VER

CMsgClientUCMSetUserPublishedFileAction::CMsgClientUCMSetUserPublishedFileAction()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUCMSetUserPublishedFileAction::InitAsDefaultInstance() {
}

CMsgClientUCMSetUserPublishedFileAction::CMsgClientUCMSetUserPublishedFileAction(const CMsgClientUCMSetUserPublishedFileAction& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUCMSetUserPublishedFileAction::SharedCtor() {
  _cached_size_ = 0;
  published_file_id_ = GOOGLE_ULONGLONG(0);
  app_id_ = 0u;
  action_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUCMSetUserPublishedFileAction::~CMsgClientUCMSetUserPublishedFileAction() {
  SharedDtor();
}

void CMsgClientUCMSetUserPublishedFileAction::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUCMSetUserPublishedFileAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUCMSetUserPublishedFileAction& CMsgClientUCMSetUserPublishedFileAction::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUCMSetUserPublishedFileAction* CMsgClientUCMSetUserPublishedFileAction::default_instance_ = NULL;

CMsgClientUCMSetUserPublishedFileAction* CMsgClientUCMSetUserPublishedFileAction::New() const {
  return new CMsgClientUCMSetUserPublishedFileAction;
}

void CMsgClientUCMSetUserPublishedFileAction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    published_file_id_ = GOOGLE_ULONGLONG(0);
    app_id_ = 0u;
    action_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUCMSetUserPublishedFileAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 published_file_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &published_file_id_)));
          set_has_published_file_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_app_id;
        break;
      }

      // optional uint32 app_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_app_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_action;
        break;
      }

      // optional int32 action = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_)));
          set_has_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUCMSetUserPublishedFileAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 published_file_id = 1;
  if (has_published_file_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->published_file_id(), output);
  }

  // optional uint32 app_id = 2;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->app_id(), output);
  }

  // optional int32 action = 3;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->action(), output);
  }

}

int CMsgClientUCMSetUserPublishedFileAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 published_file_id = 1;
    if (has_published_file_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 2;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional int32 action = 3;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUCMSetUserPublishedFileAction::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUCMSetUserPublishedFileAction*>(&from));
}

void CMsgClientUCMSetUserPublishedFileAction::MergeFrom(const CMsgClientUCMSetUserPublishedFileAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_published_file_id()) {
      set_published_file_id(from.published_file_id());
    }
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
  }
}

void CMsgClientUCMSetUserPublishedFileAction::CopyFrom(const CMsgClientUCMSetUserPublishedFileAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUCMSetUserPublishedFileAction::IsInitialized() const {

  return true;
}

void CMsgClientUCMSetUserPublishedFileAction::Swap(CMsgClientUCMSetUserPublishedFileAction* other) {
  if (other != this) {
    std::swap(published_file_id_, other->published_file_id_);
    std::swap(app_id_, other->app_id_);
    std::swap(action_, other->action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUCMSetUserPublishedFileAction::GetTypeName() const {
  return "Sc.CMsgClientUCMSetUserPublishedFileAction";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUCMSetUserPublishedFileActionResponse::kEresultFieldNumber;
#endif  // !_MSC_VER

CMsgClientUCMSetUserPublishedFileActionResponse::CMsgClientUCMSetUserPublishedFileActionResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUCMSetUserPublishedFileActionResponse::InitAsDefaultInstance() {
}

CMsgClientUCMSetUserPublishedFileActionResponse::CMsgClientUCMSetUserPublishedFileActionResponse(const CMsgClientUCMSetUserPublishedFileActionResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUCMSetUserPublishedFileActionResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUCMSetUserPublishedFileActionResponse::~CMsgClientUCMSetUserPublishedFileActionResponse() {
  SharedDtor();
}

void CMsgClientUCMSetUserPublishedFileActionResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUCMSetUserPublishedFileActionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUCMSetUserPublishedFileActionResponse& CMsgClientUCMSetUserPublishedFileActionResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUCMSetUserPublishedFileActionResponse* CMsgClientUCMSetUserPublishedFileActionResponse::default_instance_ = NULL;

CMsgClientUCMSetUserPublishedFileActionResponse* CMsgClientUCMSetUserPublishedFileActionResponse::New() const {
  return new CMsgClientUCMSetUserPublishedFileActionResponse;
}

void CMsgClientUCMSetUserPublishedFileActionResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUCMSetUserPublishedFileActionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUCMSetUserPublishedFileActionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

}

int CMsgClientUCMSetUserPublishedFileActionResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUCMSetUserPublishedFileActionResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUCMSetUserPublishedFileActionResponse*>(&from));
}

void CMsgClientUCMSetUserPublishedFileActionResponse::MergeFrom(const CMsgClientUCMSetUserPublishedFileActionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
  }
}

void CMsgClientUCMSetUserPublishedFileActionResponse::CopyFrom(const CMsgClientUCMSetUserPublishedFileActionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUCMSetUserPublishedFileActionResponse::IsInitialized() const {

  return true;
}

void CMsgClientUCMSetUserPublishedFileActionResponse::Swap(CMsgClientUCMSetUserPublishedFileActionResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUCMSetUserPublishedFileActionResponse::GetTypeName() const {
  return "Sc.CMsgClientUCMSetUserPublishedFileActionResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUCMEnumeratePublishedFilesByUserAction::kAppIdFieldNumber;
const int CMsgClientUCMEnumeratePublishedFilesByUserAction::kStartIndexFieldNumber;
const int CMsgClientUCMEnumeratePublishedFilesByUserAction::kActionFieldNumber;
#endif  // !_MSC_VER

CMsgClientUCMEnumeratePublishedFilesByUserAction::CMsgClientUCMEnumeratePublishedFilesByUserAction()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUCMEnumeratePublishedFilesByUserAction::InitAsDefaultInstance() {
}

CMsgClientUCMEnumeratePublishedFilesByUserAction::CMsgClientUCMEnumeratePublishedFilesByUserAction(const CMsgClientUCMEnumeratePublishedFilesByUserAction& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUCMEnumeratePublishedFilesByUserAction::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  start_index_ = 0u;
  action_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUCMEnumeratePublishedFilesByUserAction::~CMsgClientUCMEnumeratePublishedFilesByUserAction() {
  SharedDtor();
}

void CMsgClientUCMEnumeratePublishedFilesByUserAction::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUCMEnumeratePublishedFilesByUserAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUCMEnumeratePublishedFilesByUserAction& CMsgClientUCMEnumeratePublishedFilesByUserAction::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUCMEnumeratePublishedFilesByUserAction* CMsgClientUCMEnumeratePublishedFilesByUserAction::default_instance_ = NULL;

CMsgClientUCMEnumeratePublishedFilesByUserAction* CMsgClientUCMEnumeratePublishedFilesByUserAction::New() const {
  return new CMsgClientUCMEnumeratePublishedFilesByUserAction;
}

void CMsgClientUCMEnumeratePublishedFilesByUserAction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    start_index_ = 0u;
    action_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUCMEnumeratePublishedFilesByUserAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_start_index;
        break;
      }

      // optional uint32 start_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_index_)));
          set_has_start_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_action;
        break;
      }

      // optional int32 action = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_)));
          set_has_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUCMEnumeratePublishedFilesByUserAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional uint32 start_index = 2;
  if (has_start_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->start_index(), output);
  }

  // optional int32 action = 3;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->action(), output);
  }

}

int CMsgClientUCMEnumeratePublishedFilesByUserAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 start_index = 2;
    if (has_start_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_index());
    }

    // optional int32 action = 3;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUCMEnumeratePublishedFilesByUserAction::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUCMEnumeratePublishedFilesByUserAction*>(&from));
}

void CMsgClientUCMEnumeratePublishedFilesByUserAction::MergeFrom(const CMsgClientUCMEnumeratePublishedFilesByUserAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_start_index()) {
      set_start_index(from.start_index());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
  }
}

void CMsgClientUCMEnumeratePublishedFilesByUserAction::CopyFrom(const CMsgClientUCMEnumeratePublishedFilesByUserAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUCMEnumeratePublishedFilesByUserAction::IsInitialized() const {

  return true;
}

void CMsgClientUCMEnumeratePublishedFilesByUserAction::Swap(CMsgClientUCMEnumeratePublishedFilesByUserAction* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(start_index_, other->start_index_);
    std::swap(action_, other->action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUCMEnumeratePublishedFilesByUserAction::GetTypeName() const {
  return "Sc.CMsgClientUCMEnumeratePublishedFilesByUserAction";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId::kPublishedFileIdFieldNumber;
const int CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId::kRtimeTimeStampFieldNumber;
#endif  // !_MSC_VER

CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId::CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId::InitAsDefaultInstance() {
}

CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId::CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId(const CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId::SharedCtor() {
  _cached_size_ = 0;
  published_file_id_ = GOOGLE_ULONGLONG(0);
  rtime_time_stamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId::~CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId() {
  SharedDtor();
}

void CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId& CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId* CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId::default_instance_ = NULL;

CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId* CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId::New() const {
  return new CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId;
}

void CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    published_file_id_ = GOOGLE_ULONGLONG(0);
    rtime_time_stamp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 published_file_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &published_file_id_)));
          set_has_published_file_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_rtime_time_stamp;
        break;
      }

      // optional fixed32 rtime_time_stamp = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rtime_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &rtime_time_stamp_)));
          set_has_rtime_time_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 published_file_id = 1;
  if (has_published_file_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->published_file_id(), output);
  }

  // optional fixed32 rtime_time_stamp = 2 [default = 0];
  if (has_rtime_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->rtime_time_stamp(), output);
  }

}

int CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 published_file_id = 1;
    if (has_published_file_id()) {
      total_size += 1 + 8;
    }

    // optional fixed32 rtime_time_stamp = 2 [default = 0];
    if (has_rtime_time_stamp()) {
      total_size += 1 + 4;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId*>(&from));
}

void CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId::MergeFrom(const CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_published_file_id()) {
      set_published_file_id(from.published_file_id());
    }
    if (from.has_rtime_time_stamp()) {
      set_rtime_time_stamp(from.rtime_time_stamp());
    }
  }
}

void CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId::CopyFrom(const CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId::IsInitialized() const {

  return true;
}

void CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId::Swap(CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId* other) {
  if (other != this) {
    std::swap(published_file_id_, other->published_file_id_);
    std::swap(rtime_time_stamp_, other->rtime_time_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId::GetTypeName() const {
  return "Sc.CMsgClientUCMEnumeratePublishedFilesByUserActionResponse.PublishedFileId";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientUCMEnumeratePublishedFilesByUserActionResponse::kEresultFieldNumber;
const int CMsgClientUCMEnumeratePublishedFilesByUserActionResponse::kPublishedFilesFieldNumber;
const int CMsgClientUCMEnumeratePublishedFilesByUserActionResponse::kTotalResultsFieldNumber;
#endif  // !_MSC_VER

CMsgClientUCMEnumeratePublishedFilesByUserActionResponse::CMsgClientUCMEnumeratePublishedFilesByUserActionResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUCMEnumeratePublishedFilesByUserActionResponse::InitAsDefaultInstance() {
}

CMsgClientUCMEnumeratePublishedFilesByUserActionResponse::CMsgClientUCMEnumeratePublishedFilesByUserActionResponse(const CMsgClientUCMEnumeratePublishedFilesByUserActionResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUCMEnumeratePublishedFilesByUserActionResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  total_results_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUCMEnumeratePublishedFilesByUserActionResponse::~CMsgClientUCMEnumeratePublishedFilesByUserActionResponse() {
  SharedDtor();
}

void CMsgClientUCMEnumeratePublishedFilesByUserActionResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUCMEnumeratePublishedFilesByUserActionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUCMEnumeratePublishedFilesByUserActionResponse& CMsgClientUCMEnumeratePublishedFilesByUserActionResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUCMEnumeratePublishedFilesByUserActionResponse* CMsgClientUCMEnumeratePublishedFilesByUserActionResponse::default_instance_ = NULL;

CMsgClientUCMEnumeratePublishedFilesByUserActionResponse* CMsgClientUCMEnumeratePublishedFilesByUserActionResponse::New() const {
  return new CMsgClientUCMEnumeratePublishedFilesByUserActionResponse;
}

void CMsgClientUCMEnumeratePublishedFilesByUserActionResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    total_results_ = 0u;
  }
  published_files_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUCMEnumeratePublishedFilesByUserActionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_published_files;
        break;
      }

      // repeated .Sc.CMsgClientUCMEnumeratePublishedFilesByUserActionResponse.PublishedFileId published_files = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_published_files:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_published_files()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_published_files;
        if (input->ExpectTag(24)) goto parse_total_results;
        break;
      }

      // optional uint32 total_results = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_results:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_results_)));
          set_has_total_results();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUCMEnumeratePublishedFilesByUserActionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // repeated .Sc.CMsgClientUCMEnumeratePublishedFilesByUserActionResponse.PublishedFileId published_files = 2;
  for (int i = 0; i < this->published_files_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->published_files(i), output);
  }

  // optional uint32 total_results = 3;
  if (has_total_results()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->total_results(), output);
  }

}

int CMsgClientUCMEnumeratePublishedFilesByUserActionResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional uint32 total_results = 3;
    if (has_total_results()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_results());
    }

  }
  // repeated .Sc.CMsgClientUCMEnumeratePublishedFilesByUserActionResponse.PublishedFileId published_files = 2;
  total_size += 1 * this->published_files_size();
  for (int i = 0; i < this->published_files_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->published_files(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUCMEnumeratePublishedFilesByUserActionResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUCMEnumeratePublishedFilesByUserActionResponse*>(&from));
}

void CMsgClientUCMEnumeratePublishedFilesByUserActionResponse::MergeFrom(const CMsgClientUCMEnumeratePublishedFilesByUserActionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  published_files_.MergeFrom(from.published_files_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_total_results()) {
      set_total_results(from.total_results());
    }
  }
}

void CMsgClientUCMEnumeratePublishedFilesByUserActionResponse::CopyFrom(const CMsgClientUCMEnumeratePublishedFilesByUserActionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUCMEnumeratePublishedFilesByUserActionResponse::IsInitialized() const {

  return true;
}

void CMsgClientUCMEnumeratePublishedFilesByUserActionResponse::Swap(CMsgClientUCMEnumeratePublishedFilesByUserActionResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    published_files_.Swap(&other->published_files_);
    std::swap(total_results_, other->total_results_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUCMEnumeratePublishedFilesByUserActionResponse::GetTypeName() const {
  return "Sc.CMsgClientUCMEnumeratePublishedFilesByUserActionResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgClientScreenshotsChanged::CMsgClientScreenshotsChanged()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientScreenshotsChanged::InitAsDefaultInstance() {
}

CMsgClientScreenshotsChanged::CMsgClientScreenshotsChanged(const CMsgClientScreenshotsChanged& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientScreenshotsChanged::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientScreenshotsChanged::~CMsgClientScreenshotsChanged() {
  SharedDtor();
}

void CMsgClientScreenshotsChanged::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientScreenshotsChanged::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientScreenshotsChanged& CMsgClientScreenshotsChanged::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientScreenshotsChanged* CMsgClientScreenshotsChanged::default_instance_ = NULL;

CMsgClientScreenshotsChanged* CMsgClientScreenshotsChanged::New() const {
  return new CMsgClientScreenshotsChanged;
}

void CMsgClientScreenshotsChanged::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientScreenshotsChanged::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void CMsgClientScreenshotsChanged::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int CMsgClientScreenshotsChanged::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientScreenshotsChanged::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientScreenshotsChanged*>(&from));
}

void CMsgClientScreenshotsChanged::MergeFrom(const CMsgClientScreenshotsChanged& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void CMsgClientScreenshotsChanged::CopyFrom(const CMsgClientScreenshotsChanged& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientScreenshotsChanged::IsInitialized() const {

  return true;
}

void CMsgClientScreenshotsChanged::Swap(CMsgClientScreenshotsChanged* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientScreenshotsChanged::GetTypeName() const {
  return "Sc.CMsgClientScreenshotsChanged";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUpdateUserGameInfo::kSteamidIdgsFieldNumber;
const int CMsgClientUpdateUserGameInfo::kGameidFieldNumber;
const int CMsgClientUpdateUserGameInfo::kGameIpFieldNumber;
const int CMsgClientUpdateUserGameInfo::kGamePortFieldNumber;
const int CMsgClientUpdateUserGameInfo::kTokenFieldNumber;
#endif  // !_MSC_VER

CMsgClientUpdateUserGameInfo::CMsgClientUpdateUserGameInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUpdateUserGameInfo::InitAsDefaultInstance() {
}

CMsgClientUpdateUserGameInfo::CMsgClientUpdateUserGameInfo(const CMsgClientUpdateUserGameInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUpdateUserGameInfo::SharedCtor() {
  _cached_size_ = 0;
  steamid_idgs_ = GOOGLE_ULONGLONG(0);
  gameid_ = GOOGLE_ULONGLONG(0);
  game_ip_ = 0u;
  game_port_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUpdateUserGameInfo::~CMsgClientUpdateUserGameInfo() {
  SharedDtor();
}

void CMsgClientUpdateUserGameInfo::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUpdateUserGameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUpdateUserGameInfo& CMsgClientUpdateUserGameInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUpdateUserGameInfo* CMsgClientUpdateUserGameInfo::default_instance_ = NULL;

CMsgClientUpdateUserGameInfo* CMsgClientUpdateUserGameInfo::New() const {
  return new CMsgClientUpdateUserGameInfo;
}

void CMsgClientUpdateUserGameInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steamid_idgs_ = GOOGLE_ULONGLONG(0);
    gameid_ = GOOGLE_ULONGLONG(0);
    game_ip_ = 0u;
    game_port_ = 0u;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUpdateUserGameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid_idgs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_idgs_)));
          set_has_steamid_idgs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_gameid;
        break;
      }

      // optional fixed64 gameid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_gameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_game_ip;
        break;
      }

      // optional uint32 game_ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_ip_)));
          set_has_game_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_game_port;
        break;
      }

      // optional uint32 game_port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_port_)));
          set_has_game_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_token;
        break;
      }

      // optional bytes token = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUpdateUserGameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steamid_idgs = 1;
  if (has_steamid_idgs()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid_idgs(), output);
  }

  // optional fixed64 gameid = 2;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->gameid(), output);
  }

  // optional uint32 game_ip = 3;
  if (has_game_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->game_ip(), output);
  }

  // optional uint32 game_port = 4;
  if (has_game_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_port(), output);
  }

  // optional bytes token = 5;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->token(), output);
  }

}

int CMsgClientUpdateUserGameInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steamid_idgs = 1;
    if (has_steamid_idgs()) {
      total_size += 1 + 8;
    }

    // optional fixed64 gameid = 2;
    if (has_gameid()) {
      total_size += 1 + 8;
    }

    // optional uint32 game_ip = 3;
    if (has_game_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_ip());
    }

    // optional uint32 game_port = 4;
    if (has_game_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_port());
    }

    // optional bytes token = 5;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->token());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUpdateUserGameInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUpdateUserGameInfo*>(&from));
}

void CMsgClientUpdateUserGameInfo::MergeFrom(const CMsgClientUpdateUserGameInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamid_idgs()) {
      set_steamid_idgs(from.steamid_idgs());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_game_ip()) {
      set_game_ip(from.game_ip());
    }
    if (from.has_game_port()) {
      set_game_port(from.game_port());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
}

void CMsgClientUpdateUserGameInfo::CopyFrom(const CMsgClientUpdateUserGameInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUpdateUserGameInfo::IsInitialized() const {

  return true;
}

void CMsgClientUpdateUserGameInfo::Swap(CMsgClientUpdateUserGameInfo* other) {
  if (other != this) {
    std::swap(steamid_idgs_, other->steamid_idgs_);
    std::swap(gameid_, other->gameid_);
    std::swap(game_ip_, other->game_ip_);
    std::swap(game_port_, other->game_port_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUpdateUserGameInfo::GetTypeName() const {
  return "Sc.CMsgClientUpdateUserGameInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientRichPresenceUpload::kRichPresenceKvFieldNumber;
const int CMsgClientRichPresenceUpload::kSteamidBroadcastFieldNumber;
#endif  // !_MSC_VER

CMsgClientRichPresenceUpload::CMsgClientRichPresenceUpload()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientRichPresenceUpload::InitAsDefaultInstance() {
}

CMsgClientRichPresenceUpload::CMsgClientRichPresenceUpload(const CMsgClientRichPresenceUpload& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRichPresenceUpload::SharedCtor() {
  _cached_size_ = 0;
  rich_presence_kv_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRichPresenceUpload::~CMsgClientRichPresenceUpload() {
  SharedDtor();
}

void CMsgClientRichPresenceUpload::SharedDtor() {
  if (rich_presence_kv_ != &::google::protobuf::internal::kEmptyString) {
    delete rich_presence_kv_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientRichPresenceUpload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientRichPresenceUpload& CMsgClientRichPresenceUpload::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientRichPresenceUpload* CMsgClientRichPresenceUpload::default_instance_ = NULL;

CMsgClientRichPresenceUpload* CMsgClientRichPresenceUpload::New() const {
  return new CMsgClientRichPresenceUpload;
}

void CMsgClientRichPresenceUpload::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rich_presence_kv()) {
      if (rich_presence_kv_ != &::google::protobuf::internal::kEmptyString) {
        rich_presence_kv_->clear();
      }
    }
  }
  steamid_broadcast_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientRichPresenceUpload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes rich_presence_kv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rich_presence_kv()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_steamid_broadcast;
        break;
      }

      // repeated fixed64 steamid_broadcast = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steamid_broadcast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 17, input, this->mutable_steamid_broadcast())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_steamid_broadcast())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_steamid_broadcast;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientRichPresenceUpload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes rich_presence_kv = 1;
  if (has_rich_presence_kv()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->rich_presence_kv(), output);
  }

  // repeated fixed64 steamid_broadcast = 2;
  for (int i = 0; i < this->steamid_broadcast_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      2, this->steamid_broadcast(i), output);
  }

}

int CMsgClientRichPresenceUpload::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes rich_presence_kv = 1;
    if (has_rich_presence_kv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rich_presence_kv());
    }

  }
  // repeated fixed64 steamid_broadcast = 2;
  {
    int data_size = 0;
    data_size = 8 * this->steamid_broadcast_size();
    total_size += 1 * this->steamid_broadcast_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRichPresenceUpload::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientRichPresenceUpload*>(&from));
}

void CMsgClientRichPresenceUpload::MergeFrom(const CMsgClientRichPresenceUpload& from) {
  GOOGLE_CHECK_NE(&from, this);
  steamid_broadcast_.MergeFrom(from.steamid_broadcast_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rich_presence_kv()) {
      set_rich_presence_kv(from.rich_presence_kv());
    }
  }
}

void CMsgClientRichPresenceUpload::CopyFrom(const CMsgClientRichPresenceUpload& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRichPresenceUpload::IsInitialized() const {

  return true;
}

void CMsgClientRichPresenceUpload::Swap(CMsgClientRichPresenceUpload* other) {
  if (other != this) {
    std::swap(rich_presence_kv_, other->rich_presence_kv_);
    steamid_broadcast_.Swap(&other->steamid_broadcast_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientRichPresenceUpload::GetTypeName() const {
  return "Sc.CMsgClientRichPresenceUpload";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientRichPresenceRequest::kSteamidRequestFieldNumber;
#endif  // !_MSC_VER

CMsgClientRichPresenceRequest::CMsgClientRichPresenceRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientRichPresenceRequest::InitAsDefaultInstance() {
}

CMsgClientRichPresenceRequest::CMsgClientRichPresenceRequest(const CMsgClientRichPresenceRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRichPresenceRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRichPresenceRequest::~CMsgClientRichPresenceRequest() {
  SharedDtor();
}

void CMsgClientRichPresenceRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientRichPresenceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientRichPresenceRequest& CMsgClientRichPresenceRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientRichPresenceRequest* CMsgClientRichPresenceRequest::default_instance_ = NULL;

CMsgClientRichPresenceRequest* CMsgClientRichPresenceRequest::New() const {
  return new CMsgClientRichPresenceRequest;
}

void CMsgClientRichPresenceRequest::Clear() {
  steamid_request_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientRichPresenceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed64 steamid_request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steamid_request:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 9, input, this->mutable_steamid_request())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_steamid_request())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(9)) goto parse_steamid_request;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientRichPresenceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated fixed64 steamid_request = 1;
  for (int i = 0; i < this->steamid_request_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      1, this->steamid_request(i), output);
  }

}

int CMsgClientRichPresenceRequest::ByteSize() const {
  int total_size = 0;

  // repeated fixed64 steamid_request = 1;
  {
    int data_size = 0;
    data_size = 8 * this->steamid_request_size();
    total_size += 1 * this->steamid_request_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRichPresenceRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientRichPresenceRequest*>(&from));
}

void CMsgClientRichPresenceRequest::MergeFrom(const CMsgClientRichPresenceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  steamid_request_.MergeFrom(from.steamid_request_);
}

void CMsgClientRichPresenceRequest::CopyFrom(const CMsgClientRichPresenceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRichPresenceRequest::IsInitialized() const {

  return true;
}

void CMsgClientRichPresenceRequest::Swap(CMsgClientRichPresenceRequest* other) {
  if (other != this) {
    steamid_request_.Swap(&other->steamid_request_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientRichPresenceRequest::GetTypeName() const {
  return "Sc.CMsgClientRichPresenceRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientRichPresenceInfo_RichPresence::kSteamidUserFieldNumber;
const int CMsgClientRichPresenceInfo_RichPresence::kRichPresenceKvFieldNumber;
#endif  // !_MSC_VER

CMsgClientRichPresenceInfo_RichPresence::CMsgClientRichPresenceInfo_RichPresence()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientRichPresenceInfo_RichPresence::InitAsDefaultInstance() {
}

CMsgClientRichPresenceInfo_RichPresence::CMsgClientRichPresenceInfo_RichPresence(const CMsgClientRichPresenceInfo_RichPresence& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRichPresenceInfo_RichPresence::SharedCtor() {
  _cached_size_ = 0;
  steamid_user_ = GOOGLE_ULONGLONG(0);
  rich_presence_kv_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRichPresenceInfo_RichPresence::~CMsgClientRichPresenceInfo_RichPresence() {
  SharedDtor();
}

void CMsgClientRichPresenceInfo_RichPresence::SharedDtor() {
  if (rich_presence_kv_ != &::google::protobuf::internal::kEmptyString) {
    delete rich_presence_kv_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientRichPresenceInfo_RichPresence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientRichPresenceInfo_RichPresence& CMsgClientRichPresenceInfo_RichPresence::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientRichPresenceInfo_RichPresence* CMsgClientRichPresenceInfo_RichPresence::default_instance_ = NULL;

CMsgClientRichPresenceInfo_RichPresence* CMsgClientRichPresenceInfo_RichPresence::New() const {
  return new CMsgClientRichPresenceInfo_RichPresence;
}

void CMsgClientRichPresenceInfo_RichPresence::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steamid_user_ = GOOGLE_ULONGLONG(0);
    if (has_rich_presence_kv()) {
      if (rich_presence_kv_ != &::google::protobuf::internal::kEmptyString) {
        rich_presence_kv_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientRichPresenceInfo_RichPresence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid_user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_user_)));
          set_has_steamid_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rich_presence_kv;
        break;
      }

      // optional bytes rich_presence_kv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rich_presence_kv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rich_presence_kv()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientRichPresenceInfo_RichPresence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steamid_user = 1;
  if (has_steamid_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid_user(), output);
  }

  // optional bytes rich_presence_kv = 2;
  if (has_rich_presence_kv()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->rich_presence_kv(), output);
  }

}

int CMsgClientRichPresenceInfo_RichPresence::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steamid_user = 1;
    if (has_steamid_user()) {
      total_size += 1 + 8;
    }

    // optional bytes rich_presence_kv = 2;
    if (has_rich_presence_kv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rich_presence_kv());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRichPresenceInfo_RichPresence::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientRichPresenceInfo_RichPresence*>(&from));
}

void CMsgClientRichPresenceInfo_RichPresence::MergeFrom(const CMsgClientRichPresenceInfo_RichPresence& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamid_user()) {
      set_steamid_user(from.steamid_user());
    }
    if (from.has_rich_presence_kv()) {
      set_rich_presence_kv(from.rich_presence_kv());
    }
  }
}

void CMsgClientRichPresenceInfo_RichPresence::CopyFrom(const CMsgClientRichPresenceInfo_RichPresence& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRichPresenceInfo_RichPresence::IsInitialized() const {

  return true;
}

void CMsgClientRichPresenceInfo_RichPresence::Swap(CMsgClientRichPresenceInfo_RichPresence* other) {
  if (other != this) {
    std::swap(steamid_user_, other->steamid_user_);
    std::swap(rich_presence_kv_, other->rich_presence_kv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientRichPresenceInfo_RichPresence::GetTypeName() const {
  return "Sc.CMsgClientRichPresenceInfo.RichPresence";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientRichPresenceInfo::kRichPresenceFieldNumber;
#endif  // !_MSC_VER

CMsgClientRichPresenceInfo::CMsgClientRichPresenceInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientRichPresenceInfo::InitAsDefaultInstance() {
}

CMsgClientRichPresenceInfo::CMsgClientRichPresenceInfo(const CMsgClientRichPresenceInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRichPresenceInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRichPresenceInfo::~CMsgClientRichPresenceInfo() {
  SharedDtor();
}

void CMsgClientRichPresenceInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientRichPresenceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientRichPresenceInfo& CMsgClientRichPresenceInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientRichPresenceInfo* CMsgClientRichPresenceInfo::default_instance_ = NULL;

CMsgClientRichPresenceInfo* CMsgClientRichPresenceInfo::New() const {
  return new CMsgClientRichPresenceInfo;
}

void CMsgClientRichPresenceInfo::Clear() {
  rich_presence_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientRichPresenceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Sc.CMsgClientRichPresenceInfo.RichPresence rich_presence = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rich_presence:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rich_presence()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rich_presence;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientRichPresenceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Sc.CMsgClientRichPresenceInfo.RichPresence rich_presence = 1;
  for (int i = 0; i < this->rich_presence_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->rich_presence(i), output);
  }

}

int CMsgClientRichPresenceInfo::ByteSize() const {
  int total_size = 0;

  // repeated .Sc.CMsgClientRichPresenceInfo.RichPresence rich_presence = 1;
  total_size += 1 * this->rich_presence_size();
  for (int i = 0; i < this->rich_presence_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rich_presence(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRichPresenceInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientRichPresenceInfo*>(&from));
}

void CMsgClientRichPresenceInfo::MergeFrom(const CMsgClientRichPresenceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  rich_presence_.MergeFrom(from.rich_presence_);
}

void CMsgClientRichPresenceInfo::CopyFrom(const CMsgClientRichPresenceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRichPresenceInfo::IsInitialized() const {

  return true;
}

void CMsgClientRichPresenceInfo::Swap(CMsgClientRichPresenceInfo* other) {
  if (other != this) {
    rich_presence_.Swap(&other->rich_presence_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientRichPresenceInfo::GetTypeName() const {
  return "Sc.CMsgClientRichPresenceInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientCheckFileSignature::kAppIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientCheckFileSignature::CMsgClientCheckFileSignature()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientCheckFileSignature::InitAsDefaultInstance() {
}

CMsgClientCheckFileSignature::CMsgClientCheckFileSignature(const CMsgClientCheckFileSignature& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientCheckFileSignature::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientCheckFileSignature::~CMsgClientCheckFileSignature() {
  SharedDtor();
}

void CMsgClientCheckFileSignature::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientCheckFileSignature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientCheckFileSignature& CMsgClientCheckFileSignature::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientCheckFileSignature* CMsgClientCheckFileSignature::default_instance_ = NULL;

CMsgClientCheckFileSignature* CMsgClientCheckFileSignature::New() const {
  return new CMsgClientCheckFileSignature;
}

void CMsgClientCheckFileSignature::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientCheckFileSignature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientCheckFileSignature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

}

int CMsgClientCheckFileSignature::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientCheckFileSignature::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientCheckFileSignature*>(&from));
}

void CMsgClientCheckFileSignature::MergeFrom(const CMsgClientCheckFileSignature& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
  }
}

void CMsgClientCheckFileSignature::CopyFrom(const CMsgClientCheckFileSignature& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientCheckFileSignature::IsInitialized() const {

  return true;
}

void CMsgClientCheckFileSignature::Swap(CMsgClientCheckFileSignature* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientCheckFileSignature::GetTypeName() const {
  return "Sc.CMsgClientCheckFileSignature";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientCheckFileSignatureResponse::kAppIdFieldNumber;
const int CMsgClientCheckFileSignatureResponse::kPidFieldNumber;
const int CMsgClientCheckFileSignatureResponse::kEresultFieldNumber;
const int CMsgClientCheckFileSignatureResponse::kFilenameFieldNumber;
const int CMsgClientCheckFileSignatureResponse::kEsignatureresultFieldNumber;
const int CMsgClientCheckFileSignatureResponse::kShaFileFieldNumber;
const int CMsgClientCheckFileSignatureResponse::kSignatureheaderFieldNumber;
const int CMsgClientCheckFileSignatureResponse::kFilesizeFieldNumber;
const int CMsgClientCheckFileSignatureResponse::kGetlasterrorFieldNumber;
const int CMsgClientCheckFileSignatureResponse::kEvalvesignaturecheckdetailFieldNumber;
#endif  // !_MSC_VER

CMsgClientCheckFileSignatureResponse::CMsgClientCheckFileSignatureResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientCheckFileSignatureResponse::InitAsDefaultInstance() {
}

CMsgClientCheckFileSignatureResponse::CMsgClientCheckFileSignatureResponse(const CMsgClientCheckFileSignatureResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientCheckFileSignatureResponse::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  pid_ = 0u;
  eresult_ = 0u;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  esignatureresult_ = 0u;
  sha_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  signatureheader_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filesize_ = 0u;
  getlasterror_ = 0u;
  evalvesignaturecheckdetail_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientCheckFileSignatureResponse::~CMsgClientCheckFileSignatureResponse() {
  SharedDtor();
}

void CMsgClientCheckFileSignatureResponse::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (sha_file_ != &::google::protobuf::internal::kEmptyString) {
    delete sha_file_;
  }
  if (signatureheader_ != &::google::protobuf::internal::kEmptyString) {
    delete signatureheader_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientCheckFileSignatureResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientCheckFileSignatureResponse& CMsgClientCheckFileSignatureResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientCheckFileSignatureResponse* CMsgClientCheckFileSignatureResponse::default_instance_ = NULL;

CMsgClientCheckFileSignatureResponse* CMsgClientCheckFileSignatureResponse::New() const {
  return new CMsgClientCheckFileSignatureResponse;
}

void CMsgClientCheckFileSignatureResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    pid_ = 0u;
    eresult_ = 0u;
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    esignatureresult_ = 0u;
    if (has_sha_file()) {
      if (sha_file_ != &::google::protobuf::internal::kEmptyString) {
        sha_file_->clear();
      }
    }
    if (has_signatureheader()) {
      if (signatureheader_ != &::google::protobuf::internal::kEmptyString) {
        signatureheader_->clear();
      }
    }
    filesize_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    getlasterror_ = 0u;
    evalvesignaturecheckdetail_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientCheckFileSignatureResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pid;
        break;
      }

      // optional uint32 pid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_eresult;
        break;
      }

      // optional uint32 eresult = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eresult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_filename;
        break;
      }

      // optional string filename = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_esignatureresult;
        break;
      }

      // optional uint32 esignatureresult = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_esignatureresult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &esignatureresult_)));
          set_has_esignatureresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_sha_file;
        break;
      }

      // optional bytes sha_file = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sha_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_signatureheader;
        break;
      }

      // optional bytes signatureheader = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signatureheader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signatureheader()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_filesize;
        break;
      }

      // optional uint32 filesize = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filesize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filesize_)));
          set_has_filesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_getlasterror;
        break;
      }

      // optional uint32 getlasterror = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getlasterror:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &getlasterror_)));
          set_has_getlasterror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_evalvesignaturecheckdetail;
        break;
      }

      // optional uint32 evalvesignaturecheckdetail = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_evalvesignaturecheckdetail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &evalvesignaturecheckdetail_)));
          set_has_evalvesignaturecheckdetail();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientCheckFileSignatureResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional uint32 pid = 2;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pid(), output);
  }

  // optional uint32 eresult = 3;
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->eresult(), output);
  }

  // optional string filename = 4;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->filename(), output);
  }

  // optional uint32 esignatureresult = 5;
  if (has_esignatureresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->esignatureresult(), output);
  }

  // optional bytes sha_file = 6;
  if (has_sha_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->sha_file(), output);
  }

  // optional bytes signatureheader = 7;
  if (has_signatureheader()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->signatureheader(), output);
  }

  // optional uint32 filesize = 8;
  if (has_filesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->filesize(), output);
  }

  // optional uint32 getlasterror = 9;
  if (has_getlasterror()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->getlasterror(), output);
  }

  // optional uint32 evalvesignaturecheckdetail = 10;
  if (has_evalvesignaturecheckdetail()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->evalvesignaturecheckdetail(), output);
  }

}

int CMsgClientCheckFileSignatureResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 pid = 2;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pid());
    }

    // optional uint32 eresult = 3;
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

    // optional string filename = 4;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional uint32 esignatureresult = 5;
    if (has_esignatureresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->esignatureresult());
    }

    // optional bytes sha_file = 6;
    if (has_sha_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha_file());
    }

    // optional bytes signatureheader = 7;
    if (has_signatureheader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signatureheader());
    }

    // optional uint32 filesize = 8;
    if (has_filesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filesize());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 getlasterror = 9;
    if (has_getlasterror()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->getlasterror());
    }

    // optional uint32 evalvesignaturecheckdetail = 10;
    if (has_evalvesignaturecheckdetail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->evalvesignaturecheckdetail());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientCheckFileSignatureResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientCheckFileSignatureResponse*>(&from));
}

void CMsgClientCheckFileSignatureResponse::MergeFrom(const CMsgClientCheckFileSignatureResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_esignatureresult()) {
      set_esignatureresult(from.esignatureresult());
    }
    if (from.has_sha_file()) {
      set_sha_file(from.sha_file());
    }
    if (from.has_signatureheader()) {
      set_signatureheader(from.signatureheader());
    }
    if (from.has_filesize()) {
      set_filesize(from.filesize());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_getlasterror()) {
      set_getlasterror(from.getlasterror());
    }
    if (from.has_evalvesignaturecheckdetail()) {
      set_evalvesignaturecheckdetail(from.evalvesignaturecheckdetail());
    }
  }
}

void CMsgClientCheckFileSignatureResponse::CopyFrom(const CMsgClientCheckFileSignatureResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientCheckFileSignatureResponse::IsInitialized() const {

  return true;
}

void CMsgClientCheckFileSignatureResponse::Swap(CMsgClientCheckFileSignatureResponse* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(pid_, other->pid_);
    std::swap(eresult_, other->eresult_);
    std::swap(filename_, other->filename_);
    std::swap(esignatureresult_, other->esignatureresult_);
    std::swap(sha_file_, other->sha_file_);
    std::swap(signatureheader_, other->signatureheader_);
    std::swap(filesize_, other->filesize_);
    std::swap(getlasterror_, other->getlasterror_);
    std::swap(evalvesignaturecheckdetail_, other->evalvesignaturecheckdetail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientCheckFileSignatureResponse::GetTypeName() const {
  return "Sc.CMsgClientCheckFileSignatureResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientReadMachineAuth::kFilenameFieldNumber;
const int CMsgClientReadMachineAuth::kOffsetFieldNumber;
const int CMsgClientReadMachineAuth::kCubtoreadFieldNumber;
#endif  // !_MSC_VER

CMsgClientReadMachineAuth::CMsgClientReadMachineAuth()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientReadMachineAuth::InitAsDefaultInstance() {
}

CMsgClientReadMachineAuth::CMsgClientReadMachineAuth(const CMsgClientReadMachineAuth& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientReadMachineAuth::SharedCtor() {
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  offset_ = 0u;
  cubtoread_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientReadMachineAuth::~CMsgClientReadMachineAuth() {
  SharedDtor();
}

void CMsgClientReadMachineAuth::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientReadMachineAuth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientReadMachineAuth& CMsgClientReadMachineAuth::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientReadMachineAuth* CMsgClientReadMachineAuth::default_instance_ = NULL;

CMsgClientReadMachineAuth* CMsgClientReadMachineAuth::New() const {
  return new CMsgClientReadMachineAuth;
}

void CMsgClientReadMachineAuth::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    offset_ = 0u;
    cubtoread_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientReadMachineAuth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string filename = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_offset;
        break;
      }

      // optional uint32 offset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cubtoread;
        break;
      }

      // optional uint32 cubtoread = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cubtoread:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cubtoread_)));
          set_has_cubtoread();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientReadMachineAuth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->filename(), output);
  }

  // optional uint32 offset = 2;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->offset(), output);
  }

  // optional uint32 cubtoread = 3;
  if (has_cubtoread()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cubtoread(), output);
  }

}

int CMsgClientReadMachineAuth::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string filename = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional uint32 offset = 2;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // optional uint32 cubtoread = 3;
    if (has_cubtoread()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cubtoread());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientReadMachineAuth::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientReadMachineAuth*>(&from));
}

void CMsgClientReadMachineAuth::MergeFrom(const CMsgClientReadMachineAuth& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_cubtoread()) {
      set_cubtoread(from.cubtoread());
    }
  }
}

void CMsgClientReadMachineAuth::CopyFrom(const CMsgClientReadMachineAuth& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientReadMachineAuth::IsInitialized() const {

  return true;
}

void CMsgClientReadMachineAuth::Swap(CMsgClientReadMachineAuth* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(offset_, other->offset_);
    std::swap(cubtoread_, other->cubtoread_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientReadMachineAuth::GetTypeName() const {
  return "Sc.CMsgClientReadMachineAuth";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientReadMachineAuthResponse::kFilenameFieldNumber;
const int CMsgClientReadMachineAuthResponse::kEresultFieldNumber;
const int CMsgClientReadMachineAuthResponse::kFilesizeFieldNumber;
const int CMsgClientReadMachineAuthResponse::kShaFileFieldNumber;
const int CMsgClientReadMachineAuthResponse::kGetlasterrorFieldNumber;
const int CMsgClientReadMachineAuthResponse::kOffsetFieldNumber;
const int CMsgClientReadMachineAuthResponse::kCubreadFieldNumber;
const int CMsgClientReadMachineAuthResponse::kBytesReadFieldNumber;
const int CMsgClientReadMachineAuthResponse::kFilenameSentryFieldNumber;
#endif  // !_MSC_VER

CMsgClientReadMachineAuthResponse::CMsgClientReadMachineAuthResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientReadMachineAuthResponse::InitAsDefaultInstance() {
}

CMsgClientReadMachineAuthResponse::CMsgClientReadMachineAuthResponse(const CMsgClientReadMachineAuthResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientReadMachineAuthResponse::SharedCtor() {
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  eresult_ = 0u;
  filesize_ = 0u;
  sha_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  getlasterror_ = 0u;
  offset_ = 0u;
  cubread_ = 0u;
  bytes_read_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filename_sentry_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientReadMachineAuthResponse::~CMsgClientReadMachineAuthResponse() {
  SharedDtor();
}

void CMsgClientReadMachineAuthResponse::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (sha_file_ != &::google::protobuf::internal::kEmptyString) {
    delete sha_file_;
  }
  if (bytes_read_ != &::google::protobuf::internal::kEmptyString) {
    delete bytes_read_;
  }
  if (filename_sentry_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_sentry_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientReadMachineAuthResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientReadMachineAuthResponse& CMsgClientReadMachineAuthResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientReadMachineAuthResponse* CMsgClientReadMachineAuthResponse::default_instance_ = NULL;

CMsgClientReadMachineAuthResponse* CMsgClientReadMachineAuthResponse::New() const {
  return new CMsgClientReadMachineAuthResponse;
}

void CMsgClientReadMachineAuthResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    eresult_ = 0u;
    filesize_ = 0u;
    if (has_sha_file()) {
      if (sha_file_ != &::google::protobuf::internal::kEmptyString) {
        sha_file_->clear();
      }
    }
    getlasterror_ = 0u;
    offset_ = 0u;
    cubread_ = 0u;
    if (has_bytes_read()) {
      if (bytes_read_ != &::google::protobuf::internal::kEmptyString) {
        bytes_read_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_filename_sentry()) {
      if (filename_sentry_ != &::google::protobuf::internal::kEmptyString) {
        filename_sentry_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientReadMachineAuthResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string filename = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_eresult;
        break;
      }

      // optional uint32 eresult = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eresult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_filesize;
        break;
      }

      // optional uint32 filesize = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filesize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filesize_)));
          set_has_filesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sha_file;
        break;
      }

      // optional bytes sha_file = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sha_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_getlasterror;
        break;
      }

      // optional uint32 getlasterror = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getlasterror:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &getlasterror_)));
          set_has_getlasterror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_offset;
        break;
      }

      // optional uint32 offset = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cubread;
        break;
      }

      // optional uint32 cubread = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cubread:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cubread_)));
          set_has_cubread();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_bytes_read;
        break;
      }

      // optional bytes bytes_read = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bytes_read:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bytes_read()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_filename_sentry;
        break;
      }

      // optional string filename_sentry = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filename_sentry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename_sentry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientReadMachineAuthResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->filename(), output);
  }

  // optional uint32 eresult = 2;
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->eresult(), output);
  }

  // optional uint32 filesize = 3;
  if (has_filesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->filesize(), output);
  }

  // optional bytes sha_file = 4;
  if (has_sha_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->sha_file(), output);
  }

  // optional uint32 getlasterror = 5;
  if (has_getlasterror()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->getlasterror(), output);
  }

  // optional uint32 offset = 6;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->offset(), output);
  }

  // optional uint32 cubread = 7;
  if (has_cubread()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->cubread(), output);
  }

  // optional bytes bytes_read = 8;
  if (has_bytes_read()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->bytes_read(), output);
  }

  // optional string filename_sentry = 9;
  if (has_filename_sentry()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->filename_sentry(), output);
  }

}

int CMsgClientReadMachineAuthResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string filename = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional uint32 eresult = 2;
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

    // optional uint32 filesize = 3;
    if (has_filesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filesize());
    }

    // optional bytes sha_file = 4;
    if (has_sha_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha_file());
    }

    // optional uint32 getlasterror = 5;
    if (has_getlasterror()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->getlasterror());
    }

    // optional uint32 offset = 6;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // optional uint32 cubread = 7;
    if (has_cubread()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cubread());
    }

    // optional bytes bytes_read = 8;
    if (has_bytes_read()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bytes_read());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string filename_sentry = 9;
    if (has_filename_sentry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename_sentry());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientReadMachineAuthResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientReadMachineAuthResponse*>(&from));
}

void CMsgClientReadMachineAuthResponse::MergeFrom(const CMsgClientReadMachineAuthResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_filesize()) {
      set_filesize(from.filesize());
    }
    if (from.has_sha_file()) {
      set_sha_file(from.sha_file());
    }
    if (from.has_getlasterror()) {
      set_getlasterror(from.getlasterror());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_cubread()) {
      set_cubread(from.cubread());
    }
    if (from.has_bytes_read()) {
      set_bytes_read(from.bytes_read());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_filename_sentry()) {
      set_filename_sentry(from.filename_sentry());
    }
  }
}

void CMsgClientReadMachineAuthResponse::CopyFrom(const CMsgClientReadMachineAuthResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientReadMachineAuthResponse::IsInitialized() const {

  return true;
}

void CMsgClientReadMachineAuthResponse::Swap(CMsgClientReadMachineAuthResponse* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(eresult_, other->eresult_);
    std::swap(filesize_, other->filesize_);
    std::swap(sha_file_, other->sha_file_);
    std::swap(getlasterror_, other->getlasterror_);
    std::swap(offset_, other->offset_);
    std::swap(cubread_, other->cubread_);
    std::swap(bytes_read_, other->bytes_read_);
    std::swap(filename_sentry_, other->filename_sentry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientReadMachineAuthResponse::GetTypeName() const {
  return "Sc.CMsgClientReadMachineAuthResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUpdateMachineAuth::kFilenameFieldNumber;
const int CMsgClientUpdateMachineAuth::kOffsetFieldNumber;
const int CMsgClientUpdateMachineAuth::kCubtowriteFieldNumber;
const int CMsgClientUpdateMachineAuth::kBytesFieldNumber;
const int CMsgClientUpdateMachineAuth::kOtpTypeFieldNumber;
const int CMsgClientUpdateMachineAuth::kOtpIdentifierFieldNumber;
const int CMsgClientUpdateMachineAuth::kOtpSharedsecretFieldNumber;
const int CMsgClientUpdateMachineAuth::kOtpTimedriftFieldNumber;
#endif  // !_MSC_VER

CMsgClientUpdateMachineAuth::CMsgClientUpdateMachineAuth()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUpdateMachineAuth::InitAsDefaultInstance() {
}

CMsgClientUpdateMachineAuth::CMsgClientUpdateMachineAuth(const CMsgClientUpdateMachineAuth& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUpdateMachineAuth::SharedCtor() {
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  offset_ = 0u;
  cubtowrite_ = 0u;
  bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  otp_type_ = 0u;
  otp_identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  otp_sharedsecret_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  otp_timedrift_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUpdateMachineAuth::~CMsgClientUpdateMachineAuth() {
  SharedDtor();
}

void CMsgClientUpdateMachineAuth::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (bytes_ != &::google::protobuf::internal::kEmptyString) {
    delete bytes_;
  }
  if (otp_identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete otp_identifier_;
  }
  if (otp_sharedsecret_ != &::google::protobuf::internal::kEmptyString) {
    delete otp_sharedsecret_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUpdateMachineAuth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUpdateMachineAuth& CMsgClientUpdateMachineAuth::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUpdateMachineAuth* CMsgClientUpdateMachineAuth::default_instance_ = NULL;

CMsgClientUpdateMachineAuth* CMsgClientUpdateMachineAuth::New() const {
  return new CMsgClientUpdateMachineAuth;
}

void CMsgClientUpdateMachineAuth::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    offset_ = 0u;
    cubtowrite_ = 0u;
    if (has_bytes()) {
      if (bytes_ != &::google::protobuf::internal::kEmptyString) {
        bytes_->clear();
      }
    }
    otp_type_ = 0u;
    if (has_otp_identifier()) {
      if (otp_identifier_ != &::google::protobuf::internal::kEmptyString) {
        otp_identifier_->clear();
      }
    }
    if (has_otp_sharedsecret()) {
      if (otp_sharedsecret_ != &::google::protobuf::internal::kEmptyString) {
        otp_sharedsecret_->clear();
      }
    }
    otp_timedrift_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUpdateMachineAuth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string filename = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_offset;
        break;
      }

      // optional uint32 offset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cubtowrite;
        break;
      }

      // optional uint32 cubtowrite = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cubtowrite:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cubtowrite_)));
          set_has_cubtowrite();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_bytes;
        break;
      }

      // optional bytes bytes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bytes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bytes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_otp_type;
        break;
      }

      // optional uint32 otp_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_otp_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &otp_type_)));
          set_has_otp_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_otp_identifier;
        break;
      }

      // optional string otp_identifier = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_otp_identifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_otp_identifier()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_otp_sharedsecret;
        break;
      }

      // optional bytes otp_sharedsecret = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_otp_sharedsecret:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_otp_sharedsecret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_otp_timedrift;
        break;
      }

      // optional uint32 otp_timedrift = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_otp_timedrift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &otp_timedrift_)));
          set_has_otp_timedrift();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUpdateMachineAuth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->filename(), output);
  }

  // optional uint32 offset = 2;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->offset(), output);
  }

  // optional uint32 cubtowrite = 3;
  if (has_cubtowrite()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cubtowrite(), output);
  }

  // optional bytes bytes = 4;
  if (has_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->bytes(), output);
  }

  // optional uint32 otp_type = 5;
  if (has_otp_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->otp_type(), output);
  }

  // optional string otp_identifier = 6;
  if (has_otp_identifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->otp_identifier(), output);
  }

  // optional bytes otp_sharedsecret = 7;
  if (has_otp_sharedsecret()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->otp_sharedsecret(), output);
  }

  // optional uint32 otp_timedrift = 8;
  if (has_otp_timedrift()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->otp_timedrift(), output);
  }

}

int CMsgClientUpdateMachineAuth::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string filename = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional uint32 offset = 2;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // optional uint32 cubtowrite = 3;
    if (has_cubtowrite()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cubtowrite());
    }

    // optional bytes bytes = 4;
    if (has_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bytes());
    }

    // optional uint32 otp_type = 5;
    if (has_otp_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->otp_type());
    }

    // optional string otp_identifier = 6;
    if (has_otp_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->otp_identifier());
    }

    // optional bytes otp_sharedsecret = 7;
    if (has_otp_sharedsecret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->otp_sharedsecret());
    }

    // optional uint32 otp_timedrift = 8;
    if (has_otp_timedrift()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->otp_timedrift());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUpdateMachineAuth::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUpdateMachineAuth*>(&from));
}

void CMsgClientUpdateMachineAuth::MergeFrom(const CMsgClientUpdateMachineAuth& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_cubtowrite()) {
      set_cubtowrite(from.cubtowrite());
    }
    if (from.has_bytes()) {
      set_bytes(from.bytes());
    }
    if (from.has_otp_type()) {
      set_otp_type(from.otp_type());
    }
    if (from.has_otp_identifier()) {
      set_otp_identifier(from.otp_identifier());
    }
    if (from.has_otp_sharedsecret()) {
      set_otp_sharedsecret(from.otp_sharedsecret());
    }
    if (from.has_otp_timedrift()) {
      set_otp_timedrift(from.otp_timedrift());
    }
  }
}

void CMsgClientUpdateMachineAuth::CopyFrom(const CMsgClientUpdateMachineAuth& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUpdateMachineAuth::IsInitialized() const {

  return true;
}

void CMsgClientUpdateMachineAuth::Swap(CMsgClientUpdateMachineAuth* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(offset_, other->offset_);
    std::swap(cubtowrite_, other->cubtowrite_);
    std::swap(bytes_, other->bytes_);
    std::swap(otp_type_, other->otp_type_);
    std::swap(otp_identifier_, other->otp_identifier_);
    std::swap(otp_sharedsecret_, other->otp_sharedsecret_);
    std::swap(otp_timedrift_, other->otp_timedrift_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUpdateMachineAuth::GetTypeName() const {
  return "Sc.CMsgClientUpdateMachineAuth";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUpdateMachineAuthResponse::kFilenameFieldNumber;
const int CMsgClientUpdateMachineAuthResponse::kEresultFieldNumber;
const int CMsgClientUpdateMachineAuthResponse::kFilesizeFieldNumber;
const int CMsgClientUpdateMachineAuthResponse::kShaFileFieldNumber;
const int CMsgClientUpdateMachineAuthResponse::kGetlasterrorFieldNumber;
const int CMsgClientUpdateMachineAuthResponse::kOffsetFieldNumber;
const int CMsgClientUpdateMachineAuthResponse::kCubwroteFieldNumber;
const int CMsgClientUpdateMachineAuthResponse::kOtpTypeFieldNumber;
const int CMsgClientUpdateMachineAuthResponse::kOtpValueFieldNumber;
const int CMsgClientUpdateMachineAuthResponse::kOtpIdentifierFieldNumber;
#endif  // !_MSC_VER

CMsgClientUpdateMachineAuthResponse::CMsgClientUpdateMachineAuthResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUpdateMachineAuthResponse::InitAsDefaultInstance() {
}

CMsgClientUpdateMachineAuthResponse::CMsgClientUpdateMachineAuthResponse(const CMsgClientUpdateMachineAuthResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUpdateMachineAuthResponse::SharedCtor() {
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  eresult_ = 0u;
  filesize_ = 0u;
  sha_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  getlasterror_ = 0u;
  offset_ = 0u;
  cubwrote_ = 0u;
  otp_type_ = 0;
  otp_value_ = 0u;
  otp_identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUpdateMachineAuthResponse::~CMsgClientUpdateMachineAuthResponse() {
  SharedDtor();
}

void CMsgClientUpdateMachineAuthResponse::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (sha_file_ != &::google::protobuf::internal::kEmptyString) {
    delete sha_file_;
  }
  if (otp_identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete otp_identifier_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUpdateMachineAuthResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUpdateMachineAuthResponse& CMsgClientUpdateMachineAuthResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUpdateMachineAuthResponse* CMsgClientUpdateMachineAuthResponse::default_instance_ = NULL;

CMsgClientUpdateMachineAuthResponse* CMsgClientUpdateMachineAuthResponse::New() const {
  return new CMsgClientUpdateMachineAuthResponse;
}

void CMsgClientUpdateMachineAuthResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    eresult_ = 0u;
    filesize_ = 0u;
    if (has_sha_file()) {
      if (sha_file_ != &::google::protobuf::internal::kEmptyString) {
        sha_file_->clear();
      }
    }
    getlasterror_ = 0u;
    offset_ = 0u;
    cubwrote_ = 0u;
    otp_type_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    otp_value_ = 0u;
    if (has_otp_identifier()) {
      if (otp_identifier_ != &::google::protobuf::internal::kEmptyString) {
        otp_identifier_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUpdateMachineAuthResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string filename = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_eresult;
        break;
      }

      // optional uint32 eresult = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eresult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_filesize;
        break;
      }

      // optional uint32 filesize = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filesize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filesize_)));
          set_has_filesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sha_file;
        break;
      }

      // optional bytes sha_file = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sha_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_getlasterror;
        break;
      }

      // optional uint32 getlasterror = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getlasterror:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &getlasterror_)));
          set_has_getlasterror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_offset;
        break;
      }

      // optional uint32 offset = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cubwrote;
        break;
      }

      // optional uint32 cubwrote = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cubwrote:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cubwrote_)));
          set_has_cubwrote();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_otp_type;
        break;
      }

      // optional int32 otp_type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_otp_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &otp_type_)));
          set_has_otp_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_otp_value;
        break;
      }

      // optional uint32 otp_value = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_otp_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &otp_value_)));
          set_has_otp_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_otp_identifier;
        break;
      }

      // optional string otp_identifier = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_otp_identifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_otp_identifier()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUpdateMachineAuthResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->filename(), output);
  }

  // optional uint32 eresult = 2;
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->eresult(), output);
  }

  // optional uint32 filesize = 3;
  if (has_filesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->filesize(), output);
  }

  // optional bytes sha_file = 4;
  if (has_sha_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->sha_file(), output);
  }

  // optional uint32 getlasterror = 5;
  if (has_getlasterror()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->getlasterror(), output);
  }

  // optional uint32 offset = 6;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->offset(), output);
  }

  // optional uint32 cubwrote = 7;
  if (has_cubwrote()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->cubwrote(), output);
  }

  // optional int32 otp_type = 8;
  if (has_otp_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->otp_type(), output);
  }

  // optional uint32 otp_value = 9;
  if (has_otp_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->otp_value(), output);
  }

  // optional string otp_identifier = 10;
  if (has_otp_identifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->otp_identifier(), output);
  }

}

int CMsgClientUpdateMachineAuthResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string filename = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional uint32 eresult = 2;
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

    // optional uint32 filesize = 3;
    if (has_filesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filesize());
    }

    // optional bytes sha_file = 4;
    if (has_sha_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha_file());
    }

    // optional uint32 getlasterror = 5;
    if (has_getlasterror()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->getlasterror());
    }

    // optional uint32 offset = 6;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // optional uint32 cubwrote = 7;
    if (has_cubwrote()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cubwrote());
    }

    // optional int32 otp_type = 8;
    if (has_otp_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->otp_type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 otp_value = 9;
    if (has_otp_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->otp_value());
    }

    // optional string otp_identifier = 10;
    if (has_otp_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->otp_identifier());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUpdateMachineAuthResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUpdateMachineAuthResponse*>(&from));
}

void CMsgClientUpdateMachineAuthResponse::MergeFrom(const CMsgClientUpdateMachineAuthResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_filesize()) {
      set_filesize(from.filesize());
    }
    if (from.has_sha_file()) {
      set_sha_file(from.sha_file());
    }
    if (from.has_getlasterror()) {
      set_getlasterror(from.getlasterror());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_cubwrote()) {
      set_cubwrote(from.cubwrote());
    }
    if (from.has_otp_type()) {
      set_otp_type(from.otp_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_otp_value()) {
      set_otp_value(from.otp_value());
    }
    if (from.has_otp_identifier()) {
      set_otp_identifier(from.otp_identifier());
    }
  }
}

void CMsgClientUpdateMachineAuthResponse::CopyFrom(const CMsgClientUpdateMachineAuthResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUpdateMachineAuthResponse::IsInitialized() const {

  return true;
}

void CMsgClientUpdateMachineAuthResponse::Swap(CMsgClientUpdateMachineAuthResponse* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(eresult_, other->eresult_);
    std::swap(filesize_, other->filesize_);
    std::swap(sha_file_, other->sha_file_);
    std::swap(getlasterror_, other->getlasterror_);
    std::swap(offset_, other->offset_);
    std::swap(cubwrote_, other->cubwrote_);
    std::swap(otp_type_, other->otp_type_);
    std::swap(otp_value_, other->otp_value_);
    std::swap(otp_identifier_, other->otp_identifier_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUpdateMachineAuthResponse::GetTypeName() const {
  return "Sc.CMsgClientUpdateMachineAuthResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientRequestMachineAuth::kFilenameFieldNumber;
const int CMsgClientRequestMachineAuth::kEresultSentryfileFieldNumber;
const int CMsgClientRequestMachineAuth::kFilesizeFieldNumber;
const int CMsgClientRequestMachineAuth::kShaSentryfileFieldNumber;
const int CMsgClientRequestMachineAuth::kLockAccountActionFieldNumber;
const int CMsgClientRequestMachineAuth::kOtpTypeFieldNumber;
const int CMsgClientRequestMachineAuth::kOtpIdentifierFieldNumber;
const int CMsgClientRequestMachineAuth::kOtpSharedsecretFieldNumber;
const int CMsgClientRequestMachineAuth::kOtpValueFieldNumber;
#endif  // !_MSC_VER

CMsgClientRequestMachineAuth::CMsgClientRequestMachineAuth()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientRequestMachineAuth::InitAsDefaultInstance() {
}

CMsgClientRequestMachineAuth::CMsgClientRequestMachineAuth(const CMsgClientRequestMachineAuth& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRequestMachineAuth::SharedCtor() {
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  eresult_sentryfile_ = 0u;
  filesize_ = 0u;
  sha_sentryfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lock_account_action_ = 0;
  otp_type_ = 0u;
  otp_identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  otp_sharedsecret_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  otp_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRequestMachineAuth::~CMsgClientRequestMachineAuth() {
  SharedDtor();
}

void CMsgClientRequestMachineAuth::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (sha_sentryfile_ != &::google::protobuf::internal::kEmptyString) {
    delete sha_sentryfile_;
  }
  if (otp_identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete otp_identifier_;
  }
  if (otp_sharedsecret_ != &::google::protobuf::internal::kEmptyString) {
    delete otp_sharedsecret_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientRequestMachineAuth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientRequestMachineAuth& CMsgClientRequestMachineAuth::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientRequestMachineAuth* CMsgClientRequestMachineAuth::default_instance_ = NULL;

CMsgClientRequestMachineAuth* CMsgClientRequestMachineAuth::New() const {
  return new CMsgClientRequestMachineAuth;
}

void CMsgClientRequestMachineAuth::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    eresult_sentryfile_ = 0u;
    filesize_ = 0u;
    if (has_sha_sentryfile()) {
      if (sha_sentryfile_ != &::google::protobuf::internal::kEmptyString) {
        sha_sentryfile_->clear();
      }
    }
    lock_account_action_ = 0;
    otp_type_ = 0u;
    if (has_otp_identifier()) {
      if (otp_identifier_ != &::google::protobuf::internal::kEmptyString) {
        otp_identifier_->clear();
      }
    }
    if (has_otp_sharedsecret()) {
      if (otp_sharedsecret_ != &::google::protobuf::internal::kEmptyString) {
        otp_sharedsecret_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    otp_value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientRequestMachineAuth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string filename = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_eresult_sentryfile;
        break;
      }

      // optional uint32 eresult_sentryfile = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eresult_sentryfile:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_sentryfile_)));
          set_has_eresult_sentryfile();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_filesize;
        break;
      }

      // optional uint32 filesize = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filesize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filesize_)));
          set_has_filesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sha_sentryfile;
        break;
      }

      // optional bytes sha_sentryfile = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sha_sentryfile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha_sentryfile()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_lock_account_action;
        break;
      }

      // optional int32 lock_account_action = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lock_account_action:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lock_account_action_)));
          set_has_lock_account_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_otp_type;
        break;
      }

      // optional uint32 otp_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_otp_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &otp_type_)));
          set_has_otp_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_otp_identifier;
        break;
      }

      // optional string otp_identifier = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_otp_identifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_otp_identifier()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_otp_sharedsecret;
        break;
      }

      // optional bytes otp_sharedsecret = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_otp_sharedsecret:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_otp_sharedsecret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_otp_value;
        break;
      }

      // optional uint32 otp_value = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_otp_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &otp_value_)));
          set_has_otp_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientRequestMachineAuth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->filename(), output);
  }

  // optional uint32 eresult_sentryfile = 2;
  if (has_eresult_sentryfile()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->eresult_sentryfile(), output);
  }

  // optional uint32 filesize = 3;
  if (has_filesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->filesize(), output);
  }

  // optional bytes sha_sentryfile = 4;
  if (has_sha_sentryfile()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->sha_sentryfile(), output);
  }

  // optional int32 lock_account_action = 6;
  if (has_lock_account_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lock_account_action(), output);
  }

  // optional uint32 otp_type = 7;
  if (has_otp_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->otp_type(), output);
  }

  // optional string otp_identifier = 8;
  if (has_otp_identifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->otp_identifier(), output);
  }

  // optional bytes otp_sharedsecret = 9;
  if (has_otp_sharedsecret()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, this->otp_sharedsecret(), output);
  }

  // optional uint32 otp_value = 10;
  if (has_otp_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->otp_value(), output);
  }

}

int CMsgClientRequestMachineAuth::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string filename = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional uint32 eresult_sentryfile = 2;
    if (has_eresult_sentryfile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult_sentryfile());
    }

    // optional uint32 filesize = 3;
    if (has_filesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filesize());
    }

    // optional bytes sha_sentryfile = 4;
    if (has_sha_sentryfile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha_sentryfile());
    }

    // optional int32 lock_account_action = 6;
    if (has_lock_account_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lock_account_action());
    }

    // optional uint32 otp_type = 7;
    if (has_otp_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->otp_type());
    }

    // optional string otp_identifier = 8;
    if (has_otp_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->otp_identifier());
    }

    // optional bytes otp_sharedsecret = 9;
    if (has_otp_sharedsecret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->otp_sharedsecret());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 otp_value = 10;
    if (has_otp_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->otp_value());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRequestMachineAuth::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientRequestMachineAuth*>(&from));
}

void CMsgClientRequestMachineAuth::MergeFrom(const CMsgClientRequestMachineAuth& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_eresult_sentryfile()) {
      set_eresult_sentryfile(from.eresult_sentryfile());
    }
    if (from.has_filesize()) {
      set_filesize(from.filesize());
    }
    if (from.has_sha_sentryfile()) {
      set_sha_sentryfile(from.sha_sentryfile());
    }
    if (from.has_lock_account_action()) {
      set_lock_account_action(from.lock_account_action());
    }
    if (from.has_otp_type()) {
      set_otp_type(from.otp_type());
    }
    if (from.has_otp_identifier()) {
      set_otp_identifier(from.otp_identifier());
    }
    if (from.has_otp_sharedsecret()) {
      set_otp_sharedsecret(from.otp_sharedsecret());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_otp_value()) {
      set_otp_value(from.otp_value());
    }
  }
}

void CMsgClientRequestMachineAuth::CopyFrom(const CMsgClientRequestMachineAuth& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestMachineAuth::IsInitialized() const {

  return true;
}

void CMsgClientRequestMachineAuth::Swap(CMsgClientRequestMachineAuth* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(eresult_sentryfile_, other->eresult_sentryfile_);
    std::swap(filesize_, other->filesize_);
    std::swap(sha_sentryfile_, other->sha_sentryfile_);
    std::swap(lock_account_action_, other->lock_account_action_);
    std::swap(otp_type_, other->otp_type_);
    std::swap(otp_identifier_, other->otp_identifier_);
    std::swap(otp_sharedsecret_, other->otp_sharedsecret_);
    std::swap(otp_value_, other->otp_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientRequestMachineAuth::GetTypeName() const {
  return "Sc.CMsgClientRequestMachineAuth";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientRequestMachineAuthResponse::kEresultFieldNumber;
#endif  // !_MSC_VER

CMsgClientRequestMachineAuthResponse::CMsgClientRequestMachineAuthResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientRequestMachineAuthResponse::InitAsDefaultInstance() {
}

CMsgClientRequestMachineAuthResponse::CMsgClientRequestMachineAuthResponse(const CMsgClientRequestMachineAuthResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRequestMachineAuthResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRequestMachineAuthResponse::~CMsgClientRequestMachineAuthResponse() {
  SharedDtor();
}

void CMsgClientRequestMachineAuthResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientRequestMachineAuthResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientRequestMachineAuthResponse& CMsgClientRequestMachineAuthResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientRequestMachineAuthResponse* CMsgClientRequestMachineAuthResponse::default_instance_ = NULL;

CMsgClientRequestMachineAuthResponse* CMsgClientRequestMachineAuthResponse::New() const {
  return new CMsgClientRequestMachineAuthResponse;
}

void CMsgClientRequestMachineAuthResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientRequestMachineAuthResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientRequestMachineAuthResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 eresult = 1;
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

}

int CMsgClientRequestMachineAuthResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 eresult = 1;
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRequestMachineAuthResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientRequestMachineAuthResponse*>(&from));
}

void CMsgClientRequestMachineAuthResponse::MergeFrom(const CMsgClientRequestMachineAuthResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
  }
}

void CMsgClientRequestMachineAuthResponse::CopyFrom(const CMsgClientRequestMachineAuthResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestMachineAuthResponse::IsInitialized() const {

  return true;
}

void CMsgClientRequestMachineAuthResponse::Swap(CMsgClientRequestMachineAuthResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientRequestMachineAuthResponse::GetTypeName() const {
  return "Sc.CMsgClientRequestMachineAuthResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientChangeSteamGuardOptions::kSteamguardProviderFieldNumber;
const int CMsgClientChangeSteamGuardOptions::kSteamguardRequireCodeDefaultFieldNumber;
#endif  // !_MSC_VER

CMsgClientChangeSteamGuardOptions::CMsgClientChangeSteamGuardOptions()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientChangeSteamGuardOptions::InitAsDefaultInstance() {
}

CMsgClientChangeSteamGuardOptions::CMsgClientChangeSteamGuardOptions(const CMsgClientChangeSteamGuardOptions& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientChangeSteamGuardOptions::SharedCtor() {
  _cached_size_ = 0;
  steamguard_provider_ = 0u;
  steamguard_require_code_default_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientChangeSteamGuardOptions::~CMsgClientChangeSteamGuardOptions() {
  SharedDtor();
}

void CMsgClientChangeSteamGuardOptions::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientChangeSteamGuardOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientChangeSteamGuardOptions& CMsgClientChangeSteamGuardOptions::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientChangeSteamGuardOptions* CMsgClientChangeSteamGuardOptions::default_instance_ = NULL;

CMsgClientChangeSteamGuardOptions* CMsgClientChangeSteamGuardOptions::New() const {
  return new CMsgClientChangeSteamGuardOptions;
}

void CMsgClientChangeSteamGuardOptions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steamguard_provider_ = 0u;
    steamguard_require_code_default_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientChangeSteamGuardOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 steamguard_provider = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &steamguard_provider_)));
          set_has_steamguard_provider();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_steamguard_require_code_default;
        break;
      }

      // optional uint32 steamguard_require_code_default = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_steamguard_require_code_default:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &steamguard_require_code_default_)));
          set_has_steamguard_require_code_default();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientChangeSteamGuardOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 steamguard_provider = 1;
  if (has_steamguard_provider()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->steamguard_provider(), output);
  }

  // optional uint32 steamguard_require_code_default = 2;
  if (has_steamguard_require_code_default()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->steamguard_require_code_default(), output);
  }

}

int CMsgClientChangeSteamGuardOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 steamguard_provider = 1;
    if (has_steamguard_provider()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->steamguard_provider());
    }

    // optional uint32 steamguard_require_code_default = 2;
    if (has_steamguard_require_code_default()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->steamguard_require_code_default());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientChangeSteamGuardOptions::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientChangeSteamGuardOptions*>(&from));
}

void CMsgClientChangeSteamGuardOptions::MergeFrom(const CMsgClientChangeSteamGuardOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamguard_provider()) {
      set_steamguard_provider(from.steamguard_provider());
    }
    if (from.has_steamguard_require_code_default()) {
      set_steamguard_require_code_default(from.steamguard_require_code_default());
    }
  }
}

void CMsgClientChangeSteamGuardOptions::CopyFrom(const CMsgClientChangeSteamGuardOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientChangeSteamGuardOptions::IsInitialized() const {

  return true;
}

void CMsgClientChangeSteamGuardOptions::Swap(CMsgClientChangeSteamGuardOptions* other) {
  if (other != this) {
    std::swap(steamguard_provider_, other->steamguard_provider_);
    std::swap(steamguard_require_code_default_, other->steamguard_require_code_default_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientChangeSteamGuardOptions::GetTypeName() const {
  return "Sc.CMsgClientChangeSteamGuardOptions";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientChangeSteamGuardOptionsResponse::kEresultFieldNumber;
#endif  // !_MSC_VER

CMsgClientChangeSteamGuardOptionsResponse::CMsgClientChangeSteamGuardOptionsResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientChangeSteamGuardOptionsResponse::InitAsDefaultInstance() {
}

CMsgClientChangeSteamGuardOptionsResponse::CMsgClientChangeSteamGuardOptionsResponse(const CMsgClientChangeSteamGuardOptionsResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientChangeSteamGuardOptionsResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientChangeSteamGuardOptionsResponse::~CMsgClientChangeSteamGuardOptionsResponse() {
  SharedDtor();
}

void CMsgClientChangeSteamGuardOptionsResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientChangeSteamGuardOptionsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientChangeSteamGuardOptionsResponse& CMsgClientChangeSteamGuardOptionsResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientChangeSteamGuardOptionsResponse* CMsgClientChangeSteamGuardOptionsResponse::default_instance_ = NULL;

CMsgClientChangeSteamGuardOptionsResponse* CMsgClientChangeSteamGuardOptionsResponse::New() const {
  return new CMsgClientChangeSteamGuardOptionsResponse;
}

void CMsgClientChangeSteamGuardOptionsResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientChangeSteamGuardOptionsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientChangeSteamGuardOptionsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 eresult = 1;
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

}

int CMsgClientChangeSteamGuardOptionsResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 eresult = 1;
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientChangeSteamGuardOptionsResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientChangeSteamGuardOptionsResponse*>(&from));
}

void CMsgClientChangeSteamGuardOptionsResponse::MergeFrom(const CMsgClientChangeSteamGuardOptionsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
  }
}

void CMsgClientChangeSteamGuardOptionsResponse::CopyFrom(const CMsgClientChangeSteamGuardOptionsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientChangeSteamGuardOptionsResponse::IsInitialized() const {

  return true;
}

void CMsgClientChangeSteamGuardOptionsResponse::Swap(CMsgClientChangeSteamGuardOptionsResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientChangeSteamGuardOptionsResponse::GetTypeName() const {
  return "Sc.CMsgClientChangeSteamGuardOptionsResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientCreateFriendsGroup::kSteamidFieldNumber;
const int CMsgClientCreateFriendsGroup::kGroupnameFieldNumber;
#endif  // !_MSC_VER

CMsgClientCreateFriendsGroup::CMsgClientCreateFriendsGroup()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientCreateFriendsGroup::InitAsDefaultInstance() {
}

CMsgClientCreateFriendsGroup::CMsgClientCreateFriendsGroup(const CMsgClientCreateFriendsGroup& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientCreateFriendsGroup::SharedCtor() {
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
  groupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientCreateFriendsGroup::~CMsgClientCreateFriendsGroup() {
  SharedDtor();
}

void CMsgClientCreateFriendsGroup::SharedDtor() {
  if (groupname_ != &::google::protobuf::internal::kEmptyString) {
    delete groupname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientCreateFriendsGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientCreateFriendsGroup& CMsgClientCreateFriendsGroup::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientCreateFriendsGroup* CMsgClientCreateFriendsGroup::default_instance_ = NULL;

CMsgClientCreateFriendsGroup* CMsgClientCreateFriendsGroup::New() const {
  return new CMsgClientCreateFriendsGroup;
}

void CMsgClientCreateFriendsGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steamid_ = GOOGLE_ULONGLONG(0);
    if (has_groupname()) {
      if (groupname_ != &::google::protobuf::internal::kEmptyString) {
        groupname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientCreateFriendsGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
          set_has_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_groupname;
        break;
      }

      // optional string groupname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groupname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientCreateFriendsGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional string groupname = 2;
  if (has_groupname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->groupname(), output);
  }

}

int CMsgClientCreateFriendsGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional string groupname = 2;
    if (has_groupname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupname());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientCreateFriendsGroup::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientCreateFriendsGroup*>(&from));
}

void CMsgClientCreateFriendsGroup::MergeFrom(const CMsgClientCreateFriendsGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
    if (from.has_groupname()) {
      set_groupname(from.groupname());
    }
  }
}

void CMsgClientCreateFriendsGroup::CopyFrom(const CMsgClientCreateFriendsGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientCreateFriendsGroup::IsInitialized() const {

  return true;
}

void CMsgClientCreateFriendsGroup::Swap(CMsgClientCreateFriendsGroup* other) {
  if (other != this) {
    std::swap(steamid_, other->steamid_);
    std::swap(groupname_, other->groupname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientCreateFriendsGroup::GetTypeName() const {
  return "Sc.CMsgClientCreateFriendsGroup";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientCreateFriendsGroupResponse::kEresultFieldNumber;
const int CMsgClientCreateFriendsGroupResponse::kGroupidFieldNumber;
#endif  // !_MSC_VER

CMsgClientCreateFriendsGroupResponse::CMsgClientCreateFriendsGroupResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientCreateFriendsGroupResponse::InitAsDefaultInstance() {
}

CMsgClientCreateFriendsGroupResponse::CMsgClientCreateFriendsGroupResponse(const CMsgClientCreateFriendsGroupResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientCreateFriendsGroupResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 0u;
  groupid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientCreateFriendsGroupResponse::~CMsgClientCreateFriendsGroupResponse() {
  SharedDtor();
}

void CMsgClientCreateFriendsGroupResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientCreateFriendsGroupResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientCreateFriendsGroupResponse& CMsgClientCreateFriendsGroupResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientCreateFriendsGroupResponse* CMsgClientCreateFriendsGroupResponse::default_instance_ = NULL;

CMsgClientCreateFriendsGroupResponse* CMsgClientCreateFriendsGroupResponse::New() const {
  return new CMsgClientCreateFriendsGroupResponse;
}

void CMsgClientCreateFriendsGroupResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 0u;
    groupid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientCreateFriendsGroupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_groupid;
        break;
      }

      // optional int32 groupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientCreateFriendsGroupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 eresult = 1;
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

  // optional int32 groupid = 2;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->groupid(), output);
  }

}

int CMsgClientCreateFriendsGroupResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 eresult = 1;
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

    // optional int32 groupid = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientCreateFriendsGroupResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientCreateFriendsGroupResponse*>(&from));
}

void CMsgClientCreateFriendsGroupResponse::MergeFrom(const CMsgClientCreateFriendsGroupResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
}

void CMsgClientCreateFriendsGroupResponse::CopyFrom(const CMsgClientCreateFriendsGroupResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientCreateFriendsGroupResponse::IsInitialized() const {

  return true;
}

void CMsgClientCreateFriendsGroupResponse::Swap(CMsgClientCreateFriendsGroupResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientCreateFriendsGroupResponse::GetTypeName() const {
  return "Sc.CMsgClientCreateFriendsGroupResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientDeleteFriendsGroup::kSteamidFieldNumber;
const int CMsgClientDeleteFriendsGroup::kGroupidFieldNumber;
#endif  // !_MSC_VER

CMsgClientDeleteFriendsGroup::CMsgClientDeleteFriendsGroup()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientDeleteFriendsGroup::InitAsDefaultInstance() {
}

CMsgClientDeleteFriendsGroup::CMsgClientDeleteFriendsGroup(const CMsgClientDeleteFriendsGroup& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientDeleteFriendsGroup::SharedCtor() {
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
  groupid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientDeleteFriendsGroup::~CMsgClientDeleteFriendsGroup() {
  SharedDtor();
}

void CMsgClientDeleteFriendsGroup::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientDeleteFriendsGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientDeleteFriendsGroup& CMsgClientDeleteFriendsGroup::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientDeleteFriendsGroup* CMsgClientDeleteFriendsGroup::default_instance_ = NULL;

CMsgClientDeleteFriendsGroup* CMsgClientDeleteFriendsGroup::New() const {
  return new CMsgClientDeleteFriendsGroup;
}

void CMsgClientDeleteFriendsGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steamid_ = GOOGLE_ULONGLONG(0);
    groupid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientDeleteFriendsGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
          set_has_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_groupid;
        break;
      }

      // optional int32 groupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientDeleteFriendsGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional int32 groupid = 2;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->groupid(), output);
  }

}

int CMsgClientDeleteFriendsGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional int32 groupid = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientDeleteFriendsGroup::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientDeleteFriendsGroup*>(&from));
}

void CMsgClientDeleteFriendsGroup::MergeFrom(const CMsgClientDeleteFriendsGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
}

void CMsgClientDeleteFriendsGroup::CopyFrom(const CMsgClientDeleteFriendsGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientDeleteFriendsGroup::IsInitialized() const {

  return true;
}

void CMsgClientDeleteFriendsGroup::Swap(CMsgClientDeleteFriendsGroup* other) {
  if (other != this) {
    std::swap(steamid_, other->steamid_);
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientDeleteFriendsGroup::GetTypeName() const {
  return "Sc.CMsgClientDeleteFriendsGroup";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientDeleteFriendsGroupResponse::kEresultFieldNumber;
#endif  // !_MSC_VER

CMsgClientDeleteFriendsGroupResponse::CMsgClientDeleteFriendsGroupResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientDeleteFriendsGroupResponse::InitAsDefaultInstance() {
}

CMsgClientDeleteFriendsGroupResponse::CMsgClientDeleteFriendsGroupResponse(const CMsgClientDeleteFriendsGroupResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientDeleteFriendsGroupResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientDeleteFriendsGroupResponse::~CMsgClientDeleteFriendsGroupResponse() {
  SharedDtor();
}

void CMsgClientDeleteFriendsGroupResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientDeleteFriendsGroupResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientDeleteFriendsGroupResponse& CMsgClientDeleteFriendsGroupResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientDeleteFriendsGroupResponse* CMsgClientDeleteFriendsGroupResponse::default_instance_ = NULL;

CMsgClientDeleteFriendsGroupResponse* CMsgClientDeleteFriendsGroupResponse::New() const {
  return new CMsgClientDeleteFriendsGroupResponse;
}

void CMsgClientDeleteFriendsGroupResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientDeleteFriendsGroupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientDeleteFriendsGroupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 eresult = 1;
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

}

int CMsgClientDeleteFriendsGroupResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 eresult = 1;
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientDeleteFriendsGroupResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientDeleteFriendsGroupResponse*>(&from));
}

void CMsgClientDeleteFriendsGroupResponse::MergeFrom(const CMsgClientDeleteFriendsGroupResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
  }
}

void CMsgClientDeleteFriendsGroupResponse::CopyFrom(const CMsgClientDeleteFriendsGroupResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientDeleteFriendsGroupResponse::IsInitialized() const {

  return true;
}

void CMsgClientDeleteFriendsGroupResponse::Swap(CMsgClientDeleteFriendsGroupResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientDeleteFriendsGroupResponse::GetTypeName() const {
  return "Sc.CMsgClientDeleteFriendsGroupResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientRenameFriendsGroup::kGroupidFieldNumber;
const int CMsgClientRenameFriendsGroup::kGroupnameFieldNumber;
#endif  // !_MSC_VER

CMsgClientRenameFriendsGroup::CMsgClientRenameFriendsGroup()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientRenameFriendsGroup::InitAsDefaultInstance() {
}

CMsgClientRenameFriendsGroup::CMsgClientRenameFriendsGroup(const CMsgClientRenameFriendsGroup& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRenameFriendsGroup::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = 0;
  groupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRenameFriendsGroup::~CMsgClientRenameFriendsGroup() {
  SharedDtor();
}

void CMsgClientRenameFriendsGroup::SharedDtor() {
  if (groupname_ != &::google::protobuf::internal::kEmptyString) {
    delete groupname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientRenameFriendsGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientRenameFriendsGroup& CMsgClientRenameFriendsGroup::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientRenameFriendsGroup* CMsgClientRenameFriendsGroup::default_instance_ = NULL;

CMsgClientRenameFriendsGroup* CMsgClientRenameFriendsGroup::New() const {
  return new CMsgClientRenameFriendsGroup;
}

void CMsgClientRenameFriendsGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = 0;
    if (has_groupname()) {
      if (groupname_ != &::google::protobuf::internal::kEmptyString) {
        groupname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientRenameFriendsGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 groupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_groupname;
        break;
      }

      // optional string groupname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groupname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientRenameFriendsGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->groupid(), output);
  }

  // optional string groupname = 2;
  if (has_groupname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->groupname(), output);
  }

}

int CMsgClientRenameFriendsGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

    // optional string groupname = 2;
    if (has_groupname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupname());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRenameFriendsGroup::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientRenameFriendsGroup*>(&from));
}

void CMsgClientRenameFriendsGroup::MergeFrom(const CMsgClientRenameFriendsGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_groupname()) {
      set_groupname(from.groupname());
    }
  }
}

void CMsgClientRenameFriendsGroup::CopyFrom(const CMsgClientRenameFriendsGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRenameFriendsGroup::IsInitialized() const {

  return true;
}

void CMsgClientRenameFriendsGroup::Swap(CMsgClientRenameFriendsGroup* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(groupname_, other->groupname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientRenameFriendsGroup::GetTypeName() const {
  return "Sc.CMsgClientRenameFriendsGroup";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientRenameFriendsGroupResponse::kEresultFieldNumber;
#endif  // !_MSC_VER

CMsgClientRenameFriendsGroupResponse::CMsgClientRenameFriendsGroupResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientRenameFriendsGroupResponse::InitAsDefaultInstance() {
}

CMsgClientRenameFriendsGroupResponse::CMsgClientRenameFriendsGroupResponse(const CMsgClientRenameFriendsGroupResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRenameFriendsGroupResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRenameFriendsGroupResponse::~CMsgClientRenameFriendsGroupResponse() {
  SharedDtor();
}

void CMsgClientRenameFriendsGroupResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientRenameFriendsGroupResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientRenameFriendsGroupResponse& CMsgClientRenameFriendsGroupResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientRenameFriendsGroupResponse* CMsgClientRenameFriendsGroupResponse::default_instance_ = NULL;

CMsgClientRenameFriendsGroupResponse* CMsgClientRenameFriendsGroupResponse::New() const {
  return new CMsgClientRenameFriendsGroupResponse;
}

void CMsgClientRenameFriendsGroupResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientRenameFriendsGroupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientRenameFriendsGroupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 eresult = 1;
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

}

int CMsgClientRenameFriendsGroupResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 eresult = 1;
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRenameFriendsGroupResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientRenameFriendsGroupResponse*>(&from));
}

void CMsgClientRenameFriendsGroupResponse::MergeFrom(const CMsgClientRenameFriendsGroupResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
  }
}

void CMsgClientRenameFriendsGroupResponse::CopyFrom(const CMsgClientRenameFriendsGroupResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRenameFriendsGroupResponse::IsInitialized() const {

  return true;
}

void CMsgClientRenameFriendsGroupResponse::Swap(CMsgClientRenameFriendsGroupResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientRenameFriendsGroupResponse::GetTypeName() const {
  return "Sc.CMsgClientRenameFriendsGroupResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientAddFriendToGroup::kGroupidFieldNumber;
const int CMsgClientAddFriendToGroup::kSteamiduserFieldNumber;
#endif  // !_MSC_VER

CMsgClientAddFriendToGroup::CMsgClientAddFriendToGroup()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientAddFriendToGroup::InitAsDefaultInstance() {
}

CMsgClientAddFriendToGroup::CMsgClientAddFriendToGroup(const CMsgClientAddFriendToGroup& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientAddFriendToGroup::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = 0;
  steamiduser_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientAddFriendToGroup::~CMsgClientAddFriendToGroup() {
  SharedDtor();
}

void CMsgClientAddFriendToGroup::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientAddFriendToGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientAddFriendToGroup& CMsgClientAddFriendToGroup::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientAddFriendToGroup* CMsgClientAddFriendToGroup::default_instance_ = NULL;

CMsgClientAddFriendToGroup* CMsgClientAddFriendToGroup::New() const {
  return new CMsgClientAddFriendToGroup;
}

void CMsgClientAddFriendToGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = 0;
    steamiduser_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientAddFriendToGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 groupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_steamiduser;
        break;
      }

      // optional fixed64 steamiduser = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steamiduser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamiduser_)));
          set_has_steamiduser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientAddFriendToGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->groupid(), output);
  }

  // optional fixed64 steamiduser = 2;
  if (has_steamiduser()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steamiduser(), output);
  }

}

int CMsgClientAddFriendToGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

    // optional fixed64 steamiduser = 2;
    if (has_steamiduser()) {
      total_size += 1 + 8;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAddFriendToGroup::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientAddFriendToGroup*>(&from));
}

void CMsgClientAddFriendToGroup::MergeFrom(const CMsgClientAddFriendToGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_steamiduser()) {
      set_steamiduser(from.steamiduser());
    }
  }
}

void CMsgClientAddFriendToGroup::CopyFrom(const CMsgClientAddFriendToGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAddFriendToGroup::IsInitialized() const {

  return true;
}

void CMsgClientAddFriendToGroup::Swap(CMsgClientAddFriendToGroup* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(steamiduser_, other->steamiduser_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientAddFriendToGroup::GetTypeName() const {
  return "Sc.CMsgClientAddFriendToGroup";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientAddFriendToGroupResponse::kEresultFieldNumber;
#endif  // !_MSC_VER

CMsgClientAddFriendToGroupResponse::CMsgClientAddFriendToGroupResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientAddFriendToGroupResponse::InitAsDefaultInstance() {
}

CMsgClientAddFriendToGroupResponse::CMsgClientAddFriendToGroupResponse(const CMsgClientAddFriendToGroupResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientAddFriendToGroupResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientAddFriendToGroupResponse::~CMsgClientAddFriendToGroupResponse() {
  SharedDtor();
}

void CMsgClientAddFriendToGroupResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientAddFriendToGroupResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientAddFriendToGroupResponse& CMsgClientAddFriendToGroupResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientAddFriendToGroupResponse* CMsgClientAddFriendToGroupResponse::default_instance_ = NULL;

CMsgClientAddFriendToGroupResponse* CMsgClientAddFriendToGroupResponse::New() const {
  return new CMsgClientAddFriendToGroupResponse;
}

void CMsgClientAddFriendToGroupResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientAddFriendToGroupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientAddFriendToGroupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 eresult = 1;
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

}

int CMsgClientAddFriendToGroupResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 eresult = 1;
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientAddFriendToGroupResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientAddFriendToGroupResponse*>(&from));
}

void CMsgClientAddFriendToGroupResponse::MergeFrom(const CMsgClientAddFriendToGroupResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
  }
}

void CMsgClientAddFriendToGroupResponse::CopyFrom(const CMsgClientAddFriendToGroupResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAddFriendToGroupResponse::IsInitialized() const {

  return true;
}

void CMsgClientAddFriendToGroupResponse::Swap(CMsgClientAddFriendToGroupResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientAddFriendToGroupResponse::GetTypeName() const {
  return "Sc.CMsgClientAddFriendToGroupResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientRemoveFriendFromGroup::kGroupidFieldNumber;
const int CMsgClientRemoveFriendFromGroup::kSteamiduserFieldNumber;
#endif  // !_MSC_VER

CMsgClientRemoveFriendFromGroup::CMsgClientRemoveFriendFromGroup()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientRemoveFriendFromGroup::InitAsDefaultInstance() {
}

CMsgClientRemoveFriendFromGroup::CMsgClientRemoveFriendFromGroup(const CMsgClientRemoveFriendFromGroup& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRemoveFriendFromGroup::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = 0;
  steamiduser_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRemoveFriendFromGroup::~CMsgClientRemoveFriendFromGroup() {
  SharedDtor();
}

void CMsgClientRemoveFriendFromGroup::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientRemoveFriendFromGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientRemoveFriendFromGroup& CMsgClientRemoveFriendFromGroup::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientRemoveFriendFromGroup* CMsgClientRemoveFriendFromGroup::default_instance_ = NULL;

CMsgClientRemoveFriendFromGroup* CMsgClientRemoveFriendFromGroup::New() const {
  return new CMsgClientRemoveFriendFromGroup;
}

void CMsgClientRemoveFriendFromGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = 0;
    steamiduser_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientRemoveFriendFromGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 groupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_steamiduser;
        break;
      }

      // optional fixed64 steamiduser = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steamiduser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamiduser_)));
          set_has_steamiduser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientRemoveFriendFromGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->groupid(), output);
  }

  // optional fixed64 steamiduser = 2;
  if (has_steamiduser()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steamiduser(), output);
  }

}

int CMsgClientRemoveFriendFromGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

    // optional fixed64 steamiduser = 2;
    if (has_steamiduser()) {
      total_size += 1 + 8;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRemoveFriendFromGroup::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientRemoveFriendFromGroup*>(&from));
}

void CMsgClientRemoveFriendFromGroup::MergeFrom(const CMsgClientRemoveFriendFromGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_steamiduser()) {
      set_steamiduser(from.steamiduser());
    }
  }
}

void CMsgClientRemoveFriendFromGroup::CopyFrom(const CMsgClientRemoveFriendFromGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRemoveFriendFromGroup::IsInitialized() const {

  return true;
}

void CMsgClientRemoveFriendFromGroup::Swap(CMsgClientRemoveFriendFromGroup* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(steamiduser_, other->steamiduser_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientRemoveFriendFromGroup::GetTypeName() const {
  return "Sc.CMsgClientRemoveFriendFromGroup";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientRemoveFriendFromGroupResponse::kEresultFieldNumber;
#endif  // !_MSC_VER

CMsgClientRemoveFriendFromGroupResponse::CMsgClientRemoveFriendFromGroupResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientRemoveFriendFromGroupResponse::InitAsDefaultInstance() {
}

CMsgClientRemoveFriendFromGroupResponse::CMsgClientRemoveFriendFromGroupResponse(const CMsgClientRemoveFriendFromGroupResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRemoveFriendFromGroupResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRemoveFriendFromGroupResponse::~CMsgClientRemoveFriendFromGroupResponse() {
  SharedDtor();
}

void CMsgClientRemoveFriendFromGroupResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientRemoveFriendFromGroupResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientRemoveFriendFromGroupResponse& CMsgClientRemoveFriendFromGroupResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientRemoveFriendFromGroupResponse* CMsgClientRemoveFriendFromGroupResponse::default_instance_ = NULL;

CMsgClientRemoveFriendFromGroupResponse* CMsgClientRemoveFriendFromGroupResponse::New() const {
  return new CMsgClientRemoveFriendFromGroupResponse;
}

void CMsgClientRemoveFriendFromGroupResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientRemoveFriendFromGroupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientRemoveFriendFromGroupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 eresult = 1;
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

}

int CMsgClientRemoveFriendFromGroupResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 eresult = 1;
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRemoveFriendFromGroupResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientRemoveFriendFromGroupResponse*>(&from));
}

void CMsgClientRemoveFriendFromGroupResponse::MergeFrom(const CMsgClientRemoveFriendFromGroupResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
  }
}

void CMsgClientRemoveFriendFromGroupResponse::CopyFrom(const CMsgClientRemoveFriendFromGroupResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRemoveFriendFromGroupResponse::IsInitialized() const {

  return true;
}

void CMsgClientRemoveFriendFromGroupResponse::Swap(CMsgClientRemoveFriendFromGroupResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientRemoveFriendFromGroupResponse::GetTypeName() const {
  return "Sc.CMsgClientRemoveFriendFromGroupResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientRegisterKey::kKeyFieldNumber;
#endif  // !_MSC_VER

CMsgClientRegisterKey::CMsgClientRegisterKey()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientRegisterKey::InitAsDefaultInstance() {
}

CMsgClientRegisterKey::CMsgClientRegisterKey(const CMsgClientRegisterKey& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRegisterKey::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRegisterKey::~CMsgClientRegisterKey() {
  SharedDtor();
}

void CMsgClientRegisterKey::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientRegisterKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientRegisterKey& CMsgClientRegisterKey::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientRegisterKey* CMsgClientRegisterKey::default_instance_ = NULL;

CMsgClientRegisterKey* CMsgClientRegisterKey::New() const {
  return new CMsgClientRegisterKey;
}

void CMsgClientRegisterKey::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientRegisterKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientRegisterKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

}

int CMsgClientRegisterKey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRegisterKey::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientRegisterKey*>(&from));
}

void CMsgClientRegisterKey::MergeFrom(const CMsgClientRegisterKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
  }
}

void CMsgClientRegisterKey::CopyFrom(const CMsgClientRegisterKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRegisterKey::IsInitialized() const {

  return true;
}

void CMsgClientRegisterKey::Swap(CMsgClientRegisterKey* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientRegisterKey::GetTypeName() const {
  return "Sc.CMsgClientRegisterKey";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientPurchaseResponse::kEresultFieldNumber;
const int CMsgClientPurchaseResponse::kPurchaseResultDetailsFieldNumber;
const int CMsgClientPurchaseResponse::kPurchaseReceiptInfoFieldNumber;
#endif  // !_MSC_VER

CMsgClientPurchaseResponse::CMsgClientPurchaseResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientPurchaseResponse::InitAsDefaultInstance() {
}

CMsgClientPurchaseResponse::CMsgClientPurchaseResponse(const CMsgClientPurchaseResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientPurchaseResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  purchase_result_details_ = 0;
  purchase_receipt_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientPurchaseResponse::~CMsgClientPurchaseResponse() {
  SharedDtor();
}

void CMsgClientPurchaseResponse::SharedDtor() {
  if (purchase_receipt_info_ != &::google::protobuf::internal::kEmptyString) {
    delete purchase_receipt_info_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientPurchaseResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientPurchaseResponse& CMsgClientPurchaseResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientPurchaseResponse* CMsgClientPurchaseResponse::default_instance_ = NULL;

CMsgClientPurchaseResponse* CMsgClientPurchaseResponse::New() const {
  return new CMsgClientPurchaseResponse;
}

void CMsgClientPurchaseResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    purchase_result_details_ = 0;
    if (has_purchase_receipt_info()) {
      if (purchase_receipt_info_ != &::google::protobuf::internal::kEmptyString) {
        purchase_receipt_info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientPurchaseResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_purchase_result_details;
        break;
      }

      // optional int32 purchase_result_details = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_purchase_result_details:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &purchase_result_details_)));
          set_has_purchase_result_details();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_purchase_receipt_info;
        break;
      }

      // optional bytes purchase_receipt_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_purchase_receipt_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_purchase_receipt_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientPurchaseResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional int32 purchase_result_details = 2;
  if (has_purchase_result_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->purchase_result_details(), output);
  }

  // optional bytes purchase_receipt_info = 3;
  if (has_purchase_receipt_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->purchase_receipt_info(), output);
  }

}

int CMsgClientPurchaseResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional int32 purchase_result_details = 2;
    if (has_purchase_result_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->purchase_result_details());
    }

    // optional bytes purchase_receipt_info = 3;
    if (has_purchase_receipt_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->purchase_receipt_info());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientPurchaseResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientPurchaseResponse*>(&from));
}

void CMsgClientPurchaseResponse::MergeFrom(const CMsgClientPurchaseResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_purchase_result_details()) {
      set_purchase_result_details(from.purchase_result_details());
    }
    if (from.has_purchase_receipt_info()) {
      set_purchase_receipt_info(from.purchase_receipt_info());
    }
  }
}

void CMsgClientPurchaseResponse::CopyFrom(const CMsgClientPurchaseResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPurchaseResponse::IsInitialized() const {

  return true;
}

void CMsgClientPurchaseResponse::Swap(CMsgClientPurchaseResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(purchase_result_details_, other->purchase_result_details_);
    std::swap(purchase_receipt_info_, other->purchase_receipt_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientPurchaseResponse::GetTypeName() const {
  return "Sc.CMsgClientPurchaseResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientActivateOEMLicense::kBiosManufacturerFieldNumber;
const int CMsgClientActivateOEMLicense::kBiosSerialnumberFieldNumber;
const int CMsgClientActivateOEMLicense::kLicenseFileFieldNumber;
const int CMsgClientActivateOEMLicense::kMainboardManufacturerFieldNumber;
const int CMsgClientActivateOEMLicense::kMainboardProductFieldNumber;
const int CMsgClientActivateOEMLicense::kMainboardSerialnumberFieldNumber;
#endif  // !_MSC_VER

CMsgClientActivateOEMLicense::CMsgClientActivateOEMLicense()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientActivateOEMLicense::InitAsDefaultInstance() {
}

CMsgClientActivateOEMLicense::CMsgClientActivateOEMLicense(const CMsgClientActivateOEMLicense& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientActivateOEMLicense::SharedCtor() {
  _cached_size_ = 0;
  bios_manufacturer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bios_serialnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  license_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mainboard_manufacturer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mainboard_product_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mainboard_serialnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientActivateOEMLicense::~CMsgClientActivateOEMLicense() {
  SharedDtor();
}

void CMsgClientActivateOEMLicense::SharedDtor() {
  if (bios_manufacturer_ != &::google::protobuf::internal::kEmptyString) {
    delete bios_manufacturer_;
  }
  if (bios_serialnumber_ != &::google::protobuf::internal::kEmptyString) {
    delete bios_serialnumber_;
  }
  if (license_file_ != &::google::protobuf::internal::kEmptyString) {
    delete license_file_;
  }
  if (mainboard_manufacturer_ != &::google::protobuf::internal::kEmptyString) {
    delete mainboard_manufacturer_;
  }
  if (mainboard_product_ != &::google::protobuf::internal::kEmptyString) {
    delete mainboard_product_;
  }
  if (mainboard_serialnumber_ != &::google::protobuf::internal::kEmptyString) {
    delete mainboard_serialnumber_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientActivateOEMLicense::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientActivateOEMLicense& CMsgClientActivateOEMLicense::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientActivateOEMLicense* CMsgClientActivateOEMLicense::default_instance_ = NULL;

CMsgClientActivateOEMLicense* CMsgClientActivateOEMLicense::New() const {
  return new CMsgClientActivateOEMLicense;
}

void CMsgClientActivateOEMLicense::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_bios_manufacturer()) {
      if (bios_manufacturer_ != &::google::protobuf::internal::kEmptyString) {
        bios_manufacturer_->clear();
      }
    }
    if (has_bios_serialnumber()) {
      if (bios_serialnumber_ != &::google::protobuf::internal::kEmptyString) {
        bios_serialnumber_->clear();
      }
    }
    if (has_license_file()) {
      if (license_file_ != &::google::protobuf::internal::kEmptyString) {
        license_file_->clear();
      }
    }
    if (has_mainboard_manufacturer()) {
      if (mainboard_manufacturer_ != &::google::protobuf::internal::kEmptyString) {
        mainboard_manufacturer_->clear();
      }
    }
    if (has_mainboard_product()) {
      if (mainboard_product_ != &::google::protobuf::internal::kEmptyString) {
        mainboard_product_->clear();
      }
    }
    if (has_mainboard_serialnumber()) {
      if (mainboard_serialnumber_ != &::google::protobuf::internal::kEmptyString) {
        mainboard_serialnumber_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientActivateOEMLicense::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string bios_manufacturer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bios_manufacturer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bios_serialnumber;
        break;
      }

      // optional string bios_serialnumber = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bios_serialnumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bios_serialnumber()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_license_file;
        break;
      }

      // optional bytes license_file = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_license_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_license_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_mainboard_manufacturer;
        break;
      }

      // optional string mainboard_manufacturer = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mainboard_manufacturer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mainboard_manufacturer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_mainboard_product;
        break;
      }

      // optional string mainboard_product = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mainboard_product:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mainboard_product()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_mainboard_serialnumber;
        break;
      }

      // optional string mainboard_serialnumber = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mainboard_serialnumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mainboard_serialnumber()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientActivateOEMLicense::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string bios_manufacturer = 1;
  if (has_bios_manufacturer()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->bios_manufacturer(), output);
  }

  // optional string bios_serialnumber = 2;
  if (has_bios_serialnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->bios_serialnumber(), output);
  }

  // optional bytes license_file = 3;
  if (has_license_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->license_file(), output);
  }

  // optional string mainboard_manufacturer = 4;
  if (has_mainboard_manufacturer()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->mainboard_manufacturer(), output);
  }

  // optional string mainboard_product = 5;
  if (has_mainboard_product()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->mainboard_product(), output);
  }

  // optional string mainboard_serialnumber = 6;
  if (has_mainboard_serialnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->mainboard_serialnumber(), output);
  }

}

int CMsgClientActivateOEMLicense::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string bios_manufacturer = 1;
    if (has_bios_manufacturer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bios_manufacturer());
    }

    // optional string bios_serialnumber = 2;
    if (has_bios_serialnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bios_serialnumber());
    }

    // optional bytes license_file = 3;
    if (has_license_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->license_file());
    }

    // optional string mainboard_manufacturer = 4;
    if (has_mainboard_manufacturer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mainboard_manufacturer());
    }

    // optional string mainboard_product = 5;
    if (has_mainboard_product()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mainboard_product());
    }

    // optional string mainboard_serialnumber = 6;
    if (has_mainboard_serialnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mainboard_serialnumber());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientActivateOEMLicense::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientActivateOEMLicense*>(&from));
}

void CMsgClientActivateOEMLicense::MergeFrom(const CMsgClientActivateOEMLicense& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bios_manufacturer()) {
      set_bios_manufacturer(from.bios_manufacturer());
    }
    if (from.has_bios_serialnumber()) {
      set_bios_serialnumber(from.bios_serialnumber());
    }
    if (from.has_license_file()) {
      set_license_file(from.license_file());
    }
    if (from.has_mainboard_manufacturer()) {
      set_mainboard_manufacturer(from.mainboard_manufacturer());
    }
    if (from.has_mainboard_product()) {
      set_mainboard_product(from.mainboard_product());
    }
    if (from.has_mainboard_serialnumber()) {
      set_mainboard_serialnumber(from.mainboard_serialnumber());
    }
  }
}

void CMsgClientActivateOEMLicense::CopyFrom(const CMsgClientActivateOEMLicense& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientActivateOEMLicense::IsInitialized() const {

  return true;
}

void CMsgClientActivateOEMLicense::Swap(CMsgClientActivateOEMLicense* other) {
  if (other != this) {
    std::swap(bios_manufacturer_, other->bios_manufacturer_);
    std::swap(bios_serialnumber_, other->bios_serialnumber_);
    std::swap(license_file_, other->license_file_);
    std::swap(mainboard_manufacturer_, other->mainboard_manufacturer_);
    std::swap(mainboard_product_, other->mainboard_product_);
    std::swap(mainboard_serialnumber_, other->mainboard_serialnumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientActivateOEMLicense::GetTypeName() const {
  return "Sc.CMsgClientActivateOEMLicense";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientPurchaseWithMachineID::kPackageIdFieldNumber;
const int CMsgClientPurchaseWithMachineID::kMachineInfoFieldNumber;
#endif  // !_MSC_VER

CMsgClientPurchaseWithMachineID::CMsgClientPurchaseWithMachineID()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientPurchaseWithMachineID::InitAsDefaultInstance() {
}

CMsgClientPurchaseWithMachineID::CMsgClientPurchaseWithMachineID(const CMsgClientPurchaseWithMachineID& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientPurchaseWithMachineID::SharedCtor() {
  _cached_size_ = 0;
  package_id_ = 0u;
  machine_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientPurchaseWithMachineID::~CMsgClientPurchaseWithMachineID() {
  SharedDtor();
}

void CMsgClientPurchaseWithMachineID::SharedDtor() {
  if (machine_info_ != &::google::protobuf::internal::kEmptyString) {
    delete machine_info_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientPurchaseWithMachineID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientPurchaseWithMachineID& CMsgClientPurchaseWithMachineID::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientPurchaseWithMachineID* CMsgClientPurchaseWithMachineID::default_instance_ = NULL;

CMsgClientPurchaseWithMachineID* CMsgClientPurchaseWithMachineID::New() const {
  return new CMsgClientPurchaseWithMachineID;
}

void CMsgClientPurchaseWithMachineID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    package_id_ = 0u;
    if (has_machine_info()) {
      if (machine_info_ != &::google::protobuf::internal::kEmptyString) {
        machine_info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientPurchaseWithMachineID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 package_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &package_id_)));
          set_has_package_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_machine_info;
        break;
      }

      // optional bytes machine_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machine_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_machine_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientPurchaseWithMachineID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 package_id = 1;
  if (has_package_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->package_id(), output);
  }

  // optional bytes machine_info = 2;
  if (has_machine_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->machine_info(), output);
  }

}

int CMsgClientPurchaseWithMachineID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 package_id = 1;
    if (has_package_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->package_id());
    }

    // optional bytes machine_info = 2;
    if (has_machine_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->machine_info());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientPurchaseWithMachineID::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientPurchaseWithMachineID*>(&from));
}

void CMsgClientPurchaseWithMachineID::MergeFrom(const CMsgClientPurchaseWithMachineID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_package_id()) {
      set_package_id(from.package_id());
    }
    if (from.has_machine_info()) {
      set_machine_info(from.machine_info());
    }
  }
}

void CMsgClientPurchaseWithMachineID::CopyFrom(const CMsgClientPurchaseWithMachineID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPurchaseWithMachineID::IsInitialized() const {

  return true;
}

void CMsgClientPurchaseWithMachineID::Swap(CMsgClientPurchaseWithMachineID* other) {
  if (other != this) {
    std::swap(package_id_, other->package_id_);
    std::swap(machine_info_, other->machine_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientPurchaseWithMachineID::GetTypeName() const {
  return "Sc.CMsgClientPurchaseWithMachineID";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTrading_InitiateTradeRequest::kTradeRequestIdFieldNumber;
const int CMsgTrading_InitiateTradeRequest::kOtherSteamidFieldNumber;
const int CMsgTrading_InitiateTradeRequest::kOtherNameFieldNumber;
#endif  // !_MSC_VER

CMsgTrading_InitiateTradeRequest::CMsgTrading_InitiateTradeRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgTrading_InitiateTradeRequest::InitAsDefaultInstance() {
}

CMsgTrading_InitiateTradeRequest::CMsgTrading_InitiateTradeRequest(const CMsgTrading_InitiateTradeRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTrading_InitiateTradeRequest::SharedCtor() {
  _cached_size_ = 0;
  trade_request_id_ = 0u;
  other_steamid_ = GOOGLE_ULONGLONG(0);
  other_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTrading_InitiateTradeRequest::~CMsgTrading_InitiateTradeRequest() {
  SharedDtor();
}

void CMsgTrading_InitiateTradeRequest::SharedDtor() {
  if (other_name_ != &::google::protobuf::internal::kEmptyString) {
    delete other_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgTrading_InitiateTradeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgTrading_InitiateTradeRequest& CMsgTrading_InitiateTradeRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgTrading_InitiateTradeRequest* CMsgTrading_InitiateTradeRequest::default_instance_ = NULL;

CMsgTrading_InitiateTradeRequest* CMsgTrading_InitiateTradeRequest::New() const {
  return new CMsgTrading_InitiateTradeRequest;
}

void CMsgTrading_InitiateTradeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    trade_request_id_ = 0u;
    other_steamid_ = GOOGLE_ULONGLONG(0);
    if (has_other_name()) {
      if (other_name_ != &::google::protobuf::internal::kEmptyString) {
        other_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgTrading_InitiateTradeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 trade_request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trade_request_id_)));
          set_has_trade_request_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_other_steamid;
        break;
      }

      // optional uint64 other_steamid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_other_steamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &other_steamid_)));
          set_has_other_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_other_name;
        break;
      }

      // optional string other_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_other_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_other_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTrading_InitiateTradeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 trade_request_id = 1;
  if (has_trade_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->trade_request_id(), output);
  }

  // optional uint64 other_steamid = 2;
  if (has_other_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->other_steamid(), output);
  }

  // optional string other_name = 3;
  if (has_other_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->other_name(), output);
  }

}

int CMsgTrading_InitiateTradeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 trade_request_id = 1;
    if (has_trade_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trade_request_id());
    }

    // optional uint64 other_steamid = 2;
    if (has_other_steamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->other_steamid());
    }

    // optional string other_name = 3;
    if (has_other_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->other_name());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTrading_InitiateTradeRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgTrading_InitiateTradeRequest*>(&from));
}

void CMsgTrading_InitiateTradeRequest::MergeFrom(const CMsgTrading_InitiateTradeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trade_request_id()) {
      set_trade_request_id(from.trade_request_id());
    }
    if (from.has_other_steamid()) {
      set_other_steamid(from.other_steamid());
    }
    if (from.has_other_name()) {
      set_other_name(from.other_name());
    }
  }
}

void CMsgTrading_InitiateTradeRequest::CopyFrom(const CMsgTrading_InitiateTradeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTrading_InitiateTradeRequest::IsInitialized() const {

  return true;
}

void CMsgTrading_InitiateTradeRequest::Swap(CMsgTrading_InitiateTradeRequest* other) {
  if (other != this) {
    std::swap(trade_request_id_, other->trade_request_id_);
    std::swap(other_steamid_, other->other_steamid_);
    std::swap(other_name_, other->other_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgTrading_InitiateTradeRequest::GetTypeName() const {
  return "Sc.CMsgTrading_InitiateTradeRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTrading_InitiateTradeResponse::kResponseFieldNumber;
const int CMsgTrading_InitiateTradeResponse::kTradeRequestIdFieldNumber;
const int CMsgTrading_InitiateTradeResponse::kOtherSteamidFieldNumber;
const int CMsgTrading_InitiateTradeResponse::kSteamguardRequiredDaysFieldNumber;
#endif  // !_MSC_VER

CMsgTrading_InitiateTradeResponse::CMsgTrading_InitiateTradeResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgTrading_InitiateTradeResponse::InitAsDefaultInstance() {
}

CMsgTrading_InitiateTradeResponse::CMsgTrading_InitiateTradeResponse(const CMsgTrading_InitiateTradeResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTrading_InitiateTradeResponse::SharedCtor() {
  _cached_size_ = 0;
  response_ = 0u;
  trade_request_id_ = 0u;
  other_steamid_ = GOOGLE_ULONGLONG(0);
  steamguard_required_days_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTrading_InitiateTradeResponse::~CMsgTrading_InitiateTradeResponse() {
  SharedDtor();
}

void CMsgTrading_InitiateTradeResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgTrading_InitiateTradeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgTrading_InitiateTradeResponse& CMsgTrading_InitiateTradeResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgTrading_InitiateTradeResponse* CMsgTrading_InitiateTradeResponse::default_instance_ = NULL;

CMsgTrading_InitiateTradeResponse* CMsgTrading_InitiateTradeResponse::New() const {
  return new CMsgTrading_InitiateTradeResponse;
}

void CMsgTrading_InitiateTradeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    response_ = 0u;
    trade_request_id_ = 0u;
    other_steamid_ = GOOGLE_ULONGLONG(0);
    steamguard_required_days_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgTrading_InitiateTradeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 response = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &response_)));
          set_has_response();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_trade_request_id;
        break;
      }

      // optional uint32 trade_request_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trade_request_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trade_request_id_)));
          set_has_trade_request_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_other_steamid;
        break;
      }

      // optional uint64 other_steamid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_other_steamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &other_steamid_)));
          set_has_other_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_steamguard_required_days;
        break;
      }

      // optional uint32 steamguard_required_days = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_steamguard_required_days:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &steamguard_required_days_)));
          set_has_steamguard_required_days();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTrading_InitiateTradeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 response = 1;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->response(), output);
  }

  // optional uint32 trade_request_id = 2;
  if (has_trade_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->trade_request_id(), output);
  }

  // optional uint64 other_steamid = 3;
  if (has_other_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->other_steamid(), output);
  }

  // optional uint32 steamguard_required_days = 4;
  if (has_steamguard_required_days()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->steamguard_required_days(), output);
  }

}

int CMsgTrading_InitiateTradeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 response = 1;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->response());
    }

    // optional uint32 trade_request_id = 2;
    if (has_trade_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trade_request_id());
    }

    // optional uint64 other_steamid = 3;
    if (has_other_steamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->other_steamid());
    }

    // optional uint32 steamguard_required_days = 4;
    if (has_steamguard_required_days()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->steamguard_required_days());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTrading_InitiateTradeResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgTrading_InitiateTradeResponse*>(&from));
}

void CMsgTrading_InitiateTradeResponse::MergeFrom(const CMsgTrading_InitiateTradeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_response()) {
      set_response(from.response());
    }
    if (from.has_trade_request_id()) {
      set_trade_request_id(from.trade_request_id());
    }
    if (from.has_other_steamid()) {
      set_other_steamid(from.other_steamid());
    }
    if (from.has_steamguard_required_days()) {
      set_steamguard_required_days(from.steamguard_required_days());
    }
  }
}

void CMsgTrading_InitiateTradeResponse::CopyFrom(const CMsgTrading_InitiateTradeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTrading_InitiateTradeResponse::IsInitialized() const {

  return true;
}

void CMsgTrading_InitiateTradeResponse::Swap(CMsgTrading_InitiateTradeResponse* other) {
  if (other != this) {
    std::swap(response_, other->response_);
    std::swap(trade_request_id_, other->trade_request_id_);
    std::swap(other_steamid_, other->other_steamid_);
    std::swap(steamguard_required_days_, other->steamguard_required_days_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgTrading_InitiateTradeResponse::GetTypeName() const {
  return "Sc.CMsgTrading_InitiateTradeResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTrading_CancelTradeRequest::kOtherSteamidFieldNumber;
#endif  // !_MSC_VER

CMsgTrading_CancelTradeRequest::CMsgTrading_CancelTradeRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgTrading_CancelTradeRequest::InitAsDefaultInstance() {
}

CMsgTrading_CancelTradeRequest::CMsgTrading_CancelTradeRequest(const CMsgTrading_CancelTradeRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTrading_CancelTradeRequest::SharedCtor() {
  _cached_size_ = 0;
  other_steamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTrading_CancelTradeRequest::~CMsgTrading_CancelTradeRequest() {
  SharedDtor();
}

void CMsgTrading_CancelTradeRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgTrading_CancelTradeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgTrading_CancelTradeRequest& CMsgTrading_CancelTradeRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgTrading_CancelTradeRequest* CMsgTrading_CancelTradeRequest::default_instance_ = NULL;

CMsgTrading_CancelTradeRequest* CMsgTrading_CancelTradeRequest::New() const {
  return new CMsgTrading_CancelTradeRequest;
}

void CMsgTrading_CancelTradeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    other_steamid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgTrading_CancelTradeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 other_steamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &other_steamid_)));
          set_has_other_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTrading_CancelTradeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 other_steamid = 1;
  if (has_other_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->other_steamid(), output);
  }

}

int CMsgTrading_CancelTradeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 other_steamid = 1;
    if (has_other_steamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->other_steamid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTrading_CancelTradeRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgTrading_CancelTradeRequest*>(&from));
}

void CMsgTrading_CancelTradeRequest::MergeFrom(const CMsgTrading_CancelTradeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_other_steamid()) {
      set_other_steamid(from.other_steamid());
    }
  }
}

void CMsgTrading_CancelTradeRequest::CopyFrom(const CMsgTrading_CancelTradeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTrading_CancelTradeRequest::IsInitialized() const {

  return true;
}

void CMsgTrading_CancelTradeRequest::Swap(CMsgTrading_CancelTradeRequest* other) {
  if (other != this) {
    std::swap(other_steamid_, other->other_steamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgTrading_CancelTradeRequest::GetTypeName() const {
  return "Sc.CMsgTrading_CancelTradeRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgTrading_StartSession::kOtherSteamidFieldNumber;
#endif  // !_MSC_VER

CMsgTrading_StartSession::CMsgTrading_StartSession()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgTrading_StartSession::InitAsDefaultInstance() {
}

CMsgTrading_StartSession::CMsgTrading_StartSession(const CMsgTrading_StartSession& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgTrading_StartSession::SharedCtor() {
  _cached_size_ = 0;
  other_steamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgTrading_StartSession::~CMsgTrading_StartSession() {
  SharedDtor();
}

void CMsgTrading_StartSession::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgTrading_StartSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgTrading_StartSession& CMsgTrading_StartSession::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgTrading_StartSession* CMsgTrading_StartSession::default_instance_ = NULL;

CMsgTrading_StartSession* CMsgTrading_StartSession::New() const {
  return new CMsgTrading_StartSession;
}

void CMsgTrading_StartSession::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    other_steamid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgTrading_StartSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 other_steamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &other_steamid_)));
          set_has_other_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgTrading_StartSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 other_steamid = 1;
  if (has_other_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->other_steamid(), output);
  }

}

int CMsgTrading_StartSession::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 other_steamid = 1;
    if (has_other_steamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->other_steamid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTrading_StartSession::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgTrading_StartSession*>(&from));
}

void CMsgTrading_StartSession::MergeFrom(const CMsgTrading_StartSession& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_other_steamid()) {
      set_other_steamid(from.other_steamid());
    }
  }
}

void CMsgTrading_StartSession::CopyFrom(const CMsgTrading_StartSession& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTrading_StartSession::IsInitialized() const {

  return true;
}

void CMsgTrading_StartSession::Swap(CMsgTrading_StartSession* other) {
  if (other != this) {
    std::swap(other_steamid_, other->other_steamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgTrading_StartSession::GetTypeName() const {
  return "Sc.CMsgTrading_StartSession";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientMDSInitDepotBuildRequest::kDepotIdFieldNumber;
const int CMsgClientMDSInitDepotBuildRequest::kEncryptedAesKeyFieldNumber;
const int CMsgClientMDSInitDepotBuildRequest::kBuildIdFieldNumber;
const int CMsgClientMDSInitDepotBuildRequest::kForLocalCsFieldNumber;
const int CMsgClientMDSInitDepotBuildRequest::kNoBaselineFieldNumber;
#endif  // !_MSC_VER

CMsgClientMDSInitDepotBuildRequest::CMsgClientMDSInitDepotBuildRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientMDSInitDepotBuildRequest::InitAsDefaultInstance() {
}

CMsgClientMDSInitDepotBuildRequest::CMsgClientMDSInitDepotBuildRequest(const CMsgClientMDSInitDepotBuildRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientMDSInitDepotBuildRequest::SharedCtor() {
  _cached_size_ = 0;
  depot_id_ = 0u;
  encrypted_aes_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  build_id_ = 0u;
  for_local_cs_ = false;
  no_baseline_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientMDSInitDepotBuildRequest::~CMsgClientMDSInitDepotBuildRequest() {
  SharedDtor();
}

void CMsgClientMDSInitDepotBuildRequest::SharedDtor() {
  if (encrypted_aes_key_ != &::google::protobuf::internal::kEmptyString) {
    delete encrypted_aes_key_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientMDSInitDepotBuildRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientMDSInitDepotBuildRequest& CMsgClientMDSInitDepotBuildRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientMDSInitDepotBuildRequest* CMsgClientMDSInitDepotBuildRequest::default_instance_ = NULL;

CMsgClientMDSInitDepotBuildRequest* CMsgClientMDSInitDepotBuildRequest::New() const {
  return new CMsgClientMDSInitDepotBuildRequest;
}

void CMsgClientMDSInitDepotBuildRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    depot_id_ = 0u;
    if (has_encrypted_aes_key()) {
      if (encrypted_aes_key_ != &::google::protobuf::internal::kEmptyString) {
        encrypted_aes_key_->clear();
      }
    }
    build_id_ = 0u;
    for_local_cs_ = false;
    no_baseline_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientMDSInitDepotBuildRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 depot_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &depot_id_)));
          set_has_depot_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_encrypted_aes_key;
        break;
      }

      // optional bytes encrypted_aes_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_encrypted_aes_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encrypted_aes_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_build_id;
        break;
      }

      // optional uint32 build_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_build_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &build_id_)));
          set_has_build_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_for_local_cs;
        break;
      }

      // optional bool for_local_cs = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_for_local_cs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &for_local_cs_)));
          set_has_for_local_cs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_no_baseline;
        break;
      }

      // optional bool no_baseline = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_no_baseline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &no_baseline_)));
          set_has_no_baseline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientMDSInitDepotBuildRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 depot_id = 1;
  if (has_depot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->depot_id(), output);
  }

  // optional bytes encrypted_aes_key = 2;
  if (has_encrypted_aes_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->encrypted_aes_key(), output);
  }

  // optional uint32 build_id = 4;
  if (has_build_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->build_id(), output);
  }

  // optional bool for_local_cs = 5;
  if (has_for_local_cs()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->for_local_cs(), output);
  }

  // optional bool no_baseline = 6;
  if (has_no_baseline()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->no_baseline(), output);
  }

}

int CMsgClientMDSInitDepotBuildRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 depot_id = 1;
    if (has_depot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->depot_id());
    }

    // optional bytes encrypted_aes_key = 2;
    if (has_encrypted_aes_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encrypted_aes_key());
    }

    // optional uint32 build_id = 4;
    if (has_build_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->build_id());
    }

    // optional bool for_local_cs = 5;
    if (has_for_local_cs()) {
      total_size += 1 + 1;
    }

    // optional bool no_baseline = 6;
    if (has_no_baseline()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMDSInitDepotBuildRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientMDSInitDepotBuildRequest*>(&from));
}

void CMsgClientMDSInitDepotBuildRequest::MergeFrom(const CMsgClientMDSInitDepotBuildRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_depot_id()) {
      set_depot_id(from.depot_id());
    }
    if (from.has_encrypted_aes_key()) {
      set_encrypted_aes_key(from.encrypted_aes_key());
    }
    if (from.has_build_id()) {
      set_build_id(from.build_id());
    }
    if (from.has_for_local_cs()) {
      set_for_local_cs(from.for_local_cs());
    }
    if (from.has_no_baseline()) {
      set_no_baseline(from.no_baseline());
    }
  }
}

void CMsgClientMDSInitDepotBuildRequest::CopyFrom(const CMsgClientMDSInitDepotBuildRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMDSInitDepotBuildRequest::IsInitialized() const {

  return true;
}

void CMsgClientMDSInitDepotBuildRequest::Swap(CMsgClientMDSInitDepotBuildRequest* other) {
  if (other != this) {
    std::swap(depot_id_, other->depot_id_);
    std::swap(encrypted_aes_key_, other->encrypted_aes_key_);
    std::swap(build_id_, other->build_id_);
    std::swap(for_local_cs_, other->for_local_cs_);
    std::swap(no_baseline_, other->no_baseline_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientMDSInitDepotBuildRequest::GetTypeName() const {
  return "Sc.CMsgClientMDSInitDepotBuildRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientMDSInitDepotBuildResponse::kEresultFieldNumber;
const int CMsgClientMDSInitDepotBuildResponse::kDefaultChunkSizeFieldNumber;
const int CMsgClientMDSInitDepotBuildResponse::kBaseManifestFieldNumber;
const int CMsgClientMDSInitDepotBuildResponse::kEncryptedDepotKeyFieldNumber;
#endif  // !_MSC_VER

CMsgClientMDSInitDepotBuildResponse::CMsgClientMDSInitDepotBuildResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientMDSInitDepotBuildResponse::InitAsDefaultInstance() {
}

CMsgClientMDSInitDepotBuildResponse::CMsgClientMDSInitDepotBuildResponse(const CMsgClientMDSInitDepotBuildResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientMDSInitDepotBuildResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  default_chunk_size_ = 0u;
  base_manifest_ = GOOGLE_ULONGLONG(0);
  encrypted_depot_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientMDSInitDepotBuildResponse::~CMsgClientMDSInitDepotBuildResponse() {
  SharedDtor();
}

void CMsgClientMDSInitDepotBuildResponse::SharedDtor() {
  if (encrypted_depot_key_ != &::google::protobuf::internal::kEmptyString) {
    delete encrypted_depot_key_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientMDSInitDepotBuildResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientMDSInitDepotBuildResponse& CMsgClientMDSInitDepotBuildResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientMDSInitDepotBuildResponse* CMsgClientMDSInitDepotBuildResponse::default_instance_ = NULL;

CMsgClientMDSInitDepotBuildResponse* CMsgClientMDSInitDepotBuildResponse::New() const {
  return new CMsgClientMDSInitDepotBuildResponse;
}

void CMsgClientMDSInitDepotBuildResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    default_chunk_size_ = 0u;
    base_manifest_ = GOOGLE_ULONGLONG(0);
    if (has_encrypted_depot_key()) {
      if (encrypted_depot_key_ != &::google::protobuf::internal::kEmptyString) {
        encrypted_depot_key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientMDSInitDepotBuildResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_default_chunk_size;
        break;
      }

      // optional uint32 default_chunk_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_default_chunk_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &default_chunk_size_)));
          set_has_default_chunk_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_base_manifest;
        break;
      }

      // optional fixed64 base_manifest = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_base_manifest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &base_manifest_)));
          set_has_base_manifest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_encrypted_depot_key;
        break;
      }

      // optional bytes encrypted_depot_key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_encrypted_depot_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encrypted_depot_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientMDSInitDepotBuildResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional uint32 default_chunk_size = 2;
  if (has_default_chunk_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->default_chunk_size(), output);
  }

  // optional fixed64 base_manifest = 3;
  if (has_base_manifest()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->base_manifest(), output);
  }

  // optional bytes encrypted_depot_key = 4;
  if (has_encrypted_depot_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->encrypted_depot_key(), output);
  }

}

int CMsgClientMDSInitDepotBuildResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional uint32 default_chunk_size = 2;
    if (has_default_chunk_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->default_chunk_size());
    }

    // optional fixed64 base_manifest = 3;
    if (has_base_manifest()) {
      total_size += 1 + 8;
    }

    // optional bytes encrypted_depot_key = 4;
    if (has_encrypted_depot_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encrypted_depot_key());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMDSInitDepotBuildResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientMDSInitDepotBuildResponse*>(&from));
}

void CMsgClientMDSInitDepotBuildResponse::MergeFrom(const CMsgClientMDSInitDepotBuildResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_default_chunk_size()) {
      set_default_chunk_size(from.default_chunk_size());
    }
    if (from.has_base_manifest()) {
      set_base_manifest(from.base_manifest());
    }
    if (from.has_encrypted_depot_key()) {
      set_encrypted_depot_key(from.encrypted_depot_key());
    }
  }
}

void CMsgClientMDSInitDepotBuildResponse::CopyFrom(const CMsgClientMDSInitDepotBuildResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMDSInitDepotBuildResponse::IsInitialized() const {

  return true;
}

void CMsgClientMDSInitDepotBuildResponse::Swap(CMsgClientMDSInitDepotBuildResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(default_chunk_size_, other->default_chunk_size_);
    std::swap(base_manifest_, other->base_manifest_);
    std::swap(encrypted_depot_key_, other->encrypted_depot_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientMDSInitDepotBuildResponse::GetTypeName() const {
  return "Sc.CMsgClientMDSInitDepotBuildResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientMDSLoginRequest::kEncryptedSessionKeyFieldNumber;
#endif  // !_MSC_VER

CMsgClientMDSLoginRequest::CMsgClientMDSLoginRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientMDSLoginRequest::InitAsDefaultInstance() {
}

CMsgClientMDSLoginRequest::CMsgClientMDSLoginRequest(const CMsgClientMDSLoginRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientMDSLoginRequest::SharedCtor() {
  _cached_size_ = 0;
  encrypted_session_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientMDSLoginRequest::~CMsgClientMDSLoginRequest() {
  SharedDtor();
}

void CMsgClientMDSLoginRequest::SharedDtor() {
  if (encrypted_session_key_ != &::google::protobuf::internal::kEmptyString) {
    delete encrypted_session_key_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientMDSLoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientMDSLoginRequest& CMsgClientMDSLoginRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientMDSLoginRequest* CMsgClientMDSLoginRequest::default_instance_ = NULL;

CMsgClientMDSLoginRequest* CMsgClientMDSLoginRequest::New() const {
  return new CMsgClientMDSLoginRequest;
}

void CMsgClientMDSLoginRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_encrypted_session_key()) {
      if (encrypted_session_key_ != &::google::protobuf::internal::kEmptyString) {
        encrypted_session_key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientMDSLoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes encrypted_session_key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encrypted_session_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientMDSLoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes encrypted_session_key = 1;
  if (has_encrypted_session_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->encrypted_session_key(), output);
  }

}

int CMsgClientMDSLoginRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes encrypted_session_key = 1;
    if (has_encrypted_session_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encrypted_session_key());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMDSLoginRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientMDSLoginRequest*>(&from));
}

void CMsgClientMDSLoginRequest::MergeFrom(const CMsgClientMDSLoginRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_encrypted_session_key()) {
      set_encrypted_session_key(from.encrypted_session_key());
    }
  }
}

void CMsgClientMDSLoginRequest::CopyFrom(const CMsgClientMDSLoginRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMDSLoginRequest::IsInitialized() const {

  return true;
}

void CMsgClientMDSLoginRequest::Swap(CMsgClientMDSLoginRequest* other) {
  if (other != this) {
    std::swap(encrypted_session_key_, other->encrypted_session_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientMDSLoginRequest::GetTypeName() const {
  return "Sc.CMsgClientMDSLoginRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientMDSLoginResponse::kEresultFieldNumber;
#endif  // !_MSC_VER

CMsgClientMDSLoginResponse::CMsgClientMDSLoginResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientMDSLoginResponse::InitAsDefaultInstance() {
}

CMsgClientMDSLoginResponse::CMsgClientMDSLoginResponse(const CMsgClientMDSLoginResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientMDSLoginResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientMDSLoginResponse::~CMsgClientMDSLoginResponse() {
  SharedDtor();
}

void CMsgClientMDSLoginResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientMDSLoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientMDSLoginResponse& CMsgClientMDSLoginResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientMDSLoginResponse* CMsgClientMDSLoginResponse::default_instance_ = NULL;

CMsgClientMDSLoginResponse* CMsgClientMDSLoginResponse::New() const {
  return new CMsgClientMDSLoginResponse;
}

void CMsgClientMDSLoginResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientMDSLoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientMDSLoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

}

int CMsgClientMDSLoginResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMDSLoginResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientMDSLoginResponse*>(&from));
}

void CMsgClientMDSLoginResponse::MergeFrom(const CMsgClientMDSLoginResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
  }
}

void CMsgClientMDSLoginResponse::CopyFrom(const CMsgClientMDSLoginResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMDSLoginResponse::IsInitialized() const {

  return true;
}

void CMsgClientMDSLoginResponse::Swap(CMsgClientMDSLoginResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientMDSLoginResponse::GetTypeName() const {
  return "Sc.CMsgClientMDSLoginResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientMDSUploadDepotChunks_ChunkUploadData::kShaFieldNumber;
const int CMsgClientMDSUploadDepotChunks_ChunkUploadData::kRollingCrcFieldNumber;
const int CMsgClientMDSUploadDepotChunks_ChunkUploadData::kOriginalChunkSizeFieldNumber;
const int CMsgClientMDSUploadDepotChunks_ChunkUploadData::kDataFieldNumber;
const int CMsgClientMDSUploadDepotChunks_ChunkUploadData::kCompressedChunkSizeFieldNumber;
const int CMsgClientMDSUploadDepotChunks_ChunkUploadData::kCompressedCrcFieldNumber;
#endif  // !_MSC_VER

CMsgClientMDSUploadDepotChunks_ChunkUploadData::CMsgClientMDSUploadDepotChunks_ChunkUploadData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientMDSUploadDepotChunks_ChunkUploadData::InitAsDefaultInstance() {
}

CMsgClientMDSUploadDepotChunks_ChunkUploadData::CMsgClientMDSUploadDepotChunks_ChunkUploadData(const CMsgClientMDSUploadDepotChunks_ChunkUploadData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientMDSUploadDepotChunks_ChunkUploadData::SharedCtor() {
  _cached_size_ = 0;
  sha_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rolling_crc_ = 0u;
  original_chunk_size_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  compressed_chunk_size_ = 0u;
  compressed_crc_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientMDSUploadDepotChunks_ChunkUploadData::~CMsgClientMDSUploadDepotChunks_ChunkUploadData() {
  SharedDtor();
}

void CMsgClientMDSUploadDepotChunks_ChunkUploadData::SharedDtor() {
  if (sha_ != &::google::protobuf::internal::kEmptyString) {
    delete sha_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientMDSUploadDepotChunks_ChunkUploadData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientMDSUploadDepotChunks_ChunkUploadData& CMsgClientMDSUploadDepotChunks_ChunkUploadData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientMDSUploadDepotChunks_ChunkUploadData* CMsgClientMDSUploadDepotChunks_ChunkUploadData::default_instance_ = NULL;

CMsgClientMDSUploadDepotChunks_ChunkUploadData* CMsgClientMDSUploadDepotChunks_ChunkUploadData::New() const {
  return new CMsgClientMDSUploadDepotChunks_ChunkUploadData;
}

void CMsgClientMDSUploadDepotChunks_ChunkUploadData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sha()) {
      if (sha_ != &::google::protobuf::internal::kEmptyString) {
        sha_->clear();
      }
    }
    rolling_crc_ = 0u;
    original_chunk_size_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    compressed_chunk_size_ = 0u;
    compressed_crc_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientMDSUploadDepotChunks_ChunkUploadData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes sha = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rolling_crc;
        break;
      }

      // optional uint32 rolling_crc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rolling_crc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rolling_crc_)));
          set_has_rolling_crc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_original_chunk_size;
        break;
      }

      // optional uint32 original_chunk_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_original_chunk_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &original_chunk_size_)));
          set_has_original_chunk_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_compressed_chunk_size;
        break;
      }

      // optional uint32 compressed_chunk_size = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_compressed_chunk_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &compressed_chunk_size_)));
          set_has_compressed_chunk_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_compressed_crc;
        break;
      }

      // optional uint32 compressed_crc = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_compressed_crc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &compressed_crc_)));
          set_has_compressed_crc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientMDSUploadDepotChunks_ChunkUploadData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes sha = 1;
  if (has_sha()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->sha(), output);
  }

  // optional uint32 rolling_crc = 2;
  if (has_rolling_crc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rolling_crc(), output);
  }

  // optional uint32 original_chunk_size = 3;
  if (has_original_chunk_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->original_chunk_size(), output);
  }

  // optional bytes data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->data(), output);
  }

  // optional uint32 compressed_chunk_size = 5;
  if (has_compressed_chunk_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->compressed_chunk_size(), output);
  }

  // optional uint32 compressed_crc = 6;
  if (has_compressed_crc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->compressed_crc(), output);
  }

}

int CMsgClientMDSUploadDepotChunks_ChunkUploadData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes sha = 1;
    if (has_sha()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha());
    }

    // optional uint32 rolling_crc = 2;
    if (has_rolling_crc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rolling_crc());
    }

    // optional uint32 original_chunk_size = 3;
    if (has_original_chunk_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->original_chunk_size());
    }

    // optional bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 compressed_chunk_size = 5;
    if (has_compressed_chunk_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->compressed_chunk_size());
    }

    // optional uint32 compressed_crc = 6;
    if (has_compressed_crc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->compressed_crc());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMDSUploadDepotChunks_ChunkUploadData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientMDSUploadDepotChunks_ChunkUploadData*>(&from));
}

void CMsgClientMDSUploadDepotChunks_ChunkUploadData::MergeFrom(const CMsgClientMDSUploadDepotChunks_ChunkUploadData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sha()) {
      set_sha(from.sha());
    }
    if (from.has_rolling_crc()) {
      set_rolling_crc(from.rolling_crc());
    }
    if (from.has_original_chunk_size()) {
      set_original_chunk_size(from.original_chunk_size());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_compressed_chunk_size()) {
      set_compressed_chunk_size(from.compressed_chunk_size());
    }
    if (from.has_compressed_crc()) {
      set_compressed_crc(from.compressed_crc());
    }
  }
}

void CMsgClientMDSUploadDepotChunks_ChunkUploadData::CopyFrom(const CMsgClientMDSUploadDepotChunks_ChunkUploadData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMDSUploadDepotChunks_ChunkUploadData::IsInitialized() const {

  return true;
}

void CMsgClientMDSUploadDepotChunks_ChunkUploadData::Swap(CMsgClientMDSUploadDepotChunks_ChunkUploadData* other) {
  if (other != this) {
    std::swap(sha_, other->sha_);
    std::swap(rolling_crc_, other->rolling_crc_);
    std::swap(original_chunk_size_, other->original_chunk_size_);
    std::swap(data_, other->data_);
    std::swap(compressed_chunk_size_, other->compressed_chunk_size_);
    std::swap(compressed_crc_, other->compressed_crc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientMDSUploadDepotChunks_ChunkUploadData::GetTypeName() const {
  return "Sc.CMsgClientMDSUploadDepotChunks.ChunkUploadData";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientMDSUploadDepotChunks::kDepotIdFieldNumber;
const int CMsgClientMDSUploadDepotChunks::kChunksFieldNumber;
const int CMsgClientMDSUploadDepotChunks::kOnlyMetaDataFieldNumber;
#endif  // !_MSC_VER

CMsgClientMDSUploadDepotChunks::CMsgClientMDSUploadDepotChunks()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientMDSUploadDepotChunks::InitAsDefaultInstance() {
}

CMsgClientMDSUploadDepotChunks::CMsgClientMDSUploadDepotChunks(const CMsgClientMDSUploadDepotChunks& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientMDSUploadDepotChunks::SharedCtor() {
  _cached_size_ = 0;
  depot_id_ = 0u;
  only_meta_data_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientMDSUploadDepotChunks::~CMsgClientMDSUploadDepotChunks() {
  SharedDtor();
}

void CMsgClientMDSUploadDepotChunks::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientMDSUploadDepotChunks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientMDSUploadDepotChunks& CMsgClientMDSUploadDepotChunks::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientMDSUploadDepotChunks* CMsgClientMDSUploadDepotChunks::default_instance_ = NULL;

CMsgClientMDSUploadDepotChunks* CMsgClientMDSUploadDepotChunks::New() const {
  return new CMsgClientMDSUploadDepotChunks;
}

void CMsgClientMDSUploadDepotChunks::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    depot_id_ = 0u;
    only_meta_data_ = false;
  }
  chunks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientMDSUploadDepotChunks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 depot_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &depot_id_)));
          set_has_depot_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_chunks;
        break;
      }

      // repeated .Sc.CMsgClientMDSUploadDepotChunks.ChunkUploadData chunks = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chunks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chunks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_chunks;
        if (input->ExpectTag(24)) goto parse_only_meta_data;
        break;
      }

      // optional bool only_meta_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_only_meta_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &only_meta_data_)));
          set_has_only_meta_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientMDSUploadDepotChunks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 depot_id = 1;
  if (has_depot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->depot_id(), output);
  }

  // repeated .Sc.CMsgClientMDSUploadDepotChunks.ChunkUploadData chunks = 2;
  for (int i = 0; i < this->chunks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->chunks(i), output);
  }

  // optional bool only_meta_data = 3;
  if (has_only_meta_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->only_meta_data(), output);
  }

}

int CMsgClientMDSUploadDepotChunks::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 depot_id = 1;
    if (has_depot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->depot_id());
    }

    // optional bool only_meta_data = 3;
    if (has_only_meta_data()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Sc.CMsgClientMDSUploadDepotChunks.ChunkUploadData chunks = 2;
  total_size += 1 * this->chunks_size();
  for (int i = 0; i < this->chunks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chunks(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMDSUploadDepotChunks::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientMDSUploadDepotChunks*>(&from));
}

void CMsgClientMDSUploadDepotChunks::MergeFrom(const CMsgClientMDSUploadDepotChunks& from) {
  GOOGLE_CHECK_NE(&from, this);
  chunks_.MergeFrom(from.chunks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_depot_id()) {
      set_depot_id(from.depot_id());
    }
    if (from.has_only_meta_data()) {
      set_only_meta_data(from.only_meta_data());
    }
  }
}

void CMsgClientMDSUploadDepotChunks::CopyFrom(const CMsgClientMDSUploadDepotChunks& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMDSUploadDepotChunks::IsInitialized() const {

  return true;
}

void CMsgClientMDSUploadDepotChunks::Swap(CMsgClientMDSUploadDepotChunks* other) {
  if (other != this) {
    std::swap(depot_id_, other->depot_id_);
    chunks_.Swap(&other->chunks_);
    std::swap(only_meta_data_, other->only_meta_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientMDSUploadDepotChunks::GetTypeName() const {
  return "Sc.CMsgClientMDSUploadDepotChunks";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientMDSUploadDepotChunksResponse::kEresultFieldNumber;
#endif  // !_MSC_VER

CMsgClientMDSUploadDepotChunksResponse::CMsgClientMDSUploadDepotChunksResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientMDSUploadDepotChunksResponse::InitAsDefaultInstance() {
}

CMsgClientMDSUploadDepotChunksResponse::CMsgClientMDSUploadDepotChunksResponse(const CMsgClientMDSUploadDepotChunksResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientMDSUploadDepotChunksResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientMDSUploadDepotChunksResponse::~CMsgClientMDSUploadDepotChunksResponse() {
  SharedDtor();
}

void CMsgClientMDSUploadDepotChunksResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientMDSUploadDepotChunksResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientMDSUploadDepotChunksResponse& CMsgClientMDSUploadDepotChunksResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientMDSUploadDepotChunksResponse* CMsgClientMDSUploadDepotChunksResponse::default_instance_ = NULL;

CMsgClientMDSUploadDepotChunksResponse* CMsgClientMDSUploadDepotChunksResponse::New() const {
  return new CMsgClientMDSUploadDepotChunksResponse;
}

void CMsgClientMDSUploadDepotChunksResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientMDSUploadDepotChunksResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientMDSUploadDepotChunksResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

}

int CMsgClientMDSUploadDepotChunksResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMDSUploadDepotChunksResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientMDSUploadDepotChunksResponse*>(&from));
}

void CMsgClientMDSUploadDepotChunksResponse::MergeFrom(const CMsgClientMDSUploadDepotChunksResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
  }
}

void CMsgClientMDSUploadDepotChunksResponse::CopyFrom(const CMsgClientMDSUploadDepotChunksResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMDSUploadDepotChunksResponse::IsInitialized() const {

  return true;
}

void CMsgClientMDSUploadDepotChunksResponse::Swap(CMsgClientMDSUploadDepotChunksResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientMDSUploadDepotChunksResponse::GetTypeName() const {
  return "Sc.CMsgClientMDSUploadDepotChunksResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientMDSUploadRateTest::kSerialNumberFieldNumber;
const int CMsgClientMDSUploadRateTest::kTestDataFieldNumber;
const int CMsgClientMDSUploadRateTest::kTestDataSizeFieldNumber;
const int CMsgClientMDSUploadRateTest::kTestDataCrcFieldNumber;
#endif  // !_MSC_VER

CMsgClientMDSUploadRateTest::CMsgClientMDSUploadRateTest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientMDSUploadRateTest::InitAsDefaultInstance() {
}

CMsgClientMDSUploadRateTest::CMsgClientMDSUploadRateTest(const CMsgClientMDSUploadRateTest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientMDSUploadRateTest::SharedCtor() {
  _cached_size_ = 0;
  serial_number_ = 0u;
  test_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  test_data_size_ = 0u;
  test_data_crc_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientMDSUploadRateTest::~CMsgClientMDSUploadRateTest() {
  SharedDtor();
}

void CMsgClientMDSUploadRateTest::SharedDtor() {
  if (test_data_ != &::google::protobuf::internal::kEmptyString) {
    delete test_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientMDSUploadRateTest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientMDSUploadRateTest& CMsgClientMDSUploadRateTest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientMDSUploadRateTest* CMsgClientMDSUploadRateTest::default_instance_ = NULL;

CMsgClientMDSUploadRateTest* CMsgClientMDSUploadRateTest::New() const {
  return new CMsgClientMDSUploadRateTest;
}

void CMsgClientMDSUploadRateTest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serial_number_ = 0u;
    if (has_test_data()) {
      if (test_data_ != &::google::protobuf::internal::kEmptyString) {
        test_data_->clear();
      }
    }
    test_data_size_ = 0u;
    test_data_crc_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientMDSUploadRateTest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 serial_number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serial_number_)));
          set_has_serial_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_test_data;
        break;
      }

      // optional bytes test_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_test_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_test_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_test_data_size;
        break;
      }

      // optional uint32 test_data_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_test_data_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &test_data_size_)));
          set_has_test_data_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_test_data_crc;
        break;
      }

      // optional uint32 test_data_crc = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_test_data_crc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &test_data_crc_)));
          set_has_test_data_crc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientMDSUploadRateTest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 serial_number = 1;
  if (has_serial_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->serial_number(), output);
  }

  // optional bytes test_data = 2;
  if (has_test_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->test_data(), output);
  }

  // optional uint32 test_data_size = 3;
  if (has_test_data_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->test_data_size(), output);
  }

  // optional uint32 test_data_crc = 4;
  if (has_test_data_crc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->test_data_crc(), output);
  }

}

int CMsgClientMDSUploadRateTest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 serial_number = 1;
    if (has_serial_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serial_number());
    }

    // optional bytes test_data = 2;
    if (has_test_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->test_data());
    }

    // optional uint32 test_data_size = 3;
    if (has_test_data_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->test_data_size());
    }

    // optional uint32 test_data_crc = 4;
    if (has_test_data_crc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->test_data_crc());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMDSUploadRateTest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientMDSUploadRateTest*>(&from));
}

void CMsgClientMDSUploadRateTest::MergeFrom(const CMsgClientMDSUploadRateTest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serial_number()) {
      set_serial_number(from.serial_number());
    }
    if (from.has_test_data()) {
      set_test_data(from.test_data());
    }
    if (from.has_test_data_size()) {
      set_test_data_size(from.test_data_size());
    }
    if (from.has_test_data_crc()) {
      set_test_data_crc(from.test_data_crc());
    }
  }
}

void CMsgClientMDSUploadRateTest::CopyFrom(const CMsgClientMDSUploadRateTest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMDSUploadRateTest::IsInitialized() const {

  return true;
}

void CMsgClientMDSUploadRateTest::Swap(CMsgClientMDSUploadRateTest* other) {
  if (other != this) {
    std::swap(serial_number_, other->serial_number_);
    std::swap(test_data_, other->test_data_);
    std::swap(test_data_size_, other->test_data_size_);
    std::swap(test_data_crc_, other->test_data_crc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientMDSUploadRateTest::GetTypeName() const {
  return "Sc.CMsgClientMDSUploadRateTest";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientMDSUploadRateTestResponse::kEresultFieldNumber;
const int CMsgClientMDSUploadRateTestResponse::kSerialNumberFieldNumber;
#endif  // !_MSC_VER

CMsgClientMDSUploadRateTestResponse::CMsgClientMDSUploadRateTestResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientMDSUploadRateTestResponse::InitAsDefaultInstance() {
}

CMsgClientMDSUploadRateTestResponse::CMsgClientMDSUploadRateTestResponse(const CMsgClientMDSUploadRateTestResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientMDSUploadRateTestResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  serial_number_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientMDSUploadRateTestResponse::~CMsgClientMDSUploadRateTestResponse() {
  SharedDtor();
}

void CMsgClientMDSUploadRateTestResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientMDSUploadRateTestResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientMDSUploadRateTestResponse& CMsgClientMDSUploadRateTestResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientMDSUploadRateTestResponse* CMsgClientMDSUploadRateTestResponse::default_instance_ = NULL;

CMsgClientMDSUploadRateTestResponse* CMsgClientMDSUploadRateTestResponse::New() const {
  return new CMsgClientMDSUploadRateTestResponse;
}

void CMsgClientMDSUploadRateTestResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    serial_number_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientMDSUploadRateTestResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_serial_number;
        break;
      }

      // optional uint32 serial_number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serial_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serial_number_)));
          set_has_serial_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientMDSUploadRateTestResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional uint32 serial_number = 2;
  if (has_serial_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serial_number(), output);
  }

}

int CMsgClientMDSUploadRateTestResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional uint32 serial_number = 2;
    if (has_serial_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serial_number());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMDSUploadRateTestResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientMDSUploadRateTestResponse*>(&from));
}

void CMsgClientMDSUploadRateTestResponse::MergeFrom(const CMsgClientMDSUploadRateTestResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_serial_number()) {
      set_serial_number(from.serial_number());
    }
  }
}

void CMsgClientMDSUploadRateTestResponse::CopyFrom(const CMsgClientMDSUploadRateTestResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMDSUploadRateTestResponse::IsInitialized() const {

  return true;
}

void CMsgClientMDSUploadRateTestResponse::Swap(CMsgClientMDSUploadRateTestResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(serial_number_, other->serial_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientMDSUploadRateTestResponse::GetTypeName() const {
  return "Sc.CMsgClientMDSUploadRateTestResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientMDSTransmitManifestDataChunk::kOffsetFieldNumber;
const int CMsgClientMDSTransmitManifestDataChunk::kDataFieldNumber;
#endif  // !_MSC_VER

CMsgClientMDSTransmitManifestDataChunk::CMsgClientMDSTransmitManifestDataChunk()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientMDSTransmitManifestDataChunk::InitAsDefaultInstance() {
}

CMsgClientMDSTransmitManifestDataChunk::CMsgClientMDSTransmitManifestDataChunk(const CMsgClientMDSTransmitManifestDataChunk& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientMDSTransmitManifestDataChunk::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientMDSTransmitManifestDataChunk::~CMsgClientMDSTransmitManifestDataChunk() {
  SharedDtor();
}

void CMsgClientMDSTransmitManifestDataChunk::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientMDSTransmitManifestDataChunk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientMDSTransmitManifestDataChunk& CMsgClientMDSTransmitManifestDataChunk::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientMDSTransmitManifestDataChunk* CMsgClientMDSTransmitManifestDataChunk::default_instance_ = NULL;

CMsgClientMDSTransmitManifestDataChunk* CMsgClientMDSTransmitManifestDataChunk::New() const {
  return new CMsgClientMDSTransmitManifestDataChunk;
}

void CMsgClientMDSTransmitManifestDataChunk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    offset_ = 0;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientMDSTransmitManifestDataChunk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 offset = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientMDSTransmitManifestDataChunk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->offset(), output);
  }

  // optional bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data(), output);
  }

}

int CMsgClientMDSTransmitManifestDataChunk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMDSTransmitManifestDataChunk::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientMDSTransmitManifestDataChunk*>(&from));
}

void CMsgClientMDSTransmitManifestDataChunk::MergeFrom(const CMsgClientMDSTransmitManifestDataChunk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
}

void CMsgClientMDSTransmitManifestDataChunk::CopyFrom(const CMsgClientMDSTransmitManifestDataChunk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMDSTransmitManifestDataChunk::IsInitialized() const {

  return true;
}

void CMsgClientMDSTransmitManifestDataChunk::Swap(CMsgClientMDSTransmitManifestDataChunk* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientMDSTransmitManifestDataChunk::GetTypeName() const {
  return "Sc.CMsgClientMDSTransmitManifestDataChunk";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientMDSUploadManifestRequest::kDepotIdFieldNumber;
const int CMsgClientMDSUploadManifestRequest::kManifestSizeCompressedFieldNumber;
const int CMsgClientMDSUploadManifestRequest::kMakePublicFieldNumber;
const int CMsgClientMDSUploadManifestRequest::kBuildIdFieldNumber;
const int CMsgClientMDSUploadManifestRequest::kManifestVersionFieldNumber;
const int CMsgClientMDSUploadManifestRequest::kLocalCsBuildFieldNumber;
#endif  // !_MSC_VER

CMsgClientMDSUploadManifestRequest::CMsgClientMDSUploadManifestRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientMDSUploadManifestRequest::InitAsDefaultInstance() {
}

CMsgClientMDSUploadManifestRequest::CMsgClientMDSUploadManifestRequest(const CMsgClientMDSUploadManifestRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientMDSUploadManifestRequest::SharedCtor() {
  _cached_size_ = 0;
  depot_id_ = 0u;
  manifest_size_compressed_ = 0u;
  make_public_ = false;
  build_id_ = 0u;
  manifest_version_ = 0u;
  local_cs_build_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientMDSUploadManifestRequest::~CMsgClientMDSUploadManifestRequest() {
  SharedDtor();
}

void CMsgClientMDSUploadManifestRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientMDSUploadManifestRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientMDSUploadManifestRequest& CMsgClientMDSUploadManifestRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientMDSUploadManifestRequest* CMsgClientMDSUploadManifestRequest::default_instance_ = NULL;

CMsgClientMDSUploadManifestRequest* CMsgClientMDSUploadManifestRequest::New() const {
  return new CMsgClientMDSUploadManifestRequest;
}

void CMsgClientMDSUploadManifestRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    depot_id_ = 0u;
    manifest_size_compressed_ = 0u;
    make_public_ = false;
    build_id_ = 0u;
    manifest_version_ = 0u;
    local_cs_build_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientMDSUploadManifestRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 depot_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &depot_id_)));
          set_has_depot_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_manifest_size_compressed;
        break;
      }

      // optional uint32 manifest_size_compressed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_manifest_size_compressed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manifest_size_compressed_)));
          set_has_manifest_size_compressed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_make_public;
        break;
      }

      // optional bool make_public = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_make_public:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &make_public_)));
          set_has_make_public();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_build_id;
        break;
      }

      // optional uint32 build_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_build_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &build_id_)));
          set_has_build_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_manifest_version;
        break;
      }

      // optional uint32 manifest_version = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_manifest_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manifest_version_)));
          set_has_manifest_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_local_cs_build;
        break;
      }

      // optional bool local_cs_build = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_local_cs_build:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &local_cs_build_)));
          set_has_local_cs_build();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientMDSUploadManifestRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 depot_id = 1;
  if (has_depot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->depot_id(), output);
  }

  // optional uint32 manifest_size_compressed = 2;
  if (has_manifest_size_compressed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->manifest_size_compressed(), output);
  }

  // optional bool make_public = 4;
  if (has_make_public()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->make_public(), output);
  }

  // optional uint32 build_id = 6;
  if (has_build_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->build_id(), output);
  }

  // optional uint32 manifest_version = 7;
  if (has_manifest_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->manifest_version(), output);
  }

  // optional bool local_cs_build = 9;
  if (has_local_cs_build()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->local_cs_build(), output);
  }

}

int CMsgClientMDSUploadManifestRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 depot_id = 1;
    if (has_depot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->depot_id());
    }

    // optional uint32 manifest_size_compressed = 2;
    if (has_manifest_size_compressed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manifest_size_compressed());
    }

    // optional bool make_public = 4;
    if (has_make_public()) {
      total_size += 1 + 1;
    }

    // optional uint32 build_id = 6;
    if (has_build_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->build_id());
    }

    // optional uint32 manifest_version = 7;
    if (has_manifest_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manifest_version());
    }

    // optional bool local_cs_build = 9;
    if (has_local_cs_build()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMDSUploadManifestRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientMDSUploadManifestRequest*>(&from));
}

void CMsgClientMDSUploadManifestRequest::MergeFrom(const CMsgClientMDSUploadManifestRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_depot_id()) {
      set_depot_id(from.depot_id());
    }
    if (from.has_manifest_size_compressed()) {
      set_manifest_size_compressed(from.manifest_size_compressed());
    }
    if (from.has_make_public()) {
      set_make_public(from.make_public());
    }
    if (from.has_build_id()) {
      set_build_id(from.build_id());
    }
    if (from.has_manifest_version()) {
      set_manifest_version(from.manifest_version());
    }
    if (from.has_local_cs_build()) {
      set_local_cs_build(from.local_cs_build());
    }
  }
}

void CMsgClientMDSUploadManifestRequest::CopyFrom(const CMsgClientMDSUploadManifestRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMDSUploadManifestRequest::IsInitialized() const {

  return true;
}

void CMsgClientMDSUploadManifestRequest::Swap(CMsgClientMDSUploadManifestRequest* other) {
  if (other != this) {
    std::swap(depot_id_, other->depot_id_);
    std::swap(manifest_size_compressed_, other->manifest_size_compressed_);
    std::swap(make_public_, other->make_public_);
    std::swap(build_id_, other->build_id_);
    std::swap(manifest_version_, other->manifest_version_);
    std::swap(local_cs_build_, other->local_cs_build_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientMDSUploadManifestRequest::GetTypeName() const {
  return "Sc.CMsgClientMDSUploadManifestRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientMDSUploadManifestResponse::kEresultFieldNumber;
const int CMsgClientMDSUploadManifestResponse::kNewManifestFieldNumber;
const int CMsgClientMDSUploadManifestResponse::kUniqueChunksFieldNumber;
const int CMsgClientMDSUploadManifestResponse::kMissingChunksFieldNumber;
const int CMsgClientMDSUploadManifestResponse::kBitstringSizeUncompressedFieldNumber;
const int CMsgClientMDSUploadManifestResponse::kBitstringFieldNumber;
const int CMsgClientMDSUploadManifestResponse::kIsPrevManifestFieldNumber;
#endif  // !_MSC_VER

CMsgClientMDSUploadManifestResponse::CMsgClientMDSUploadManifestResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientMDSUploadManifestResponse::InitAsDefaultInstance() {
}

CMsgClientMDSUploadManifestResponse::CMsgClientMDSUploadManifestResponse(const CMsgClientMDSUploadManifestResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientMDSUploadManifestResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  new_manifest_ = GOOGLE_ULONGLONG(0);
  unique_chunks_ = 0u;
  missing_chunks_ = 0u;
  bitstring_size_uncompressed_ = 0u;
  bitstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_prev_manifest_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientMDSUploadManifestResponse::~CMsgClientMDSUploadManifestResponse() {
  SharedDtor();
}

void CMsgClientMDSUploadManifestResponse::SharedDtor() {
  if (bitstring_ != &::google::protobuf::internal::kEmptyString) {
    delete bitstring_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientMDSUploadManifestResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientMDSUploadManifestResponse& CMsgClientMDSUploadManifestResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientMDSUploadManifestResponse* CMsgClientMDSUploadManifestResponse::default_instance_ = NULL;

CMsgClientMDSUploadManifestResponse* CMsgClientMDSUploadManifestResponse::New() const {
  return new CMsgClientMDSUploadManifestResponse;
}

void CMsgClientMDSUploadManifestResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    new_manifest_ = GOOGLE_ULONGLONG(0);
    unique_chunks_ = 0u;
    missing_chunks_ = 0u;
    bitstring_size_uncompressed_ = 0u;
    if (has_bitstring()) {
      if (bitstring_ != &::google::protobuf::internal::kEmptyString) {
        bitstring_->clear();
      }
    }
    is_prev_manifest_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientMDSUploadManifestResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_new_manifest;
        break;
      }

      // optional fixed64 new_manifest = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_new_manifest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &new_manifest_)));
          set_has_new_manifest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_unique_chunks;
        break;
      }

      // optional uint32 unique_chunks = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unique_chunks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unique_chunks_)));
          set_has_unique_chunks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_missing_chunks;
        break;
      }

      // optional uint32 missing_chunks = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_missing_chunks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &missing_chunks_)));
          set_has_missing_chunks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bitstring_size_uncompressed;
        break;
      }

      // optional uint32 bitstring_size_uncompressed = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bitstring_size_uncompressed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bitstring_size_uncompressed_)));
          set_has_bitstring_size_uncompressed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_bitstring;
        break;
      }

      // optional bytes bitstring = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bitstring:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bitstring()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_prev_manifest;
        break;
      }

      // optional bool is_prev_manifest = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_prev_manifest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_prev_manifest_)));
          set_has_is_prev_manifest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientMDSUploadManifestResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional fixed64 new_manifest = 2;
  if (has_new_manifest()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->new_manifest(), output);
  }

  // optional uint32 unique_chunks = 3;
  if (has_unique_chunks()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->unique_chunks(), output);
  }

  // optional uint32 missing_chunks = 4;
  if (has_missing_chunks()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->missing_chunks(), output);
  }

  // optional uint32 bitstring_size_uncompressed = 5;
  if (has_bitstring_size_uncompressed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->bitstring_size_uncompressed(), output);
  }

  // optional bytes bitstring = 6;
  if (has_bitstring()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->bitstring(), output);
  }

  // optional bool is_prev_manifest = 7;
  if (has_is_prev_manifest()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_prev_manifest(), output);
  }

}

int CMsgClientMDSUploadManifestResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional fixed64 new_manifest = 2;
    if (has_new_manifest()) {
      total_size += 1 + 8;
    }

    // optional uint32 unique_chunks = 3;
    if (has_unique_chunks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unique_chunks());
    }

    // optional uint32 missing_chunks = 4;
    if (has_missing_chunks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->missing_chunks());
    }

    // optional uint32 bitstring_size_uncompressed = 5;
    if (has_bitstring_size_uncompressed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bitstring_size_uncompressed());
    }

    // optional bytes bitstring = 6;
    if (has_bitstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bitstring());
    }

    // optional bool is_prev_manifest = 7;
    if (has_is_prev_manifest()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMDSUploadManifestResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientMDSUploadManifestResponse*>(&from));
}

void CMsgClientMDSUploadManifestResponse::MergeFrom(const CMsgClientMDSUploadManifestResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_new_manifest()) {
      set_new_manifest(from.new_manifest());
    }
    if (from.has_unique_chunks()) {
      set_unique_chunks(from.unique_chunks());
    }
    if (from.has_missing_chunks()) {
      set_missing_chunks(from.missing_chunks());
    }
    if (from.has_bitstring_size_uncompressed()) {
      set_bitstring_size_uncompressed(from.bitstring_size_uncompressed());
    }
    if (from.has_bitstring()) {
      set_bitstring(from.bitstring());
    }
    if (from.has_is_prev_manifest()) {
      set_is_prev_manifest(from.is_prev_manifest());
    }
  }
}

void CMsgClientMDSUploadManifestResponse::CopyFrom(const CMsgClientMDSUploadManifestResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMDSUploadManifestResponse::IsInitialized() const {

  return true;
}

void CMsgClientMDSUploadManifestResponse::Swap(CMsgClientMDSUploadManifestResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(new_manifest_, other->new_manifest_);
    std::swap(unique_chunks_, other->unique_chunks_);
    std::swap(missing_chunks_, other->missing_chunks_);
    std::swap(bitstring_size_uncompressed_, other->bitstring_size_uncompressed_);
    std::swap(bitstring_, other->bitstring_);
    std::swap(is_prev_manifest_, other->is_prev_manifest_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientMDSUploadManifestResponse::GetTypeName() const {
  return "Sc.CMsgClientMDSUploadManifestResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientMDSGetDepotManifest::kDepotIdFieldNumber;
const int CMsgClientMDSGetDepotManifest::kManifestIdFieldNumber;
const int CMsgClientMDSGetDepotManifest::kManifestVersionFieldNumber;
#endif  // !_MSC_VER

CMsgClientMDSGetDepotManifest::CMsgClientMDSGetDepotManifest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientMDSGetDepotManifest::InitAsDefaultInstance() {
}

CMsgClientMDSGetDepotManifest::CMsgClientMDSGetDepotManifest(const CMsgClientMDSGetDepotManifest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientMDSGetDepotManifest::SharedCtor() {
  _cached_size_ = 0;
  depot_id_ = 0u;
  manifest_id_ = GOOGLE_ULONGLONG(0);
  manifest_version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientMDSGetDepotManifest::~CMsgClientMDSGetDepotManifest() {
  SharedDtor();
}

void CMsgClientMDSGetDepotManifest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientMDSGetDepotManifest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientMDSGetDepotManifest& CMsgClientMDSGetDepotManifest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientMDSGetDepotManifest* CMsgClientMDSGetDepotManifest::default_instance_ = NULL;

CMsgClientMDSGetDepotManifest* CMsgClientMDSGetDepotManifest::New() const {
  return new CMsgClientMDSGetDepotManifest;
}

void CMsgClientMDSGetDepotManifest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    depot_id_ = 0u;
    manifest_id_ = GOOGLE_ULONGLONG(0);
    manifest_version_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientMDSGetDepotManifest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 depot_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &depot_id_)));
          set_has_depot_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_manifest_id;
        break;
      }

      // optional fixed64 manifest_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_manifest_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &manifest_id_)));
          set_has_manifest_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_manifest_version;
        break;
      }

      // optional uint32 manifest_version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_manifest_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manifest_version_)));
          set_has_manifest_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientMDSGetDepotManifest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 depot_id = 1;
  if (has_depot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->depot_id(), output);
  }

  // optional fixed64 manifest_id = 2;
  if (has_manifest_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->manifest_id(), output);
  }

  // optional uint32 manifest_version = 3;
  if (has_manifest_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->manifest_version(), output);
  }

}

int CMsgClientMDSGetDepotManifest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 depot_id = 1;
    if (has_depot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->depot_id());
    }

    // optional fixed64 manifest_id = 2;
    if (has_manifest_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 manifest_version = 3;
    if (has_manifest_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manifest_version());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMDSGetDepotManifest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientMDSGetDepotManifest*>(&from));
}

void CMsgClientMDSGetDepotManifest::MergeFrom(const CMsgClientMDSGetDepotManifest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_depot_id()) {
      set_depot_id(from.depot_id());
    }
    if (from.has_manifest_id()) {
      set_manifest_id(from.manifest_id());
    }
    if (from.has_manifest_version()) {
      set_manifest_version(from.manifest_version());
    }
  }
}

void CMsgClientMDSGetDepotManifest::CopyFrom(const CMsgClientMDSGetDepotManifest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMDSGetDepotManifest::IsInitialized() const {

  return true;
}

void CMsgClientMDSGetDepotManifest::Swap(CMsgClientMDSGetDepotManifest* other) {
  if (other != this) {
    std::swap(depot_id_, other->depot_id_);
    std::swap(manifest_id_, other->manifest_id_);
    std::swap(manifest_version_, other->manifest_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientMDSGetDepotManifest::GetTypeName() const {
  return "Sc.CMsgClientMDSGetDepotManifest";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientMDSGetDepotManifestResponse::kEresultFieldNumber;
const int CMsgClientMDSGetDepotManifestResponse::kManifestSizeCompressedFieldNumber;
#endif  // !_MSC_VER

CMsgClientMDSGetDepotManifestResponse::CMsgClientMDSGetDepotManifestResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientMDSGetDepotManifestResponse::InitAsDefaultInstance() {
}

CMsgClientMDSGetDepotManifestResponse::CMsgClientMDSGetDepotManifestResponse(const CMsgClientMDSGetDepotManifestResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientMDSGetDepotManifestResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  manifest_size_compressed_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientMDSGetDepotManifestResponse::~CMsgClientMDSGetDepotManifestResponse() {
  SharedDtor();
}

void CMsgClientMDSGetDepotManifestResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientMDSGetDepotManifestResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientMDSGetDepotManifestResponse& CMsgClientMDSGetDepotManifestResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientMDSGetDepotManifestResponse* CMsgClientMDSGetDepotManifestResponse::default_instance_ = NULL;

CMsgClientMDSGetDepotManifestResponse* CMsgClientMDSGetDepotManifestResponse::New() const {
  return new CMsgClientMDSGetDepotManifestResponse;
}

void CMsgClientMDSGetDepotManifestResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    manifest_size_compressed_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientMDSGetDepotManifestResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_manifest_size_compressed;
        break;
      }

      // optional uint32 manifest_size_compressed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_manifest_size_compressed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manifest_size_compressed_)));
          set_has_manifest_size_compressed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientMDSGetDepotManifestResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional uint32 manifest_size_compressed = 3;
  if (has_manifest_size_compressed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->manifest_size_compressed(), output);
  }

}

int CMsgClientMDSGetDepotManifestResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional uint32 manifest_size_compressed = 3;
    if (has_manifest_size_compressed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manifest_size_compressed());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMDSGetDepotManifestResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientMDSGetDepotManifestResponse*>(&from));
}

void CMsgClientMDSGetDepotManifestResponse::MergeFrom(const CMsgClientMDSGetDepotManifestResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_manifest_size_compressed()) {
      set_manifest_size_compressed(from.manifest_size_compressed());
    }
  }
}

void CMsgClientMDSGetDepotManifestResponse::CopyFrom(const CMsgClientMDSGetDepotManifestResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMDSGetDepotManifestResponse::IsInitialized() const {

  return true;
}

void CMsgClientMDSGetDepotManifestResponse::Swap(CMsgClientMDSGetDepotManifestResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(manifest_size_compressed_, other->manifest_size_compressed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientMDSGetDepotManifestResponse::GetTypeName() const {
  return "Sc.CMsgClientMDSGetDepotManifestResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientMDSGetDepotManifestChunk::kOffsetFieldNumber;
const int CMsgClientMDSGetDepotManifestChunk::kDataFieldNumber;
#endif  // !_MSC_VER

CMsgClientMDSGetDepotManifestChunk::CMsgClientMDSGetDepotManifestChunk()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientMDSGetDepotManifestChunk::InitAsDefaultInstance() {
}

CMsgClientMDSGetDepotManifestChunk::CMsgClientMDSGetDepotManifestChunk(const CMsgClientMDSGetDepotManifestChunk& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientMDSGetDepotManifestChunk::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientMDSGetDepotManifestChunk::~CMsgClientMDSGetDepotManifestChunk() {
  SharedDtor();
}

void CMsgClientMDSGetDepotManifestChunk::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientMDSGetDepotManifestChunk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientMDSGetDepotManifestChunk& CMsgClientMDSGetDepotManifestChunk::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientMDSGetDepotManifestChunk* CMsgClientMDSGetDepotManifestChunk::default_instance_ = NULL;

CMsgClientMDSGetDepotManifestChunk* CMsgClientMDSGetDepotManifestChunk::New() const {
  return new CMsgClientMDSGetDepotManifestChunk;
}

void CMsgClientMDSGetDepotManifestChunk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    offset_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientMDSGetDepotManifestChunk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 offset = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientMDSGetDepotManifestChunk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->offset(), output);
  }

  // optional bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->data(), output);
  }

}

int CMsgClientMDSGetDepotManifestChunk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMDSGetDepotManifestChunk::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientMDSGetDepotManifestChunk*>(&from));
}

void CMsgClientMDSGetDepotManifestChunk::MergeFrom(const CMsgClientMDSGetDepotManifestChunk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
}

void CMsgClientMDSGetDepotManifestChunk::CopyFrom(const CMsgClientMDSGetDepotManifestChunk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMDSGetDepotManifestChunk::IsInitialized() const {

  return true;
}

void CMsgClientMDSGetDepotManifestChunk::Swap(CMsgClientMDSGetDepotManifestChunk* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientMDSGetDepotManifestChunk::GetTypeName() const {
  return "Sc.CMsgClientMDSGetDepotManifestChunk";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientMDSRegisterAppBuild::kAppIdFieldNumber;
const int CMsgClientMDSRegisterAppBuild::kDescriptionFieldNumber;
const int CMsgClientMDSRegisterAppBuild::kForLocalCsFieldNumber;
#endif  // !_MSC_VER

CMsgClientMDSRegisterAppBuild::CMsgClientMDSRegisterAppBuild()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientMDSRegisterAppBuild::InitAsDefaultInstance() {
}

CMsgClientMDSRegisterAppBuild::CMsgClientMDSRegisterAppBuild(const CMsgClientMDSRegisterAppBuild& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientMDSRegisterAppBuild::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  for_local_cs_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientMDSRegisterAppBuild::~CMsgClientMDSRegisterAppBuild() {
  SharedDtor();
}

void CMsgClientMDSRegisterAppBuild::SharedDtor() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientMDSRegisterAppBuild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientMDSRegisterAppBuild& CMsgClientMDSRegisterAppBuild::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientMDSRegisterAppBuild* CMsgClientMDSRegisterAppBuild::default_instance_ = NULL;

CMsgClientMDSRegisterAppBuild* CMsgClientMDSRegisterAppBuild::New() const {
  return new CMsgClientMDSRegisterAppBuild;
}

void CMsgClientMDSRegisterAppBuild::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0;
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
    for_local_cs_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientMDSRegisterAppBuild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_description;
        break;
      }

      // optional string description = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_for_local_cs;
        break;
      }

      // optional bool for_local_cs = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_for_local_cs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &for_local_cs_)));
          set_has_for_local_cs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientMDSRegisterAppBuild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->app_id(), output);
  }

  // optional string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->description(), output);
  }

  // optional bool for_local_cs = 5;
  if (has_for_local_cs()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->for_local_cs(), output);
  }

}

int CMsgClientMDSRegisterAppBuild::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->app_id());
    }

    // optional string description = 2;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional bool for_local_cs = 5;
    if (has_for_local_cs()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMDSRegisterAppBuild::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientMDSRegisterAppBuild*>(&from));
}

void CMsgClientMDSRegisterAppBuild::MergeFrom(const CMsgClientMDSRegisterAppBuild& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_for_local_cs()) {
      set_for_local_cs(from.for_local_cs());
    }
  }
}

void CMsgClientMDSRegisterAppBuild::CopyFrom(const CMsgClientMDSRegisterAppBuild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMDSRegisterAppBuild::IsInitialized() const {

  return true;
}

void CMsgClientMDSRegisterAppBuild::Swap(CMsgClientMDSRegisterAppBuild* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(description_, other->description_);
    std::swap(for_local_cs_, other->for_local_cs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientMDSRegisterAppBuild::GetTypeName() const {
  return "Sc.CMsgClientMDSRegisterAppBuild";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientMDSRegisterAppBuildResponse::kEresultFieldNumber;
const int CMsgClientMDSRegisterAppBuildResponse::kBuildIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientMDSRegisterAppBuildResponse::CMsgClientMDSRegisterAppBuildResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientMDSRegisterAppBuildResponse::InitAsDefaultInstance() {
}

CMsgClientMDSRegisterAppBuildResponse::CMsgClientMDSRegisterAppBuildResponse(const CMsgClientMDSRegisterAppBuildResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientMDSRegisterAppBuildResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  build_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientMDSRegisterAppBuildResponse::~CMsgClientMDSRegisterAppBuildResponse() {
  SharedDtor();
}

void CMsgClientMDSRegisterAppBuildResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientMDSRegisterAppBuildResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientMDSRegisterAppBuildResponse& CMsgClientMDSRegisterAppBuildResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientMDSRegisterAppBuildResponse* CMsgClientMDSRegisterAppBuildResponse::default_instance_ = NULL;

CMsgClientMDSRegisterAppBuildResponse* CMsgClientMDSRegisterAppBuildResponse::New() const {
  return new CMsgClientMDSRegisterAppBuildResponse;
}

void CMsgClientMDSRegisterAppBuildResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    build_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientMDSRegisterAppBuildResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_build_id;
        break;
      }

      // optional uint32 build_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_build_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &build_id_)));
          set_has_build_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientMDSRegisterAppBuildResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional uint32 build_id = 2;
  if (has_build_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->build_id(), output);
  }

}

int CMsgClientMDSRegisterAppBuildResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional uint32 build_id = 2;
    if (has_build_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->build_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMDSRegisterAppBuildResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientMDSRegisterAppBuildResponse*>(&from));
}

void CMsgClientMDSRegisterAppBuildResponse::MergeFrom(const CMsgClientMDSRegisterAppBuildResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_build_id()) {
      set_build_id(from.build_id());
    }
  }
}

void CMsgClientMDSRegisterAppBuildResponse::CopyFrom(const CMsgClientMDSRegisterAppBuildResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMDSRegisterAppBuildResponse::IsInitialized() const {

  return true;
}

void CMsgClientMDSRegisterAppBuildResponse::Swap(CMsgClientMDSRegisterAppBuildResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(build_id_, other->build_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientMDSRegisterAppBuildResponse::GetTypeName() const {
  return "Sc.CMsgClientMDSRegisterAppBuildResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgMDSSetAppBuildLive::kBuildIdFieldNumber;
const int CMsgMDSSetAppBuildLive::kAppIdFieldNumber;
const int CMsgMDSSetAppBuildLive::kBetaKeyFieldNumber;
const int CMsgMDSSetAppBuildLive::kBetaPasswordFieldNumber;
const int CMsgMDSSetAppBuildLive::kOnlyFinishFieldNumber;
const int CMsgMDSSetAppBuildLive::kNumSkipDepotsFieldNumber;
#endif  // !_MSC_VER

CMsgMDSSetAppBuildLive::CMsgMDSSetAppBuildLive()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgMDSSetAppBuildLive::InitAsDefaultInstance() {
}

CMsgMDSSetAppBuildLive::CMsgMDSSetAppBuildLive(const CMsgMDSSetAppBuildLive& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgMDSSetAppBuildLive::SharedCtor() {
  _cached_size_ = 0;
  build_id_ = 0u;
  app_id_ = 0u;
  beta_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  beta_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  only_finish_ = false;
  num_skip_depots_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgMDSSetAppBuildLive::~CMsgMDSSetAppBuildLive() {
  SharedDtor();
}

void CMsgMDSSetAppBuildLive::SharedDtor() {
  if (beta_key_ != &::google::protobuf::internal::kEmptyString) {
    delete beta_key_;
  }
  if (beta_password_ != &::google::protobuf::internal::kEmptyString) {
    delete beta_password_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgMDSSetAppBuildLive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgMDSSetAppBuildLive& CMsgMDSSetAppBuildLive::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgMDSSetAppBuildLive* CMsgMDSSetAppBuildLive::default_instance_ = NULL;

CMsgMDSSetAppBuildLive* CMsgMDSSetAppBuildLive::New() const {
  return new CMsgMDSSetAppBuildLive;
}

void CMsgMDSSetAppBuildLive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    build_id_ = 0u;
    app_id_ = 0u;
    if (has_beta_key()) {
      if (beta_key_ != &::google::protobuf::internal::kEmptyString) {
        beta_key_->clear();
      }
    }
    if (has_beta_password()) {
      if (beta_password_ != &::google::protobuf::internal::kEmptyString) {
        beta_password_->clear();
      }
    }
    only_finish_ = false;
    num_skip_depots_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgMDSSetAppBuildLive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 build_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &build_id_)));
          set_has_build_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_app_id;
        break;
      }

      // optional uint32 app_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_app_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_beta_key;
        break;
      }

      // optional string beta_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_beta_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_beta_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_beta_password;
        break;
      }

      // optional string beta_password = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_beta_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_beta_password()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_only_finish;
        break;
      }

      // optional bool only_finish = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_only_finish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &only_finish_)));
          set_has_only_finish();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_num_skip_depots;
        break;
      }

      // optional uint32 num_skip_depots = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_skip_depots:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_skip_depots_)));
          set_has_num_skip_depots();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgMDSSetAppBuildLive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 build_id = 1;
  if (has_build_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->build_id(), output);
  }

  // optional uint32 app_id = 2;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->app_id(), output);
  }

  // optional string beta_key = 3;
  if (has_beta_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->beta_key(), output);
  }

  // optional string beta_password = 5;
  if (has_beta_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->beta_password(), output);
  }

  // optional bool only_finish = 6;
  if (has_only_finish()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->only_finish(), output);
  }

  // optional uint32 num_skip_depots = 7;
  if (has_num_skip_depots()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->num_skip_depots(), output);
  }

}

int CMsgMDSSetAppBuildLive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 build_id = 1;
    if (has_build_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->build_id());
    }

    // optional uint32 app_id = 2;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional string beta_key = 3;
    if (has_beta_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->beta_key());
    }

    // optional string beta_password = 5;
    if (has_beta_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->beta_password());
    }

    // optional bool only_finish = 6;
    if (has_only_finish()) {
      total_size += 1 + 1;
    }

    // optional uint32 num_skip_depots = 7;
    if (has_num_skip_depots()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_skip_depots());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgMDSSetAppBuildLive::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgMDSSetAppBuildLive*>(&from));
}

void CMsgMDSSetAppBuildLive::MergeFrom(const CMsgMDSSetAppBuildLive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_build_id()) {
      set_build_id(from.build_id());
    }
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_beta_key()) {
      set_beta_key(from.beta_key());
    }
    if (from.has_beta_password()) {
      set_beta_password(from.beta_password());
    }
    if (from.has_only_finish()) {
      set_only_finish(from.only_finish());
    }
    if (from.has_num_skip_depots()) {
      set_num_skip_depots(from.num_skip_depots());
    }
  }
}

void CMsgMDSSetAppBuildLive::CopyFrom(const CMsgMDSSetAppBuildLive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMDSSetAppBuildLive::IsInitialized() const {

  return true;
}

void CMsgMDSSetAppBuildLive::Swap(CMsgMDSSetAppBuildLive* other) {
  if (other != this) {
    std::swap(build_id_, other->build_id_);
    std::swap(app_id_, other->app_id_);
    std::swap(beta_key_, other->beta_key_);
    std::swap(beta_password_, other->beta_password_);
    std::swap(only_finish_, other->only_finish_);
    std::swap(num_skip_depots_, other->num_skip_depots_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgMDSSetAppBuildLive::GetTypeName() const {
  return "Sc.CMsgMDSSetAppBuildLive";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgMDSSetAppBuildLiveResponse::kEresultFieldNumber;
const int CMsgMDSSetAppBuildLiveResponse::kErrorStringFieldNumber;
#endif  // !_MSC_VER

CMsgMDSSetAppBuildLiveResponse::CMsgMDSSetAppBuildLiveResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgMDSSetAppBuildLiveResponse::InitAsDefaultInstance() {
}

CMsgMDSSetAppBuildLiveResponse::CMsgMDSSetAppBuildLiveResponse(const CMsgMDSSetAppBuildLiveResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgMDSSetAppBuildLiveResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  error_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgMDSSetAppBuildLiveResponse::~CMsgMDSSetAppBuildLiveResponse() {
  SharedDtor();
}

void CMsgMDSSetAppBuildLiveResponse::SharedDtor() {
  if (error_string_ != &::google::protobuf::internal::kEmptyString) {
    delete error_string_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgMDSSetAppBuildLiveResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgMDSSetAppBuildLiveResponse& CMsgMDSSetAppBuildLiveResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgMDSSetAppBuildLiveResponse* CMsgMDSSetAppBuildLiveResponse::default_instance_ = NULL;

CMsgMDSSetAppBuildLiveResponse* CMsgMDSSetAppBuildLiveResponse::New() const {
  return new CMsgMDSSetAppBuildLiveResponse;
}

void CMsgMDSSetAppBuildLiveResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    if (has_error_string()) {
      if (error_string_ != &::google::protobuf::internal::kEmptyString) {
        error_string_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgMDSSetAppBuildLiveResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_error_string;
        break;
      }

      // optional string error_string = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_string()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgMDSSetAppBuildLiveResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional string error_string = 2;
  if (has_error_string()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->error_string(), output);
  }

}

int CMsgMDSSetAppBuildLiveResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional string error_string = 2;
    if (has_error_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_string());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgMDSSetAppBuildLiveResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgMDSSetAppBuildLiveResponse*>(&from));
}

void CMsgMDSSetAppBuildLiveResponse::MergeFrom(const CMsgMDSSetAppBuildLiveResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_error_string()) {
      set_error_string(from.error_string());
    }
  }
}

void CMsgMDSSetAppBuildLiveResponse::CopyFrom(const CMsgMDSSetAppBuildLiveResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMDSSetAppBuildLiveResponse::IsInitialized() const {

  return true;
}

void CMsgMDSSetAppBuildLiveResponse::Swap(CMsgMDSSetAppBuildLiveResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(error_string_, other->error_string_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgMDSSetAppBuildLiveResponse::GetTypeName() const {
  return "Sc.CMsgMDSSetAppBuildLiveResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientMDSSignInstallScript::kDepotIdFieldNumber;
const int CMsgClientMDSSignInstallScript::kDataFieldNumber;
#endif  // !_MSC_VER

CMsgClientMDSSignInstallScript::CMsgClientMDSSignInstallScript()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientMDSSignInstallScript::InitAsDefaultInstance() {
}

CMsgClientMDSSignInstallScript::CMsgClientMDSSignInstallScript(const CMsgClientMDSSignInstallScript& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientMDSSignInstallScript::SharedCtor() {
  _cached_size_ = 0;
  depot_id_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientMDSSignInstallScript::~CMsgClientMDSSignInstallScript() {
  SharedDtor();
}

void CMsgClientMDSSignInstallScript::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientMDSSignInstallScript::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientMDSSignInstallScript& CMsgClientMDSSignInstallScript::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientMDSSignInstallScript* CMsgClientMDSSignInstallScript::default_instance_ = NULL;

CMsgClientMDSSignInstallScript* CMsgClientMDSSignInstallScript::New() const {
  return new CMsgClientMDSSignInstallScript;
}

void CMsgClientMDSSignInstallScript::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    depot_id_ = 0;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientMDSSignInstallScript::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 depot_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &depot_id_)));
          set_has_depot_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional string data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientMDSSignInstallScript::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 depot_id = 1;
  if (has_depot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->depot_id(), output);
  }

  // optional string data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->data(), output);
  }

}

int CMsgClientMDSSignInstallScript::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 depot_id = 1;
    if (has_depot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->depot_id());
    }

    // optional string data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMDSSignInstallScript::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientMDSSignInstallScript*>(&from));
}

void CMsgClientMDSSignInstallScript::MergeFrom(const CMsgClientMDSSignInstallScript& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_depot_id()) {
      set_depot_id(from.depot_id());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
}

void CMsgClientMDSSignInstallScript::CopyFrom(const CMsgClientMDSSignInstallScript& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMDSSignInstallScript::IsInitialized() const {

  return true;
}

void CMsgClientMDSSignInstallScript::Swap(CMsgClientMDSSignInstallScript* other) {
  if (other != this) {
    std::swap(depot_id_, other->depot_id_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientMDSSignInstallScript::GetTypeName() const {
  return "Sc.CMsgClientMDSSignInstallScript";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientMDSSignInstallScriptResponse::kEresultFieldNumber;
const int CMsgClientMDSSignInstallScriptResponse::kErrorStringFieldNumber;
const int CMsgClientMDSSignInstallScriptResponse::kDataFieldNumber;
#endif  // !_MSC_VER

CMsgClientMDSSignInstallScriptResponse::CMsgClientMDSSignInstallScriptResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientMDSSignInstallScriptResponse::InitAsDefaultInstance() {
}

CMsgClientMDSSignInstallScriptResponse::CMsgClientMDSSignInstallScriptResponse(const CMsgClientMDSSignInstallScriptResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientMDSSignInstallScriptResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  error_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientMDSSignInstallScriptResponse::~CMsgClientMDSSignInstallScriptResponse() {
  SharedDtor();
}

void CMsgClientMDSSignInstallScriptResponse::SharedDtor() {
  if (error_string_ != &::google::protobuf::internal::kEmptyString) {
    delete error_string_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientMDSSignInstallScriptResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientMDSSignInstallScriptResponse& CMsgClientMDSSignInstallScriptResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientMDSSignInstallScriptResponse* CMsgClientMDSSignInstallScriptResponse::default_instance_ = NULL;

CMsgClientMDSSignInstallScriptResponse* CMsgClientMDSSignInstallScriptResponse::New() const {
  return new CMsgClientMDSSignInstallScriptResponse;
}

void CMsgClientMDSSignInstallScriptResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    if (has_error_string()) {
      if (error_string_ != &::google::protobuf::internal::kEmptyString) {
        error_string_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientMDSSignInstallScriptResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_error_string;
        break;
      }

      // optional string error_string = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_string()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional string data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientMDSSignInstallScriptResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional string error_string = 2;
  if (has_error_string()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->error_string(), output);
  }

  // optional string data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->data(), output);
  }

}

int CMsgClientMDSSignInstallScriptResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional string error_string = 2;
    if (has_error_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_string());
    }

    // optional string data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientMDSSignInstallScriptResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientMDSSignInstallScriptResponse*>(&from));
}

void CMsgClientMDSSignInstallScriptResponse::MergeFrom(const CMsgClientMDSSignInstallScriptResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_error_string()) {
      set_error_string(from.error_string());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
}

void CMsgClientMDSSignInstallScriptResponse::CopyFrom(const CMsgClientMDSSignInstallScriptResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientMDSSignInstallScriptResponse::IsInitialized() const {

  return true;
}

void CMsgClientMDSSignInstallScriptResponse::Swap(CMsgClientMDSSignInstallScriptResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(error_string_, other->error_string_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientMDSSignInstallScriptResponse::GetTypeName() const {
  return "Sc.CMsgClientMDSSignInstallScriptResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientEmailChange::kPasswordFieldNumber;
const int CMsgClientEmailChange::kEmailFieldNumber;
const int CMsgClientEmailChange::kCodeFieldNumber;
const int CMsgClientEmailChange::kFinalFieldNumber;
const int CMsgClientEmailChange::kNewmethodFieldNumber;
#endif  // !_MSC_VER

CMsgClientEmailChange::CMsgClientEmailChange()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientEmailChange::InitAsDefaultInstance() {
}

CMsgClientEmailChange::CMsgClientEmailChange(const CMsgClientEmailChange& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientEmailChange::SharedCtor() {
  _cached_size_ = 0;
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  final_ = false;
  newmethod_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientEmailChange::~CMsgClientEmailChange() {
  SharedDtor();
}

void CMsgClientEmailChange::SharedDtor() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientEmailChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientEmailChange& CMsgClientEmailChange::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientEmailChange* CMsgClientEmailChange::default_instance_ = NULL;

CMsgClientEmailChange* CMsgClientEmailChange::New() const {
  return new CMsgClientEmailChange;
}

void CMsgClientEmailChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::kEmptyString) {
        email_->clear();
      }
    }
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::kEmptyString) {
        code_->clear();
      }
    }
    final_ = false;
    newmethod_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientEmailChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string password = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_email;
        break;
      }

      // optional string email = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_code;
        break;
      }

      // optional string code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_final;
        break;
      }

      // optional bool final = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_final:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &final_)));
          set_has_final();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_newmethod;
        break;
      }

      // optional bool newmethod = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newmethod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &newmethod_)));
          set_has_newmethod();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientEmailChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string password = 1;
  if (has_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->password(), output);
  }

  // optional string email = 2;
  if (has_email()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->email(), output);
  }

  // optional string code = 3;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->code(), output);
  }

  // optional bool final = 4;
  if (has_final()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->final(), output);
  }

  // optional bool newmethod = 5;
  if (has_newmethod()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->newmethod(), output);
  }

}

int CMsgClientEmailChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string password = 1;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string email = 2;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional string code = 3;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // optional bool final = 4;
    if (has_final()) {
      total_size += 1 + 1;
    }

    // optional bool newmethod = 5;
    if (has_newmethod()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientEmailChange::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientEmailChange*>(&from));
}

void CMsgClientEmailChange::MergeFrom(const CMsgClientEmailChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_final()) {
      set_final(from.final());
    }
    if (from.has_newmethod()) {
      set_newmethod(from.newmethod());
    }
  }
}

void CMsgClientEmailChange::CopyFrom(const CMsgClientEmailChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientEmailChange::IsInitialized() const {

  return true;
}

void CMsgClientEmailChange::Swap(CMsgClientEmailChange* other) {
  if (other != this) {
    std::swap(password_, other->password_);
    std::swap(email_, other->email_);
    std::swap(code_, other->code_);
    std::swap(final_, other->final_);
    std::swap(newmethod_, other->newmethod_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientEmailChange::GetTypeName() const {
  return "Sc.CMsgClientEmailChange";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientEmailChangeResponse::kEresultFieldNumber;
#endif  // !_MSC_VER

CMsgClientEmailChangeResponse::CMsgClientEmailChangeResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientEmailChangeResponse::InitAsDefaultInstance() {
}

CMsgClientEmailChangeResponse::CMsgClientEmailChangeResponse(const CMsgClientEmailChangeResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientEmailChangeResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientEmailChangeResponse::~CMsgClientEmailChangeResponse() {
  SharedDtor();
}

void CMsgClientEmailChangeResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientEmailChangeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientEmailChangeResponse& CMsgClientEmailChangeResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientEmailChangeResponse* CMsgClientEmailChangeResponse::default_instance_ = NULL;

CMsgClientEmailChangeResponse* CMsgClientEmailChangeResponse::New() const {
  return new CMsgClientEmailChangeResponse;
}

void CMsgClientEmailChangeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientEmailChangeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientEmailChangeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

}

int CMsgClientEmailChangeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientEmailChangeResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientEmailChangeResponse*>(&from));
}

void CMsgClientEmailChangeResponse::MergeFrom(const CMsgClientEmailChangeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
  }
}

void CMsgClientEmailChangeResponse::CopyFrom(const CMsgClientEmailChangeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientEmailChangeResponse::IsInitialized() const {

  return true;
}

void CMsgClientEmailChangeResponse::Swap(CMsgClientEmailChangeResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientEmailChangeResponse::GetTypeName() const {
  return "Sc.CMsgClientEmailChangeResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientGetCDNAuthToken::kAppIdFieldNumber;
const int CMsgClientGetCDNAuthToken::kHostNameFieldNumber;
#endif  // !_MSC_VER

CMsgClientGetCDNAuthToken::CMsgClientGetCDNAuthToken()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientGetCDNAuthToken::InitAsDefaultInstance() {
}

CMsgClientGetCDNAuthToken::CMsgClientGetCDNAuthToken(const CMsgClientGetCDNAuthToken& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientGetCDNAuthToken::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  host_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientGetCDNAuthToken::~CMsgClientGetCDNAuthToken() {
  SharedDtor();
}

void CMsgClientGetCDNAuthToken::SharedDtor() {
  if (host_name_ != &::google::protobuf::internal::kEmptyString) {
    delete host_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientGetCDNAuthToken::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientGetCDNAuthToken& CMsgClientGetCDNAuthToken::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientGetCDNAuthToken* CMsgClientGetCDNAuthToken::default_instance_ = NULL;

CMsgClientGetCDNAuthToken* CMsgClientGetCDNAuthToken::New() const {
  return new CMsgClientGetCDNAuthToken;
}

void CMsgClientGetCDNAuthToken::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    if (has_host_name()) {
      if (host_name_ != &::google::protobuf::internal::kEmptyString) {
        host_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientGetCDNAuthToken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_host_name;
        break;
      }

      // optional string host_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientGetCDNAuthToken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional string host_name = 2;
  if (has_host_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->host_name(), output);
  }

}

int CMsgClientGetCDNAuthToken::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional string host_name = 2;
    if (has_host_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host_name());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGetCDNAuthToken::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientGetCDNAuthToken*>(&from));
}

void CMsgClientGetCDNAuthToken::MergeFrom(const CMsgClientGetCDNAuthToken& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_host_name()) {
      set_host_name(from.host_name());
    }
  }
}

void CMsgClientGetCDNAuthToken::CopyFrom(const CMsgClientGetCDNAuthToken& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetCDNAuthToken::IsInitialized() const {

  return true;
}

void CMsgClientGetCDNAuthToken::Swap(CMsgClientGetCDNAuthToken* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(host_name_, other->host_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientGetCDNAuthToken::GetTypeName() const {
  return "Sc.CMsgClientGetCDNAuthToken";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientGetDepotDecryptionKey::kDepotIdFieldNumber;
const int CMsgClientGetDepotDecryptionKey::kAppIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientGetDepotDecryptionKey::CMsgClientGetDepotDecryptionKey()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientGetDepotDecryptionKey::InitAsDefaultInstance() {
}

CMsgClientGetDepotDecryptionKey::CMsgClientGetDepotDecryptionKey(const CMsgClientGetDepotDecryptionKey& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientGetDepotDecryptionKey::SharedCtor() {
  _cached_size_ = 0;
  depot_id_ = 0u;
  app_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientGetDepotDecryptionKey::~CMsgClientGetDepotDecryptionKey() {
  SharedDtor();
}

void CMsgClientGetDepotDecryptionKey::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientGetDepotDecryptionKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientGetDepotDecryptionKey& CMsgClientGetDepotDecryptionKey::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientGetDepotDecryptionKey* CMsgClientGetDepotDecryptionKey::default_instance_ = NULL;

CMsgClientGetDepotDecryptionKey* CMsgClientGetDepotDecryptionKey::New() const {
  return new CMsgClientGetDepotDecryptionKey;
}

void CMsgClientGetDepotDecryptionKey::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    depot_id_ = 0u;
    app_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientGetDepotDecryptionKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 depot_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &depot_id_)));
          set_has_depot_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_app_id;
        break;
      }

      // optional uint32 app_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_app_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientGetDepotDecryptionKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 depot_id = 1;
  if (has_depot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->depot_id(), output);
  }

  // optional uint32 app_id = 2;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->app_id(), output);
  }

}

int CMsgClientGetDepotDecryptionKey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 depot_id = 1;
    if (has_depot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->depot_id());
    }

    // optional uint32 app_id = 2;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGetDepotDecryptionKey::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientGetDepotDecryptionKey*>(&from));
}

void CMsgClientGetDepotDecryptionKey::MergeFrom(const CMsgClientGetDepotDecryptionKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_depot_id()) {
      set_depot_id(from.depot_id());
    }
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
  }
}

void CMsgClientGetDepotDecryptionKey::CopyFrom(const CMsgClientGetDepotDecryptionKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetDepotDecryptionKey::IsInitialized() const {

  return true;
}

void CMsgClientGetDepotDecryptionKey::Swap(CMsgClientGetDepotDecryptionKey* other) {
  if (other != this) {
    std::swap(depot_id_, other->depot_id_);
    std::swap(app_id_, other->app_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientGetDepotDecryptionKey::GetTypeName() const {
  return "Sc.CMsgClientGetDepotDecryptionKey";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientGetDepotDecryptionKeyResponse::kEresultFieldNumber;
const int CMsgClientGetDepotDecryptionKeyResponse::kDepotIdFieldNumber;
const int CMsgClientGetDepotDecryptionKeyResponse::kDepotEncryptionKeyFieldNumber;
#endif  // !_MSC_VER

CMsgClientGetDepotDecryptionKeyResponse::CMsgClientGetDepotDecryptionKeyResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientGetDepotDecryptionKeyResponse::InitAsDefaultInstance() {
}

CMsgClientGetDepotDecryptionKeyResponse::CMsgClientGetDepotDecryptionKeyResponse(const CMsgClientGetDepotDecryptionKeyResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientGetDepotDecryptionKeyResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  depot_id_ = 0u;
  depot_encryption_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientGetDepotDecryptionKeyResponse::~CMsgClientGetDepotDecryptionKeyResponse() {
  SharedDtor();
}

void CMsgClientGetDepotDecryptionKeyResponse::SharedDtor() {
  if (depot_encryption_key_ != &::google::protobuf::internal::kEmptyString) {
    delete depot_encryption_key_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientGetDepotDecryptionKeyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientGetDepotDecryptionKeyResponse& CMsgClientGetDepotDecryptionKeyResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientGetDepotDecryptionKeyResponse* CMsgClientGetDepotDecryptionKeyResponse::default_instance_ = NULL;

CMsgClientGetDepotDecryptionKeyResponse* CMsgClientGetDepotDecryptionKeyResponse::New() const {
  return new CMsgClientGetDepotDecryptionKeyResponse;
}

void CMsgClientGetDepotDecryptionKeyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    depot_id_ = 0u;
    if (has_depot_encryption_key()) {
      if (depot_encryption_key_ != &::google::protobuf::internal::kEmptyString) {
        depot_encryption_key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientGetDepotDecryptionKeyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_depot_id;
        break;
      }

      // optional uint32 depot_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_depot_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &depot_id_)));
          set_has_depot_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_depot_encryption_key;
        break;
      }

      // optional bytes depot_encryption_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_depot_encryption_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_depot_encryption_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientGetDepotDecryptionKeyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional uint32 depot_id = 2;
  if (has_depot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->depot_id(), output);
  }

  // optional bytes depot_encryption_key = 3;
  if (has_depot_encryption_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->depot_encryption_key(), output);
  }

}

int CMsgClientGetDepotDecryptionKeyResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional uint32 depot_id = 2;
    if (has_depot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->depot_id());
    }

    // optional bytes depot_encryption_key = 3;
    if (has_depot_encryption_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->depot_encryption_key());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGetDepotDecryptionKeyResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientGetDepotDecryptionKeyResponse*>(&from));
}

void CMsgClientGetDepotDecryptionKeyResponse::MergeFrom(const CMsgClientGetDepotDecryptionKeyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_depot_id()) {
      set_depot_id(from.depot_id());
    }
    if (from.has_depot_encryption_key()) {
      set_depot_encryption_key(from.depot_encryption_key());
    }
  }
}

void CMsgClientGetDepotDecryptionKeyResponse::CopyFrom(const CMsgClientGetDepotDecryptionKeyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetDepotDecryptionKeyResponse::IsInitialized() const {

  return true;
}

void CMsgClientGetDepotDecryptionKeyResponse::Swap(CMsgClientGetDepotDecryptionKeyResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(depot_id_, other->depot_id_);
    std::swap(depot_encryption_key_, other->depot_encryption_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientGetDepotDecryptionKeyResponse::GetTypeName() const {
  return "Sc.CMsgClientGetDepotDecryptionKeyResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientGetAppBetaPasswords::kAppIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientGetAppBetaPasswords::CMsgClientGetAppBetaPasswords()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientGetAppBetaPasswords::InitAsDefaultInstance() {
}

CMsgClientGetAppBetaPasswords::CMsgClientGetAppBetaPasswords(const CMsgClientGetAppBetaPasswords& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientGetAppBetaPasswords::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientGetAppBetaPasswords::~CMsgClientGetAppBetaPasswords() {
  SharedDtor();
}

void CMsgClientGetAppBetaPasswords::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientGetAppBetaPasswords::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientGetAppBetaPasswords& CMsgClientGetAppBetaPasswords::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientGetAppBetaPasswords* CMsgClientGetAppBetaPasswords::default_instance_ = NULL;

CMsgClientGetAppBetaPasswords* CMsgClientGetAppBetaPasswords::New() const {
  return new CMsgClientGetAppBetaPasswords;
}

void CMsgClientGetAppBetaPasswords::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientGetAppBetaPasswords::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientGetAppBetaPasswords::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

}

int CMsgClientGetAppBetaPasswords::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGetAppBetaPasswords::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientGetAppBetaPasswords*>(&from));
}

void CMsgClientGetAppBetaPasswords::MergeFrom(const CMsgClientGetAppBetaPasswords& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
  }
}

void CMsgClientGetAppBetaPasswords::CopyFrom(const CMsgClientGetAppBetaPasswords& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetAppBetaPasswords::IsInitialized() const {

  return true;
}

void CMsgClientGetAppBetaPasswords::Swap(CMsgClientGetAppBetaPasswords* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientGetAppBetaPasswords::GetTypeName() const {
  return "Sc.CMsgClientGetAppBetaPasswords";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientGetAppBetaPasswordsResponse_BetaPassword::kBetanameFieldNumber;
const int CMsgClientGetAppBetaPasswordsResponse_BetaPassword::kBetapasswordFieldNumber;
#endif  // !_MSC_VER

CMsgClientGetAppBetaPasswordsResponse_BetaPassword::CMsgClientGetAppBetaPasswordsResponse_BetaPassword()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientGetAppBetaPasswordsResponse_BetaPassword::InitAsDefaultInstance() {
}

CMsgClientGetAppBetaPasswordsResponse_BetaPassword::CMsgClientGetAppBetaPasswordsResponse_BetaPassword(const CMsgClientGetAppBetaPasswordsResponse_BetaPassword& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientGetAppBetaPasswordsResponse_BetaPassword::SharedCtor() {
  _cached_size_ = 0;
  betaname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  betapassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientGetAppBetaPasswordsResponse_BetaPassword::~CMsgClientGetAppBetaPasswordsResponse_BetaPassword() {
  SharedDtor();
}

void CMsgClientGetAppBetaPasswordsResponse_BetaPassword::SharedDtor() {
  if (betaname_ != &::google::protobuf::internal::kEmptyString) {
    delete betaname_;
  }
  if (betapassword_ != &::google::protobuf::internal::kEmptyString) {
    delete betapassword_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientGetAppBetaPasswordsResponse_BetaPassword::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientGetAppBetaPasswordsResponse_BetaPassword& CMsgClientGetAppBetaPasswordsResponse_BetaPassword::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientGetAppBetaPasswordsResponse_BetaPassword* CMsgClientGetAppBetaPasswordsResponse_BetaPassword::default_instance_ = NULL;

CMsgClientGetAppBetaPasswordsResponse_BetaPassword* CMsgClientGetAppBetaPasswordsResponse_BetaPassword::New() const {
  return new CMsgClientGetAppBetaPasswordsResponse_BetaPassword;
}

void CMsgClientGetAppBetaPasswordsResponse_BetaPassword::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_betaname()) {
      if (betaname_ != &::google::protobuf::internal::kEmptyString) {
        betaname_->clear();
      }
    }
    if (has_betapassword()) {
      if (betapassword_ != &::google::protobuf::internal::kEmptyString) {
        betapassword_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientGetAppBetaPasswordsResponse_BetaPassword::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string betaname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_betaname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_betapassword;
        break;
      }

      // optional string betapassword = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_betapassword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_betapassword()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientGetAppBetaPasswordsResponse_BetaPassword::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string betaname = 1;
  if (has_betaname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->betaname(), output);
  }

  // optional string betapassword = 2;
  if (has_betapassword()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->betapassword(), output);
  }

}

int CMsgClientGetAppBetaPasswordsResponse_BetaPassword::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string betaname = 1;
    if (has_betaname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->betaname());
    }

    // optional string betapassword = 2;
    if (has_betapassword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->betapassword());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGetAppBetaPasswordsResponse_BetaPassword::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientGetAppBetaPasswordsResponse_BetaPassword*>(&from));
}

void CMsgClientGetAppBetaPasswordsResponse_BetaPassword::MergeFrom(const CMsgClientGetAppBetaPasswordsResponse_BetaPassword& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_betaname()) {
      set_betaname(from.betaname());
    }
    if (from.has_betapassword()) {
      set_betapassword(from.betapassword());
    }
  }
}

void CMsgClientGetAppBetaPasswordsResponse_BetaPassword::CopyFrom(const CMsgClientGetAppBetaPasswordsResponse_BetaPassword& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetAppBetaPasswordsResponse_BetaPassword::IsInitialized() const {

  return true;
}

void CMsgClientGetAppBetaPasswordsResponse_BetaPassword::Swap(CMsgClientGetAppBetaPasswordsResponse_BetaPassword* other) {
  if (other != this) {
    std::swap(betaname_, other->betaname_);
    std::swap(betapassword_, other->betapassword_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientGetAppBetaPasswordsResponse_BetaPassword::GetTypeName() const {
  return "Sc.CMsgClientGetAppBetaPasswordsResponse.BetaPassword";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientGetAppBetaPasswordsResponse::kEresultFieldNumber;
const int CMsgClientGetAppBetaPasswordsResponse::kAppIdFieldNumber;
const int CMsgClientGetAppBetaPasswordsResponse::kBetapasswordsFieldNumber;
#endif  // !_MSC_VER

CMsgClientGetAppBetaPasswordsResponse::CMsgClientGetAppBetaPasswordsResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientGetAppBetaPasswordsResponse::InitAsDefaultInstance() {
}

CMsgClientGetAppBetaPasswordsResponse::CMsgClientGetAppBetaPasswordsResponse(const CMsgClientGetAppBetaPasswordsResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientGetAppBetaPasswordsResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  app_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientGetAppBetaPasswordsResponse::~CMsgClientGetAppBetaPasswordsResponse() {
  SharedDtor();
}

void CMsgClientGetAppBetaPasswordsResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientGetAppBetaPasswordsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientGetAppBetaPasswordsResponse& CMsgClientGetAppBetaPasswordsResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientGetAppBetaPasswordsResponse* CMsgClientGetAppBetaPasswordsResponse::default_instance_ = NULL;

CMsgClientGetAppBetaPasswordsResponse* CMsgClientGetAppBetaPasswordsResponse::New() const {
  return new CMsgClientGetAppBetaPasswordsResponse;
}

void CMsgClientGetAppBetaPasswordsResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    app_id_ = 0u;
  }
  betapasswords_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientGetAppBetaPasswordsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_app_id;
        break;
      }

      // optional uint32 app_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_app_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_betapasswords;
        break;
      }

      // repeated .Sc.CMsgClientGetAppBetaPasswordsResponse.BetaPassword betapasswords = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_betapasswords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_betapasswords()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_betapasswords;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientGetAppBetaPasswordsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional uint32 app_id = 2;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->app_id(), output);
  }

  // repeated .Sc.CMsgClientGetAppBetaPasswordsResponse.BetaPassword betapasswords = 3;
  for (int i = 0; i < this->betapasswords_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->betapasswords(i), output);
  }

}

int CMsgClientGetAppBetaPasswordsResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional uint32 app_id = 2;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  // repeated .Sc.CMsgClientGetAppBetaPasswordsResponse.BetaPassword betapasswords = 3;
  total_size += 1 * this->betapasswords_size();
  for (int i = 0; i < this->betapasswords_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->betapasswords(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGetAppBetaPasswordsResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientGetAppBetaPasswordsResponse*>(&from));
}

void CMsgClientGetAppBetaPasswordsResponse::MergeFrom(const CMsgClientGetAppBetaPasswordsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  betapasswords_.MergeFrom(from.betapasswords_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
  }
}

void CMsgClientGetAppBetaPasswordsResponse::CopyFrom(const CMsgClientGetAppBetaPasswordsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetAppBetaPasswordsResponse::IsInitialized() const {

  return true;
}

void CMsgClientGetAppBetaPasswordsResponse::Swap(CMsgClientGetAppBetaPasswordsResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(app_id_, other->app_id_);
    betapasswords_.Swap(&other->betapasswords_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientGetAppBetaPasswordsResponse::GetTypeName() const {
  return "Sc.CMsgClientGetAppBetaPasswordsResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUpdateAppJobReport::kAppIdFieldNumber;
const int CMsgClientUpdateAppJobReport::kDepotIdsFieldNumber;
const int CMsgClientUpdateAppJobReport::kAppStateFieldNumber;
const int CMsgClientUpdateAppJobReport::kJobAppErrorFieldNumber;
const int CMsgClientUpdateAppJobReport::kErrorDetailsFieldNumber;
const int CMsgClientUpdateAppJobReport::kJobDurationFieldNumber;
const int CMsgClientUpdateAppJobReport::kFilesValidationFailedFieldNumber;
const int CMsgClientUpdateAppJobReport::kBytesDownloadedFieldNumber;
const int CMsgClientUpdateAppJobReport::kBytesStagedFieldNumber;
const int CMsgClientUpdateAppJobReport::kBytesComittedFieldNumber;
const int CMsgClientUpdateAppJobReport::kStartAppStateFieldNumber;
#endif  // !_MSC_VER

CMsgClientUpdateAppJobReport::CMsgClientUpdateAppJobReport()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUpdateAppJobReport::InitAsDefaultInstance() {
}

CMsgClientUpdateAppJobReport::CMsgClientUpdateAppJobReport(const CMsgClientUpdateAppJobReport& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUpdateAppJobReport::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  app_state_ = 0u;
  job_app_error_ = 0u;
  error_details_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  job_duration_ = 0u;
  files_validation_failed_ = 0u;
  bytes_downloaded_ = GOOGLE_ULONGLONG(0);
  bytes_staged_ = GOOGLE_ULONGLONG(0);
  bytes_comitted_ = GOOGLE_ULONGLONG(0);
  start_app_state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUpdateAppJobReport::~CMsgClientUpdateAppJobReport() {
  SharedDtor();
}

void CMsgClientUpdateAppJobReport::SharedDtor() {
  if (error_details_ != &::google::protobuf::internal::kEmptyString) {
    delete error_details_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUpdateAppJobReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUpdateAppJobReport& CMsgClientUpdateAppJobReport::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUpdateAppJobReport* CMsgClientUpdateAppJobReport::default_instance_ = NULL;

CMsgClientUpdateAppJobReport* CMsgClientUpdateAppJobReport::New() const {
  return new CMsgClientUpdateAppJobReport;
}

void CMsgClientUpdateAppJobReport::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    app_state_ = 0u;
    job_app_error_ = 0u;
    if (has_error_details()) {
      if (error_details_ != &::google::protobuf::internal::kEmptyString) {
        error_details_->clear();
      }
    }
    job_duration_ = 0u;
    files_validation_failed_ = 0u;
    bytes_downloaded_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    bytes_staged_ = GOOGLE_ULONGLONG(0);
    bytes_comitted_ = GOOGLE_ULONGLONG(0);
    start_app_state_ = 0u;
  }
  depot_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUpdateAppJobReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_depot_ids;
        break;
      }

      // repeated uint32 depot_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_depot_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_depot_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_depot_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_depot_ids;
        if (input->ExpectTag(24)) goto parse_app_state;
        break;
      }

      // optional uint32 app_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_app_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_state_)));
          set_has_app_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_job_app_error;
        break;
      }

      // optional uint32 job_app_error = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job_app_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_app_error_)));
          set_has_job_app_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_error_details;
        break;
      }

      // optional string error_details = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_details()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_job_duration;
        break;
      }

      // optional uint32 job_duration = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_duration_)));
          set_has_job_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_files_validation_failed;
        break;
      }

      // optional uint32 files_validation_failed = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_files_validation_failed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &files_validation_failed_)));
          set_has_files_validation_failed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bytes_downloaded;
        break;
      }

      // optional uint64 bytes_downloaded = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bytes_downloaded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_downloaded_)));
          set_has_bytes_downloaded();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_bytes_staged;
        break;
      }

      // optional uint64 bytes_staged = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bytes_staged:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_staged_)));
          set_has_bytes_staged();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_bytes_comitted;
        break;
      }

      // optional uint64 bytes_comitted = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bytes_comitted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_comitted_)));
          set_has_bytes_comitted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_start_app_state;
        break;
      }

      // optional uint32 start_app_state = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_app_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_app_state_)));
          set_has_start_app_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUpdateAppJobReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // repeated uint32 depot_ids = 2;
  for (int i = 0; i < this->depot_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->depot_ids(i), output);
  }

  // optional uint32 app_state = 3;
  if (has_app_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->app_state(), output);
  }

  // optional uint32 job_app_error = 4;
  if (has_job_app_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->job_app_error(), output);
  }

  // optional string error_details = 5;
  if (has_error_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->error_details(), output);
  }

  // optional uint32 job_duration = 6;
  if (has_job_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->job_duration(), output);
  }

  // optional uint32 files_validation_failed = 7;
  if (has_files_validation_failed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->files_validation_failed(), output);
  }

  // optional uint64 bytes_downloaded = 8;
  if (has_bytes_downloaded()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->bytes_downloaded(), output);
  }

  // optional uint64 bytes_staged = 9;
  if (has_bytes_staged()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->bytes_staged(), output);
  }

  // optional uint64 bytes_comitted = 10;
  if (has_bytes_comitted()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->bytes_comitted(), output);
  }

  // optional uint32 start_app_state = 11;
  if (has_start_app_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->start_app_state(), output);
  }

}

int CMsgClientUpdateAppJobReport::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 app_state = 3;
    if (has_app_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_state());
    }

    // optional uint32 job_app_error = 4;
    if (has_job_app_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job_app_error());
    }

    // optional string error_details = 5;
    if (has_error_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_details());
    }

    // optional uint32 job_duration = 6;
    if (has_job_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job_duration());
    }

    // optional uint32 files_validation_failed = 7;
    if (has_files_validation_failed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->files_validation_failed());
    }

    // optional uint64 bytes_downloaded = 8;
    if (has_bytes_downloaded()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes_downloaded());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 bytes_staged = 9;
    if (has_bytes_staged()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes_staged());
    }

    // optional uint64 bytes_comitted = 10;
    if (has_bytes_comitted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes_comitted());
    }

    // optional uint32 start_app_state = 11;
    if (has_start_app_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_app_state());
    }

  }
  // repeated uint32 depot_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->depot_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->depot_ids(i));
    }
    total_size += 1 * this->depot_ids_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUpdateAppJobReport::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUpdateAppJobReport*>(&from));
}

void CMsgClientUpdateAppJobReport::MergeFrom(const CMsgClientUpdateAppJobReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  depot_ids_.MergeFrom(from.depot_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_app_state()) {
      set_app_state(from.app_state());
    }
    if (from.has_job_app_error()) {
      set_job_app_error(from.job_app_error());
    }
    if (from.has_error_details()) {
      set_error_details(from.error_details());
    }
    if (from.has_job_duration()) {
      set_job_duration(from.job_duration());
    }
    if (from.has_files_validation_failed()) {
      set_files_validation_failed(from.files_validation_failed());
    }
    if (from.has_bytes_downloaded()) {
      set_bytes_downloaded(from.bytes_downloaded());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bytes_staged()) {
      set_bytes_staged(from.bytes_staged());
    }
    if (from.has_bytes_comitted()) {
      set_bytes_comitted(from.bytes_comitted());
    }
    if (from.has_start_app_state()) {
      set_start_app_state(from.start_app_state());
    }
  }
}

void CMsgClientUpdateAppJobReport::CopyFrom(const CMsgClientUpdateAppJobReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUpdateAppJobReport::IsInitialized() const {

  return true;
}

void CMsgClientUpdateAppJobReport::Swap(CMsgClientUpdateAppJobReport* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    depot_ids_.Swap(&other->depot_ids_);
    std::swap(app_state_, other->app_state_);
    std::swap(job_app_error_, other->job_app_error_);
    std::swap(error_details_, other->error_details_);
    std::swap(job_duration_, other->job_duration_);
    std::swap(files_validation_failed_, other->files_validation_failed_);
    std::swap(bytes_downloaded_, other->bytes_downloaded_);
    std::swap(bytes_staged_, other->bytes_staged_);
    std::swap(bytes_comitted_, other->bytes_comitted_);
    std::swap(start_app_state_, other->start_app_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUpdateAppJobReport::GetTypeName() const {
  return "Sc.CMsgClientUpdateAppJobReport";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientGetCDNAuthTokenResponse::kEresultFieldNumber;
const int CMsgClientGetCDNAuthTokenResponse::kTokenFieldNumber;
const int CMsgClientGetCDNAuthTokenResponse::kExpirationTimeFieldNumber;
#endif  // !_MSC_VER

CMsgClientGetCDNAuthTokenResponse::CMsgClientGetCDNAuthTokenResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientGetCDNAuthTokenResponse::InitAsDefaultInstance() {
}

CMsgClientGetCDNAuthTokenResponse::CMsgClientGetCDNAuthTokenResponse(const CMsgClientGetCDNAuthTokenResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientGetCDNAuthTokenResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  expiration_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientGetCDNAuthTokenResponse::~CMsgClientGetCDNAuthTokenResponse() {
  SharedDtor();
}

void CMsgClientGetCDNAuthTokenResponse::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientGetCDNAuthTokenResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientGetCDNAuthTokenResponse& CMsgClientGetCDNAuthTokenResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientGetCDNAuthTokenResponse* CMsgClientGetCDNAuthTokenResponse::default_instance_ = NULL;

CMsgClientGetCDNAuthTokenResponse* CMsgClientGetCDNAuthTokenResponse::New() const {
  return new CMsgClientGetCDNAuthTokenResponse;
}

void CMsgClientGetCDNAuthTokenResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2u;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    expiration_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientGetCDNAuthTokenResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // optional string token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_expiration_time;
        break;
      }

      // optional uint32 expiration_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expiration_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expiration_time_)));
          set_has_expiration_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientGetCDNAuthTokenResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

  // optional string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->token(), output);
  }

  // optional uint32 expiration_time = 3;
  if (has_expiration_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->expiration_time(), output);
  }

}

int CMsgClientGetCDNAuthTokenResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

    // optional string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional uint32 expiration_time = 3;
    if (has_expiration_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expiration_time());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGetCDNAuthTokenResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientGetCDNAuthTokenResponse*>(&from));
}

void CMsgClientGetCDNAuthTokenResponse::MergeFrom(const CMsgClientGetCDNAuthTokenResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_expiration_time()) {
      set_expiration_time(from.expiration_time());
    }
  }
}

void CMsgClientGetCDNAuthTokenResponse::CopyFrom(const CMsgClientGetCDNAuthTokenResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetCDNAuthTokenResponse::IsInitialized() const {

  return true;
}

void CMsgClientGetCDNAuthTokenResponse::Swap(CMsgClientGetCDNAuthTokenResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(token_, other->token_);
    std::swap(expiration_time_, other->expiration_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientGetCDNAuthTokenResponse::GetTypeName() const {
  return "Sc.CMsgClientGetCDNAuthTokenResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDownloadRateStatistics_StatsInfo::kSourceTypeFieldNumber;
const int CMsgDownloadRateStatistics_StatsInfo::kSourceIdFieldNumber;
const int CMsgDownloadRateStatistics_StatsInfo::kSecondsFieldNumber;
const int CMsgDownloadRateStatistics_StatsInfo::kBytesFieldNumber;
#endif  // !_MSC_VER

CMsgDownloadRateStatistics_StatsInfo::CMsgDownloadRateStatistics_StatsInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgDownloadRateStatistics_StatsInfo::InitAsDefaultInstance() {
}

CMsgDownloadRateStatistics_StatsInfo::CMsgDownloadRateStatistics_StatsInfo(const CMsgDownloadRateStatistics_StatsInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgDownloadRateStatistics_StatsInfo::SharedCtor() {
  _cached_size_ = 0;
  source_type_ = 0u;
  source_id_ = 0u;
  seconds_ = 0u;
  bytes_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDownloadRateStatistics_StatsInfo::~CMsgDownloadRateStatistics_StatsInfo() {
  SharedDtor();
}

void CMsgDownloadRateStatistics_StatsInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgDownloadRateStatistics_StatsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgDownloadRateStatistics_StatsInfo& CMsgDownloadRateStatistics_StatsInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgDownloadRateStatistics_StatsInfo* CMsgDownloadRateStatistics_StatsInfo::default_instance_ = NULL;

CMsgDownloadRateStatistics_StatsInfo* CMsgDownloadRateStatistics_StatsInfo::New() const {
  return new CMsgDownloadRateStatistics_StatsInfo;
}

void CMsgDownloadRateStatistics_StatsInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    source_type_ = 0u;
    source_id_ = 0u;
    seconds_ = 0u;
    bytes_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgDownloadRateStatistics_StatsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 source_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_type_)));
          set_has_source_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_source_id;
        break;
      }

      // optional uint32 source_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_id_)));
          set_has_source_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seconds;
        break;
      }

      // optional uint32 seconds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_)));
          set_has_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bytes;
        break;
      }

      // optional uint64 bytes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_)));
          set_has_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgDownloadRateStatistics_StatsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 source_type = 1;
  if (has_source_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->source_type(), output);
  }

  // optional uint32 source_id = 2;
  if (has_source_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->source_id(), output);
  }

  // optional uint32 seconds = 3;
  if (has_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->seconds(), output);
  }

  // optional uint64 bytes = 4;
  if (has_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->bytes(), output);
  }

}

int CMsgDownloadRateStatistics_StatsInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 source_type = 1;
    if (has_source_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_type());
    }

    // optional uint32 source_id = 2;
    if (has_source_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_id());
    }

    // optional uint32 seconds = 3;
    if (has_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds());
    }

    // optional uint64 bytes = 4;
    if (has_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDownloadRateStatistics_StatsInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgDownloadRateStatistics_StatsInfo*>(&from));
}

void CMsgDownloadRateStatistics_StatsInfo::MergeFrom(const CMsgDownloadRateStatistics_StatsInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source_type()) {
      set_source_type(from.source_type());
    }
    if (from.has_source_id()) {
      set_source_id(from.source_id());
    }
    if (from.has_seconds()) {
      set_seconds(from.seconds());
    }
    if (from.has_bytes()) {
      set_bytes(from.bytes());
    }
  }
}

void CMsgDownloadRateStatistics_StatsInfo::CopyFrom(const CMsgDownloadRateStatistics_StatsInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDownloadRateStatistics_StatsInfo::IsInitialized() const {

  return true;
}

void CMsgDownloadRateStatistics_StatsInfo::Swap(CMsgDownloadRateStatistics_StatsInfo* other) {
  if (other != this) {
    std::swap(source_type_, other->source_type_);
    std::swap(source_id_, other->source_id_);
    std::swap(seconds_, other->seconds_);
    std::swap(bytes_, other->bytes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgDownloadRateStatistics_StatsInfo::GetTypeName() const {
  return "Sc.CMsgDownloadRateStatistics.StatsInfo";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgDownloadRateStatistics::kCellIdFieldNumber;
const int CMsgDownloadRateStatistics::kStatsFieldNumber;
#endif  // !_MSC_VER

CMsgDownloadRateStatistics::CMsgDownloadRateStatistics()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgDownloadRateStatistics::InitAsDefaultInstance() {
}

CMsgDownloadRateStatistics::CMsgDownloadRateStatistics(const CMsgDownloadRateStatistics& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgDownloadRateStatistics::SharedCtor() {
  _cached_size_ = 0;
  cell_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDownloadRateStatistics::~CMsgDownloadRateStatistics() {
  SharedDtor();
}

void CMsgDownloadRateStatistics::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgDownloadRateStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgDownloadRateStatistics& CMsgDownloadRateStatistics::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgDownloadRateStatistics* CMsgDownloadRateStatistics::default_instance_ = NULL;

CMsgDownloadRateStatistics* CMsgDownloadRateStatistics::New() const {
  return new CMsgDownloadRateStatistics;
}

void CMsgDownloadRateStatistics::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cell_id_ = 0u;
  }
  stats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgDownloadRateStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cell_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_)));
          set_has_cell_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stats;
        break;
      }

      // repeated .Sc.CMsgDownloadRateStatistics.StatsInfo stats = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stats;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgDownloadRateStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cell_id = 1;
  if (has_cell_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cell_id(), output);
  }

  // repeated .Sc.CMsgDownloadRateStatistics.StatsInfo stats = 2;
  for (int i = 0; i < this->stats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->stats(i), output);
  }

}

int CMsgDownloadRateStatistics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cell_id = 1;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_id());
    }

  }
  // repeated .Sc.CMsgDownloadRateStatistics.StatsInfo stats = 2;
  total_size += 1 * this->stats_size();
  for (int i = 0; i < this->stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stats(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDownloadRateStatistics::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgDownloadRateStatistics*>(&from));
}

void CMsgDownloadRateStatistics::MergeFrom(const CMsgDownloadRateStatistics& from) {
  GOOGLE_CHECK_NE(&from, this);
  stats_.MergeFrom(from.stats_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cell_id()) {
      set_cell_id(from.cell_id());
    }
  }
}

void CMsgDownloadRateStatistics::CopyFrom(const CMsgDownloadRateStatistics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDownloadRateStatistics::IsInitialized() const {

  return true;
}

void CMsgDownloadRateStatistics::Swap(CMsgDownloadRateStatistics* other) {
  if (other != this) {
    std::swap(cell_id_, other->cell_id_);
    stats_.Swap(&other->stats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgDownloadRateStatistics::GetTypeName() const {
  return "Sc.CMsgDownloadRateStatistics";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientRequestAccountData::kAccountOrEmailFieldNumber;
const int CMsgClientRequestAccountData::kActionFieldNumber;
#endif  // !_MSC_VER

CMsgClientRequestAccountData::CMsgClientRequestAccountData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientRequestAccountData::InitAsDefaultInstance() {
}

CMsgClientRequestAccountData::CMsgClientRequestAccountData(const CMsgClientRequestAccountData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRequestAccountData::SharedCtor() {
  _cached_size_ = 0;
  account_or_email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  action_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRequestAccountData::~CMsgClientRequestAccountData() {
  SharedDtor();
}

void CMsgClientRequestAccountData::SharedDtor() {
  if (account_or_email_ != &::google::protobuf::internal::kEmptyString) {
    delete account_or_email_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientRequestAccountData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientRequestAccountData& CMsgClientRequestAccountData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientRequestAccountData* CMsgClientRequestAccountData::default_instance_ = NULL;

CMsgClientRequestAccountData* CMsgClientRequestAccountData::New() const {
  return new CMsgClientRequestAccountData;
}

void CMsgClientRequestAccountData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account_or_email()) {
      if (account_or_email_ != &::google::protobuf::internal::kEmptyString) {
        account_or_email_->clear();
      }
    }
    action_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientRequestAccountData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account_or_email = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_or_email()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_action;
        break;
      }

      // optional uint32 action = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_)));
          set_has_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientRequestAccountData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account_or_email = 1;
  if (has_account_or_email()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account_or_email(), output);
  }

  // optional uint32 action = 2;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->action(), output);
  }

}

int CMsgClientRequestAccountData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account_or_email = 1;
    if (has_account_or_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_or_email());
    }

    // optional uint32 action = 2;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRequestAccountData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientRequestAccountData*>(&from));
}

void CMsgClientRequestAccountData::MergeFrom(const CMsgClientRequestAccountData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_or_email()) {
      set_account_or_email(from.account_or_email());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
  }
}

void CMsgClientRequestAccountData::CopyFrom(const CMsgClientRequestAccountData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestAccountData::IsInitialized() const {

  return true;
}

void CMsgClientRequestAccountData::Swap(CMsgClientRequestAccountData* other) {
  if (other != this) {
    std::swap(account_or_email_, other->account_or_email_);
    std::swap(action_, other->action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientRequestAccountData::GetTypeName() const {
  return "Sc.CMsgClientRequestAccountData";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientRequestAccountDataResponse::kActionFieldNumber;
const int CMsgClientRequestAccountDataResponse::kEresultFieldNumber;
const int CMsgClientRequestAccountDataResponse::kAccountNameFieldNumber;
const int CMsgClientRequestAccountDataResponse::kCtMatchesFieldNumber;
const int CMsgClientRequestAccountDataResponse::kAccountNameSuggestion1FieldNumber;
const int CMsgClientRequestAccountDataResponse::kAccountNameSuggestion2FieldNumber;
const int CMsgClientRequestAccountDataResponse::kAccountNameSuggestion3FieldNumber;
#endif  // !_MSC_VER

CMsgClientRequestAccountDataResponse::CMsgClientRequestAccountDataResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientRequestAccountDataResponse::InitAsDefaultInstance() {
}

CMsgClientRequestAccountDataResponse::CMsgClientRequestAccountDataResponse(const CMsgClientRequestAccountDataResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRequestAccountDataResponse::SharedCtor() {
  _cached_size_ = 0;
  action_ = 0u;
  eresult_ = 0u;
  account_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ct_matches_ = 0u;
  account_name_suggestion1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_name_suggestion2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_name_suggestion3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRequestAccountDataResponse::~CMsgClientRequestAccountDataResponse() {
  SharedDtor();
}

void CMsgClientRequestAccountDataResponse::SharedDtor() {
  if (account_name_ != &::google::protobuf::internal::kEmptyString) {
    delete account_name_;
  }
  if (account_name_suggestion1_ != &::google::protobuf::internal::kEmptyString) {
    delete account_name_suggestion1_;
  }
  if (account_name_suggestion2_ != &::google::protobuf::internal::kEmptyString) {
    delete account_name_suggestion2_;
  }
  if (account_name_suggestion3_ != &::google::protobuf::internal::kEmptyString) {
    delete account_name_suggestion3_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientRequestAccountDataResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientRequestAccountDataResponse& CMsgClientRequestAccountDataResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientRequestAccountDataResponse* CMsgClientRequestAccountDataResponse::default_instance_ = NULL;

CMsgClientRequestAccountDataResponse* CMsgClientRequestAccountDataResponse::New() const {
  return new CMsgClientRequestAccountDataResponse;
}

void CMsgClientRequestAccountDataResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    action_ = 0u;
    eresult_ = 0u;
    if (has_account_name()) {
      if (account_name_ != &::google::protobuf::internal::kEmptyString) {
        account_name_->clear();
      }
    }
    ct_matches_ = 0u;
    if (has_account_name_suggestion1()) {
      if (account_name_suggestion1_ != &::google::protobuf::internal::kEmptyString) {
        account_name_suggestion1_->clear();
      }
    }
    if (has_account_name_suggestion2()) {
      if (account_name_suggestion2_ != &::google::protobuf::internal::kEmptyString) {
        account_name_suggestion2_->clear();
      }
    }
    if (has_account_name_suggestion3()) {
      if (account_name_suggestion3_ != &::google::protobuf::internal::kEmptyString) {
        account_name_suggestion3_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientRequestAccountDataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 action = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_)));
          set_has_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_eresult;
        break;
      }

      // optional uint32 eresult = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eresult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_account_name;
        break;
      }

      // optional string account_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ct_matches;
        break;
      }

      // optional uint32 ct_matches = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ct_matches:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ct_matches_)));
          set_has_ct_matches();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_account_name_suggestion1;
        break;
      }

      // optional string account_name_suggestion1 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account_name_suggestion1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_name_suggestion1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_account_name_suggestion2;
        break;
      }

      // optional string account_name_suggestion2 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account_name_suggestion2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_name_suggestion2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_account_name_suggestion3;
        break;
      }

      // optional string account_name_suggestion3 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account_name_suggestion3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_name_suggestion3()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientRequestAccountDataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 action = 1;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->action(), output);
  }

  // optional uint32 eresult = 2;
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->eresult(), output);
  }

  // optional string account_name = 3;
  if (has_account_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->account_name(), output);
  }

  // optional uint32 ct_matches = 4;
  if (has_ct_matches()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ct_matches(), output);
  }

  // optional string account_name_suggestion1 = 5;
  if (has_account_name_suggestion1()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->account_name_suggestion1(), output);
  }

  // optional string account_name_suggestion2 = 6;
  if (has_account_name_suggestion2()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->account_name_suggestion2(), output);
  }

  // optional string account_name_suggestion3 = 7;
  if (has_account_name_suggestion3()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->account_name_suggestion3(), output);
  }

}

int CMsgClientRequestAccountDataResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 action = 1;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action());
    }

    // optional uint32 eresult = 2;
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

    // optional string account_name = 3;
    if (has_account_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_name());
    }

    // optional uint32 ct_matches = 4;
    if (has_ct_matches()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ct_matches());
    }

    // optional string account_name_suggestion1 = 5;
    if (has_account_name_suggestion1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_name_suggestion1());
    }

    // optional string account_name_suggestion2 = 6;
    if (has_account_name_suggestion2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_name_suggestion2());
    }

    // optional string account_name_suggestion3 = 7;
    if (has_account_name_suggestion3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_name_suggestion3());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRequestAccountDataResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientRequestAccountDataResponse*>(&from));
}

void CMsgClientRequestAccountDataResponse::MergeFrom(const CMsgClientRequestAccountDataResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_account_name()) {
      set_account_name(from.account_name());
    }
    if (from.has_ct_matches()) {
      set_ct_matches(from.ct_matches());
    }
    if (from.has_account_name_suggestion1()) {
      set_account_name_suggestion1(from.account_name_suggestion1());
    }
    if (from.has_account_name_suggestion2()) {
      set_account_name_suggestion2(from.account_name_suggestion2());
    }
    if (from.has_account_name_suggestion3()) {
      set_account_name_suggestion3(from.account_name_suggestion3());
    }
  }
}

void CMsgClientRequestAccountDataResponse::CopyFrom(const CMsgClientRequestAccountDataResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestAccountDataResponse::IsInitialized() const {

  return true;
}

void CMsgClientRequestAccountDataResponse::Swap(CMsgClientRequestAccountDataResponse* other) {
  if (other != this) {
    std::swap(action_, other->action_);
    std::swap(eresult_, other->eresult_);
    std::swap(account_name_, other->account_name_);
    std::swap(ct_matches_, other->ct_matches_);
    std::swap(account_name_suggestion1_, other->account_name_suggestion1_);
    std::swap(account_name_suggestion2_, other->account_name_suggestion2_);
    std::swap(account_name_suggestion3_, other->account_name_suggestion3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientRequestAccountDataResponse::GetTypeName() const {
  return "Sc.CMsgClientRequestAccountDataResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUGSGetGlobalStats::kGameidFieldNumber;
const int CMsgClientUGSGetGlobalStats::kHistoryDaysRequestedFieldNumber;
const int CMsgClientUGSGetGlobalStats::kTimeLastRequestedFieldNumber;
const int CMsgClientUGSGetGlobalStats::kFirstDayCachedFieldNumber;
const int CMsgClientUGSGetGlobalStats::kDaysCachedFieldNumber;
#endif  // !_MSC_VER

CMsgClientUGSGetGlobalStats::CMsgClientUGSGetGlobalStats()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUGSGetGlobalStats::InitAsDefaultInstance() {
}

CMsgClientUGSGetGlobalStats::CMsgClientUGSGetGlobalStats(const CMsgClientUGSGetGlobalStats& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUGSGetGlobalStats::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = GOOGLE_ULONGLONG(0);
  history_days_requested_ = 0u;
  time_last_requested_ = 0u;
  first_day_cached_ = 0u;
  days_cached_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUGSGetGlobalStats::~CMsgClientUGSGetGlobalStats() {
  SharedDtor();
}

void CMsgClientUGSGetGlobalStats::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUGSGetGlobalStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUGSGetGlobalStats& CMsgClientUGSGetGlobalStats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUGSGetGlobalStats* CMsgClientUGSGetGlobalStats::default_instance_ = NULL;

CMsgClientUGSGetGlobalStats* CMsgClientUGSGetGlobalStats::New() const {
  return new CMsgClientUGSGetGlobalStats;
}

void CMsgClientUGSGetGlobalStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = GOOGLE_ULONGLONG(0);
    history_days_requested_ = 0u;
    time_last_requested_ = 0u;
    first_day_cached_ = 0u;
    days_cached_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUGSGetGlobalStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 gameid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_history_days_requested;
        break;
      }

      // optional uint32 history_days_requested = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_history_days_requested:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &history_days_requested_)));
          set_has_history_days_requested();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_time_last_requested;
        break;
      }

      // optional fixed32 time_last_requested = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_time_last_requested:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &time_last_requested_)));
          set_has_time_last_requested();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_first_day_cached;
        break;
      }

      // optional uint32 first_day_cached = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_day_cached:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_day_cached_)));
          set_has_first_day_cached();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_days_cached;
        break;
      }

      // optional uint32 days_cached = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_days_cached:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &days_cached_)));
          set_has_days_cached();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUGSGetGlobalStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->gameid(), output);
  }

  // optional uint32 history_days_requested = 2;
  if (has_history_days_requested()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->history_days_requested(), output);
  }

  // optional fixed32 time_last_requested = 3;
  if (has_time_last_requested()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->time_last_requested(), output);
  }

  // optional uint32 first_day_cached = 4;
  if (has_first_day_cached()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->first_day_cached(), output);
  }

  // optional uint32 days_cached = 5;
  if (has_days_cached()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->days_cached(), output);
  }

}

int CMsgClientUGSGetGlobalStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gameid());
    }

    // optional uint32 history_days_requested = 2;
    if (has_history_days_requested()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->history_days_requested());
    }

    // optional fixed32 time_last_requested = 3;
    if (has_time_last_requested()) {
      total_size += 1 + 4;
    }

    // optional uint32 first_day_cached = 4;
    if (has_first_day_cached()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->first_day_cached());
    }

    // optional uint32 days_cached = 5;
    if (has_days_cached()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->days_cached());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUGSGetGlobalStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUGSGetGlobalStats*>(&from));
}

void CMsgClientUGSGetGlobalStats::MergeFrom(const CMsgClientUGSGetGlobalStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_history_days_requested()) {
      set_history_days_requested(from.history_days_requested());
    }
    if (from.has_time_last_requested()) {
      set_time_last_requested(from.time_last_requested());
    }
    if (from.has_first_day_cached()) {
      set_first_day_cached(from.first_day_cached());
    }
    if (from.has_days_cached()) {
      set_days_cached(from.days_cached());
    }
  }
}

void CMsgClientUGSGetGlobalStats::CopyFrom(const CMsgClientUGSGetGlobalStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUGSGetGlobalStats::IsInitialized() const {

  return true;
}

void CMsgClientUGSGetGlobalStats::Swap(CMsgClientUGSGetGlobalStats* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(history_days_requested_, other->history_days_requested_);
    std::swap(time_last_requested_, other->time_last_requested_);
    std::swap(first_day_cached_, other->first_day_cached_);
    std::swap(days_cached_, other->days_cached_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUGSGetGlobalStats::GetTypeName() const {
  return "Sc.CMsgClientUGSGetGlobalStats";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUGSGetGlobalStatsResponse_Day_Stat::kStatIdFieldNumber;
const int CMsgClientUGSGetGlobalStatsResponse_Day_Stat::kDataFieldNumber;
#endif  // !_MSC_VER

CMsgClientUGSGetGlobalStatsResponse_Day_Stat::CMsgClientUGSGetGlobalStatsResponse_Day_Stat()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUGSGetGlobalStatsResponse_Day_Stat::InitAsDefaultInstance() {
}

CMsgClientUGSGetGlobalStatsResponse_Day_Stat::CMsgClientUGSGetGlobalStatsResponse_Day_Stat(const CMsgClientUGSGetGlobalStatsResponse_Day_Stat& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUGSGetGlobalStatsResponse_Day_Stat::SharedCtor() {
  _cached_size_ = 0;
  stat_id_ = 0;
  data_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUGSGetGlobalStatsResponse_Day_Stat::~CMsgClientUGSGetGlobalStatsResponse_Day_Stat() {
  SharedDtor();
}

void CMsgClientUGSGetGlobalStatsResponse_Day_Stat::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUGSGetGlobalStatsResponse_Day_Stat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUGSGetGlobalStatsResponse_Day_Stat& CMsgClientUGSGetGlobalStatsResponse_Day_Stat::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUGSGetGlobalStatsResponse_Day_Stat* CMsgClientUGSGetGlobalStatsResponse_Day_Stat::default_instance_ = NULL;

CMsgClientUGSGetGlobalStatsResponse_Day_Stat* CMsgClientUGSGetGlobalStatsResponse_Day_Stat::New() const {
  return new CMsgClientUGSGetGlobalStatsResponse_Day_Stat;
}

void CMsgClientUGSGetGlobalStatsResponse_Day_Stat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stat_id_ = 0;
    data_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUGSGetGlobalStatsResponse_Day_Stat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 stat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stat_id_)));
          set_has_stat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_data;
        break;
      }

      // optional int64 data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &data_)));
          set_has_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUGSGetGlobalStatsResponse_Day_Stat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 stat_id = 1;
  if (has_stat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->stat_id(), output);
  }

  // optional int64 data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->data(), output);
  }

}

int CMsgClientUGSGetGlobalStatsResponse_Day_Stat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 stat_id = 1;
    if (has_stat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stat_id());
    }

    // optional int64 data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->data());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUGSGetGlobalStatsResponse_Day_Stat::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUGSGetGlobalStatsResponse_Day_Stat*>(&from));
}

void CMsgClientUGSGetGlobalStatsResponse_Day_Stat::MergeFrom(const CMsgClientUGSGetGlobalStatsResponse_Day_Stat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stat_id()) {
      set_stat_id(from.stat_id());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
}

void CMsgClientUGSGetGlobalStatsResponse_Day_Stat::CopyFrom(const CMsgClientUGSGetGlobalStatsResponse_Day_Stat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUGSGetGlobalStatsResponse_Day_Stat::IsInitialized() const {

  return true;
}

void CMsgClientUGSGetGlobalStatsResponse_Day_Stat::Swap(CMsgClientUGSGetGlobalStatsResponse_Day_Stat* other) {
  if (other != this) {
    std::swap(stat_id_, other->stat_id_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUGSGetGlobalStatsResponse_Day_Stat::GetTypeName() const {
  return "Sc.CMsgClientUGSGetGlobalStatsResponse.Day.Stat";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientUGSGetGlobalStatsResponse_Day::kDayIdFieldNumber;
const int CMsgClientUGSGetGlobalStatsResponse_Day::kStatsFieldNumber;
#endif  // !_MSC_VER

CMsgClientUGSGetGlobalStatsResponse_Day::CMsgClientUGSGetGlobalStatsResponse_Day()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUGSGetGlobalStatsResponse_Day::InitAsDefaultInstance() {
}

CMsgClientUGSGetGlobalStatsResponse_Day::CMsgClientUGSGetGlobalStatsResponse_Day(const CMsgClientUGSGetGlobalStatsResponse_Day& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUGSGetGlobalStatsResponse_Day::SharedCtor() {
  _cached_size_ = 0;
  day_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUGSGetGlobalStatsResponse_Day::~CMsgClientUGSGetGlobalStatsResponse_Day() {
  SharedDtor();
}

void CMsgClientUGSGetGlobalStatsResponse_Day::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUGSGetGlobalStatsResponse_Day::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUGSGetGlobalStatsResponse_Day& CMsgClientUGSGetGlobalStatsResponse_Day::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUGSGetGlobalStatsResponse_Day* CMsgClientUGSGetGlobalStatsResponse_Day::default_instance_ = NULL;

CMsgClientUGSGetGlobalStatsResponse_Day* CMsgClientUGSGetGlobalStatsResponse_Day::New() const {
  return new CMsgClientUGSGetGlobalStatsResponse_Day;
}

void CMsgClientUGSGetGlobalStatsResponse_Day::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    day_id_ = 0u;
  }
  stats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUGSGetGlobalStatsResponse_Day::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 day_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_id_)));
          set_has_day_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stats;
        break;
      }

      // repeated .Sc.CMsgClientUGSGetGlobalStatsResponse.Day.Stat stats = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stats;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUGSGetGlobalStatsResponse_Day::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 day_id = 1;
  if (has_day_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->day_id(), output);
  }

  // repeated .Sc.CMsgClientUGSGetGlobalStatsResponse.Day.Stat stats = 2;
  for (int i = 0; i < this->stats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->stats(i), output);
  }

}

int CMsgClientUGSGetGlobalStatsResponse_Day::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 day_id = 1;
    if (has_day_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day_id());
    }

  }
  // repeated .Sc.CMsgClientUGSGetGlobalStatsResponse.Day.Stat stats = 2;
  total_size += 1 * this->stats_size();
  for (int i = 0; i < this->stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stats(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUGSGetGlobalStatsResponse_Day::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUGSGetGlobalStatsResponse_Day*>(&from));
}

void CMsgClientUGSGetGlobalStatsResponse_Day::MergeFrom(const CMsgClientUGSGetGlobalStatsResponse_Day& from) {
  GOOGLE_CHECK_NE(&from, this);
  stats_.MergeFrom(from.stats_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_day_id()) {
      set_day_id(from.day_id());
    }
  }
}

void CMsgClientUGSGetGlobalStatsResponse_Day::CopyFrom(const CMsgClientUGSGetGlobalStatsResponse_Day& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUGSGetGlobalStatsResponse_Day::IsInitialized() const {

  return true;
}

void CMsgClientUGSGetGlobalStatsResponse_Day::Swap(CMsgClientUGSGetGlobalStatsResponse_Day* other) {
  if (other != this) {
    std::swap(day_id_, other->day_id_);
    stats_.Swap(&other->stats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUGSGetGlobalStatsResponse_Day::GetTypeName() const {
  return "Sc.CMsgClientUGSGetGlobalStatsResponse.Day";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientUGSGetGlobalStatsResponse::kEresultFieldNumber;
const int CMsgClientUGSGetGlobalStatsResponse::kTimestampFieldNumber;
const int CMsgClientUGSGetGlobalStatsResponse::kDayCurrentFieldNumber;
const int CMsgClientUGSGetGlobalStatsResponse::kDaysFieldNumber;
#endif  // !_MSC_VER

CMsgClientUGSGetGlobalStatsResponse::CMsgClientUGSGetGlobalStatsResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUGSGetGlobalStatsResponse::InitAsDefaultInstance() {
}

CMsgClientUGSGetGlobalStatsResponse::CMsgClientUGSGetGlobalStatsResponse(const CMsgClientUGSGetGlobalStatsResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUGSGetGlobalStatsResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  timestamp_ = 0u;
  day_current_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUGSGetGlobalStatsResponse::~CMsgClientUGSGetGlobalStatsResponse() {
  SharedDtor();
}

void CMsgClientUGSGetGlobalStatsResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUGSGetGlobalStatsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUGSGetGlobalStatsResponse& CMsgClientUGSGetGlobalStatsResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUGSGetGlobalStatsResponse* CMsgClientUGSGetGlobalStatsResponse::default_instance_ = NULL;

CMsgClientUGSGetGlobalStatsResponse* CMsgClientUGSGetGlobalStatsResponse::New() const {
  return new CMsgClientUGSGetGlobalStatsResponse;
}

void CMsgClientUGSGetGlobalStatsResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    timestamp_ = 0u;
    day_current_ = 0;
  }
  days_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUGSGetGlobalStatsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_timestamp;
        break;
      }

      // optional fixed32 timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_day_current;
        break;
      }

      // optional int32 day_current = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_day_current:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_current_)));
          set_has_day_current();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_days;
        break;
      }

      // repeated .Sc.CMsgClientUGSGetGlobalStatsResponse.Day days = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_days:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_days()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_days;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUGSGetGlobalStatsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional fixed32 timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->timestamp(), output);
  }

  // optional int32 day_current = 3;
  if (has_day_current()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->day_current(), output);
  }

  // repeated .Sc.CMsgClientUGSGetGlobalStatsResponse.Day days = 4;
  for (int i = 0; i < this->days_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->days(i), output);
  }

}

int CMsgClientUGSGetGlobalStatsResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional fixed32 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 + 4;
    }

    // optional int32 day_current = 3;
    if (has_day_current()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day_current());
    }

  }
  // repeated .Sc.CMsgClientUGSGetGlobalStatsResponse.Day days = 4;
  total_size += 1 * this->days_size();
  for (int i = 0; i < this->days_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->days(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUGSGetGlobalStatsResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUGSGetGlobalStatsResponse*>(&from));
}

void CMsgClientUGSGetGlobalStatsResponse::MergeFrom(const CMsgClientUGSGetGlobalStatsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  days_.MergeFrom(from.days_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_day_current()) {
      set_day_current(from.day_current());
    }
  }
}

void CMsgClientUGSGetGlobalStatsResponse::CopyFrom(const CMsgClientUGSGetGlobalStatsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUGSGetGlobalStatsResponse::IsInitialized() const {

  return true;
}

void CMsgClientUGSGetGlobalStatsResponse::Swap(CMsgClientUGSGetGlobalStatsResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(day_current_, other->day_current_);
    days_.Swap(&other->days_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUGSGetGlobalStatsResponse::GetTypeName() const {
  return "Sc.CMsgClientUGSGetGlobalStatsResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGameServerData_Player::kSteamIdFieldNumber;
#endif  // !_MSC_VER

CMsgGameServerData_Player::CMsgGameServerData_Player()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgGameServerData_Player::InitAsDefaultInstance() {
}

CMsgGameServerData_Player::CMsgGameServerData_Player(const CMsgGameServerData_Player& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGameServerData_Player::SharedCtor() {
  _cached_size_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGameServerData_Player::~CMsgGameServerData_Player() {
  SharedDtor();
}

void CMsgGameServerData_Player::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgGameServerData_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgGameServerData_Player& CMsgGameServerData_Player::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgGameServerData_Player* CMsgGameServerData_Player::default_instance_ = NULL;

CMsgGameServerData_Player* CMsgGameServerData_Player::New() const {
  return new CMsgGameServerData_Player;
}

void CMsgGameServerData_Player::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgGameServerData_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          set_has_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGameServerData_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

}

int CMsgGameServerData_Player::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameServerData_Player::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgGameServerData_Player*>(&from));
}

void CMsgGameServerData_Player::MergeFrom(const CMsgGameServerData_Player& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
  }
}

void CMsgGameServerData_Player::CopyFrom(const CMsgGameServerData_Player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerData_Player::IsInitialized() const {

  return true;
}

void CMsgGameServerData_Player::Swap(CMsgGameServerData_Player* other) {
  if (other != this) {
    std::swap(steam_id_, other->steam_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgGameServerData_Player::GetTypeName() const {
  return "Sc.CMsgGameServerData.Player";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgGameServerData::kSteamIdGsFieldNumber;
const int CMsgGameServerData::kIpFieldNumber;
const int CMsgGameServerData::kQueryPortFieldNumber;
const int CMsgGameServerData::kGamePortFieldNumber;
const int CMsgGameServerData::kSourcetvPortFieldNumber;
const int CMsgGameServerData::kNameFieldNumber;
const int CMsgGameServerData::kAppIdFieldNumber;
const int CMsgGameServerData::kGamedirFieldNumber;
const int CMsgGameServerData::kVersionFieldNumber;
const int CMsgGameServerData::kProductFieldNumber;
const int CMsgGameServerData::kRegionFieldNumber;
const int CMsgGameServerData::kPlayersFieldNumber;
const int CMsgGameServerData::kMaxPlayersFieldNumber;
const int CMsgGameServerData::kBotCountFieldNumber;
const int CMsgGameServerData::kPasswordFieldNumber;
const int CMsgGameServerData::kSecureFieldNumber;
const int CMsgGameServerData::kDedicatedFieldNumber;
const int CMsgGameServerData::kOsFieldNumber;
const int CMsgGameServerData::kGameDataFieldNumber;
const int CMsgGameServerData::kGameDataVersionFieldNumber;
const int CMsgGameServerData::kGameTypeFieldNumber;
const int CMsgGameServerData::kMapFieldNumber;
#endif  // !_MSC_VER

CMsgGameServerData::CMsgGameServerData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgGameServerData::InitAsDefaultInstance() {
}

CMsgGameServerData::CMsgGameServerData(const CMsgGameServerData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGameServerData::SharedCtor() {
  _cached_size_ = 0;
  steam_id_gs_ = GOOGLE_ULONGLONG(0);
  ip_ = 0u;
  query_port_ = 0u;
  game_port_ = 0u;
  sourcetv_port_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  app_id_ = 0u;
  gamedir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  product_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  region_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  max_players_ = 0u;
  bot_count_ = 0u;
  password_ = false;
  secure_ = false;
  dedicated_ = false;
  os_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  game_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  game_data_version_ = 0u;
  game_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  map_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGameServerData::~CMsgGameServerData() {
  SharedDtor();
}

void CMsgGameServerData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (gamedir_ != &::google::protobuf::internal::kEmptyString) {
    delete gamedir_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (product_ != &::google::protobuf::internal::kEmptyString) {
    delete product_;
  }
  if (region_ != &::google::protobuf::internal::kEmptyString) {
    delete region_;
  }
  if (os_ != &::google::protobuf::internal::kEmptyString) {
    delete os_;
  }
  if (game_data_ != &::google::protobuf::internal::kEmptyString) {
    delete game_data_;
  }
  if (game_type_ != &::google::protobuf::internal::kEmptyString) {
    delete game_type_;
  }
  if (map_ != &::google::protobuf::internal::kEmptyString) {
    delete map_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgGameServerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgGameServerData& CMsgGameServerData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgGameServerData* CMsgGameServerData::default_instance_ = NULL;

CMsgGameServerData* CMsgGameServerData::New() const {
  return new CMsgGameServerData;
}

void CMsgGameServerData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_gs_ = GOOGLE_ULONGLONG(0);
    ip_ = 0u;
    query_port_ = 0u;
    game_port_ = 0u;
    sourcetv_port_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    app_id_ = 0u;
    if (has_gamedir()) {
      if (gamedir_ != &::google::protobuf::internal::kEmptyString) {
        gamedir_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    if (has_product()) {
      if (product_ != &::google::protobuf::internal::kEmptyString) {
        product_->clear();
      }
    }
    if (has_region()) {
      if (region_ != &::google::protobuf::internal::kEmptyString) {
        region_->clear();
      }
    }
    max_players_ = 0u;
    bot_count_ = 0u;
    password_ = false;
    secure_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    dedicated_ = false;
    if (has_os()) {
      if (os_ != &::google::protobuf::internal::kEmptyString) {
        os_->clear();
      }
    }
    if (has_game_data()) {
      if (game_data_ != &::google::protobuf::internal::kEmptyString) {
        game_data_->clear();
      }
    }
    game_data_version_ = 0u;
    if (has_game_type()) {
      if (game_type_ != &::google::protobuf::internal::kEmptyString) {
        game_type_->clear();
      }
    }
    if (has_map()) {
      if (map_ != &::google::protobuf::internal::kEmptyString) {
        map_->clear();
      }
    }
  }
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgGameServerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id_gs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_gs_)));
          set_has_steam_id_gs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ip;
        break;
      }

      // optional uint32 ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_query_port;
        break;
      }

      // optional uint32 query_port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_query_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &query_port_)));
          set_has_query_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_game_port;
        break;
      }

      // optional uint32 game_port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_port_)));
          set_has_game_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sourcetv_port;
        break;
      }

      // optional uint32 sourcetv_port = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sourcetv_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sourcetv_port_)));
          set_has_sourcetv_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_app_id;
        break;
      }

      // optional uint32 app_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_app_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_gamedir;
        break;
      }

      // optional string gamedir = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gamedir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamedir()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_version;
        break;
      }

      // optional string version = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_product;
        break;
      }

      // optional string product = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_product:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_region;
        break;
      }

      // optional string region = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_region()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_players;
        break;
      }

      // repeated .Sc.CMsgGameServerData.Player players = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_players;
        if (input->ExpectTag(96)) goto parse_max_players;
        break;
      }

      // optional uint32 max_players = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_players:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_players_)));
          set_has_max_players();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_bot_count;
        break;
      }

      // optional uint32 bot_count = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bot_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bot_count_)));
          set_has_bot_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_password;
        break;
      }

      // optional bool password = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_password:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &password_)));
          set_has_password();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_secure;
        break;
      }

      // optional bool secure = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_secure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &secure_)));
          set_has_secure();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_dedicated;
        break;
      }

      // optional bool dedicated = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dedicated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dedicated_)));
          set_has_dedicated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_os;
        break;
      }

      // optional string os = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_os:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_game_data;
        break;
      }

      // optional string game_data = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_game_data_version;
        break;
      }

      // optional uint32 game_data_version = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_data_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_data_version_)));
          set_has_game_data_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_game_type;
        break;
      }

      // optional string game_type = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_map;
        break;
      }

      // optional string map = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_name;
        break;
      }

      // optional string name = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGameServerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steam_id_gs = 1;
  if (has_steam_id_gs()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id_gs(), output);
  }

  // optional uint32 ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ip(), output);
  }

  // optional uint32 query_port = 3;
  if (has_query_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->query_port(), output);
  }

  // optional uint32 game_port = 4;
  if (has_game_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_port(), output);
  }

  // optional uint32 sourcetv_port = 5;
  if (has_sourcetv_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sourcetv_port(), output);
  }

  // optional uint32 app_id = 6;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->app_id(), output);
  }

  // optional string gamedir = 7;
  if (has_gamedir()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->gamedir(), output);
  }

  // optional string version = 8;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->version(), output);
  }

  // optional string product = 9;
  if (has_product()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->product(), output);
  }

  // optional string region = 10;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->region(), output);
  }

  // repeated .Sc.CMsgGameServerData.Player players = 11;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->players(i), output);
  }

  // optional uint32 max_players = 12;
  if (has_max_players()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->max_players(), output);
  }

  // optional uint32 bot_count = 13;
  if (has_bot_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->bot_count(), output);
  }

  // optional bool password = 14;
  if (has_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->password(), output);
  }

  // optional bool secure = 15;
  if (has_secure()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->secure(), output);
  }

  // optional bool dedicated = 16;
  if (has_dedicated()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->dedicated(), output);
  }

  // optional string os = 17;
  if (has_os()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->os(), output);
  }

  // optional string game_data = 18;
  if (has_game_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->game_data(), output);
  }

  // optional uint32 game_data_version = 19;
  if (has_game_data_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->game_data_version(), output);
  }

  // optional string game_type = 20;
  if (has_game_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->game_type(), output);
  }

  // optional string map = 21;
  if (has_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->map(), output);
  }

  // optional string name = 22;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->name(), output);
  }

}

int CMsgGameServerData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id_gs = 1;
    if (has_steam_id_gs()) {
      total_size += 1 + 8;
    }

    // optional uint32 ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip());
    }

    // optional uint32 query_port = 3;
    if (has_query_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->query_port());
    }

    // optional uint32 game_port = 4;
    if (has_game_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_port());
    }

    // optional uint32 sourcetv_port = 5;
    if (has_sourcetv_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sourcetv_port());
    }

    // optional string name = 22;
    if (has_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 app_id = 6;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional string gamedir = 7;
    if (has_gamedir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gamedir());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string version = 8;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional string product = 9;
    if (has_product()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->product());
    }

    // optional string region = 10;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->region());
    }

    // optional uint32 max_players = 12;
    if (has_max_players()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_players());
    }

    // optional uint32 bot_count = 13;
    if (has_bot_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bot_count());
    }

    // optional bool password = 14;
    if (has_password()) {
      total_size += 1 + 1;
    }

    // optional bool secure = 15;
    if (has_secure()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool dedicated = 16;
    if (has_dedicated()) {
      total_size += 2 + 1;
    }

    // optional string os = 17;
    if (has_os()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os());
    }

    // optional string game_data = 18;
    if (has_game_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_data());
    }

    // optional uint32 game_data_version = 19;
    if (has_game_data_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_data_version());
    }

    // optional string game_type = 20;
    if (has_game_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_type());
    }

    // optional string map = 21;
    if (has_map()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map());
    }

  }
  // repeated .Sc.CMsgGameServerData.Player players = 11;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameServerData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgGameServerData*>(&from));
}

void CMsgGameServerData::MergeFrom(const CMsgGameServerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id_gs()) {
      set_steam_id_gs(from.steam_id_gs());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_query_port()) {
      set_query_port(from.query_port());
    }
    if (from.has_game_port()) {
      set_game_port(from.game_port());
    }
    if (from.has_sourcetv_port()) {
      set_sourcetv_port(from.sourcetv_port());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_gamedir()) {
      set_gamedir(from.gamedir());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_product()) {
      set_product(from.product());
    }
    if (from.has_region()) {
      set_region(from.region());
    }
    if (from.has_max_players()) {
      set_max_players(from.max_players());
    }
    if (from.has_bot_count()) {
      set_bot_count(from.bot_count());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_secure()) {
      set_secure(from.secure());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_dedicated()) {
      set_dedicated(from.dedicated());
    }
    if (from.has_os()) {
      set_os(from.os());
    }
    if (from.has_game_data()) {
      set_game_data(from.game_data());
    }
    if (from.has_game_data_version()) {
      set_game_data_version(from.game_data_version());
    }
    if (from.has_game_type()) {
      set_game_type(from.game_type());
    }
    if (from.has_map()) {
      set_map(from.map());
    }
  }
}

void CMsgGameServerData::CopyFrom(const CMsgGameServerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerData::IsInitialized() const {

  return true;
}

void CMsgGameServerData::Swap(CMsgGameServerData* other) {
  if (other != this) {
    std::swap(steam_id_gs_, other->steam_id_gs_);
    std::swap(ip_, other->ip_);
    std::swap(query_port_, other->query_port_);
    std::swap(game_port_, other->game_port_);
    std::swap(sourcetv_port_, other->sourcetv_port_);
    std::swap(name_, other->name_);
    std::swap(app_id_, other->app_id_);
    std::swap(gamedir_, other->gamedir_);
    std::swap(version_, other->version_);
    std::swap(product_, other->product_);
    std::swap(region_, other->region_);
    players_.Swap(&other->players_);
    std::swap(max_players_, other->max_players_);
    std::swap(bot_count_, other->bot_count_);
    std::swap(password_, other->password_);
    std::swap(secure_, other->secure_);
    std::swap(dedicated_, other->dedicated_);
    std::swap(os_, other->os_);
    std::swap(game_data_, other->game_data_);
    std::swap(game_data_version_, other->game_data_version_);
    std::swap(game_type_, other->game_type_);
    std::swap(map_, other->map_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgGameServerData::GetTypeName() const {
  return "Sc.CMsgGameServerData";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGameServerRemove::kSteamIdFieldNumber;
const int CMsgGameServerRemove::kIpFieldNumber;
const int CMsgGameServerRemove::kQueryPortFieldNumber;
#endif  // !_MSC_VER

CMsgGameServerRemove::CMsgGameServerRemove()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgGameServerRemove::InitAsDefaultInstance() {
}

CMsgGameServerRemove::CMsgGameServerRemove(const CMsgGameServerRemove& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGameServerRemove::SharedCtor() {
  _cached_size_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
  ip_ = 0u;
  query_port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGameServerRemove::~CMsgGameServerRemove() {
  SharedDtor();
}

void CMsgGameServerRemove::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgGameServerRemove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgGameServerRemove& CMsgGameServerRemove::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgGameServerRemove* CMsgGameServerRemove::default_instance_ = NULL;

CMsgGameServerRemove* CMsgGameServerRemove::New() const {
  return new CMsgGameServerRemove;
}

void CMsgGameServerRemove::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_ = GOOGLE_ULONGLONG(0);
    ip_ = 0u;
    query_port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgGameServerRemove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          set_has_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ip;
        break;
      }

      // optional uint32 ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_query_port;
        break;
      }

      // optional uint32 query_port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_query_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &query_port_)));
          set_has_query_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGameServerRemove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional uint32 ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ip(), output);
  }

  // optional uint32 query_port = 3;
  if (has_query_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->query_port(), output);
  }

}

int CMsgGameServerRemove::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip());
    }

    // optional uint32 query_port = 3;
    if (has_query_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->query_port());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameServerRemove::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgGameServerRemove*>(&from));
}

void CMsgGameServerRemove::MergeFrom(const CMsgGameServerRemove& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_query_port()) {
      set_query_port(from.query_port());
    }
  }
}

void CMsgGameServerRemove::CopyFrom(const CMsgGameServerRemove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerRemove::IsInitialized() const {

  return true;
}

void CMsgGameServerRemove::Swap(CMsgGameServerRemove* other) {
  if (other != this) {
    std::swap(steam_id_, other->steam_id_);
    std::swap(ip_, other->ip_);
    std::swap(query_port_, other->query_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgGameServerRemove::GetTypeName() const {
  return "Sc.CMsgGameServerRemove";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientGMSServerQuery::kAppIdFieldNumber;
const int CMsgClientGMSServerQuery::kGeoLocationIpFieldNumber;
const int CMsgClientGMSServerQuery::kRegionCodeFieldNumber;
const int CMsgClientGMSServerQuery::kFilterTextFieldNumber;
const int CMsgClientGMSServerQuery::kMaxServersFieldNumber;
#endif  // !_MSC_VER

CMsgClientGMSServerQuery::CMsgClientGMSServerQuery()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientGMSServerQuery::InitAsDefaultInstance() {
}

CMsgClientGMSServerQuery::CMsgClientGMSServerQuery(const CMsgClientGMSServerQuery& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientGMSServerQuery::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  geo_location_ip_ = 0u;
  region_code_ = 0u;
  filter_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  max_servers_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientGMSServerQuery::~CMsgClientGMSServerQuery() {
  SharedDtor();
}

void CMsgClientGMSServerQuery::SharedDtor() {
  if (filter_text_ != &::google::protobuf::internal::kEmptyString) {
    delete filter_text_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientGMSServerQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientGMSServerQuery& CMsgClientGMSServerQuery::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientGMSServerQuery* CMsgClientGMSServerQuery::default_instance_ = NULL;

CMsgClientGMSServerQuery* CMsgClientGMSServerQuery::New() const {
  return new CMsgClientGMSServerQuery;
}

void CMsgClientGMSServerQuery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    geo_location_ip_ = 0u;
    region_code_ = 0u;
    if (has_filter_text()) {
      if (filter_text_ != &::google::protobuf::internal::kEmptyString) {
        filter_text_->clear();
      }
    }
    max_servers_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientGMSServerQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_geo_location_ip;
        break;
      }

      // optional uint32 geo_location_ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_geo_location_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &geo_location_ip_)));
          set_has_geo_location_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_region_code;
        break;
      }

      // optional uint32 region_code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_region_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_code_)));
          set_has_region_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_filter_text;
        break;
      }

      // optional string filter_text = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filter_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_max_servers;
        break;
      }

      // optional uint32 max_servers = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_servers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_servers_)));
          set_has_max_servers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientGMSServerQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional uint32 geo_location_ip = 2;
  if (has_geo_location_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->geo_location_ip(), output);
  }

  // optional uint32 region_code = 3;
  if (has_region_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->region_code(), output);
  }

  // optional string filter_text = 4;
  if (has_filter_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->filter_text(), output);
  }

  // optional uint32 max_servers = 5;
  if (has_max_servers()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->max_servers(), output);
  }

}

int CMsgClientGMSServerQuery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 geo_location_ip = 2;
    if (has_geo_location_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->geo_location_ip());
    }

    // optional uint32 region_code = 3;
    if (has_region_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->region_code());
    }

    // optional string filter_text = 4;
    if (has_filter_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filter_text());
    }

    // optional uint32 max_servers = 5;
    if (has_max_servers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_servers());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGMSServerQuery::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientGMSServerQuery*>(&from));
}

void CMsgClientGMSServerQuery::MergeFrom(const CMsgClientGMSServerQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_geo_location_ip()) {
      set_geo_location_ip(from.geo_location_ip());
    }
    if (from.has_region_code()) {
      set_region_code(from.region_code());
    }
    if (from.has_filter_text()) {
      set_filter_text(from.filter_text());
    }
    if (from.has_max_servers()) {
      set_max_servers(from.max_servers());
    }
  }
}

void CMsgClientGMSServerQuery::CopyFrom(const CMsgClientGMSServerQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGMSServerQuery::IsInitialized() const {

  return true;
}

void CMsgClientGMSServerQuery::Swap(CMsgClientGMSServerQuery* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(geo_location_ip_, other->geo_location_ip_);
    std::swap(region_code_, other->region_code_);
    std::swap(filter_text_, other->filter_text_);
    std::swap(max_servers_, other->max_servers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientGMSServerQuery::GetTypeName() const {
  return "Sc.CMsgClientGMSServerQuery";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGMSClientServerQueryResponse_Server::kServerIpFieldNumber;
const int CMsgGMSClientServerQueryResponse_Server::kServerPortFieldNumber;
const int CMsgGMSClientServerQueryResponse_Server::kAuthPlayersFieldNumber;
#endif  // !_MSC_VER

CMsgGMSClientServerQueryResponse_Server::CMsgGMSClientServerQueryResponse_Server()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgGMSClientServerQueryResponse_Server::InitAsDefaultInstance() {
}

CMsgGMSClientServerQueryResponse_Server::CMsgGMSClientServerQueryResponse_Server(const CMsgGMSClientServerQueryResponse_Server& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGMSClientServerQueryResponse_Server::SharedCtor() {
  _cached_size_ = 0;
  server_ip_ = 0u;
  server_port_ = 0u;
  auth_players_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGMSClientServerQueryResponse_Server::~CMsgGMSClientServerQueryResponse_Server() {
  SharedDtor();
}

void CMsgGMSClientServerQueryResponse_Server::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgGMSClientServerQueryResponse_Server::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgGMSClientServerQueryResponse_Server& CMsgGMSClientServerQueryResponse_Server::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgGMSClientServerQueryResponse_Server* CMsgGMSClientServerQueryResponse_Server::default_instance_ = NULL;

CMsgGMSClientServerQueryResponse_Server* CMsgGMSClientServerQueryResponse_Server::New() const {
  return new CMsgGMSClientServerQueryResponse_Server;
}

void CMsgGMSClientServerQueryResponse_Server::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_ip_ = 0u;
    server_port_ = 0u;
    auth_players_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgGMSClientServerQueryResponse_Server::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_ip_)));
          set_has_server_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_port;
        break;
      }

      // optional uint32 server_port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_port_)));
          set_has_server_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_auth_players;
        break;
      }

      // optional uint32 auth_players = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auth_players:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &auth_players_)));
          set_has_auth_players();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGMSClientServerQueryResponse_Server::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 server_ip = 1;
  if (has_server_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_ip(), output);
  }

  // optional uint32 server_port = 2;
  if (has_server_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_port(), output);
  }

  // optional uint32 auth_players = 3;
  if (has_auth_players()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->auth_players(), output);
  }

}

int CMsgGMSClientServerQueryResponse_Server::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 server_ip = 1;
    if (has_server_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_ip());
    }

    // optional uint32 server_port = 2;
    if (has_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_port());
    }

    // optional uint32 auth_players = 3;
    if (has_auth_players()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->auth_players());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGMSClientServerQueryResponse_Server::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgGMSClientServerQueryResponse_Server*>(&from));
}

void CMsgGMSClientServerQueryResponse_Server::MergeFrom(const CMsgGMSClientServerQueryResponse_Server& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_ip()) {
      set_server_ip(from.server_ip());
    }
    if (from.has_server_port()) {
      set_server_port(from.server_port());
    }
    if (from.has_auth_players()) {
      set_auth_players(from.auth_players());
    }
  }
}

void CMsgGMSClientServerQueryResponse_Server::CopyFrom(const CMsgGMSClientServerQueryResponse_Server& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGMSClientServerQueryResponse_Server::IsInitialized() const {

  return true;
}

void CMsgGMSClientServerQueryResponse_Server::Swap(CMsgGMSClientServerQueryResponse_Server* other) {
  if (other != this) {
    std::swap(server_ip_, other->server_ip_);
    std::swap(server_port_, other->server_port_);
    std::swap(auth_players_, other->auth_players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgGMSClientServerQueryResponse_Server::GetTypeName() const {
  return "Sc.CMsgGMSClientServerQueryResponse.Server";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgGMSClientServerQueryResponse::kServersFieldNumber;
const int CMsgGMSClientServerQueryResponse::kErrorFieldNumber;
#endif  // !_MSC_VER

CMsgGMSClientServerQueryResponse::CMsgGMSClientServerQueryResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgGMSClientServerQueryResponse::InitAsDefaultInstance() {
}

CMsgGMSClientServerQueryResponse::CMsgGMSClientServerQueryResponse(const CMsgGMSClientServerQueryResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGMSClientServerQueryResponse::SharedCtor() {
  _cached_size_ = 0;
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGMSClientServerQueryResponse::~CMsgGMSClientServerQueryResponse() {
  SharedDtor();
}

void CMsgGMSClientServerQueryResponse::SharedDtor() {
  if (error_ != &::google::protobuf::internal::kEmptyString) {
    delete error_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgGMSClientServerQueryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgGMSClientServerQueryResponse& CMsgGMSClientServerQueryResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgGMSClientServerQueryResponse* CMsgGMSClientServerQueryResponse::default_instance_ = NULL;

CMsgGMSClientServerQueryResponse* CMsgGMSClientServerQueryResponse::New() const {
  return new CMsgGMSClientServerQueryResponse;
}

void CMsgGMSClientServerQueryResponse::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_error()) {
      if (error_ != &::google::protobuf::internal::kEmptyString) {
        error_->clear();
      }
    }
  }
  servers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgGMSClientServerQueryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Sc.CMsgGMSClientServerQueryResponse.Server servers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_servers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_servers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_servers;
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional string error = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGMSClientServerQueryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Sc.CMsgGMSClientServerQueryResponse.Server servers = 1;
  for (int i = 0; i < this->servers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->servers(i), output);
  }

  // optional string error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->error(), output);
  }

}

int CMsgGMSClientServerQueryResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }

  }
  // repeated .Sc.CMsgGMSClientServerQueryResponse.Server servers = 1;
  total_size += 1 * this->servers_size();
  for (int i = 0; i < this->servers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->servers(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGMSClientServerQueryResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgGMSClientServerQueryResponse*>(&from));
}

void CMsgGMSClientServerQueryResponse::MergeFrom(const CMsgGMSClientServerQueryResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  servers_.MergeFrom(from.servers_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
  }
}

void CMsgGMSClientServerQueryResponse::CopyFrom(const CMsgGMSClientServerQueryResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGMSClientServerQueryResponse::IsInitialized() const {

  return true;
}

void CMsgGMSClientServerQueryResponse::Swap(CMsgGMSClientServerQueryResponse* other) {
  if (other != this) {
    servers_.Swap(&other->servers_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgGMSClientServerQueryResponse::GetTypeName() const {
  return "Sc.CMsgGMSClientServerQueryResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGameServerOutOfDate::kSteamIdGsFieldNumber;
const int CMsgGameServerOutOfDate::kRejectFieldNumber;
const int CMsgGameServerOutOfDate::kMessageFieldNumber;
#endif  // !_MSC_VER

CMsgGameServerOutOfDate::CMsgGameServerOutOfDate()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgGameServerOutOfDate::InitAsDefaultInstance() {
}

CMsgGameServerOutOfDate::CMsgGameServerOutOfDate(const CMsgGameServerOutOfDate& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGameServerOutOfDate::SharedCtor() {
  _cached_size_ = 0;
  steam_id_gs_ = GOOGLE_ULONGLONG(0);
  reject_ = false;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGameServerOutOfDate::~CMsgGameServerOutOfDate() {
  SharedDtor();
}

void CMsgGameServerOutOfDate::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgGameServerOutOfDate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgGameServerOutOfDate& CMsgGameServerOutOfDate::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgGameServerOutOfDate* CMsgGameServerOutOfDate::default_instance_ = NULL;

CMsgGameServerOutOfDate* CMsgGameServerOutOfDate::New() const {
  return new CMsgGameServerOutOfDate;
}

void CMsgGameServerOutOfDate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_gs_ = GOOGLE_ULONGLONG(0);
    reject_ = false;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgGameServerOutOfDate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id_gs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_gs_)));
          set_has_steam_id_gs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reject;
        break;
      }

      // optional bool reject = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reject:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reject_)));
          set_has_reject();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_message;
        break;
      }

      // optional string message = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGameServerOutOfDate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steam_id_gs = 1;
  if (has_steam_id_gs()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id_gs(), output);
  }

  // optional bool reject = 2;
  if (has_reject()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->reject(), output);
  }

  // optional string message = 3;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->message(), output);
  }

}

int CMsgGameServerOutOfDate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id_gs = 1;
    if (has_steam_id_gs()) {
      total_size += 1 + 8;
    }

    // optional bool reject = 2;
    if (has_reject()) {
      total_size += 1 + 1;
    }

    // optional string message = 3;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameServerOutOfDate::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgGameServerOutOfDate*>(&from));
}

void CMsgGameServerOutOfDate::MergeFrom(const CMsgGameServerOutOfDate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id_gs()) {
      set_steam_id_gs(from.steam_id_gs());
    }
    if (from.has_reject()) {
      set_reject(from.reject());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
}

void CMsgGameServerOutOfDate::CopyFrom(const CMsgGameServerOutOfDate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerOutOfDate::IsInitialized() const {

  return true;
}

void CMsgGameServerOutOfDate::Swap(CMsgGameServerOutOfDate* other) {
  if (other != this) {
    std::swap(steam_id_gs_, other->steam_id_gs_);
    std::swap(reject_, other->reject_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgGameServerOutOfDate::GetTypeName() const {
  return "Sc.CMsgGameServerOutOfDate";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientRedeemGuestPass::kGuestPassIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientRedeemGuestPass::CMsgClientRedeemGuestPass()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientRedeemGuestPass::InitAsDefaultInstance() {
}

CMsgClientRedeemGuestPass::CMsgClientRedeemGuestPass(const CMsgClientRedeemGuestPass& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRedeemGuestPass::SharedCtor() {
  _cached_size_ = 0;
  guest_pass_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRedeemGuestPass::~CMsgClientRedeemGuestPass() {
  SharedDtor();
}

void CMsgClientRedeemGuestPass::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientRedeemGuestPass::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientRedeemGuestPass& CMsgClientRedeemGuestPass::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientRedeemGuestPass* CMsgClientRedeemGuestPass::default_instance_ = NULL;

CMsgClientRedeemGuestPass* CMsgClientRedeemGuestPass::New() const {
  return new CMsgClientRedeemGuestPass;
}

void CMsgClientRedeemGuestPass::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guest_pass_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientRedeemGuestPass::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 guest_pass_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guest_pass_id_)));
          set_has_guest_pass_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientRedeemGuestPass::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 guest_pass_id = 1;
  if (has_guest_pass_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guest_pass_id(), output);
  }

}

int CMsgClientRedeemGuestPass::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 guest_pass_id = 1;
    if (has_guest_pass_id()) {
      total_size += 1 + 8;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRedeemGuestPass::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientRedeemGuestPass*>(&from));
}

void CMsgClientRedeemGuestPass::MergeFrom(const CMsgClientRedeemGuestPass& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guest_pass_id()) {
      set_guest_pass_id(from.guest_pass_id());
    }
  }
}

void CMsgClientRedeemGuestPass::CopyFrom(const CMsgClientRedeemGuestPass& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRedeemGuestPass::IsInitialized() const {

  return true;
}

void CMsgClientRedeemGuestPass::Swap(CMsgClientRedeemGuestPass* other) {
  if (other != this) {
    std::swap(guest_pass_id_, other->guest_pass_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientRedeemGuestPass::GetTypeName() const {
  return "Sc.CMsgClientRedeemGuestPass";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientRedeemGuestPassResponse::kEresultFieldNumber;
const int CMsgClientRedeemGuestPassResponse::kPackageIdFieldNumber;
const int CMsgClientRedeemGuestPassResponse::kMustOwnAppidFieldNumber;
#endif  // !_MSC_VER

CMsgClientRedeemGuestPassResponse::CMsgClientRedeemGuestPassResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientRedeemGuestPassResponse::InitAsDefaultInstance() {
}

CMsgClientRedeemGuestPassResponse::CMsgClientRedeemGuestPassResponse(const CMsgClientRedeemGuestPassResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRedeemGuestPassResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2u;
  package_id_ = 0u;
  must_own_appid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRedeemGuestPassResponse::~CMsgClientRedeemGuestPassResponse() {
  SharedDtor();
}

void CMsgClientRedeemGuestPassResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientRedeemGuestPassResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientRedeemGuestPassResponse& CMsgClientRedeemGuestPassResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientRedeemGuestPassResponse* CMsgClientRedeemGuestPassResponse::default_instance_ = NULL;

CMsgClientRedeemGuestPassResponse* CMsgClientRedeemGuestPassResponse::New() const {
  return new CMsgClientRedeemGuestPassResponse;
}

void CMsgClientRedeemGuestPassResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2u;
    package_id_ = 0u;
    must_own_appid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientRedeemGuestPassResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_package_id;
        break;
      }

      // optional uint32 package_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_package_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &package_id_)));
          set_has_package_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_must_own_appid;
        break;
      }

      // optional uint32 must_own_appid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_must_own_appid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &must_own_appid_)));
          set_has_must_own_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientRedeemGuestPassResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

  // optional uint32 package_id = 2;
  if (has_package_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->package_id(), output);
  }

  // optional uint32 must_own_appid = 3;
  if (has_must_own_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->must_own_appid(), output);
  }

}

int CMsgClientRedeemGuestPassResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

    // optional uint32 package_id = 2;
    if (has_package_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->package_id());
    }

    // optional uint32 must_own_appid = 3;
    if (has_must_own_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->must_own_appid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRedeemGuestPassResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientRedeemGuestPassResponse*>(&from));
}

void CMsgClientRedeemGuestPassResponse::MergeFrom(const CMsgClientRedeemGuestPassResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_package_id()) {
      set_package_id(from.package_id());
    }
    if (from.has_must_own_appid()) {
      set_must_own_appid(from.must_own_appid());
    }
  }
}

void CMsgClientRedeemGuestPassResponse::CopyFrom(const CMsgClientRedeemGuestPassResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRedeemGuestPassResponse::IsInitialized() const {

  return true;
}

void CMsgClientRedeemGuestPassResponse::Swap(CMsgClientRedeemGuestPassResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(package_id_, other->package_id_);
    std::swap(must_own_appid_, other->must_own_appid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientRedeemGuestPassResponse::GetTypeName() const {
  return "Sc.CMsgClientRedeemGuestPassResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientGetClanActivityCounts::kSteamidClansFieldNumber;
#endif  // !_MSC_VER

CMsgClientGetClanActivityCounts::CMsgClientGetClanActivityCounts()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientGetClanActivityCounts::InitAsDefaultInstance() {
}

CMsgClientGetClanActivityCounts::CMsgClientGetClanActivityCounts(const CMsgClientGetClanActivityCounts& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientGetClanActivityCounts::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientGetClanActivityCounts::~CMsgClientGetClanActivityCounts() {
  SharedDtor();
}

void CMsgClientGetClanActivityCounts::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientGetClanActivityCounts::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientGetClanActivityCounts& CMsgClientGetClanActivityCounts::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientGetClanActivityCounts* CMsgClientGetClanActivityCounts::default_instance_ = NULL;

CMsgClientGetClanActivityCounts* CMsgClientGetClanActivityCounts::New() const {
  return new CMsgClientGetClanActivityCounts;
}

void CMsgClientGetClanActivityCounts::Clear() {
  steamid_clans_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientGetClanActivityCounts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 steamid_clans = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_steamid_clans:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_steamid_clans())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_steamid_clans())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_steamid_clans;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientGetClanActivityCounts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 steamid_clans = 1;
  for (int i = 0; i < this->steamid_clans_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->steamid_clans(i), output);
  }

}

int CMsgClientGetClanActivityCounts::ByteSize() const {
  int total_size = 0;

  // repeated uint64 steamid_clans = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->steamid_clans_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->steamid_clans(i));
    }
    total_size += 1 * this->steamid_clans_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGetClanActivityCounts::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientGetClanActivityCounts*>(&from));
}

void CMsgClientGetClanActivityCounts::MergeFrom(const CMsgClientGetClanActivityCounts& from) {
  GOOGLE_CHECK_NE(&from, this);
  steamid_clans_.MergeFrom(from.steamid_clans_);
}

void CMsgClientGetClanActivityCounts::CopyFrom(const CMsgClientGetClanActivityCounts& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetClanActivityCounts::IsInitialized() const {

  return true;
}

void CMsgClientGetClanActivityCounts::Swap(CMsgClientGetClanActivityCounts* other) {
  if (other != this) {
    steamid_clans_.Swap(&other->steamid_clans_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientGetClanActivityCounts::GetTypeName() const {
  return "Sc.CMsgClientGetClanActivityCounts";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientGetClanActivityCountsResponse::kEresultFieldNumber;
#endif  // !_MSC_VER

CMsgClientGetClanActivityCountsResponse::CMsgClientGetClanActivityCountsResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientGetClanActivityCountsResponse::InitAsDefaultInstance() {
}

CMsgClientGetClanActivityCountsResponse::CMsgClientGetClanActivityCountsResponse(const CMsgClientGetClanActivityCountsResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientGetClanActivityCountsResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientGetClanActivityCountsResponse::~CMsgClientGetClanActivityCountsResponse() {
  SharedDtor();
}

void CMsgClientGetClanActivityCountsResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientGetClanActivityCountsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientGetClanActivityCountsResponse& CMsgClientGetClanActivityCountsResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientGetClanActivityCountsResponse* CMsgClientGetClanActivityCountsResponse::default_instance_ = NULL;

CMsgClientGetClanActivityCountsResponse* CMsgClientGetClanActivityCountsResponse::New() const {
  return new CMsgClientGetClanActivityCountsResponse;
}

void CMsgClientGetClanActivityCountsResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientGetClanActivityCountsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientGetClanActivityCountsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

}

int CMsgClientGetClanActivityCountsResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientGetClanActivityCountsResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientGetClanActivityCountsResponse*>(&from));
}

void CMsgClientGetClanActivityCountsResponse::MergeFrom(const CMsgClientGetClanActivityCountsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
  }
}

void CMsgClientGetClanActivityCountsResponse::CopyFrom(const CMsgClientGetClanActivityCountsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientGetClanActivityCountsResponse::IsInitialized() const {

  return true;
}

void CMsgClientGetClanActivityCountsResponse::Swap(CMsgClientGetClanActivityCountsResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientGetClanActivityCountsResponse::GetTypeName() const {
  return "Sc.CMsgClientGetClanActivityCountsResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientOGSReportString::kAccumulatedFieldNumber;
const int CMsgClientOGSReportString::kSessionidFieldNumber;
const int CMsgClientOGSReportString::kSeverityFieldNumber;
const int CMsgClientOGSReportString::kFormatterFieldNumber;
const int CMsgClientOGSReportString::kVarargsFieldNumber;
#endif  // !_MSC_VER

CMsgClientOGSReportString::CMsgClientOGSReportString()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientOGSReportString::InitAsDefaultInstance() {
}

CMsgClientOGSReportString::CMsgClientOGSReportString(const CMsgClientOGSReportString& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientOGSReportString::SharedCtor() {
  _cached_size_ = 0;
  accumulated_ = false;
  sessionid_ = GOOGLE_ULONGLONG(0);
  severity_ = 0;
  formatter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  varargs_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientOGSReportString::~CMsgClientOGSReportString() {
  SharedDtor();
}

void CMsgClientOGSReportString::SharedDtor() {
  if (formatter_ != &::google::protobuf::internal::kEmptyString) {
    delete formatter_;
  }
  if (varargs_ != &::google::protobuf::internal::kEmptyString) {
    delete varargs_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientOGSReportString::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientOGSReportString& CMsgClientOGSReportString::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientOGSReportString* CMsgClientOGSReportString::default_instance_ = NULL;

CMsgClientOGSReportString* CMsgClientOGSReportString::New() const {
  return new CMsgClientOGSReportString;
}

void CMsgClientOGSReportString::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accumulated_ = false;
    sessionid_ = GOOGLE_ULONGLONG(0);
    severity_ = 0;
    if (has_formatter()) {
      if (formatter_ != &::google::protobuf::internal::kEmptyString) {
        formatter_->clear();
      }
    }
    if (has_varargs()) {
      if (varargs_ != &::google::protobuf::internal::kEmptyString) {
        varargs_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientOGSReportString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool accumulated = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &accumulated_)));
          set_has_accumulated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sessionid;
        break;
      }

      // optional uint64 sessionid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sessionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_severity;
        break;
      }

      // optional int32 severity = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_severity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &severity_)));
          set_has_severity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_formatter;
        break;
      }

      // optional string formatter = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_formatter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_formatter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_varargs;
        break;
      }

      // optional bytes varargs = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_varargs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_varargs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientOGSReportString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool accumulated = 1;
  if (has_accumulated()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->accumulated(), output);
  }

  // optional uint64 sessionid = 2;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->sessionid(), output);
  }

  // optional int32 severity = 3;
  if (has_severity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->severity(), output);
  }

  // optional string formatter = 4;
  if (has_formatter()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->formatter(), output);
  }

  // optional bytes varargs = 5;
  if (has_varargs()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->varargs(), output);
  }

}

int CMsgClientOGSReportString::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool accumulated = 1;
    if (has_accumulated()) {
      total_size += 1 + 1;
    }

    // optional uint64 sessionid = 2;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sessionid());
    }

    // optional int32 severity = 3;
    if (has_severity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->severity());
    }

    // optional string formatter = 4;
    if (has_formatter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->formatter());
    }

    // optional bytes varargs = 5;
    if (has_varargs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->varargs());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientOGSReportString::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientOGSReportString*>(&from));
}

void CMsgClientOGSReportString::MergeFrom(const CMsgClientOGSReportString& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accumulated()) {
      set_accumulated(from.accumulated());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_severity()) {
      set_severity(from.severity());
    }
    if (from.has_formatter()) {
      set_formatter(from.formatter());
    }
    if (from.has_varargs()) {
      set_varargs(from.varargs());
    }
  }
}

void CMsgClientOGSReportString::CopyFrom(const CMsgClientOGSReportString& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientOGSReportString::IsInitialized() const {

  return true;
}

void CMsgClientOGSReportString::Swap(CMsgClientOGSReportString* other) {
  if (other != this) {
    std::swap(accumulated_, other->accumulated_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(severity_, other->severity_);
    std::swap(formatter_, other->formatter_);
    std::swap(varargs_, other->varargs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientOGSReportString::GetTypeName() const {
  return "Sc.CMsgClientOGSReportString";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientOGSReportBug::kSessionidFieldNumber;
const int CMsgClientOGSReportBug::kBugtextFieldNumber;
const int CMsgClientOGSReportBug::kScreenshotFieldNumber;
#endif  // !_MSC_VER

CMsgClientOGSReportBug::CMsgClientOGSReportBug()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientOGSReportBug::InitAsDefaultInstance() {
}

CMsgClientOGSReportBug::CMsgClientOGSReportBug(const CMsgClientOGSReportBug& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientOGSReportBug::SharedCtor() {
  _cached_size_ = 0;
  sessionid_ = GOOGLE_ULONGLONG(0);
  bugtext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  screenshot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientOGSReportBug::~CMsgClientOGSReportBug() {
  SharedDtor();
}

void CMsgClientOGSReportBug::SharedDtor() {
  if (bugtext_ != &::google::protobuf::internal::kEmptyString) {
    delete bugtext_;
  }
  if (screenshot_ != &::google::protobuf::internal::kEmptyString) {
    delete screenshot_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientOGSReportBug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientOGSReportBug& CMsgClientOGSReportBug::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientOGSReportBug* CMsgClientOGSReportBug::default_instance_ = NULL;

CMsgClientOGSReportBug* CMsgClientOGSReportBug::New() const {
  return new CMsgClientOGSReportBug;
}

void CMsgClientOGSReportBug::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sessionid_ = GOOGLE_ULONGLONG(0);
    if (has_bugtext()) {
      if (bugtext_ != &::google::protobuf::internal::kEmptyString) {
        bugtext_->clear();
      }
    }
    if (has_screenshot()) {
      if (screenshot_ != &::google::protobuf::internal::kEmptyString) {
        screenshot_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientOGSReportBug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 sessionid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bugtext;
        break;
      }

      // optional string bugtext = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bugtext:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bugtext()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_screenshot;
        break;
      }

      // optional bytes screenshot = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_screenshot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_screenshot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientOGSReportBug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 sessionid = 1;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sessionid(), output);
  }

  // optional string bugtext = 2;
  if (has_bugtext()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->bugtext(), output);
  }

  // optional bytes screenshot = 3;
  if (has_screenshot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->screenshot(), output);
  }

}

int CMsgClientOGSReportBug::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 sessionid = 1;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sessionid());
    }

    // optional string bugtext = 2;
    if (has_bugtext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bugtext());
    }

    // optional bytes screenshot = 3;
    if (has_screenshot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->screenshot());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientOGSReportBug::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientOGSReportBug*>(&from));
}

void CMsgClientOGSReportBug::MergeFrom(const CMsgClientOGSReportBug& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_bugtext()) {
      set_bugtext(from.bugtext());
    }
    if (from.has_screenshot()) {
      set_screenshot(from.screenshot());
    }
  }
}

void CMsgClientOGSReportBug::CopyFrom(const CMsgClientOGSReportBug& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientOGSReportBug::IsInitialized() const {

  return true;
}

void CMsgClientOGSReportBug::Swap(CMsgClientOGSReportBug* other) {
  if (other != this) {
    std::swap(sessionid_, other->sessionid_);
    std::swap(bugtext_, other->bugtext_);
    std::swap(screenshot_, other->screenshot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientOGSReportBug::GetTypeName() const {
  return "Sc.CMsgClientOGSReportBug";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGSAssociateWithClan::kSteamIdClanFieldNumber;
#endif  // !_MSC_VER

CMsgGSAssociateWithClan::CMsgGSAssociateWithClan()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgGSAssociateWithClan::InitAsDefaultInstance() {
}

CMsgGSAssociateWithClan::CMsgGSAssociateWithClan(const CMsgGSAssociateWithClan& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGSAssociateWithClan::SharedCtor() {
  _cached_size_ = 0;
  steam_id_clan_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGSAssociateWithClan::~CMsgGSAssociateWithClan() {
  SharedDtor();
}

void CMsgGSAssociateWithClan::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgGSAssociateWithClan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgGSAssociateWithClan& CMsgGSAssociateWithClan::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgGSAssociateWithClan* CMsgGSAssociateWithClan::default_instance_ = NULL;

CMsgGSAssociateWithClan* CMsgGSAssociateWithClan::New() const {
  return new CMsgGSAssociateWithClan;
}

void CMsgGSAssociateWithClan::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_clan_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgGSAssociateWithClan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id_clan = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_clan_)));
          set_has_steam_id_clan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGSAssociateWithClan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steam_id_clan = 1;
  if (has_steam_id_clan()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id_clan(), output);
  }

}

int CMsgGSAssociateWithClan::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id_clan = 1;
    if (has_steam_id_clan()) {
      total_size += 1 + 8;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGSAssociateWithClan::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgGSAssociateWithClan*>(&from));
}

void CMsgGSAssociateWithClan::MergeFrom(const CMsgGSAssociateWithClan& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id_clan()) {
      set_steam_id_clan(from.steam_id_clan());
    }
  }
}

void CMsgGSAssociateWithClan::CopyFrom(const CMsgGSAssociateWithClan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGSAssociateWithClan::IsInitialized() const {

  return true;
}

void CMsgGSAssociateWithClan::Swap(CMsgGSAssociateWithClan* other) {
  if (other != this) {
    std::swap(steam_id_clan_, other->steam_id_clan_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgGSAssociateWithClan::GetTypeName() const {
  return "Sc.CMsgGSAssociateWithClan";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGSAssociateWithClanResponse::kSteamIdClanFieldNumber;
const int CMsgGSAssociateWithClanResponse::kEresultFieldNumber;
#endif  // !_MSC_VER

CMsgGSAssociateWithClanResponse::CMsgGSAssociateWithClanResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgGSAssociateWithClanResponse::InitAsDefaultInstance() {
}

CMsgGSAssociateWithClanResponse::CMsgGSAssociateWithClanResponse(const CMsgGSAssociateWithClanResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGSAssociateWithClanResponse::SharedCtor() {
  _cached_size_ = 0;
  steam_id_clan_ = GOOGLE_ULONGLONG(0);
  eresult_ = 2u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGSAssociateWithClanResponse::~CMsgGSAssociateWithClanResponse() {
  SharedDtor();
}

void CMsgGSAssociateWithClanResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgGSAssociateWithClanResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgGSAssociateWithClanResponse& CMsgGSAssociateWithClanResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgGSAssociateWithClanResponse* CMsgGSAssociateWithClanResponse::default_instance_ = NULL;

CMsgGSAssociateWithClanResponse* CMsgGSAssociateWithClanResponse::New() const {
  return new CMsgGSAssociateWithClanResponse;
}

void CMsgGSAssociateWithClanResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_clan_ = GOOGLE_ULONGLONG(0);
    eresult_ = 2u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgGSAssociateWithClanResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id_clan = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_clan_)));
          set_has_steam_id_clan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_eresult;
        break;
      }

      // optional uint32 eresult = 2 [default = 2];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eresult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGSAssociateWithClanResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steam_id_clan = 1;
  if (has_steam_id_clan()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id_clan(), output);
  }

  // optional uint32 eresult = 2 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->eresult(), output);
  }

}

int CMsgGSAssociateWithClanResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id_clan = 1;
    if (has_steam_id_clan()) {
      total_size += 1 + 8;
    }

    // optional uint32 eresult = 2 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGSAssociateWithClanResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgGSAssociateWithClanResponse*>(&from));
}

void CMsgGSAssociateWithClanResponse::MergeFrom(const CMsgGSAssociateWithClanResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id_clan()) {
      set_steam_id_clan(from.steam_id_clan());
    }
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
  }
}

void CMsgGSAssociateWithClanResponse::CopyFrom(const CMsgGSAssociateWithClanResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGSAssociateWithClanResponse::IsInitialized() const {

  return true;
}

void CMsgGSAssociateWithClanResponse::Swap(CMsgGSAssociateWithClanResponse* other) {
  if (other != this) {
    std::swap(steam_id_clan_, other->steam_id_clan_);
    std::swap(eresult_, other->eresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgGSAssociateWithClanResponse::GetTypeName() const {
  return "Sc.CMsgGSAssociateWithClanResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGSComputeNewPlayerCompatibility::kSteamIdCandidateFieldNumber;
#endif  // !_MSC_VER

CMsgGSComputeNewPlayerCompatibility::CMsgGSComputeNewPlayerCompatibility()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgGSComputeNewPlayerCompatibility::InitAsDefaultInstance() {
}

CMsgGSComputeNewPlayerCompatibility::CMsgGSComputeNewPlayerCompatibility(const CMsgGSComputeNewPlayerCompatibility& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGSComputeNewPlayerCompatibility::SharedCtor() {
  _cached_size_ = 0;
  steam_id_candidate_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGSComputeNewPlayerCompatibility::~CMsgGSComputeNewPlayerCompatibility() {
  SharedDtor();
}

void CMsgGSComputeNewPlayerCompatibility::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgGSComputeNewPlayerCompatibility::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgGSComputeNewPlayerCompatibility& CMsgGSComputeNewPlayerCompatibility::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgGSComputeNewPlayerCompatibility* CMsgGSComputeNewPlayerCompatibility::default_instance_ = NULL;

CMsgGSComputeNewPlayerCompatibility* CMsgGSComputeNewPlayerCompatibility::New() const {
  return new CMsgGSComputeNewPlayerCompatibility;
}

void CMsgGSComputeNewPlayerCompatibility::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_candidate_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgGSComputeNewPlayerCompatibility::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id_candidate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_candidate_)));
          set_has_steam_id_candidate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGSComputeNewPlayerCompatibility::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steam_id_candidate = 1;
  if (has_steam_id_candidate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id_candidate(), output);
  }

}

int CMsgGSComputeNewPlayerCompatibility::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id_candidate = 1;
    if (has_steam_id_candidate()) {
      total_size += 1 + 8;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGSComputeNewPlayerCompatibility::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgGSComputeNewPlayerCompatibility*>(&from));
}

void CMsgGSComputeNewPlayerCompatibility::MergeFrom(const CMsgGSComputeNewPlayerCompatibility& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id_candidate()) {
      set_steam_id_candidate(from.steam_id_candidate());
    }
  }
}

void CMsgGSComputeNewPlayerCompatibility::CopyFrom(const CMsgGSComputeNewPlayerCompatibility& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGSComputeNewPlayerCompatibility::IsInitialized() const {

  return true;
}

void CMsgGSComputeNewPlayerCompatibility::Swap(CMsgGSComputeNewPlayerCompatibility* other) {
  if (other != this) {
    std::swap(steam_id_candidate_, other->steam_id_candidate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgGSComputeNewPlayerCompatibility::GetTypeName() const {
  return "Sc.CMsgGSComputeNewPlayerCompatibility";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGSComputeNewPlayerCompatibilityResponse::kSteamIdCandidateFieldNumber;
const int CMsgGSComputeNewPlayerCompatibilityResponse::kEresultFieldNumber;
const int CMsgGSComputeNewPlayerCompatibilityResponse::kIsClanMemberFieldNumber;
const int CMsgGSComputeNewPlayerCompatibilityResponse::kCtDontLikeYouFieldNumber;
const int CMsgGSComputeNewPlayerCompatibilityResponse::kCtYouDontLikeFieldNumber;
const int CMsgGSComputeNewPlayerCompatibilityResponse::kCtClanmembersDontLikeYouFieldNumber;
#endif  // !_MSC_VER

CMsgGSComputeNewPlayerCompatibilityResponse::CMsgGSComputeNewPlayerCompatibilityResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgGSComputeNewPlayerCompatibilityResponse::InitAsDefaultInstance() {
}

CMsgGSComputeNewPlayerCompatibilityResponse::CMsgGSComputeNewPlayerCompatibilityResponse(const CMsgGSComputeNewPlayerCompatibilityResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGSComputeNewPlayerCompatibilityResponse::SharedCtor() {
  _cached_size_ = 0;
  steam_id_candidate_ = GOOGLE_ULONGLONG(0);
  eresult_ = 2u;
  is_clan_member_ = false;
  ct_dont_like_you_ = 0;
  ct_you_dont_like_ = 0;
  ct_clanmembers_dont_like_you_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGSComputeNewPlayerCompatibilityResponse::~CMsgGSComputeNewPlayerCompatibilityResponse() {
  SharedDtor();
}

void CMsgGSComputeNewPlayerCompatibilityResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgGSComputeNewPlayerCompatibilityResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgGSComputeNewPlayerCompatibilityResponse& CMsgGSComputeNewPlayerCompatibilityResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgGSComputeNewPlayerCompatibilityResponse* CMsgGSComputeNewPlayerCompatibilityResponse::default_instance_ = NULL;

CMsgGSComputeNewPlayerCompatibilityResponse* CMsgGSComputeNewPlayerCompatibilityResponse::New() const {
  return new CMsgGSComputeNewPlayerCompatibilityResponse;
}

void CMsgGSComputeNewPlayerCompatibilityResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_candidate_ = GOOGLE_ULONGLONG(0);
    eresult_ = 2u;
    is_clan_member_ = false;
    ct_dont_like_you_ = 0;
    ct_you_dont_like_ = 0;
    ct_clanmembers_dont_like_you_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgGSComputeNewPlayerCompatibilityResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id_candidate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_candidate_)));
          set_has_steam_id_candidate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_eresult;
        break;
      }

      // optional uint32 eresult = 2 [default = 2];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eresult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_clan_member;
        break;
      }

      // optional bool is_clan_member = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_clan_member:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_clan_member_)));
          set_has_is_clan_member();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ct_dont_like_you;
        break;
      }

      // optional int32 ct_dont_like_you = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ct_dont_like_you:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ct_dont_like_you_)));
          set_has_ct_dont_like_you();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ct_you_dont_like;
        break;
      }

      // optional int32 ct_you_dont_like = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ct_you_dont_like:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ct_you_dont_like_)));
          set_has_ct_you_dont_like();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ct_clanmembers_dont_like_you;
        break;
      }

      // optional int32 ct_clanmembers_dont_like_you = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ct_clanmembers_dont_like_you:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ct_clanmembers_dont_like_you_)));
          set_has_ct_clanmembers_dont_like_you();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGSComputeNewPlayerCompatibilityResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steam_id_candidate = 1;
  if (has_steam_id_candidate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id_candidate(), output);
  }

  // optional uint32 eresult = 2 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->eresult(), output);
  }

  // optional bool is_clan_member = 3;
  if (has_is_clan_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_clan_member(), output);
  }

  // optional int32 ct_dont_like_you = 4;
  if (has_ct_dont_like_you()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ct_dont_like_you(), output);
  }

  // optional int32 ct_you_dont_like = 5;
  if (has_ct_you_dont_like()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ct_you_dont_like(), output);
  }

  // optional int32 ct_clanmembers_dont_like_you = 6;
  if (has_ct_clanmembers_dont_like_you()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ct_clanmembers_dont_like_you(), output);
  }

}

int CMsgGSComputeNewPlayerCompatibilityResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id_candidate = 1;
    if (has_steam_id_candidate()) {
      total_size += 1 + 8;
    }

    // optional uint32 eresult = 2 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

    // optional bool is_clan_member = 3;
    if (has_is_clan_member()) {
      total_size += 1 + 1;
    }

    // optional int32 ct_dont_like_you = 4;
    if (has_ct_dont_like_you()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ct_dont_like_you());
    }

    // optional int32 ct_you_dont_like = 5;
    if (has_ct_you_dont_like()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ct_you_dont_like());
    }

    // optional int32 ct_clanmembers_dont_like_you = 6;
    if (has_ct_clanmembers_dont_like_you()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ct_clanmembers_dont_like_you());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGSComputeNewPlayerCompatibilityResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgGSComputeNewPlayerCompatibilityResponse*>(&from));
}

void CMsgGSComputeNewPlayerCompatibilityResponse::MergeFrom(const CMsgGSComputeNewPlayerCompatibilityResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id_candidate()) {
      set_steam_id_candidate(from.steam_id_candidate());
    }
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_is_clan_member()) {
      set_is_clan_member(from.is_clan_member());
    }
    if (from.has_ct_dont_like_you()) {
      set_ct_dont_like_you(from.ct_dont_like_you());
    }
    if (from.has_ct_you_dont_like()) {
      set_ct_you_dont_like(from.ct_you_dont_like());
    }
    if (from.has_ct_clanmembers_dont_like_you()) {
      set_ct_clanmembers_dont_like_you(from.ct_clanmembers_dont_like_you());
    }
  }
}

void CMsgGSComputeNewPlayerCompatibilityResponse::CopyFrom(const CMsgGSComputeNewPlayerCompatibilityResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGSComputeNewPlayerCompatibilityResponse::IsInitialized() const {

  return true;
}

void CMsgGSComputeNewPlayerCompatibilityResponse::Swap(CMsgGSComputeNewPlayerCompatibilityResponse* other) {
  if (other != this) {
    std::swap(steam_id_candidate_, other->steam_id_candidate_);
    std::swap(eresult_, other->eresult_);
    std::swap(is_clan_member_, other->is_clan_member_);
    std::swap(ct_dont_like_you_, other->ct_dont_like_you_);
    std::swap(ct_you_dont_like_, other->ct_you_dont_like_);
    std::swap(ct_clanmembers_dont_like_you_, other->ct_clanmembers_dont_like_you_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgGSComputeNewPlayerCompatibilityResponse::GetTypeName() const {
  return "Sc.CMsgGSComputeNewPlayerCompatibilityResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgClientSentLogs::CMsgClientSentLogs()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientSentLogs::InitAsDefaultInstance() {
}

CMsgClientSentLogs::CMsgClientSentLogs(const CMsgClientSentLogs& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientSentLogs::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientSentLogs::~CMsgClientSentLogs() {
  SharedDtor();
}

void CMsgClientSentLogs::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientSentLogs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientSentLogs& CMsgClientSentLogs::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientSentLogs* CMsgClientSentLogs::default_instance_ = NULL;

CMsgClientSentLogs* CMsgClientSentLogs::New() const {
  return new CMsgClientSentLogs;
}

void CMsgClientSentLogs::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientSentLogs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void CMsgClientSentLogs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int CMsgClientSentLogs::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientSentLogs::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientSentLogs*>(&from));
}

void CMsgClientSentLogs::MergeFrom(const CMsgClientSentLogs& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void CMsgClientSentLogs::CopyFrom(const CMsgClientSentLogs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSentLogs::IsInitialized() const {

  return true;
}

void CMsgClientSentLogs::Swap(CMsgClientSentLogs* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientSentLogs::GetTypeName() const {
  return "Sc.CMsgClientSentLogs";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGCClient::kAppidFieldNumber;
const int CMsgGCClient::kMsgtypeFieldNumber;
const int CMsgGCClient::kPayloadFieldNumber;
const int CMsgGCClient::kSteamidFieldNumber;
const int CMsgGCClient::kGcnameFieldNumber;
#endif  // !_MSC_VER

CMsgGCClient::CMsgGCClient()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgGCClient::InitAsDefaultInstance() {
}

CMsgGCClient::CMsgGCClient(const CMsgGCClient& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGCClient::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0u;
  msgtype_ = 0u;
  payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  steamid_ = GOOGLE_ULONGLONG(0);
  gcname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGCClient::~CMsgGCClient() {
  SharedDtor();
}

void CMsgGCClient::SharedDtor() {
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    delete payload_;
  }
  if (gcname_ != &::google::protobuf::internal::kEmptyString) {
    delete gcname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgGCClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgGCClient& CMsgGCClient::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgGCClient* CMsgGCClient::default_instance_ = NULL;

CMsgGCClient* CMsgGCClient::New() const {
  return new CMsgGCClient;
}

void CMsgGCClient::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    appid_ = 0u;
    msgtype_ = 0u;
    if (has_payload()) {
      if (payload_ != &::google::protobuf::internal::kEmptyString) {
        payload_->clear();
      }
    }
    steamid_ = GOOGLE_ULONGLONG(0);
    if (has_gcname()) {
      if (gcname_ != &::google::protobuf::internal::kEmptyString) {
        gcname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgGCClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_msgtype;
        break;
      }

      // optional uint32 msgtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgtype_)));
          set_has_msgtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_payload;
        break;
      }

      // optional bytes payload = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_steamid;
        break;
      }

      // optional fixed64 steamid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
          set_has_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_gcname;
        break;
      }

      // optional string gcname = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gcname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gcname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGCClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 appid = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint32 msgtype = 2;
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->msgtype(), output);
  }

  // optional bytes payload = 3;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->payload(), output);
  }

  // optional fixed64 steamid = 4;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->steamid(), output);
  }

  // optional string gcname = 5;
  if (has_gcname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->gcname(), output);
  }

}

int CMsgGCClient::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 msgtype = 2;
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgtype());
    }

    // optional bytes payload = 3;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }

    // optional fixed64 steamid = 4;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional string gcname = 5;
    if (has_gcname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gcname());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCClient::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgGCClient*>(&from));
}

void CMsgGCClient::MergeFrom(const CMsgGCClient& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_payload()) {
      set_payload(from.payload());
    }
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
    if (from.has_gcname()) {
      set_gcname(from.gcname());
    }
  }
}

void CMsgGCClient::CopyFrom(const CMsgGCClient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCClient::IsInitialized() const {

  return true;
}

void CMsgGCClient::Swap(CMsgGCClient* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(payload_, other->payload_);
    std::swap(steamid_, other->steamid_);
    std::swap(gcname_, other->gcname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgGCClient::GetTypeName() const {
  return "Sc.CMsgGCClient";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientRequestFreeLicense::kAppIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientRequestFreeLicense::CMsgClientRequestFreeLicense()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientRequestFreeLicense::InitAsDefaultInstance() {
}

CMsgClientRequestFreeLicense::CMsgClientRequestFreeLicense(const CMsgClientRequestFreeLicense& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRequestFreeLicense::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRequestFreeLicense::~CMsgClientRequestFreeLicense() {
  SharedDtor();
}

void CMsgClientRequestFreeLicense::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientRequestFreeLicense::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientRequestFreeLicense& CMsgClientRequestFreeLicense::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientRequestFreeLicense* CMsgClientRequestFreeLicense::default_instance_ = NULL;

CMsgClientRequestFreeLicense* CMsgClientRequestFreeLicense::New() const {
  return new CMsgClientRequestFreeLicense;
}

void CMsgClientRequestFreeLicense::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientRequestFreeLicense::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientRequestFreeLicense::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

}

int CMsgClientRequestFreeLicense::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRequestFreeLicense::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientRequestFreeLicense*>(&from));
}

void CMsgClientRequestFreeLicense::MergeFrom(const CMsgClientRequestFreeLicense& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
  }
}

void CMsgClientRequestFreeLicense::CopyFrom(const CMsgClientRequestFreeLicense& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestFreeLicense::IsInitialized() const {

  return true;
}

void CMsgClientRequestFreeLicense::Swap(CMsgClientRequestFreeLicense* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientRequestFreeLicense::GetTypeName() const {
  return "Sc.CMsgClientRequestFreeLicense";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientRequestFreeLicenseResponse::kEresultFieldNumber;
const int CMsgClientRequestFreeLicenseResponse::kPackageIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientRequestFreeLicenseResponse::CMsgClientRequestFreeLicenseResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientRequestFreeLicenseResponse::InitAsDefaultInstance() {
}

CMsgClientRequestFreeLicenseResponse::CMsgClientRequestFreeLicenseResponse(const CMsgClientRequestFreeLicenseResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRequestFreeLicenseResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2u;
  package_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRequestFreeLicenseResponse::~CMsgClientRequestFreeLicenseResponse() {
  SharedDtor();
}

void CMsgClientRequestFreeLicenseResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientRequestFreeLicenseResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientRequestFreeLicenseResponse& CMsgClientRequestFreeLicenseResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientRequestFreeLicenseResponse* CMsgClientRequestFreeLicenseResponse::default_instance_ = NULL;

CMsgClientRequestFreeLicenseResponse* CMsgClientRequestFreeLicenseResponse::New() const {
  return new CMsgClientRequestFreeLicenseResponse;
}

void CMsgClientRequestFreeLicenseResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2u;
    package_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientRequestFreeLicenseResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_package_id;
        break;
      }

      // optional uint32 package_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_package_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &package_id_)));
          set_has_package_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientRequestFreeLicenseResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

  // optional uint32 package_id = 2;
  if (has_package_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->package_id(), output);
  }

}

int CMsgClientRequestFreeLicenseResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

    // optional uint32 package_id = 2;
    if (has_package_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->package_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRequestFreeLicenseResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientRequestFreeLicenseResponse*>(&from));
}

void CMsgClientRequestFreeLicenseResponse::MergeFrom(const CMsgClientRequestFreeLicenseResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_package_id()) {
      set_package_id(from.package_id());
    }
  }
}

void CMsgClientRequestFreeLicenseResponse::CopyFrom(const CMsgClientRequestFreeLicenseResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestFreeLicenseResponse::IsInitialized() const {

  return true;
}

void CMsgClientRequestFreeLicenseResponse::Swap(CMsgClientRequestFreeLicenseResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(package_id_, other->package_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientRequestFreeLicenseResponse::GetTypeName() const {
  return "Sc.CMsgClientRequestFreeLicenseResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDRMDownloadRequestWithCrashData::kDownloadFlagsFieldNumber;
const int CMsgDRMDownloadRequestWithCrashData::kDownloadTypesKnownFieldNumber;
const int CMsgDRMDownloadRequestWithCrashData::kGuidDrmFieldNumber;
const int CMsgDRMDownloadRequestWithCrashData::kGuidSplitFieldNumber;
const int CMsgDRMDownloadRequestWithCrashData::kGuidMergeFieldNumber;
const int CMsgDRMDownloadRequestWithCrashData::kModuleNameFieldNumber;
const int CMsgDRMDownloadRequestWithCrashData::kModulePathFieldNumber;
const int CMsgDRMDownloadRequestWithCrashData::kCrashDataFieldNumber;
#endif  // !_MSC_VER

CMsgDRMDownloadRequestWithCrashData::CMsgDRMDownloadRequestWithCrashData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgDRMDownloadRequestWithCrashData::InitAsDefaultInstance() {
}

CMsgDRMDownloadRequestWithCrashData::CMsgDRMDownloadRequestWithCrashData(const CMsgDRMDownloadRequestWithCrashData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgDRMDownloadRequestWithCrashData::SharedCtor() {
  _cached_size_ = 0;
  download_flags_ = 0u;
  download_types_known_ = 0u;
  guid_drm_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guid_split_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guid_merge_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  module_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  module_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  crash_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDRMDownloadRequestWithCrashData::~CMsgDRMDownloadRequestWithCrashData() {
  SharedDtor();
}

void CMsgDRMDownloadRequestWithCrashData::SharedDtor() {
  if (guid_drm_ != &::google::protobuf::internal::kEmptyString) {
    delete guid_drm_;
  }
  if (guid_split_ != &::google::protobuf::internal::kEmptyString) {
    delete guid_split_;
  }
  if (guid_merge_ != &::google::protobuf::internal::kEmptyString) {
    delete guid_merge_;
  }
  if (module_name_ != &::google::protobuf::internal::kEmptyString) {
    delete module_name_;
  }
  if (module_path_ != &::google::protobuf::internal::kEmptyString) {
    delete module_path_;
  }
  if (crash_data_ != &::google::protobuf::internal::kEmptyString) {
    delete crash_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgDRMDownloadRequestWithCrashData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgDRMDownloadRequestWithCrashData& CMsgDRMDownloadRequestWithCrashData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgDRMDownloadRequestWithCrashData* CMsgDRMDownloadRequestWithCrashData::default_instance_ = NULL;

CMsgDRMDownloadRequestWithCrashData* CMsgDRMDownloadRequestWithCrashData::New() const {
  return new CMsgDRMDownloadRequestWithCrashData;
}

void CMsgDRMDownloadRequestWithCrashData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    download_flags_ = 0u;
    download_types_known_ = 0u;
    if (has_guid_drm()) {
      if (guid_drm_ != &::google::protobuf::internal::kEmptyString) {
        guid_drm_->clear();
      }
    }
    if (has_guid_split()) {
      if (guid_split_ != &::google::protobuf::internal::kEmptyString) {
        guid_split_->clear();
      }
    }
    if (has_guid_merge()) {
      if (guid_merge_ != &::google::protobuf::internal::kEmptyString) {
        guid_merge_->clear();
      }
    }
    if (has_module_name()) {
      if (module_name_ != &::google::protobuf::internal::kEmptyString) {
        module_name_->clear();
      }
    }
    if (has_module_path()) {
      if (module_path_ != &::google::protobuf::internal::kEmptyString) {
        module_path_->clear();
      }
    }
    if (has_crash_data()) {
      if (crash_data_ != &::google::protobuf::internal::kEmptyString) {
        crash_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgDRMDownloadRequestWithCrashData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 download_flags = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &download_flags_)));
          set_has_download_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_download_types_known;
        break;
      }

      // optional uint32 download_types_known = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_download_types_known:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &download_types_known_)));
          set_has_download_types_known();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_guid_drm;
        break;
      }

      // optional bytes guid_drm = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guid_drm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_guid_drm()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_guid_split;
        break;
      }

      // optional bytes guid_split = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guid_split:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_guid_split()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_guid_merge;
        break;
      }

      // optional bytes guid_merge = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guid_merge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_guid_merge()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_module_name;
        break;
      }

      // optional string module_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_module_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_module_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_module_path;
        break;
      }

      // optional string module_path = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_module_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_module_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_crash_data;
        break;
      }

      // optional bytes crash_data = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_crash_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_crash_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgDRMDownloadRequestWithCrashData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 download_flags = 1;
  if (has_download_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->download_flags(), output);
  }

  // optional uint32 download_types_known = 2;
  if (has_download_types_known()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->download_types_known(), output);
  }

  // optional bytes guid_drm = 3;
  if (has_guid_drm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->guid_drm(), output);
  }

  // optional bytes guid_split = 4;
  if (has_guid_split()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->guid_split(), output);
  }

  // optional bytes guid_merge = 5;
  if (has_guid_merge()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->guid_merge(), output);
  }

  // optional string module_name = 6;
  if (has_module_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->module_name(), output);
  }

  // optional string module_path = 7;
  if (has_module_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->module_path(), output);
  }

  // optional bytes crash_data = 8;
  if (has_crash_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->crash_data(), output);
  }

}

int CMsgDRMDownloadRequestWithCrashData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 download_flags = 1;
    if (has_download_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->download_flags());
    }

    // optional uint32 download_types_known = 2;
    if (has_download_types_known()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->download_types_known());
    }

    // optional bytes guid_drm = 3;
    if (has_guid_drm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->guid_drm());
    }

    // optional bytes guid_split = 4;
    if (has_guid_split()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->guid_split());
    }

    // optional bytes guid_merge = 5;
    if (has_guid_merge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->guid_merge());
    }

    // optional string module_name = 6;
    if (has_module_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->module_name());
    }

    // optional string module_path = 7;
    if (has_module_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->module_path());
    }

    // optional bytes crash_data = 8;
    if (has_crash_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->crash_data());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDRMDownloadRequestWithCrashData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgDRMDownloadRequestWithCrashData*>(&from));
}

void CMsgDRMDownloadRequestWithCrashData::MergeFrom(const CMsgDRMDownloadRequestWithCrashData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_download_flags()) {
      set_download_flags(from.download_flags());
    }
    if (from.has_download_types_known()) {
      set_download_types_known(from.download_types_known());
    }
    if (from.has_guid_drm()) {
      set_guid_drm(from.guid_drm());
    }
    if (from.has_guid_split()) {
      set_guid_split(from.guid_split());
    }
    if (from.has_guid_merge()) {
      set_guid_merge(from.guid_merge());
    }
    if (from.has_module_name()) {
      set_module_name(from.module_name());
    }
    if (from.has_module_path()) {
      set_module_path(from.module_path());
    }
    if (from.has_crash_data()) {
      set_crash_data(from.crash_data());
    }
  }
}

void CMsgDRMDownloadRequestWithCrashData::CopyFrom(const CMsgDRMDownloadRequestWithCrashData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDRMDownloadRequestWithCrashData::IsInitialized() const {

  return true;
}

void CMsgDRMDownloadRequestWithCrashData::Swap(CMsgDRMDownloadRequestWithCrashData* other) {
  if (other != this) {
    std::swap(download_flags_, other->download_flags_);
    std::swap(download_types_known_, other->download_types_known_);
    std::swap(guid_drm_, other->guid_drm_);
    std::swap(guid_split_, other->guid_split_);
    std::swap(guid_merge_, other->guid_merge_);
    std::swap(module_name_, other->module_name_);
    std::swap(module_path_, other->module_path_);
    std::swap(crash_data_, other->crash_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgDRMDownloadRequestWithCrashData::GetTypeName() const {
  return "Sc.CMsgDRMDownloadRequestWithCrashData";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDRMDownloadResponse::kEresultFieldNumber;
const int CMsgDRMDownloadResponse::kAppIdFieldNumber;
const int CMsgDRMDownloadResponse::kBlobDownloadTypeFieldNumber;
const int CMsgDRMDownloadResponse::kMergeGuidFieldNumber;
const int CMsgDRMDownloadResponse::kDownloadFileDfsIpFieldNumber;
const int CMsgDRMDownloadResponse::kDownloadFileDfsPortFieldNumber;
const int CMsgDRMDownloadResponse::kDownloadFileUrlFieldNumber;
const int CMsgDRMDownloadResponse::kModulePathFieldNumber;
#endif  // !_MSC_VER

CMsgDRMDownloadResponse::CMsgDRMDownloadResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgDRMDownloadResponse::InitAsDefaultInstance() {
}

CMsgDRMDownloadResponse::CMsgDRMDownloadResponse(const CMsgDRMDownloadResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgDRMDownloadResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2u;
  app_id_ = 0u;
  blob_download_type_ = 0u;
  merge_guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  download_file_dfs_ip_ = 0u;
  download_file_dfs_port_ = 0u;
  download_file_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  module_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDRMDownloadResponse::~CMsgDRMDownloadResponse() {
  SharedDtor();
}

void CMsgDRMDownloadResponse::SharedDtor() {
  if (merge_guid_ != &::google::protobuf::internal::kEmptyString) {
    delete merge_guid_;
  }
  if (download_file_url_ != &::google::protobuf::internal::kEmptyString) {
    delete download_file_url_;
  }
  if (module_path_ != &::google::protobuf::internal::kEmptyString) {
    delete module_path_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgDRMDownloadResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgDRMDownloadResponse& CMsgDRMDownloadResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgDRMDownloadResponse* CMsgDRMDownloadResponse::default_instance_ = NULL;

CMsgDRMDownloadResponse* CMsgDRMDownloadResponse::New() const {
  return new CMsgDRMDownloadResponse;
}

void CMsgDRMDownloadResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2u;
    app_id_ = 0u;
    blob_download_type_ = 0u;
    if (has_merge_guid()) {
      if (merge_guid_ != &::google::protobuf::internal::kEmptyString) {
        merge_guid_->clear();
      }
    }
    download_file_dfs_ip_ = 0u;
    download_file_dfs_port_ = 0u;
    if (has_download_file_url()) {
      if (download_file_url_ != &::google::protobuf::internal::kEmptyString) {
        download_file_url_->clear();
      }
    }
    if (has_module_path()) {
      if (module_path_ != &::google::protobuf::internal::kEmptyString) {
        module_path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgDRMDownloadResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_app_id;
        break;
      }

      // optional uint32 app_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_app_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_blob_download_type;
        break;
      }

      // optional uint32 blob_download_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blob_download_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blob_download_type_)));
          set_has_blob_download_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_merge_guid;
        break;
      }

      // optional bytes merge_guid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_merge_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_merge_guid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_download_file_dfs_ip;
        break;
      }

      // optional uint32 download_file_dfs_ip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_download_file_dfs_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &download_file_dfs_ip_)));
          set_has_download_file_dfs_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_download_file_dfs_port;
        break;
      }

      // optional uint32 download_file_dfs_port = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_download_file_dfs_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &download_file_dfs_port_)));
          set_has_download_file_dfs_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_download_file_url;
        break;
      }

      // optional string download_file_url = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_download_file_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_download_file_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_module_path;
        break;
      }

      // optional string module_path = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_module_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_module_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgDRMDownloadResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

  // optional uint32 app_id = 2;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->app_id(), output);
  }

  // optional uint32 blob_download_type = 3;
  if (has_blob_download_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->blob_download_type(), output);
  }

  // optional bytes merge_guid = 4;
  if (has_merge_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->merge_guid(), output);
  }

  // optional uint32 download_file_dfs_ip = 5;
  if (has_download_file_dfs_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->download_file_dfs_ip(), output);
  }

  // optional uint32 download_file_dfs_port = 6;
  if (has_download_file_dfs_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->download_file_dfs_port(), output);
  }

  // optional string download_file_url = 7;
  if (has_download_file_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->download_file_url(), output);
  }

  // optional string module_path = 8;
  if (has_module_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->module_path(), output);
  }

}

int CMsgDRMDownloadResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

    // optional uint32 app_id = 2;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 blob_download_type = 3;
    if (has_blob_download_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blob_download_type());
    }

    // optional bytes merge_guid = 4;
    if (has_merge_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->merge_guid());
    }

    // optional uint32 download_file_dfs_ip = 5;
    if (has_download_file_dfs_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->download_file_dfs_ip());
    }

    // optional uint32 download_file_dfs_port = 6;
    if (has_download_file_dfs_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->download_file_dfs_port());
    }

    // optional string download_file_url = 7;
    if (has_download_file_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->download_file_url());
    }

    // optional string module_path = 8;
    if (has_module_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->module_path());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDRMDownloadResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgDRMDownloadResponse*>(&from));
}

void CMsgDRMDownloadResponse::MergeFrom(const CMsgDRMDownloadResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_blob_download_type()) {
      set_blob_download_type(from.blob_download_type());
    }
    if (from.has_merge_guid()) {
      set_merge_guid(from.merge_guid());
    }
    if (from.has_download_file_dfs_ip()) {
      set_download_file_dfs_ip(from.download_file_dfs_ip());
    }
    if (from.has_download_file_dfs_port()) {
      set_download_file_dfs_port(from.download_file_dfs_port());
    }
    if (from.has_download_file_url()) {
      set_download_file_url(from.download_file_url());
    }
    if (from.has_module_path()) {
      set_module_path(from.module_path());
    }
  }
}

void CMsgDRMDownloadResponse::CopyFrom(const CMsgDRMDownloadResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDRMDownloadResponse::IsInitialized() const {

  return true;
}

void CMsgDRMDownloadResponse::Swap(CMsgDRMDownloadResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(app_id_, other->app_id_);
    std::swap(blob_download_type_, other->blob_download_type_);
    std::swap(merge_guid_, other->merge_guid_);
    std::swap(download_file_dfs_ip_, other->download_file_dfs_ip_);
    std::swap(download_file_dfs_port_, other->download_file_dfs_port_);
    std::swap(download_file_url_, other->download_file_url_);
    std::swap(module_path_, other->module_path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgDRMDownloadResponse::GetTypeName() const {
  return "Sc.CMsgDRMDownloadResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDRMFinalResult::kEResultFieldNumber;
const int CMsgDRMFinalResult::kAppIdFieldNumber;
const int CMsgDRMFinalResult::kBlobDownloadTypeFieldNumber;
const int CMsgDRMFinalResult::kErrorDetailFieldNumber;
const int CMsgDRMFinalResult::kMergeGuidFieldNumber;
const int CMsgDRMFinalResult::kDownloadFileDfsIpFieldNumber;
const int CMsgDRMFinalResult::kDownloadFileDfsPortFieldNumber;
const int CMsgDRMFinalResult::kDownloadFileUrlFieldNumber;
#endif  // !_MSC_VER

CMsgDRMFinalResult::CMsgDRMFinalResult()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgDRMFinalResult::InitAsDefaultInstance() {
}

CMsgDRMFinalResult::CMsgDRMFinalResult(const CMsgDRMFinalResult& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgDRMFinalResult::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2u;
  app_id_ = 0u;
  blob_download_type_ = 0u;
  error_detail_ = 0u;
  merge_guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  download_file_dfs_ip_ = 0u;
  download_file_dfs_port_ = 0u;
  download_file_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDRMFinalResult::~CMsgDRMFinalResult() {
  SharedDtor();
}

void CMsgDRMFinalResult::SharedDtor() {
  if (merge_guid_ != &::google::protobuf::internal::kEmptyString) {
    delete merge_guid_;
  }
  if (download_file_url_ != &::google::protobuf::internal::kEmptyString) {
    delete download_file_url_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgDRMFinalResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgDRMFinalResult& CMsgDRMFinalResult::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgDRMFinalResult* CMsgDRMFinalResult::default_instance_ = NULL;

CMsgDRMFinalResult* CMsgDRMFinalResult::New() const {
  return new CMsgDRMFinalResult;
}

void CMsgDRMFinalResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2u;
    app_id_ = 0u;
    blob_download_type_ = 0u;
    error_detail_ = 0u;
    if (has_merge_guid()) {
      if (merge_guid_ != &::google::protobuf::internal::kEmptyString) {
        merge_guid_->clear();
      }
    }
    download_file_dfs_ip_ = 0u;
    download_file_dfs_port_ = 0u;
    if (has_download_file_url()) {
      if (download_file_url_ != &::google::protobuf::internal::kEmptyString) {
        download_file_url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgDRMFinalResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eResult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_app_id;
        break;
      }

      // optional uint32 app_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_app_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_blob_download_type;
        break;
      }

      // optional uint32 blob_download_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blob_download_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blob_download_type_)));
          set_has_blob_download_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_error_detail;
        break;
      }

      // optional uint32 error_detail = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_detail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_detail_)));
          set_has_error_detail();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_merge_guid;
        break;
      }

      // optional bytes merge_guid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_merge_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_merge_guid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_download_file_dfs_ip;
        break;
      }

      // optional uint32 download_file_dfs_ip = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_download_file_dfs_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &download_file_dfs_ip_)));
          set_has_download_file_dfs_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_download_file_dfs_port;
        break;
      }

      // optional uint32 download_file_dfs_port = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_download_file_dfs_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &download_file_dfs_port_)));
          set_has_download_file_dfs_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_download_file_url;
        break;
      }

      // optional string download_file_url = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_download_file_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_download_file_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgDRMFinalResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 eResult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

  // optional uint32 app_id = 2;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->app_id(), output);
  }

  // optional uint32 blob_download_type = 3;
  if (has_blob_download_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->blob_download_type(), output);
  }

  // optional uint32 error_detail = 4;
  if (has_error_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->error_detail(), output);
  }

  // optional bytes merge_guid = 5;
  if (has_merge_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->merge_guid(), output);
  }

  // optional uint32 download_file_dfs_ip = 6;
  if (has_download_file_dfs_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->download_file_dfs_ip(), output);
  }

  // optional uint32 download_file_dfs_port = 7;
  if (has_download_file_dfs_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->download_file_dfs_port(), output);
  }

  // optional string download_file_url = 8;
  if (has_download_file_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->download_file_url(), output);
  }

}

int CMsgDRMFinalResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 eResult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

    // optional uint32 app_id = 2;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 blob_download_type = 3;
    if (has_blob_download_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blob_download_type());
    }

    // optional uint32 error_detail = 4;
    if (has_error_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_detail());
    }

    // optional bytes merge_guid = 5;
    if (has_merge_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->merge_guid());
    }

    // optional uint32 download_file_dfs_ip = 6;
    if (has_download_file_dfs_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->download_file_dfs_ip());
    }

    // optional uint32 download_file_dfs_port = 7;
    if (has_download_file_dfs_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->download_file_dfs_port());
    }

    // optional string download_file_url = 8;
    if (has_download_file_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->download_file_url());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDRMFinalResult::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgDRMFinalResult*>(&from));
}

void CMsgDRMFinalResult::MergeFrom(const CMsgDRMFinalResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_blob_download_type()) {
      set_blob_download_type(from.blob_download_type());
    }
    if (from.has_error_detail()) {
      set_error_detail(from.error_detail());
    }
    if (from.has_merge_guid()) {
      set_merge_guid(from.merge_guid());
    }
    if (from.has_download_file_dfs_ip()) {
      set_download_file_dfs_ip(from.download_file_dfs_ip());
    }
    if (from.has_download_file_dfs_port()) {
      set_download_file_dfs_port(from.download_file_dfs_port());
    }
    if (from.has_download_file_url()) {
      set_download_file_url(from.download_file_url());
    }
  }
}

void CMsgDRMFinalResult::CopyFrom(const CMsgDRMFinalResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDRMFinalResult::IsInitialized() const {

  return true;
}

void CMsgDRMFinalResult::Swap(CMsgDRMFinalResult* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(app_id_, other->app_id_);
    std::swap(blob_download_type_, other->blob_download_type_);
    std::swap(error_detail_, other->error_detail_);
    std::swap(merge_guid_, other->merge_guid_);
    std::swap(download_file_dfs_ip_, other->download_file_dfs_ip_);
    std::swap(download_file_dfs_port_, other->download_file_dfs_port_);
    std::swap(download_file_url_, other->download_file_url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgDRMFinalResult::GetTypeName() const {
  return "Sc.CMsgDRMFinalResult";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientDPCheckSpecialSurvey::kSurveyIdFieldNumber;
#endif  // !_MSC_VER

CMsgClientDPCheckSpecialSurvey::CMsgClientDPCheckSpecialSurvey()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientDPCheckSpecialSurvey::InitAsDefaultInstance() {
}

CMsgClientDPCheckSpecialSurvey::CMsgClientDPCheckSpecialSurvey(const CMsgClientDPCheckSpecialSurvey& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientDPCheckSpecialSurvey::SharedCtor() {
  _cached_size_ = 0;
  survey_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientDPCheckSpecialSurvey::~CMsgClientDPCheckSpecialSurvey() {
  SharedDtor();
}

void CMsgClientDPCheckSpecialSurvey::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientDPCheckSpecialSurvey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientDPCheckSpecialSurvey& CMsgClientDPCheckSpecialSurvey::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientDPCheckSpecialSurvey* CMsgClientDPCheckSpecialSurvey::default_instance_ = NULL;

CMsgClientDPCheckSpecialSurvey* CMsgClientDPCheckSpecialSurvey::New() const {
  return new CMsgClientDPCheckSpecialSurvey;
}

void CMsgClientDPCheckSpecialSurvey::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    survey_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientDPCheckSpecialSurvey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 survey_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &survey_id_)));
          set_has_survey_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientDPCheckSpecialSurvey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 survey_id = 1;
  if (has_survey_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->survey_id(), output);
  }

}

int CMsgClientDPCheckSpecialSurvey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 survey_id = 1;
    if (has_survey_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->survey_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientDPCheckSpecialSurvey::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientDPCheckSpecialSurvey*>(&from));
}

void CMsgClientDPCheckSpecialSurvey::MergeFrom(const CMsgClientDPCheckSpecialSurvey& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_survey_id()) {
      set_survey_id(from.survey_id());
    }
  }
}

void CMsgClientDPCheckSpecialSurvey::CopyFrom(const CMsgClientDPCheckSpecialSurvey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientDPCheckSpecialSurvey::IsInitialized() const {

  return true;
}

void CMsgClientDPCheckSpecialSurvey::Swap(CMsgClientDPCheckSpecialSurvey* other) {
  if (other != this) {
    std::swap(survey_id_, other->survey_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientDPCheckSpecialSurvey::GetTypeName() const {
  return "Sc.CMsgClientDPCheckSpecialSurvey";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientDPCheckSpecialSurveyResponse::kEResultFieldNumber;
const int CMsgClientDPCheckSpecialSurveyResponse::kStateFieldNumber;
const int CMsgClientDPCheckSpecialSurveyResponse::kNameFieldNumber;
const int CMsgClientDPCheckSpecialSurveyResponse::kCustomUrlFieldNumber;
const int CMsgClientDPCheckSpecialSurveyResponse::kIncludeSoftwareFieldNumber;
const int CMsgClientDPCheckSpecialSurveyResponse::kTokenFieldNumber;
#endif  // !_MSC_VER

CMsgClientDPCheckSpecialSurveyResponse::CMsgClientDPCheckSpecialSurveyResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientDPCheckSpecialSurveyResponse::InitAsDefaultInstance() {
}

CMsgClientDPCheckSpecialSurveyResponse::CMsgClientDPCheckSpecialSurveyResponse(const CMsgClientDPCheckSpecialSurveyResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientDPCheckSpecialSurveyResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2u;
  state_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  custom_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  include_software_ = false;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientDPCheckSpecialSurveyResponse::~CMsgClientDPCheckSpecialSurveyResponse() {
  SharedDtor();
}

void CMsgClientDPCheckSpecialSurveyResponse::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (custom_url_ != &::google::protobuf::internal::kEmptyString) {
    delete custom_url_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientDPCheckSpecialSurveyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientDPCheckSpecialSurveyResponse& CMsgClientDPCheckSpecialSurveyResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientDPCheckSpecialSurveyResponse* CMsgClientDPCheckSpecialSurveyResponse::default_instance_ = NULL;

CMsgClientDPCheckSpecialSurveyResponse* CMsgClientDPCheckSpecialSurveyResponse::New() const {
  return new CMsgClientDPCheckSpecialSurveyResponse;
}

void CMsgClientDPCheckSpecialSurveyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2u;
    state_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_custom_url()) {
      if (custom_url_ != &::google::protobuf::internal::kEmptyString) {
        custom_url_->clear();
      }
    }
    include_software_ = false;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientDPCheckSpecialSurveyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eResult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional uint32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_custom_url;
        break;
      }

      // optional string custom_url = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_custom_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_include_software;
        break;
      }

      // optional bool include_software = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_include_software:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_software_)));
          set_has_include_software();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_token;
        break;
      }

      // optional bytes token = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientDPCheckSpecialSurveyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 eResult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional string custom_url = 4;
  if (has_custom_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->custom_url(), output);
  }

  // optional bool include_software = 5;
  if (has_include_software()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->include_software(), output);
  }

  // optional bytes token = 6;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->token(), output);
  }

}

int CMsgClientDPCheckSpecialSurveyResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 eResult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

    // optional uint32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string custom_url = 4;
    if (has_custom_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custom_url());
    }

    // optional bool include_software = 5;
    if (has_include_software()) {
      total_size += 1 + 1;
    }

    // optional bytes token = 6;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->token());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientDPCheckSpecialSurveyResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientDPCheckSpecialSurveyResponse*>(&from));
}

void CMsgClientDPCheckSpecialSurveyResponse::MergeFrom(const CMsgClientDPCheckSpecialSurveyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_custom_url()) {
      set_custom_url(from.custom_url());
    }
    if (from.has_include_software()) {
      set_include_software(from.include_software());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
}

void CMsgClientDPCheckSpecialSurveyResponse::CopyFrom(const CMsgClientDPCheckSpecialSurveyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientDPCheckSpecialSurveyResponse::IsInitialized() const {

  return true;
}

void CMsgClientDPCheckSpecialSurveyResponse::Swap(CMsgClientDPCheckSpecialSurveyResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(state_, other->state_);
    std::swap(name_, other->name_);
    std::swap(custom_url_, other->custom_url_);
    std::swap(include_software_, other->include_software_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientDPCheckSpecialSurveyResponse::GetTypeName() const {
  return "Sc.CMsgClientDPCheckSpecialSurveyResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientDPSendSpecialSurveyResponse::kSurveyIdFieldNumber;
const int CMsgClientDPSendSpecialSurveyResponse::kDataFieldNumber;
#endif  // !_MSC_VER

CMsgClientDPSendSpecialSurveyResponse::CMsgClientDPSendSpecialSurveyResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientDPSendSpecialSurveyResponse::InitAsDefaultInstance() {
}

CMsgClientDPSendSpecialSurveyResponse::CMsgClientDPSendSpecialSurveyResponse(const CMsgClientDPSendSpecialSurveyResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientDPSendSpecialSurveyResponse::SharedCtor() {
  _cached_size_ = 0;
  survey_id_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientDPSendSpecialSurveyResponse::~CMsgClientDPSendSpecialSurveyResponse() {
  SharedDtor();
}

void CMsgClientDPSendSpecialSurveyResponse::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientDPSendSpecialSurveyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientDPSendSpecialSurveyResponse& CMsgClientDPSendSpecialSurveyResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientDPSendSpecialSurveyResponse* CMsgClientDPSendSpecialSurveyResponse::default_instance_ = NULL;

CMsgClientDPSendSpecialSurveyResponse* CMsgClientDPSendSpecialSurveyResponse::New() const {
  return new CMsgClientDPSendSpecialSurveyResponse;
}

void CMsgClientDPSendSpecialSurveyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    survey_id_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientDPSendSpecialSurveyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 survey_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &survey_id_)));
          set_has_survey_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientDPSendSpecialSurveyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 survey_id = 1;
  if (has_survey_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->survey_id(), output);
  }

  // optional bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data(), output);
  }

}

int CMsgClientDPSendSpecialSurveyResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 survey_id = 1;
    if (has_survey_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->survey_id());
    }

    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientDPSendSpecialSurveyResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientDPSendSpecialSurveyResponse*>(&from));
}

void CMsgClientDPSendSpecialSurveyResponse::MergeFrom(const CMsgClientDPSendSpecialSurveyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_survey_id()) {
      set_survey_id(from.survey_id());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
}

void CMsgClientDPSendSpecialSurveyResponse::CopyFrom(const CMsgClientDPSendSpecialSurveyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientDPSendSpecialSurveyResponse::IsInitialized() const {

  return true;
}

void CMsgClientDPSendSpecialSurveyResponse::Swap(CMsgClientDPSendSpecialSurveyResponse* other) {
  if (other != this) {
    std::swap(survey_id_, other->survey_id_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientDPSendSpecialSurveyResponse::GetTypeName() const {
  return "Sc.CMsgClientDPSendSpecialSurveyResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientDPSendSpecialSurveyResponseReply::kEResultFieldNumber;
const int CMsgClientDPSendSpecialSurveyResponseReply::kTokenFieldNumber;
#endif  // !_MSC_VER

CMsgClientDPSendSpecialSurveyResponseReply::CMsgClientDPSendSpecialSurveyResponseReply()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientDPSendSpecialSurveyResponseReply::InitAsDefaultInstance() {
}

CMsgClientDPSendSpecialSurveyResponseReply::CMsgClientDPSendSpecialSurveyResponseReply(const CMsgClientDPSendSpecialSurveyResponseReply& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientDPSendSpecialSurveyResponseReply::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientDPSendSpecialSurveyResponseReply::~CMsgClientDPSendSpecialSurveyResponseReply() {
  SharedDtor();
}

void CMsgClientDPSendSpecialSurveyResponseReply::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientDPSendSpecialSurveyResponseReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientDPSendSpecialSurveyResponseReply& CMsgClientDPSendSpecialSurveyResponseReply::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientDPSendSpecialSurveyResponseReply* CMsgClientDPSendSpecialSurveyResponseReply::default_instance_ = NULL;

CMsgClientDPSendSpecialSurveyResponseReply* CMsgClientDPSendSpecialSurveyResponseReply::New() const {
  return new CMsgClientDPSendSpecialSurveyResponseReply;
}

void CMsgClientDPSendSpecialSurveyResponseReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2u;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientDPSendSpecialSurveyResponseReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eResult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // optional bytes token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientDPSendSpecialSurveyResponseReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 eResult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

  // optional bytes token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->token(), output);
  }

}

int CMsgClientDPSendSpecialSurveyResponseReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 eResult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

    // optional bytes token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->token());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientDPSendSpecialSurveyResponseReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientDPSendSpecialSurveyResponseReply*>(&from));
}

void CMsgClientDPSendSpecialSurveyResponseReply::MergeFrom(const CMsgClientDPSendSpecialSurveyResponseReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
}

void CMsgClientDPSendSpecialSurveyResponseReply::CopyFrom(const CMsgClientDPSendSpecialSurveyResponseReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientDPSendSpecialSurveyResponseReply::IsInitialized() const {

  return true;
}

void CMsgClientDPSendSpecialSurveyResponseReply::Swap(CMsgClientDPSendSpecialSurveyResponseReply* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientDPSendSpecialSurveyResponseReply::GetTypeName() const {
  return "Sc.CMsgClientDPSendSpecialSurveyResponseReply";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientRequestForgottenPasswordEmail::kAccountNameFieldNumber;
const int CMsgClientRequestForgottenPasswordEmail::kPasswordTriedFieldNumber;
#endif  // !_MSC_VER

CMsgClientRequestForgottenPasswordEmail::CMsgClientRequestForgottenPasswordEmail()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientRequestForgottenPasswordEmail::InitAsDefaultInstance() {
}

CMsgClientRequestForgottenPasswordEmail::CMsgClientRequestForgottenPasswordEmail(const CMsgClientRequestForgottenPasswordEmail& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRequestForgottenPasswordEmail::SharedCtor() {
  _cached_size_ = 0;
  account_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_tried_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRequestForgottenPasswordEmail::~CMsgClientRequestForgottenPasswordEmail() {
  SharedDtor();
}

void CMsgClientRequestForgottenPasswordEmail::SharedDtor() {
  if (account_name_ != &::google::protobuf::internal::kEmptyString) {
    delete account_name_;
  }
  if (password_tried_ != &::google::protobuf::internal::kEmptyString) {
    delete password_tried_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientRequestForgottenPasswordEmail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientRequestForgottenPasswordEmail& CMsgClientRequestForgottenPasswordEmail::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientRequestForgottenPasswordEmail* CMsgClientRequestForgottenPasswordEmail::default_instance_ = NULL;

CMsgClientRequestForgottenPasswordEmail* CMsgClientRequestForgottenPasswordEmail::New() const {
  return new CMsgClientRequestForgottenPasswordEmail;
}

void CMsgClientRequestForgottenPasswordEmail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account_name()) {
      if (account_name_ != &::google::protobuf::internal::kEmptyString) {
        account_name_->clear();
      }
    }
    if (has_password_tried()) {
      if (password_tried_ != &::google::protobuf::internal::kEmptyString) {
        password_tried_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientRequestForgottenPasswordEmail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password_tried;
        break;
      }

      // optional string password_tried = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password_tried:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password_tried()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientRequestForgottenPasswordEmail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account_name = 1;
  if (has_account_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account_name(), output);
  }

  // optional string password_tried = 2;
  if (has_password_tried()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password_tried(), output);
  }

}

int CMsgClientRequestForgottenPasswordEmail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account_name = 1;
    if (has_account_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_name());
    }

    // optional string password_tried = 2;
    if (has_password_tried()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password_tried());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRequestForgottenPasswordEmail::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientRequestForgottenPasswordEmail*>(&from));
}

void CMsgClientRequestForgottenPasswordEmail::MergeFrom(const CMsgClientRequestForgottenPasswordEmail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_name()) {
      set_account_name(from.account_name());
    }
    if (from.has_password_tried()) {
      set_password_tried(from.password_tried());
    }
  }
}

void CMsgClientRequestForgottenPasswordEmail::CopyFrom(const CMsgClientRequestForgottenPasswordEmail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestForgottenPasswordEmail::IsInitialized() const {

  return true;
}

void CMsgClientRequestForgottenPasswordEmail::Swap(CMsgClientRequestForgottenPasswordEmail* other) {
  if (other != this) {
    std::swap(account_name_, other->account_name_);
    std::swap(password_tried_, other->password_tried_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientRequestForgottenPasswordEmail::GetTypeName() const {
  return "Sc.CMsgClientRequestForgottenPasswordEmail";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientRequestForgottenPasswordEmailResponse::kEResultFieldNumber;
const int CMsgClientRequestForgottenPasswordEmailResponse::kUseSecretQuestionFieldNumber;
#endif  // !_MSC_VER

CMsgClientRequestForgottenPasswordEmailResponse::CMsgClientRequestForgottenPasswordEmailResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientRequestForgottenPasswordEmailResponse::InitAsDefaultInstance() {
}

CMsgClientRequestForgottenPasswordEmailResponse::CMsgClientRequestForgottenPasswordEmailResponse(const CMsgClientRequestForgottenPasswordEmailResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRequestForgottenPasswordEmailResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 0u;
  use_secret_question_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRequestForgottenPasswordEmailResponse::~CMsgClientRequestForgottenPasswordEmailResponse() {
  SharedDtor();
}

void CMsgClientRequestForgottenPasswordEmailResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientRequestForgottenPasswordEmailResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientRequestForgottenPasswordEmailResponse& CMsgClientRequestForgottenPasswordEmailResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientRequestForgottenPasswordEmailResponse* CMsgClientRequestForgottenPasswordEmailResponse::default_instance_ = NULL;

CMsgClientRequestForgottenPasswordEmailResponse* CMsgClientRequestForgottenPasswordEmailResponse::New() const {
  return new CMsgClientRequestForgottenPasswordEmailResponse;
}

void CMsgClientRequestForgottenPasswordEmailResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 0u;
    use_secret_question_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientRequestForgottenPasswordEmailResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_use_secret_question;
        break;
      }

      // optional bool use_secret_question = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_secret_question:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_secret_question_)));
          set_has_use_secret_question();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientRequestForgottenPasswordEmailResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 eResult = 1;
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eresult(), output);
  }

  // optional bool use_secret_question = 2;
  if (has_use_secret_question()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->use_secret_question(), output);
  }

}

int CMsgClientRequestForgottenPasswordEmailResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 eResult = 1;
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

    // optional bool use_secret_question = 2;
    if (has_use_secret_question()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRequestForgottenPasswordEmailResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientRequestForgottenPasswordEmailResponse*>(&from));
}

void CMsgClientRequestForgottenPasswordEmailResponse::MergeFrom(const CMsgClientRequestForgottenPasswordEmailResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_use_secret_question()) {
      set_use_secret_question(from.use_secret_question());
    }
  }
}

void CMsgClientRequestForgottenPasswordEmailResponse::CopyFrom(const CMsgClientRequestForgottenPasswordEmailResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestForgottenPasswordEmailResponse::IsInitialized() const {

  return true;
}

void CMsgClientRequestForgottenPasswordEmailResponse::Swap(CMsgClientRequestForgottenPasswordEmailResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(use_secret_question_, other->use_secret_question_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientRequestForgottenPasswordEmailResponse::GetTypeName() const {
  return "Sc.CMsgClientRequestForgottenPasswordEmailResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientItemAnnouncements::kCountNewItemsFieldNumber;
#endif  // !_MSC_VER

CMsgClientItemAnnouncements::CMsgClientItemAnnouncements()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientItemAnnouncements::InitAsDefaultInstance() {
}

CMsgClientItemAnnouncements::CMsgClientItemAnnouncements(const CMsgClientItemAnnouncements& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientItemAnnouncements::SharedCtor() {
  _cached_size_ = 0;
  count_new_items_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientItemAnnouncements::~CMsgClientItemAnnouncements() {
  SharedDtor();
}

void CMsgClientItemAnnouncements::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientItemAnnouncements::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientItemAnnouncements& CMsgClientItemAnnouncements::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientItemAnnouncements* CMsgClientItemAnnouncements::default_instance_ = NULL;

CMsgClientItemAnnouncements* CMsgClientItemAnnouncements::New() const {
  return new CMsgClientItemAnnouncements;
}

void CMsgClientItemAnnouncements::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_new_items_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientItemAnnouncements::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 count_new_items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_new_items_)));
          set_has_count_new_items();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientItemAnnouncements::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 count_new_items = 1;
  if (has_count_new_items()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count_new_items(), output);
  }

}

int CMsgClientItemAnnouncements::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 count_new_items = 1;
    if (has_count_new_items()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count_new_items());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientItemAnnouncements::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientItemAnnouncements*>(&from));
}

void CMsgClientItemAnnouncements::MergeFrom(const CMsgClientItemAnnouncements& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count_new_items()) {
      set_count_new_items(from.count_new_items());
    }
  }
}

void CMsgClientItemAnnouncements::CopyFrom(const CMsgClientItemAnnouncements& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientItemAnnouncements::IsInitialized() const {

  return true;
}

void CMsgClientItemAnnouncements::Swap(CMsgClientItemAnnouncements* other) {
  if (other != this) {
    std::swap(count_new_items_, other->count_new_items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientItemAnnouncements::GetTypeName() const {
  return "Sc.CMsgClientItemAnnouncements";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgClientRequestItemAnnouncements::CMsgClientRequestItemAnnouncements()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientRequestItemAnnouncements::InitAsDefaultInstance() {
}

CMsgClientRequestItemAnnouncements::CMsgClientRequestItemAnnouncements(const CMsgClientRequestItemAnnouncements& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRequestItemAnnouncements::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRequestItemAnnouncements::~CMsgClientRequestItemAnnouncements() {
  SharedDtor();
}

void CMsgClientRequestItemAnnouncements::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientRequestItemAnnouncements::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientRequestItemAnnouncements& CMsgClientRequestItemAnnouncements::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientRequestItemAnnouncements* CMsgClientRequestItemAnnouncements::default_instance_ = NULL;

CMsgClientRequestItemAnnouncements* CMsgClientRequestItemAnnouncements::New() const {
  return new CMsgClientRequestItemAnnouncements;
}

void CMsgClientRequestItemAnnouncements::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientRequestItemAnnouncements::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void CMsgClientRequestItemAnnouncements::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int CMsgClientRequestItemAnnouncements::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRequestItemAnnouncements::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientRequestItemAnnouncements*>(&from));
}

void CMsgClientRequestItemAnnouncements::MergeFrom(const CMsgClientRequestItemAnnouncements& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void CMsgClientRequestItemAnnouncements::CopyFrom(const CMsgClientRequestItemAnnouncements& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestItemAnnouncements::IsInitialized() const {

  return true;
}

void CMsgClientRequestItemAnnouncements::Swap(CMsgClientRequestItemAnnouncements* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientRequestItemAnnouncements::GetTypeName() const {
  return "Sc.CMsgClientRequestItemAnnouncements";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientCommentNotifications::kCountNewCommentsFieldNumber;
const int CMsgClientCommentNotifications::kCountNewCommentsOwnerFieldNumber;
const int CMsgClientCommentNotifications::kCountNewCommentsSubscriptionsFieldNumber;
#endif  // !_MSC_VER

CMsgClientCommentNotifications::CMsgClientCommentNotifications()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientCommentNotifications::InitAsDefaultInstance() {
}

CMsgClientCommentNotifications::CMsgClientCommentNotifications(const CMsgClientCommentNotifications& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientCommentNotifications::SharedCtor() {
  _cached_size_ = 0;
  count_new_comments_ = 0u;
  count_new_comments_owner_ = 0u;
  count_new_comments_subscriptions_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientCommentNotifications::~CMsgClientCommentNotifications() {
  SharedDtor();
}

void CMsgClientCommentNotifications::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientCommentNotifications::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientCommentNotifications& CMsgClientCommentNotifications::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientCommentNotifications* CMsgClientCommentNotifications::default_instance_ = NULL;

CMsgClientCommentNotifications* CMsgClientCommentNotifications::New() const {
  return new CMsgClientCommentNotifications;
}

void CMsgClientCommentNotifications::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_new_comments_ = 0u;
    count_new_comments_owner_ = 0u;
    count_new_comments_subscriptions_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientCommentNotifications::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 count_new_comments = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_new_comments_)));
          set_has_count_new_comments();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count_new_comments_owner;
        break;
      }

      // optional uint32 count_new_comments_owner = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count_new_comments_owner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_new_comments_owner_)));
          set_has_count_new_comments_owner();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count_new_comments_subscriptions;
        break;
      }

      // optional uint32 count_new_comments_subscriptions = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count_new_comments_subscriptions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_new_comments_subscriptions_)));
          set_has_count_new_comments_subscriptions();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientCommentNotifications::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 count_new_comments = 1;
  if (has_count_new_comments()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count_new_comments(), output);
  }

  // optional uint32 count_new_comments_owner = 2;
  if (has_count_new_comments_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count_new_comments_owner(), output);
  }

  // optional uint32 count_new_comments_subscriptions = 3;
  if (has_count_new_comments_subscriptions()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count_new_comments_subscriptions(), output);
  }

}

int CMsgClientCommentNotifications::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 count_new_comments = 1;
    if (has_count_new_comments()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count_new_comments());
    }

    // optional uint32 count_new_comments_owner = 2;
    if (has_count_new_comments_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count_new_comments_owner());
    }

    // optional uint32 count_new_comments_subscriptions = 3;
    if (has_count_new_comments_subscriptions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count_new_comments_subscriptions());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientCommentNotifications::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientCommentNotifications*>(&from));
}

void CMsgClientCommentNotifications::MergeFrom(const CMsgClientCommentNotifications& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count_new_comments()) {
      set_count_new_comments(from.count_new_comments());
    }
    if (from.has_count_new_comments_owner()) {
      set_count_new_comments_owner(from.count_new_comments_owner());
    }
    if (from.has_count_new_comments_subscriptions()) {
      set_count_new_comments_subscriptions(from.count_new_comments_subscriptions());
    }
  }
}

void CMsgClientCommentNotifications::CopyFrom(const CMsgClientCommentNotifications& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientCommentNotifications::IsInitialized() const {

  return true;
}

void CMsgClientCommentNotifications::Swap(CMsgClientCommentNotifications* other) {
  if (other != this) {
    std::swap(count_new_comments_, other->count_new_comments_);
    std::swap(count_new_comments_owner_, other->count_new_comments_owner_);
    std::swap(count_new_comments_subscriptions_, other->count_new_comments_subscriptions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientCommentNotifications::GetTypeName() const {
  return "Sc.CMsgClientCommentNotifications";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgClientRequestCommentNotifications::CMsgClientRequestCommentNotifications()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientRequestCommentNotifications::InitAsDefaultInstance() {
}

CMsgClientRequestCommentNotifications::CMsgClientRequestCommentNotifications(const CMsgClientRequestCommentNotifications& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRequestCommentNotifications::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRequestCommentNotifications::~CMsgClientRequestCommentNotifications() {
  SharedDtor();
}

void CMsgClientRequestCommentNotifications::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientRequestCommentNotifications::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientRequestCommentNotifications& CMsgClientRequestCommentNotifications::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientRequestCommentNotifications* CMsgClientRequestCommentNotifications::default_instance_ = NULL;

CMsgClientRequestCommentNotifications* CMsgClientRequestCommentNotifications::New() const {
  return new CMsgClientRequestCommentNotifications;
}

void CMsgClientRequestCommentNotifications::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientRequestCommentNotifications::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void CMsgClientRequestCommentNotifications::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int CMsgClientRequestCommentNotifications::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRequestCommentNotifications::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientRequestCommentNotifications*>(&from));
}

void CMsgClientRequestCommentNotifications::MergeFrom(const CMsgClientRequestCommentNotifications& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void CMsgClientRequestCommentNotifications::CopyFrom(const CMsgClientRequestCommentNotifications& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestCommentNotifications::IsInitialized() const {

  return true;
}

void CMsgClientRequestCommentNotifications::Swap(CMsgClientRequestCommentNotifications* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientRequestCommentNotifications::GetTypeName() const {
  return "Sc.CMsgClientRequestCommentNotifications";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientOfflineMessageNotification::kOfflineMessagesFieldNumber;
#endif  // !_MSC_VER

CMsgClientOfflineMessageNotification::CMsgClientOfflineMessageNotification()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientOfflineMessageNotification::InitAsDefaultInstance() {
}

CMsgClientOfflineMessageNotification::CMsgClientOfflineMessageNotification(const CMsgClientOfflineMessageNotification& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientOfflineMessageNotification::SharedCtor() {
  _cached_size_ = 0;
  offline_messages_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientOfflineMessageNotification::~CMsgClientOfflineMessageNotification() {
  SharedDtor();
}

void CMsgClientOfflineMessageNotification::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientOfflineMessageNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientOfflineMessageNotification& CMsgClientOfflineMessageNotification::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientOfflineMessageNotification* CMsgClientOfflineMessageNotification::default_instance_ = NULL;

CMsgClientOfflineMessageNotification* CMsgClientOfflineMessageNotification::New() const {
  return new CMsgClientOfflineMessageNotification;
}

void CMsgClientOfflineMessageNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    offline_messages_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientOfflineMessageNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 offline_messages = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offline_messages_)));
          set_has_offline_messages();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientOfflineMessageNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 offline_messages = 1;
  if (has_offline_messages()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->offline_messages(), output);
  }

}

int CMsgClientOfflineMessageNotification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 offline_messages = 1;
    if (has_offline_messages()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offline_messages());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientOfflineMessageNotification::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientOfflineMessageNotification*>(&from));
}

void CMsgClientOfflineMessageNotification::MergeFrom(const CMsgClientOfflineMessageNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offline_messages()) {
      set_offline_messages(from.offline_messages());
    }
  }
}

void CMsgClientOfflineMessageNotification::CopyFrom(const CMsgClientOfflineMessageNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientOfflineMessageNotification::IsInitialized() const {

  return true;
}

void CMsgClientOfflineMessageNotification::Swap(CMsgClientOfflineMessageNotification* other) {
  if (other != this) {
    std::swap(offline_messages_, other->offline_messages_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientOfflineMessageNotification::GetTypeName() const {
  return "Sc.CMsgClientOfflineMessageNotification";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgClientRequestOfflineMessageCount::CMsgClientRequestOfflineMessageCount()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientRequestOfflineMessageCount::InitAsDefaultInstance() {
}

CMsgClientRequestOfflineMessageCount::CMsgClientRequestOfflineMessageCount(const CMsgClientRequestOfflineMessageCount& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientRequestOfflineMessageCount::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientRequestOfflineMessageCount::~CMsgClientRequestOfflineMessageCount() {
  SharedDtor();
}

void CMsgClientRequestOfflineMessageCount::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientRequestOfflineMessageCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientRequestOfflineMessageCount& CMsgClientRequestOfflineMessageCount::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientRequestOfflineMessageCount* CMsgClientRequestOfflineMessageCount::default_instance_ = NULL;

CMsgClientRequestOfflineMessageCount* CMsgClientRequestOfflineMessageCount::New() const {
  return new CMsgClientRequestOfflineMessageCount;
}

void CMsgClientRequestOfflineMessageCount::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientRequestOfflineMessageCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void CMsgClientRequestOfflineMessageCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int CMsgClientRequestOfflineMessageCount::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientRequestOfflineMessageCount::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientRequestOfflineMessageCount*>(&from));
}

void CMsgClientRequestOfflineMessageCount::MergeFrom(const CMsgClientRequestOfflineMessageCount& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void CMsgClientRequestOfflineMessageCount::CopyFrom(const CMsgClientRequestOfflineMessageCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestOfflineMessageCount::IsInitialized() const {

  return true;
}

void CMsgClientRequestOfflineMessageCount::Swap(CMsgClientRequestOfflineMessageCount* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientRequestOfflineMessageCount::GetTypeName() const {
  return "Sc.CMsgClientRequestOfflineMessageCount";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientFSGetFriendMessageHistory::kSteamidFieldNumber;
#endif  // !_MSC_VER

CMsgClientFSGetFriendMessageHistory::CMsgClientFSGetFriendMessageHistory()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientFSGetFriendMessageHistory::InitAsDefaultInstance() {
}

CMsgClientFSGetFriendMessageHistory::CMsgClientFSGetFriendMessageHistory(const CMsgClientFSGetFriendMessageHistory& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientFSGetFriendMessageHistory::SharedCtor() {
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientFSGetFriendMessageHistory::~CMsgClientFSGetFriendMessageHistory() {
  SharedDtor();
}

void CMsgClientFSGetFriendMessageHistory::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientFSGetFriendMessageHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientFSGetFriendMessageHistory& CMsgClientFSGetFriendMessageHistory::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientFSGetFriendMessageHistory* CMsgClientFSGetFriendMessageHistory::default_instance_ = NULL;

CMsgClientFSGetFriendMessageHistory* CMsgClientFSGetFriendMessageHistory::New() const {
  return new CMsgClientFSGetFriendMessageHistory;
}

void CMsgClientFSGetFriendMessageHistory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steamid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientFSGetFriendMessageHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
          set_has_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientFSGetFriendMessageHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

}

int CMsgClientFSGetFriendMessageHistory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientFSGetFriendMessageHistory::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientFSGetFriendMessageHistory*>(&from));
}

void CMsgClientFSGetFriendMessageHistory::MergeFrom(const CMsgClientFSGetFriendMessageHistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
  }
}

void CMsgClientFSGetFriendMessageHistory::CopyFrom(const CMsgClientFSGetFriendMessageHistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFSGetFriendMessageHistory::IsInitialized() const {

  return true;
}

void CMsgClientFSGetFriendMessageHistory::Swap(CMsgClientFSGetFriendMessageHistory* other) {
  if (other != this) {
    std::swap(steamid_, other->steamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientFSGetFriendMessageHistory::GetTypeName() const {
  return "Sc.CMsgClientFSGetFriendMessageHistory";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientFSGetFriendMessageHistoryResponse_FriendMessage::kAccountidFieldNumber;
const int CMsgClientFSGetFriendMessageHistoryResponse_FriendMessage::kTimestampFieldNumber;
const int CMsgClientFSGetFriendMessageHistoryResponse_FriendMessage::kMessageFieldNumber;
const int CMsgClientFSGetFriendMessageHistoryResponse_FriendMessage::kUnreadFieldNumber;
#endif  // !_MSC_VER

CMsgClientFSGetFriendMessageHistoryResponse_FriendMessage::CMsgClientFSGetFriendMessageHistoryResponse_FriendMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientFSGetFriendMessageHistoryResponse_FriendMessage::InitAsDefaultInstance() {
}

CMsgClientFSGetFriendMessageHistoryResponse_FriendMessage::CMsgClientFSGetFriendMessageHistoryResponse_FriendMessage(const CMsgClientFSGetFriendMessageHistoryResponse_FriendMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientFSGetFriendMessageHistoryResponse_FriendMessage::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = 0u;
  timestamp_ = 0u;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  unread_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientFSGetFriendMessageHistoryResponse_FriendMessage::~CMsgClientFSGetFriendMessageHistoryResponse_FriendMessage() {
  SharedDtor();
}

void CMsgClientFSGetFriendMessageHistoryResponse_FriendMessage::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientFSGetFriendMessageHistoryResponse_FriendMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientFSGetFriendMessageHistoryResponse_FriendMessage& CMsgClientFSGetFriendMessageHistoryResponse_FriendMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientFSGetFriendMessageHistoryResponse_FriendMessage* CMsgClientFSGetFriendMessageHistoryResponse_FriendMessage::default_instance_ = NULL;

CMsgClientFSGetFriendMessageHistoryResponse_FriendMessage* CMsgClientFSGetFriendMessageHistoryResponse_FriendMessage::New() const {
  return new CMsgClientFSGetFriendMessageHistoryResponse_FriendMessage;
}

void CMsgClientFSGetFriendMessageHistoryResponse_FriendMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = 0u;
    timestamp_ = 0u;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
    unread_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientFSGetFriendMessageHistoryResponse_FriendMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }

      // optional uint32 timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_message;
        break;
      }

      // optional string message = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_unread;
        break;
      }

      // optional bool unread = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unread:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unread_)));
          set_has_unread();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientFSGetFriendMessageHistoryResponse_FriendMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }

  // optional uint32 timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timestamp(), output);
  }

  // optional string message = 3;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->message(), output);
  }

  // optional bool unread = 4;
  if (has_unread()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->unread(), output);
  }

}

int CMsgClientFSGetFriendMessageHistoryResponse_FriendMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // optional uint32 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional string message = 3;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional bool unread = 4;
    if (has_unread()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientFSGetFriendMessageHistoryResponse_FriendMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientFSGetFriendMessageHistoryResponse_FriendMessage*>(&from));
}

void CMsgClientFSGetFriendMessageHistoryResponse_FriendMessage::MergeFrom(const CMsgClientFSGetFriendMessageHistoryResponse_FriendMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_unread()) {
      set_unread(from.unread());
    }
  }
}

void CMsgClientFSGetFriendMessageHistoryResponse_FriendMessage::CopyFrom(const CMsgClientFSGetFriendMessageHistoryResponse_FriendMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFSGetFriendMessageHistoryResponse_FriendMessage::IsInitialized() const {

  return true;
}

void CMsgClientFSGetFriendMessageHistoryResponse_FriendMessage::Swap(CMsgClientFSGetFriendMessageHistoryResponse_FriendMessage* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(message_, other->message_);
    std::swap(unread_, other->unread_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientFSGetFriendMessageHistoryResponse_FriendMessage::GetTypeName() const {
  return "Sc.CMsgClientFSGetFriendMessageHistoryResponse.FriendMessage";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientFSGetFriendMessageHistoryResponse::kSteamidFieldNumber;
const int CMsgClientFSGetFriendMessageHistoryResponse::kSuccessFieldNumber;
const int CMsgClientFSGetFriendMessageHistoryResponse::kMessagesFieldNumber;
#endif  // !_MSC_VER

CMsgClientFSGetFriendMessageHistoryResponse::CMsgClientFSGetFriendMessageHistoryResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientFSGetFriendMessageHistoryResponse::InitAsDefaultInstance() {
}

CMsgClientFSGetFriendMessageHistoryResponse::CMsgClientFSGetFriendMessageHistoryResponse(const CMsgClientFSGetFriendMessageHistoryResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientFSGetFriendMessageHistoryResponse::SharedCtor() {
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
  success_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientFSGetFriendMessageHistoryResponse::~CMsgClientFSGetFriendMessageHistoryResponse() {
  SharedDtor();
}

void CMsgClientFSGetFriendMessageHistoryResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientFSGetFriendMessageHistoryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientFSGetFriendMessageHistoryResponse& CMsgClientFSGetFriendMessageHistoryResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientFSGetFriendMessageHistoryResponse* CMsgClientFSGetFriendMessageHistoryResponse::default_instance_ = NULL;

CMsgClientFSGetFriendMessageHistoryResponse* CMsgClientFSGetFriendMessageHistoryResponse::New() const {
  return new CMsgClientFSGetFriendMessageHistoryResponse;
}

void CMsgClientFSGetFriendMessageHistoryResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steamid_ = GOOGLE_ULONGLONG(0);
    success_ = 0u;
  }
  messages_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientFSGetFriendMessageHistoryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
          set_has_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_success;
        break;
      }

      // optional uint32 success = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_messages;
        break;
      }

      // repeated .Sc.CMsgClientFSGetFriendMessageHistoryResponse.FriendMessage messages = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_messages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_messages()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_messages;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientFSGetFriendMessageHistoryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional uint32 success = 2;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->success(), output);
  }

  // repeated .Sc.CMsgClientFSGetFriendMessageHistoryResponse.FriendMessage messages = 3;
  for (int i = 0; i < this->messages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->messages(i), output);
  }

}

int CMsgClientFSGetFriendMessageHistoryResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional uint32 success = 2;
    if (has_success()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->success());
    }

  }
  // repeated .Sc.CMsgClientFSGetFriendMessageHistoryResponse.FriendMessage messages = 3;
  total_size += 1 * this->messages_size();
  for (int i = 0; i < this->messages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->messages(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientFSGetFriendMessageHistoryResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientFSGetFriendMessageHistoryResponse*>(&from));
}

void CMsgClientFSGetFriendMessageHistoryResponse::MergeFrom(const CMsgClientFSGetFriendMessageHistoryResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  messages_.MergeFrom(from.messages_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
  }
}

void CMsgClientFSGetFriendMessageHistoryResponse::CopyFrom(const CMsgClientFSGetFriendMessageHistoryResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFSGetFriendMessageHistoryResponse::IsInitialized() const {

  return true;
}

void CMsgClientFSGetFriendMessageHistoryResponse::Swap(CMsgClientFSGetFriendMessageHistoryResponse* other) {
  if (other != this) {
    std::swap(steamid_, other->steamid_);
    std::swap(success_, other->success_);
    messages_.Swap(&other->messages_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientFSGetFriendMessageHistoryResponse::GetTypeName() const {
  return "Sc.CMsgClientFSGetFriendMessageHistoryResponse";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CMsgClientFSGetFriendMessageHistoryForOfflineMessages::CMsgClientFSGetFriendMessageHistoryForOfflineMessages()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientFSGetFriendMessageHistoryForOfflineMessages::InitAsDefaultInstance() {
}

CMsgClientFSGetFriendMessageHistoryForOfflineMessages::CMsgClientFSGetFriendMessageHistoryForOfflineMessages(const CMsgClientFSGetFriendMessageHistoryForOfflineMessages& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientFSGetFriendMessageHistoryForOfflineMessages::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientFSGetFriendMessageHistoryForOfflineMessages::~CMsgClientFSGetFriendMessageHistoryForOfflineMessages() {
  SharedDtor();
}

void CMsgClientFSGetFriendMessageHistoryForOfflineMessages::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientFSGetFriendMessageHistoryForOfflineMessages::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientFSGetFriendMessageHistoryForOfflineMessages& CMsgClientFSGetFriendMessageHistoryForOfflineMessages::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientFSGetFriendMessageHistoryForOfflineMessages* CMsgClientFSGetFriendMessageHistoryForOfflineMessages::default_instance_ = NULL;

CMsgClientFSGetFriendMessageHistoryForOfflineMessages* CMsgClientFSGetFriendMessageHistoryForOfflineMessages::New() const {
  return new CMsgClientFSGetFriendMessageHistoryForOfflineMessages;
}

void CMsgClientFSGetFriendMessageHistoryForOfflineMessages::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientFSGetFriendMessageHistoryForOfflineMessages::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void CMsgClientFSGetFriendMessageHistoryForOfflineMessages::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int CMsgClientFSGetFriendMessageHistoryForOfflineMessages::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientFSGetFriendMessageHistoryForOfflineMessages::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientFSGetFriendMessageHistoryForOfflineMessages*>(&from));
}

void CMsgClientFSGetFriendMessageHistoryForOfflineMessages::MergeFrom(const CMsgClientFSGetFriendMessageHistoryForOfflineMessages& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void CMsgClientFSGetFriendMessageHistoryForOfflineMessages::CopyFrom(const CMsgClientFSGetFriendMessageHistoryForOfflineMessages& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFSGetFriendMessageHistoryForOfflineMessages::IsInitialized() const {

  return true;
}

void CMsgClientFSGetFriendMessageHistoryForOfflineMessages::Swap(CMsgClientFSGetFriendMessageHistoryForOfflineMessages* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientFSGetFriendMessageHistoryForOfflineMessages::GetTypeName() const {
  return "Sc.CMsgClientFSGetFriendMessageHistoryForOfflineMessages";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientFSGetFriendsSteamLevels::kAccountidsFieldNumber;
#endif  // !_MSC_VER

CMsgClientFSGetFriendsSteamLevels::CMsgClientFSGetFriendsSteamLevels()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientFSGetFriendsSteamLevels::InitAsDefaultInstance() {
}

CMsgClientFSGetFriendsSteamLevels::CMsgClientFSGetFriendsSteamLevels(const CMsgClientFSGetFriendsSteamLevels& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientFSGetFriendsSteamLevels::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientFSGetFriendsSteamLevels::~CMsgClientFSGetFriendsSteamLevels() {
  SharedDtor();
}

void CMsgClientFSGetFriendsSteamLevels::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientFSGetFriendsSteamLevels::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientFSGetFriendsSteamLevels& CMsgClientFSGetFriendsSteamLevels::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientFSGetFriendsSteamLevels* CMsgClientFSGetFriendsSteamLevels::default_instance_ = NULL;

CMsgClientFSGetFriendsSteamLevels* CMsgClientFSGetFriendsSteamLevels::New() const {
  return new CMsgClientFSGetFriendsSteamLevels;
}

void CMsgClientFSGetFriendsSteamLevels::Clear() {
  accountids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientFSGetFriendsSteamLevels::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 accountids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accountids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_accountids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_accountids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_accountids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientFSGetFriendsSteamLevels::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 accountids = 1;
  for (int i = 0; i < this->accountids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->accountids(i), output);
  }

}

int CMsgClientFSGetFriendsSteamLevels::ByteSize() const {
  int total_size = 0;

  // repeated uint32 accountids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->accountids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->accountids(i));
    }
    total_size += 1 * this->accountids_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientFSGetFriendsSteamLevels::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientFSGetFriendsSteamLevels*>(&from));
}

void CMsgClientFSGetFriendsSteamLevels::MergeFrom(const CMsgClientFSGetFriendsSteamLevels& from) {
  GOOGLE_CHECK_NE(&from, this);
  accountids_.MergeFrom(from.accountids_);
}

void CMsgClientFSGetFriendsSteamLevels::CopyFrom(const CMsgClientFSGetFriendsSteamLevels& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFSGetFriendsSteamLevels::IsInitialized() const {

  return true;
}

void CMsgClientFSGetFriendsSteamLevels::Swap(CMsgClientFSGetFriendsSteamLevels* other) {
  if (other != this) {
    accountids_.Swap(&other->accountids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientFSGetFriendsSteamLevels::GetTypeName() const {
  return "Sc.CMsgClientFSGetFriendsSteamLevels";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientFSGetFriendsSteamLevelsResponse_Friend::kAccountidFieldNumber;
const int CMsgClientFSGetFriendsSteamLevelsResponse_Friend::kLevelFieldNumber;
#endif  // !_MSC_VER

CMsgClientFSGetFriendsSteamLevelsResponse_Friend::CMsgClientFSGetFriendsSteamLevelsResponse_Friend()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientFSGetFriendsSteamLevelsResponse_Friend::InitAsDefaultInstance() {
}

CMsgClientFSGetFriendsSteamLevelsResponse_Friend::CMsgClientFSGetFriendsSteamLevelsResponse_Friend(const CMsgClientFSGetFriendsSteamLevelsResponse_Friend& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientFSGetFriendsSteamLevelsResponse_Friend::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientFSGetFriendsSteamLevelsResponse_Friend::~CMsgClientFSGetFriendsSteamLevelsResponse_Friend() {
  SharedDtor();
}

void CMsgClientFSGetFriendsSteamLevelsResponse_Friend::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientFSGetFriendsSteamLevelsResponse_Friend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientFSGetFriendsSteamLevelsResponse_Friend& CMsgClientFSGetFriendsSteamLevelsResponse_Friend::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientFSGetFriendsSteamLevelsResponse_Friend* CMsgClientFSGetFriendsSteamLevelsResponse_Friend::default_instance_ = NULL;

CMsgClientFSGetFriendsSteamLevelsResponse_Friend* CMsgClientFSGetFriendsSteamLevelsResponse_Friend::New() const {
  return new CMsgClientFSGetFriendsSteamLevelsResponse_Friend;
}

void CMsgClientFSGetFriendsSteamLevelsResponse_Friend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = 0u;
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientFSGetFriendsSteamLevelsResponse_Friend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientFSGetFriendsSteamLevelsResponse_Friend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

}

int CMsgClientFSGetFriendsSteamLevelsResponse_Friend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientFSGetFriendsSteamLevelsResponse_Friend::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientFSGetFriendsSteamLevelsResponse_Friend*>(&from));
}

void CMsgClientFSGetFriendsSteamLevelsResponse_Friend::MergeFrom(const CMsgClientFSGetFriendsSteamLevelsResponse_Friend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
}

void CMsgClientFSGetFriendsSteamLevelsResponse_Friend::CopyFrom(const CMsgClientFSGetFriendsSteamLevelsResponse_Friend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFSGetFriendsSteamLevelsResponse_Friend::IsInitialized() const {

  return true;
}

void CMsgClientFSGetFriendsSteamLevelsResponse_Friend::Swap(CMsgClientFSGetFriendsSteamLevelsResponse_Friend* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientFSGetFriendsSteamLevelsResponse_Friend::GetTypeName() const {
  return "Sc.CMsgClientFSGetFriendsSteamLevelsResponse.Friend";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgClientFSGetFriendsSteamLevelsResponse::kFriendsFieldNumber;
#endif  // !_MSC_VER

CMsgClientFSGetFriendsSteamLevelsResponse::CMsgClientFSGetFriendsSteamLevelsResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientFSGetFriendsSteamLevelsResponse::InitAsDefaultInstance() {
}

CMsgClientFSGetFriendsSteamLevelsResponse::CMsgClientFSGetFriendsSteamLevelsResponse(const CMsgClientFSGetFriendsSteamLevelsResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientFSGetFriendsSteamLevelsResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientFSGetFriendsSteamLevelsResponse::~CMsgClientFSGetFriendsSteamLevelsResponse() {
  SharedDtor();
}

void CMsgClientFSGetFriendsSteamLevelsResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientFSGetFriendsSteamLevelsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientFSGetFriendsSteamLevelsResponse& CMsgClientFSGetFriendsSteamLevelsResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientFSGetFriendsSteamLevelsResponse* CMsgClientFSGetFriendsSteamLevelsResponse::default_instance_ = NULL;

CMsgClientFSGetFriendsSteamLevelsResponse* CMsgClientFSGetFriendsSteamLevelsResponse::New() const {
  return new CMsgClientFSGetFriendsSteamLevelsResponse;
}

void CMsgClientFSGetFriendsSteamLevelsResponse::Clear() {
  friends_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientFSGetFriendsSteamLevelsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Sc.CMsgClientFSGetFriendsSteamLevelsResponse.Friend friends = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friends()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_friends;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientFSGetFriendsSteamLevelsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Sc.CMsgClientFSGetFriendsSteamLevelsResponse.Friend friends = 1;
  for (int i = 0; i < this->friends_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->friends(i), output);
  }

}

int CMsgClientFSGetFriendsSteamLevelsResponse::ByteSize() const {
  int total_size = 0;

  // repeated .Sc.CMsgClientFSGetFriendsSteamLevelsResponse.Friend friends = 1;
  total_size += 1 * this->friends_size();
  for (int i = 0; i < this->friends_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friends(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientFSGetFriendsSteamLevelsResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientFSGetFriendsSteamLevelsResponse*>(&from));
}

void CMsgClientFSGetFriendsSteamLevelsResponse::MergeFrom(const CMsgClientFSGetFriendsSteamLevelsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  friends_.MergeFrom(from.friends_);
}

void CMsgClientFSGetFriendsSteamLevelsResponse::CopyFrom(const CMsgClientFSGetFriendsSteamLevelsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFSGetFriendsSteamLevelsResponse::IsInitialized() const {

  return true;
}

void CMsgClientFSGetFriendsSteamLevelsResponse::Swap(CMsgClientFSGetFriendsSteamLevelsResponse* other) {
  if (other != this) {
    friends_.Swap(&other->friends_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientFSGetFriendsSteamLevelsResponse::GetTypeName() const {
  return "Sc.CMsgClientFSGetFriendsSteamLevelsResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientEmailAddrInfo::kEmailAddressFieldNumber;
const int CMsgClientEmailAddrInfo::kEmailIsValidatedFieldNumber;
const int CMsgClientEmailAddrInfo::kEmailValidationChangedFieldNumber;
const int CMsgClientEmailAddrInfo::kCredentialChangeRequiresCodeFieldNumber;
const int CMsgClientEmailAddrInfo::kPasswordOrSecretqaChangeRequiresCodeFieldNumber;
const int CMsgClientEmailAddrInfo::kRemindUserAboutEmailFieldNumber;
#endif  // !_MSC_VER

CMsgClientEmailAddrInfo::CMsgClientEmailAddrInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientEmailAddrInfo::InitAsDefaultInstance() {
}

CMsgClientEmailAddrInfo::CMsgClientEmailAddrInfo(const CMsgClientEmailAddrInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientEmailAddrInfo::SharedCtor() {
  _cached_size_ = 0;
  email_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  email_is_validated_ = false;
  email_validation_changed_ = false;
  credential_change_requires_code_ = false;
  password_or_secretqa_change_requires_code_ = false;
  remind_user_about_email_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientEmailAddrInfo::~CMsgClientEmailAddrInfo() {
  SharedDtor();
}

void CMsgClientEmailAddrInfo::SharedDtor() {
  if (email_address_ != &::google::protobuf::internal::kEmptyString) {
    delete email_address_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientEmailAddrInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientEmailAddrInfo& CMsgClientEmailAddrInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientEmailAddrInfo* CMsgClientEmailAddrInfo::default_instance_ = NULL;

CMsgClientEmailAddrInfo* CMsgClientEmailAddrInfo::New() const {
  return new CMsgClientEmailAddrInfo;
}

void CMsgClientEmailAddrInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_email_address()) {
      if (email_address_ != &::google::protobuf::internal::kEmptyString) {
        email_address_->clear();
      }
    }
    email_is_validated_ = false;
    email_validation_changed_ = false;
    credential_change_requires_code_ = false;
    password_or_secretqa_change_requires_code_ = false;
    remind_user_about_email_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientEmailAddrInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string email_address = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_email_is_validated;
        break;
      }

      // optional bool email_is_validated = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_email_is_validated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &email_is_validated_)));
          set_has_email_is_validated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_email_validation_changed;
        break;
      }

      // optional bool email_validation_changed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_email_validation_changed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &email_validation_changed_)));
          set_has_email_validation_changed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_credential_change_requires_code;
        break;
      }

      // optional bool credential_change_requires_code = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_credential_change_requires_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &credential_change_requires_code_)));
          set_has_credential_change_requires_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_password_or_secretqa_change_requires_code;
        break;
      }

      // optional bool password_or_secretqa_change_requires_code = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_password_or_secretqa_change_requires_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &password_or_secretqa_change_requires_code_)));
          set_has_password_or_secretqa_change_requires_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_remind_user_about_email;
        break;
      }

      // optional bool remind_user_about_email = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remind_user_about_email:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &remind_user_about_email_)));
          set_has_remind_user_about_email();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientEmailAddrInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string email_address = 1;
  if (has_email_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->email_address(), output);
  }

  // optional bool email_is_validated = 2;
  if (has_email_is_validated()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->email_is_validated(), output);
  }

  // optional bool email_validation_changed = 3;
  if (has_email_validation_changed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->email_validation_changed(), output);
  }

  // optional bool credential_change_requires_code = 4;
  if (has_credential_change_requires_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->credential_change_requires_code(), output);
  }

  // optional bool password_or_secretqa_change_requires_code = 5;
  if (has_password_or_secretqa_change_requires_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->password_or_secretqa_change_requires_code(), output);
  }

  // optional bool remind_user_about_email = 6;
  if (has_remind_user_about_email()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->remind_user_about_email(), output);
  }

}

int CMsgClientEmailAddrInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string email_address = 1;
    if (has_email_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email_address());
    }

    // optional bool email_is_validated = 2;
    if (has_email_is_validated()) {
      total_size += 1 + 1;
    }

    // optional bool email_validation_changed = 3;
    if (has_email_validation_changed()) {
      total_size += 1 + 1;
    }

    // optional bool credential_change_requires_code = 4;
    if (has_credential_change_requires_code()) {
      total_size += 1 + 1;
    }

    // optional bool password_or_secretqa_change_requires_code = 5;
    if (has_password_or_secretqa_change_requires_code()) {
      total_size += 1 + 1;
    }

    // optional bool remind_user_about_email = 6;
    if (has_remind_user_about_email()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientEmailAddrInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientEmailAddrInfo*>(&from));
}

void CMsgClientEmailAddrInfo::MergeFrom(const CMsgClientEmailAddrInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_email_address()) {
      set_email_address(from.email_address());
    }
    if (from.has_email_is_validated()) {
      set_email_is_validated(from.email_is_validated());
    }
    if (from.has_email_validation_changed()) {
      set_email_validation_changed(from.email_validation_changed());
    }
    if (from.has_credential_change_requires_code()) {
      set_credential_change_requires_code(from.credential_change_requires_code());
    }
    if (from.has_password_or_secretqa_change_requires_code()) {
      set_password_or_secretqa_change_requires_code(from.password_or_secretqa_change_requires_code());
    }
    if (from.has_remind_user_about_email()) {
      set_remind_user_about_email(from.remind_user_about_email());
    }
  }
}

void CMsgClientEmailAddrInfo::CopyFrom(const CMsgClientEmailAddrInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientEmailAddrInfo::IsInitialized() const {

  return true;
}

void CMsgClientEmailAddrInfo::Swap(CMsgClientEmailAddrInfo* other) {
  if (other != this) {
    std::swap(email_address_, other->email_address_);
    std::swap(email_is_validated_, other->email_is_validated_);
    std::swap(email_validation_changed_, other->email_validation_changed_);
    std::swap(credential_change_requires_code_, other->credential_change_requires_code_);
    std::swap(password_or_secretqa_change_requires_code_, other->password_or_secretqa_change_requires_code_);
    std::swap(remind_user_about_email_, other->remind_user_about_email_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientEmailAddrInfo::GetTypeName() const {
  return "Sc.CMsgClientEmailAddrInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgCREEnumeratePublishedFiles::kAppIdFieldNumber;
const int CMsgCREEnumeratePublishedFiles::kQueryTypeFieldNumber;
const int CMsgCREEnumeratePublishedFiles::kStartIndexFieldNumber;
const int CMsgCREEnumeratePublishedFiles::kDaysFieldNumber;
const int CMsgCREEnumeratePublishedFiles::kCountFieldNumber;
const int CMsgCREEnumeratePublishedFiles::kTagsFieldNumber;
const int CMsgCREEnumeratePublishedFiles::kUserTagsFieldNumber;
#endif  // !_MSC_VER

CMsgCREEnumeratePublishedFiles::CMsgCREEnumeratePublishedFiles()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgCREEnumeratePublishedFiles::InitAsDefaultInstance() {
}

CMsgCREEnumeratePublishedFiles::CMsgCREEnumeratePublishedFiles(const CMsgCREEnumeratePublishedFiles& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgCREEnumeratePublishedFiles::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  query_type_ = 0;
  start_index_ = 0u;
  days_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgCREEnumeratePublishedFiles::~CMsgCREEnumeratePublishedFiles() {
  SharedDtor();
}

void CMsgCREEnumeratePublishedFiles::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgCREEnumeratePublishedFiles::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgCREEnumeratePublishedFiles& CMsgCREEnumeratePublishedFiles::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgCREEnumeratePublishedFiles* CMsgCREEnumeratePublishedFiles::default_instance_ = NULL;

CMsgCREEnumeratePublishedFiles* CMsgCREEnumeratePublishedFiles::New() const {
  return new CMsgCREEnumeratePublishedFiles;
}

void CMsgCREEnumeratePublishedFiles::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    query_type_ = 0;
    start_index_ = 0u;
    days_ = 0u;
    count_ = 0u;
  }
  tags_.Clear();
  user_tags_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgCREEnumeratePublishedFiles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_query_type;
        break;
      }

      // optional int32 query_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_query_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &query_type_)));
          set_has_query_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_start_index;
        break;
      }

      // optional uint32 start_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_index_)));
          set_has_start_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_days;
        break;
      }

      // optional uint32 days = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_days:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &days_)));
          set_has_days();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_count;
        break;
      }

      // optional uint32 count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_tags;
        break;
      }

      // repeated string tags = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_tags;
        if (input->ExpectTag(58)) goto parse_user_tags;
        break;
      }

      // repeated string user_tags = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_user_tags()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_user_tags;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgCREEnumeratePublishedFiles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional int32 query_type = 2;
  if (has_query_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->query_type(), output);
  }

  // optional uint32 start_index = 3;
  if (has_start_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->start_index(), output);
  }

  // optional uint32 days = 4;
  if (has_days()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->days(), output);
  }

  // optional uint32 count = 5;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->count(), output);
  }

  // repeated string tags = 6;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->tags(i), output);
  }

  // repeated string user_tags = 7;
  for (int i = 0; i < this->user_tags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->user_tags(i), output);
  }

}

int CMsgCREEnumeratePublishedFiles::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional int32 query_type = 2;
    if (has_query_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->query_type());
    }

    // optional uint32 start_index = 3;
    if (has_start_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_index());
    }

    // optional uint32 days = 4;
    if (has_days()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->days());
    }

    // optional uint32 count = 5;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  // repeated string tags = 6;
  total_size += 1 * this->tags_size();
  for (int i = 0; i < this->tags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  // repeated string user_tags = 7;
  total_size += 1 * this->user_tags_size();
  for (int i = 0; i < this->user_tags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->user_tags(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgCREEnumeratePublishedFiles::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgCREEnumeratePublishedFiles*>(&from));
}

void CMsgCREEnumeratePublishedFiles::MergeFrom(const CMsgCREEnumeratePublishedFiles& from) {
  GOOGLE_CHECK_NE(&from, this);
  tags_.MergeFrom(from.tags_);
  user_tags_.MergeFrom(from.user_tags_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_query_type()) {
      set_query_type(from.query_type());
    }
    if (from.has_start_index()) {
      set_start_index(from.start_index());
    }
    if (from.has_days()) {
      set_days(from.days());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
}

void CMsgCREEnumeratePublishedFiles::CopyFrom(const CMsgCREEnumeratePublishedFiles& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCREEnumeratePublishedFiles::IsInitialized() const {

  return true;
}

void CMsgCREEnumeratePublishedFiles::Swap(CMsgCREEnumeratePublishedFiles* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(query_type_, other->query_type_);
    std::swap(start_index_, other->start_index_);
    std::swap(days_, other->days_);
    std::swap(count_, other->count_);
    tags_.Swap(&other->tags_);
    user_tags_.Swap(&other->user_tags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgCREEnumeratePublishedFiles::GetTypeName() const {
  return "Sc.CMsgCREEnumeratePublishedFiles";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgCREEnumeratePublishedFilesResponse_PublishedFileId::kPublishedFileIdFieldNumber;
const int CMsgCREEnumeratePublishedFilesResponse_PublishedFileId::kVotesForFieldNumber;
const int CMsgCREEnumeratePublishedFilesResponse_PublishedFileId::kVotesAgainstFieldNumber;
const int CMsgCREEnumeratePublishedFilesResponse_PublishedFileId::kReportsFieldNumber;
const int CMsgCREEnumeratePublishedFilesResponse_PublishedFileId::kScoreFieldNumber;
#endif  // !_MSC_VER

CMsgCREEnumeratePublishedFilesResponse_PublishedFileId::CMsgCREEnumeratePublishedFilesResponse_PublishedFileId()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgCREEnumeratePublishedFilesResponse_PublishedFileId::InitAsDefaultInstance() {
}

CMsgCREEnumeratePublishedFilesResponse_PublishedFileId::CMsgCREEnumeratePublishedFilesResponse_PublishedFileId(const CMsgCREEnumeratePublishedFilesResponse_PublishedFileId& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgCREEnumeratePublishedFilesResponse_PublishedFileId::SharedCtor() {
  _cached_size_ = 0;
  published_file_id_ = GOOGLE_ULONGLONG(0);
  votes_for_ = 0;
  votes_against_ = 0;
  reports_ = 0;
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgCREEnumeratePublishedFilesResponse_PublishedFileId::~CMsgCREEnumeratePublishedFilesResponse_PublishedFileId() {
  SharedDtor();
}

void CMsgCREEnumeratePublishedFilesResponse_PublishedFileId::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgCREEnumeratePublishedFilesResponse_PublishedFileId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgCREEnumeratePublishedFilesResponse_PublishedFileId& CMsgCREEnumeratePublishedFilesResponse_PublishedFileId::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgCREEnumeratePublishedFilesResponse_PublishedFileId* CMsgCREEnumeratePublishedFilesResponse_PublishedFileId::default_instance_ = NULL;

CMsgCREEnumeratePublishedFilesResponse_PublishedFileId* CMsgCREEnumeratePublishedFilesResponse_PublishedFileId::New() const {
  return new CMsgCREEnumeratePublishedFilesResponse_PublishedFileId;
}

void CMsgCREEnumeratePublishedFilesResponse_PublishedFileId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    published_file_id_ = GOOGLE_ULONGLONG(0);
    votes_for_ = 0;
    votes_against_ = 0;
    reports_ = 0;
    score_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgCREEnumeratePublishedFilesResponse_PublishedFileId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 published_file_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &published_file_id_)));
          set_has_published_file_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_votes_for;
        break;
      }

      // optional int32 votes_for = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_votes_for:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &votes_for_)));
          set_has_votes_for();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_votes_against;
        break;
      }

      // optional int32 votes_against = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_votes_against:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &votes_against_)));
          set_has_votes_against();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_reports;
        break;
      }

      // optional int32 reports = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reports:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reports_)));
          set_has_reports();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_score;
        break;
      }

      // optional float score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgCREEnumeratePublishedFilesResponse_PublishedFileId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 published_file_id = 1;
  if (has_published_file_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->published_file_id(), output);
  }

  // optional int32 votes_for = 2;
  if (has_votes_for()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->votes_for(), output);
  }

  // optional int32 votes_against = 3;
  if (has_votes_against()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->votes_against(), output);
  }

  // optional int32 reports = 4;
  if (has_reports()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->reports(), output);
  }

  // optional float score = 5;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->score(), output);
  }

}

int CMsgCREEnumeratePublishedFilesResponse_PublishedFileId::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 published_file_id = 1;
    if (has_published_file_id()) {
      total_size += 1 + 8;
    }

    // optional int32 votes_for = 2;
    if (has_votes_for()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->votes_for());
    }

    // optional int32 votes_against = 3;
    if (has_votes_against()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->votes_against());
    }

    // optional int32 reports = 4;
    if (has_reports()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reports());
    }

    // optional float score = 5;
    if (has_score()) {
      total_size += 1 + 4;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgCREEnumeratePublishedFilesResponse_PublishedFileId::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgCREEnumeratePublishedFilesResponse_PublishedFileId*>(&from));
}

void CMsgCREEnumeratePublishedFilesResponse_PublishedFileId::MergeFrom(const CMsgCREEnumeratePublishedFilesResponse_PublishedFileId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_published_file_id()) {
      set_published_file_id(from.published_file_id());
    }
    if (from.has_votes_for()) {
      set_votes_for(from.votes_for());
    }
    if (from.has_votes_against()) {
      set_votes_against(from.votes_against());
    }
    if (from.has_reports()) {
      set_reports(from.reports());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
}

void CMsgCREEnumeratePublishedFilesResponse_PublishedFileId::CopyFrom(const CMsgCREEnumeratePublishedFilesResponse_PublishedFileId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCREEnumeratePublishedFilesResponse_PublishedFileId::IsInitialized() const {

  return true;
}

void CMsgCREEnumeratePublishedFilesResponse_PublishedFileId::Swap(CMsgCREEnumeratePublishedFilesResponse_PublishedFileId* other) {
  if (other != this) {
    std::swap(published_file_id_, other->published_file_id_);
    std::swap(votes_for_, other->votes_for_);
    std::swap(votes_against_, other->votes_against_);
    std::swap(reports_, other->reports_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgCREEnumeratePublishedFilesResponse_PublishedFileId::GetTypeName() const {
  return "Sc.CMsgCREEnumeratePublishedFilesResponse.PublishedFileId";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgCREEnumeratePublishedFilesResponse::kEresultFieldNumber;
const int CMsgCREEnumeratePublishedFilesResponse::kPublishedFilesFieldNumber;
const int CMsgCREEnumeratePublishedFilesResponse::kTotalResultsFieldNumber;
#endif  // !_MSC_VER

CMsgCREEnumeratePublishedFilesResponse::CMsgCREEnumeratePublishedFilesResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgCREEnumeratePublishedFilesResponse::InitAsDefaultInstance() {
}

CMsgCREEnumeratePublishedFilesResponse::CMsgCREEnumeratePublishedFilesResponse(const CMsgCREEnumeratePublishedFilesResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgCREEnumeratePublishedFilesResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  total_results_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgCREEnumeratePublishedFilesResponse::~CMsgCREEnumeratePublishedFilesResponse() {
  SharedDtor();
}

void CMsgCREEnumeratePublishedFilesResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgCREEnumeratePublishedFilesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgCREEnumeratePublishedFilesResponse& CMsgCREEnumeratePublishedFilesResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgCREEnumeratePublishedFilesResponse* CMsgCREEnumeratePublishedFilesResponse::default_instance_ = NULL;

CMsgCREEnumeratePublishedFilesResponse* CMsgCREEnumeratePublishedFilesResponse::New() const {
  return new CMsgCREEnumeratePublishedFilesResponse;
}

void CMsgCREEnumeratePublishedFilesResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    total_results_ = 0u;
  }
  published_files_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgCREEnumeratePublishedFilesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_published_files;
        break;
      }

      // repeated .Sc.CMsgCREEnumeratePublishedFilesResponse.PublishedFileId published_files = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_published_files:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_published_files()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_published_files;
        if (input->ExpectTag(24)) goto parse_total_results;
        break;
      }

      // optional uint32 total_results = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_results:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_results_)));
          set_has_total_results();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgCREEnumeratePublishedFilesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // repeated .Sc.CMsgCREEnumeratePublishedFilesResponse.PublishedFileId published_files = 2;
  for (int i = 0; i < this->published_files_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->published_files(i), output);
  }

  // optional uint32 total_results = 3;
  if (has_total_results()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->total_results(), output);
  }

}

int CMsgCREEnumeratePublishedFilesResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional uint32 total_results = 3;
    if (has_total_results()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_results());
    }

  }
  // repeated .Sc.CMsgCREEnumeratePublishedFilesResponse.PublishedFileId published_files = 2;
  total_size += 1 * this->published_files_size();
  for (int i = 0; i < this->published_files_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->published_files(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgCREEnumeratePublishedFilesResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgCREEnumeratePublishedFilesResponse*>(&from));
}

void CMsgCREEnumeratePublishedFilesResponse::MergeFrom(const CMsgCREEnumeratePublishedFilesResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  published_files_.MergeFrom(from.published_files_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_total_results()) {
      set_total_results(from.total_results());
    }
  }
}

void CMsgCREEnumeratePublishedFilesResponse::CopyFrom(const CMsgCREEnumeratePublishedFilesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCREEnumeratePublishedFilesResponse::IsInitialized() const {

  return true;
}

void CMsgCREEnumeratePublishedFilesResponse::Swap(CMsgCREEnumeratePublishedFilesResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    published_files_.Swap(&other->published_files_);
    std::swap(total_results_, other->total_results_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgCREEnumeratePublishedFilesResponse::GetTypeName() const {
  return "Sc.CMsgCREEnumeratePublishedFilesResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgCRERankByVote::kAppIdFieldNumber;
const int CMsgCRERankByVote::kStartIndexFieldNumber;
const int CMsgCRERankByVote::kCountFieldNumber;
const int CMsgCRERankByVote::kTagsFieldNumber;
const int CMsgCRERankByVote::kUserTagsFieldNumber;
#endif  // !_MSC_VER

CMsgCRERankByVote::CMsgCRERankByVote()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgCRERankByVote::InitAsDefaultInstance() {
}

CMsgCRERankByVote::CMsgCRERankByVote(const CMsgCRERankByVote& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgCRERankByVote::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  start_index_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgCRERankByVote::~CMsgCRERankByVote() {
  SharedDtor();
}

void CMsgCRERankByVote::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgCRERankByVote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgCRERankByVote& CMsgCRERankByVote::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgCRERankByVote* CMsgCRERankByVote::default_instance_ = NULL;

CMsgCRERankByVote* CMsgCRERankByVote::New() const {
  return new CMsgCRERankByVote;
}

void CMsgCRERankByVote::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    start_index_ = 0u;
    count_ = 0u;
  }
  tags_.Clear();
  user_tags_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgCRERankByVote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_start_index;
        break;
      }

      // optional uint32 start_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_index_)));
          set_has_start_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // optional uint32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tags;
        break;
      }

      // repeated string tags = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tags;
        if (input->ExpectTag(42)) goto parse_user_tags;
        break;
      }

      // repeated string user_tags = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_user_tags()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_user_tags;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgCRERankByVote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional uint32 start_index = 2;
  if (has_start_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->start_index(), output);
  }

  // optional uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  // repeated string tags = 4;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->tags(i), output);
  }

  // repeated string user_tags = 5;
  for (int i = 0; i < this->user_tags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->user_tags(i), output);
  }

}

int CMsgCRERankByVote::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 start_index = 2;
    if (has_start_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_index());
    }

    // optional uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  // repeated string tags = 4;
  total_size += 1 * this->tags_size();
  for (int i = 0; i < this->tags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  // repeated string user_tags = 5;
  total_size += 1 * this->user_tags_size();
  for (int i = 0; i < this->user_tags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->user_tags(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgCRERankByVote::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgCRERankByVote*>(&from));
}

void CMsgCRERankByVote::MergeFrom(const CMsgCRERankByVote& from) {
  GOOGLE_CHECK_NE(&from, this);
  tags_.MergeFrom(from.tags_);
  user_tags_.MergeFrom(from.user_tags_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_start_index()) {
      set_start_index(from.start_index());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
}

void CMsgCRERankByVote::CopyFrom(const CMsgCRERankByVote& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCRERankByVote::IsInitialized() const {

  return true;
}

void CMsgCRERankByVote::Swap(CMsgCRERankByVote* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(start_index_, other->start_index_);
    std::swap(count_, other->count_);
    tags_.Swap(&other->tags_);
    user_tags_.Swap(&other->user_tags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgCRERankByVote::GetTypeName() const {
  return "Sc.CMsgCRERankByVote";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgCRERankByVoteResponse_PublishedFileId::kPublishedFileIdFieldNumber;
const int CMsgCRERankByVoteResponse_PublishedFileId::kVotesForFieldNumber;
const int CMsgCRERankByVoteResponse_PublishedFileId::kVotesAgainstFieldNumber;
const int CMsgCRERankByVoteResponse_PublishedFileId::kReportsFieldNumber;
const int CMsgCRERankByVoteResponse_PublishedFileId::kScoreFieldNumber;
#endif  // !_MSC_VER

CMsgCRERankByVoteResponse_PublishedFileId::CMsgCRERankByVoteResponse_PublishedFileId()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgCRERankByVoteResponse_PublishedFileId::InitAsDefaultInstance() {
}

CMsgCRERankByVoteResponse_PublishedFileId::CMsgCRERankByVoteResponse_PublishedFileId(const CMsgCRERankByVoteResponse_PublishedFileId& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgCRERankByVoteResponse_PublishedFileId::SharedCtor() {
  _cached_size_ = 0;
  published_file_id_ = GOOGLE_ULONGLONG(0);
  votes_for_ = 0;
  votes_against_ = 0;
  reports_ = 0;
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgCRERankByVoteResponse_PublishedFileId::~CMsgCRERankByVoteResponse_PublishedFileId() {
  SharedDtor();
}

void CMsgCRERankByVoteResponse_PublishedFileId::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgCRERankByVoteResponse_PublishedFileId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgCRERankByVoteResponse_PublishedFileId& CMsgCRERankByVoteResponse_PublishedFileId::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgCRERankByVoteResponse_PublishedFileId* CMsgCRERankByVoteResponse_PublishedFileId::default_instance_ = NULL;

CMsgCRERankByVoteResponse_PublishedFileId* CMsgCRERankByVoteResponse_PublishedFileId::New() const {
  return new CMsgCRERankByVoteResponse_PublishedFileId;
}

void CMsgCRERankByVoteResponse_PublishedFileId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    published_file_id_ = GOOGLE_ULONGLONG(0);
    votes_for_ = 0;
    votes_against_ = 0;
    reports_ = 0;
    score_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgCRERankByVoteResponse_PublishedFileId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 published_file_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &published_file_id_)));
          set_has_published_file_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_votes_for;
        break;
      }

      // optional int32 votes_for = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_votes_for:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &votes_for_)));
          set_has_votes_for();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_votes_against;
        break;
      }

      // optional int32 votes_against = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_votes_against:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &votes_against_)));
          set_has_votes_against();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_reports;
        break;
      }

      // optional int32 reports = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reports:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reports_)));
          set_has_reports();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_score;
        break;
      }

      // optional float score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgCRERankByVoteResponse_PublishedFileId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 published_file_id = 1;
  if (has_published_file_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->published_file_id(), output);
  }

  // optional int32 votes_for = 2;
  if (has_votes_for()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->votes_for(), output);
  }

  // optional int32 votes_against = 3;
  if (has_votes_against()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->votes_against(), output);
  }

  // optional int32 reports = 4;
  if (has_reports()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->reports(), output);
  }

  // optional float score = 5;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->score(), output);
  }

}

int CMsgCRERankByVoteResponse_PublishedFileId::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 published_file_id = 1;
    if (has_published_file_id()) {
      total_size += 1 + 8;
    }

    // optional int32 votes_for = 2;
    if (has_votes_for()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->votes_for());
    }

    // optional int32 votes_against = 3;
    if (has_votes_against()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->votes_against());
    }

    // optional int32 reports = 4;
    if (has_reports()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reports());
    }

    // optional float score = 5;
    if (has_score()) {
      total_size += 1 + 4;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgCRERankByVoteResponse_PublishedFileId::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgCRERankByVoteResponse_PublishedFileId*>(&from));
}

void CMsgCRERankByVoteResponse_PublishedFileId::MergeFrom(const CMsgCRERankByVoteResponse_PublishedFileId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_published_file_id()) {
      set_published_file_id(from.published_file_id());
    }
    if (from.has_votes_for()) {
      set_votes_for(from.votes_for());
    }
    if (from.has_votes_against()) {
      set_votes_against(from.votes_against());
    }
    if (from.has_reports()) {
      set_reports(from.reports());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
}

void CMsgCRERankByVoteResponse_PublishedFileId::CopyFrom(const CMsgCRERankByVoteResponse_PublishedFileId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCRERankByVoteResponse_PublishedFileId::IsInitialized() const {

  return true;
}

void CMsgCRERankByVoteResponse_PublishedFileId::Swap(CMsgCRERankByVoteResponse_PublishedFileId* other) {
  if (other != this) {
    std::swap(published_file_id_, other->published_file_id_);
    std::swap(votes_for_, other->votes_for_);
    std::swap(votes_against_, other->votes_against_);
    std::swap(reports_, other->reports_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgCRERankByVoteResponse_PublishedFileId::GetTypeName() const {
  return "Sc.CMsgCRERankByVoteResponse.PublishedFileId";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgCRERankByVoteResponse::kEresultFieldNumber;
const int CMsgCRERankByVoteResponse::kPublishedFilesFieldNumber;
const int CMsgCRERankByVoteResponse::kTotalResultsFieldNumber;
#endif  // !_MSC_VER

CMsgCRERankByVoteResponse::CMsgCRERankByVoteResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgCRERankByVoteResponse::InitAsDefaultInstance() {
}

CMsgCRERankByVoteResponse::CMsgCRERankByVoteResponse(const CMsgCRERankByVoteResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgCRERankByVoteResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  total_results_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgCRERankByVoteResponse::~CMsgCRERankByVoteResponse() {
  SharedDtor();
}

void CMsgCRERankByVoteResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgCRERankByVoteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgCRERankByVoteResponse& CMsgCRERankByVoteResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgCRERankByVoteResponse* CMsgCRERankByVoteResponse::default_instance_ = NULL;

CMsgCRERankByVoteResponse* CMsgCRERankByVoteResponse::New() const {
  return new CMsgCRERankByVoteResponse;
}

void CMsgCRERankByVoteResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    total_results_ = 0u;
  }
  published_files_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgCRERankByVoteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_published_files;
        break;
      }

      // repeated .Sc.CMsgCRERankByVoteResponse.PublishedFileId published_files = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_published_files:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_published_files()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_published_files;
        if (input->ExpectTag(24)) goto parse_total_results;
        break;
      }

      // optional uint32 total_results = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_results:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_results_)));
          set_has_total_results();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgCRERankByVoteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // repeated .Sc.CMsgCRERankByVoteResponse.PublishedFileId published_files = 2;
  for (int i = 0; i < this->published_files_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->published_files(i), output);
  }

  // optional uint32 total_results = 3;
  if (has_total_results()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->total_results(), output);
  }

}

int CMsgCRERankByVoteResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional uint32 total_results = 3;
    if (has_total_results()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_results());
    }

  }
  // repeated .Sc.CMsgCRERankByVoteResponse.PublishedFileId published_files = 2;
  total_size += 1 * this->published_files_size();
  for (int i = 0; i < this->published_files_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->published_files(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgCRERankByVoteResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgCRERankByVoteResponse*>(&from));
}

void CMsgCRERankByVoteResponse::MergeFrom(const CMsgCRERankByVoteResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  published_files_.MergeFrom(from.published_files_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_total_results()) {
      set_total_results(from.total_results());
    }
  }
}

void CMsgCRERankByVoteResponse::CopyFrom(const CMsgCRERankByVoteResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCRERankByVoteResponse::IsInitialized() const {

  return true;
}

void CMsgCRERankByVoteResponse::Swap(CMsgCRERankByVoteResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    published_files_.Swap(&other->published_files_);
    std::swap(total_results_, other->total_results_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgCRERankByVoteResponse::GetTypeName() const {
  return "Sc.CMsgCRERankByVoteResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgCRERankByTrend::kAppIdFieldNumber;
const int CMsgCRERankByTrend::kStartIndexFieldNumber;
const int CMsgCRERankByTrend::kDaysFieldNumber;
const int CMsgCRERankByTrend::kCountFieldNumber;
const int CMsgCRERankByTrend::kTagsFieldNumber;
const int CMsgCRERankByTrend::kUserTagsFieldNumber;
#endif  // !_MSC_VER

CMsgCRERankByTrend::CMsgCRERankByTrend()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgCRERankByTrend::InitAsDefaultInstance() {
}

CMsgCRERankByTrend::CMsgCRERankByTrend(const CMsgCRERankByTrend& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgCRERankByTrend::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = 0u;
  start_index_ = 0u;
  days_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgCRERankByTrend::~CMsgCRERankByTrend() {
  SharedDtor();
}

void CMsgCRERankByTrend::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgCRERankByTrend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgCRERankByTrend& CMsgCRERankByTrend::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgCRERankByTrend* CMsgCRERankByTrend::default_instance_ = NULL;

CMsgCRERankByTrend* CMsgCRERankByTrend::New() const {
  return new CMsgCRERankByTrend;
}

void CMsgCRERankByTrend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    app_id_ = 0u;
    start_index_ = 0u;
    days_ = 0u;
    count_ = 0u;
  }
  tags_.Clear();
  user_tags_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgCRERankByTrend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_start_index;
        break;
      }

      // optional uint32 start_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_index_)));
          set_has_start_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_days;
        break;
      }

      // optional uint32 days = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_days:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &days_)));
          set_has_days();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // optional uint32 count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_tags;
        break;
      }

      // repeated string tags = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_tags;
        if (input->ExpectTag(50)) goto parse_user_tags;
        break;
      }

      // repeated string user_tags = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_user_tags()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_user_tags;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgCRERankByTrend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional uint32 start_index = 2;
  if (has_start_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->start_index(), output);
  }

  // optional uint32 days = 3;
  if (has_days()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->days(), output);
  }

  // optional uint32 count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->count(), output);
  }

  // repeated string tags = 5;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->tags(i), output);
  }

  // repeated string user_tags = 6;
  for (int i = 0; i < this->user_tags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->user_tags(i), output);
  }

}

int CMsgCRERankByTrend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 start_index = 2;
    if (has_start_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_index());
    }

    // optional uint32 days = 3;
    if (has_days()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->days());
    }

    // optional uint32 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  // repeated string tags = 5;
  total_size += 1 * this->tags_size();
  for (int i = 0; i < this->tags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  // repeated string user_tags = 6;
  total_size += 1 * this->user_tags_size();
  for (int i = 0; i < this->user_tags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->user_tags(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgCRERankByTrend::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgCRERankByTrend*>(&from));
}

void CMsgCRERankByTrend::MergeFrom(const CMsgCRERankByTrend& from) {
  GOOGLE_CHECK_NE(&from, this);
  tags_.MergeFrom(from.tags_);
  user_tags_.MergeFrom(from.user_tags_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_start_index()) {
      set_start_index(from.start_index());
    }
    if (from.has_days()) {
      set_days(from.days());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
}

void CMsgCRERankByTrend::CopyFrom(const CMsgCRERankByTrend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCRERankByTrend::IsInitialized() const {

  return true;
}

void CMsgCRERankByTrend::Swap(CMsgCRERankByTrend* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(start_index_, other->start_index_);
    std::swap(days_, other->days_);
    std::swap(count_, other->count_);
    tags_.Swap(&other->tags_);
    user_tags_.Swap(&other->user_tags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgCRERankByTrend::GetTypeName() const {
  return "Sc.CMsgCRERankByTrend";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgCRERankByTrendResponse_PublishedFileId::kPublishedFileIdFieldNumber;
const int CMsgCRERankByTrendResponse_PublishedFileId::kVotesForFieldNumber;
const int CMsgCRERankByTrendResponse_PublishedFileId::kVotesAgainstFieldNumber;
const int CMsgCRERankByTrendResponse_PublishedFileId::kReportsFieldNumber;
const int CMsgCRERankByTrendResponse_PublishedFileId::kScoreFieldNumber;
#endif  // !_MSC_VER

CMsgCRERankByTrendResponse_PublishedFileId::CMsgCRERankByTrendResponse_PublishedFileId()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgCRERankByTrendResponse_PublishedFileId::InitAsDefaultInstance() {
}

CMsgCRERankByTrendResponse_PublishedFileId::CMsgCRERankByTrendResponse_PublishedFileId(const CMsgCRERankByTrendResponse_PublishedFileId& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgCRERankByTrendResponse_PublishedFileId::SharedCtor() {
  _cached_size_ = 0;
  published_file_id_ = GOOGLE_ULONGLONG(0);
  votes_for_ = 0;
  votes_against_ = 0;
  reports_ = 0;
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgCRERankByTrendResponse_PublishedFileId::~CMsgCRERankByTrendResponse_PublishedFileId() {
  SharedDtor();
}

void CMsgCRERankByTrendResponse_PublishedFileId::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgCRERankByTrendResponse_PublishedFileId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgCRERankByTrendResponse_PublishedFileId& CMsgCRERankByTrendResponse_PublishedFileId::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgCRERankByTrendResponse_PublishedFileId* CMsgCRERankByTrendResponse_PublishedFileId::default_instance_ = NULL;

CMsgCRERankByTrendResponse_PublishedFileId* CMsgCRERankByTrendResponse_PublishedFileId::New() const {
  return new CMsgCRERankByTrendResponse_PublishedFileId;
}

void CMsgCRERankByTrendResponse_PublishedFileId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    published_file_id_ = GOOGLE_ULONGLONG(0);
    votes_for_ = 0;
    votes_against_ = 0;
    reports_ = 0;
    score_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgCRERankByTrendResponse_PublishedFileId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 published_file_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &published_file_id_)));
          set_has_published_file_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_votes_for;
        break;
      }

      // optional int32 votes_for = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_votes_for:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &votes_for_)));
          set_has_votes_for();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_votes_against;
        break;
      }

      // optional int32 votes_against = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_votes_against:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &votes_against_)));
          set_has_votes_against();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_reports;
        break;
      }

      // optional int32 reports = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reports:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reports_)));
          set_has_reports();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_score;
        break;
      }

      // optional float score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgCRERankByTrendResponse_PublishedFileId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 published_file_id = 1;
  if (has_published_file_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->published_file_id(), output);
  }

  // optional int32 votes_for = 2;
  if (has_votes_for()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->votes_for(), output);
  }

  // optional int32 votes_against = 3;
  if (has_votes_against()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->votes_against(), output);
  }

  // optional int32 reports = 4;
  if (has_reports()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->reports(), output);
  }

  // optional float score = 5;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->score(), output);
  }

}

int CMsgCRERankByTrendResponse_PublishedFileId::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 published_file_id = 1;
    if (has_published_file_id()) {
      total_size += 1 + 8;
    }

    // optional int32 votes_for = 2;
    if (has_votes_for()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->votes_for());
    }

    // optional int32 votes_against = 3;
    if (has_votes_against()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->votes_against());
    }

    // optional int32 reports = 4;
    if (has_reports()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reports());
    }

    // optional float score = 5;
    if (has_score()) {
      total_size += 1 + 4;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgCRERankByTrendResponse_PublishedFileId::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgCRERankByTrendResponse_PublishedFileId*>(&from));
}

void CMsgCRERankByTrendResponse_PublishedFileId::MergeFrom(const CMsgCRERankByTrendResponse_PublishedFileId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_published_file_id()) {
      set_published_file_id(from.published_file_id());
    }
    if (from.has_votes_for()) {
      set_votes_for(from.votes_for());
    }
    if (from.has_votes_against()) {
      set_votes_against(from.votes_against());
    }
    if (from.has_reports()) {
      set_reports(from.reports());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
}

void CMsgCRERankByTrendResponse_PublishedFileId::CopyFrom(const CMsgCRERankByTrendResponse_PublishedFileId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCRERankByTrendResponse_PublishedFileId::IsInitialized() const {

  return true;
}

void CMsgCRERankByTrendResponse_PublishedFileId::Swap(CMsgCRERankByTrendResponse_PublishedFileId* other) {
  if (other != this) {
    std::swap(published_file_id_, other->published_file_id_);
    std::swap(votes_for_, other->votes_for_);
    std::swap(votes_against_, other->votes_against_);
    std::swap(reports_, other->reports_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgCRERankByTrendResponse_PublishedFileId::GetTypeName() const {
  return "Sc.CMsgCRERankByTrendResponse.PublishedFileId";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgCRERankByTrendResponse::kEresultFieldNumber;
const int CMsgCRERankByTrendResponse::kPublishedFilesFieldNumber;
const int CMsgCRERankByTrendResponse::kTotalResultsFieldNumber;
#endif  // !_MSC_VER

CMsgCRERankByTrendResponse::CMsgCRERankByTrendResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgCRERankByTrendResponse::InitAsDefaultInstance() {
}

CMsgCRERankByTrendResponse::CMsgCRERankByTrendResponse(const CMsgCRERankByTrendResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgCRERankByTrendResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  total_results_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgCRERankByTrendResponse::~CMsgCRERankByTrendResponse() {
  SharedDtor();
}

void CMsgCRERankByTrendResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgCRERankByTrendResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgCRERankByTrendResponse& CMsgCRERankByTrendResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgCRERankByTrendResponse* CMsgCRERankByTrendResponse::default_instance_ = NULL;

CMsgCRERankByTrendResponse* CMsgCRERankByTrendResponse::New() const {
  return new CMsgCRERankByTrendResponse;
}

void CMsgCRERankByTrendResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    total_results_ = 0u;
  }
  published_files_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgCRERankByTrendResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_published_files;
        break;
      }

      // repeated .Sc.CMsgCRERankByTrendResponse.PublishedFileId published_files = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_published_files:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_published_files()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_published_files;
        if (input->ExpectTag(24)) goto parse_total_results;
        break;
      }

      // optional uint32 total_results = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_results:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_results_)));
          set_has_total_results();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgCRERankByTrendResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // repeated .Sc.CMsgCRERankByTrendResponse.PublishedFileId published_files = 2;
  for (int i = 0; i < this->published_files_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->published_files(i), output);
  }

  // optional uint32 total_results = 3;
  if (has_total_results()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->total_results(), output);
  }

}

int CMsgCRERankByTrendResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional uint32 total_results = 3;
    if (has_total_results()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_results());
    }

  }
  // repeated .Sc.CMsgCRERankByTrendResponse.PublishedFileId published_files = 2;
  total_size += 1 * this->published_files_size();
  for (int i = 0; i < this->published_files_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->published_files(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgCRERankByTrendResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgCRERankByTrendResponse*>(&from));
}

void CMsgCRERankByTrendResponse::MergeFrom(const CMsgCRERankByTrendResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  published_files_.MergeFrom(from.published_files_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_total_results()) {
      set_total_results(from.total_results());
    }
  }
}

void CMsgCRERankByTrendResponse::CopyFrom(const CMsgCRERankByTrendResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCRERankByTrendResponse::IsInitialized() const {

  return true;
}

void CMsgCRERankByTrendResponse::Swap(CMsgCRERankByTrendResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    published_files_.Swap(&other->published_files_);
    std::swap(total_results_, other->total_results_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgCRERankByTrendResponse::GetTypeName() const {
  return "Sc.CMsgCRERankByTrendResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgCREItemVoteSummary_PublishedFileId::kPublishedFileIdFieldNumber;
#endif  // !_MSC_VER

CMsgCREItemVoteSummary_PublishedFileId::CMsgCREItemVoteSummary_PublishedFileId()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgCREItemVoteSummary_PublishedFileId::InitAsDefaultInstance() {
}

CMsgCREItemVoteSummary_PublishedFileId::CMsgCREItemVoteSummary_PublishedFileId(const CMsgCREItemVoteSummary_PublishedFileId& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgCREItemVoteSummary_PublishedFileId::SharedCtor() {
  _cached_size_ = 0;
  published_file_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgCREItemVoteSummary_PublishedFileId::~CMsgCREItemVoteSummary_PublishedFileId() {
  SharedDtor();
}

void CMsgCREItemVoteSummary_PublishedFileId::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgCREItemVoteSummary_PublishedFileId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgCREItemVoteSummary_PublishedFileId& CMsgCREItemVoteSummary_PublishedFileId::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgCREItemVoteSummary_PublishedFileId* CMsgCREItemVoteSummary_PublishedFileId::default_instance_ = NULL;

CMsgCREItemVoteSummary_PublishedFileId* CMsgCREItemVoteSummary_PublishedFileId::New() const {
  return new CMsgCREItemVoteSummary_PublishedFileId;
}

void CMsgCREItemVoteSummary_PublishedFileId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    published_file_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgCREItemVoteSummary_PublishedFileId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 published_file_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &published_file_id_)));
          set_has_published_file_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgCREItemVoteSummary_PublishedFileId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 published_file_id = 1;
  if (has_published_file_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->published_file_id(), output);
  }

}

int CMsgCREItemVoteSummary_PublishedFileId::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 published_file_id = 1;
    if (has_published_file_id()) {
      total_size += 1 + 8;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgCREItemVoteSummary_PublishedFileId::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgCREItemVoteSummary_PublishedFileId*>(&from));
}

void CMsgCREItemVoteSummary_PublishedFileId::MergeFrom(const CMsgCREItemVoteSummary_PublishedFileId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_published_file_id()) {
      set_published_file_id(from.published_file_id());
    }
  }
}

void CMsgCREItemVoteSummary_PublishedFileId::CopyFrom(const CMsgCREItemVoteSummary_PublishedFileId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCREItemVoteSummary_PublishedFileId::IsInitialized() const {

  return true;
}

void CMsgCREItemVoteSummary_PublishedFileId::Swap(CMsgCREItemVoteSummary_PublishedFileId* other) {
  if (other != this) {
    std::swap(published_file_id_, other->published_file_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgCREItemVoteSummary_PublishedFileId::GetTypeName() const {
  return "Sc.CMsgCREItemVoteSummary.PublishedFileId";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgCREItemVoteSummary::kPublishedFileIdsFieldNumber;
#endif  // !_MSC_VER

CMsgCREItemVoteSummary::CMsgCREItemVoteSummary()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgCREItemVoteSummary::InitAsDefaultInstance() {
}

CMsgCREItemVoteSummary::CMsgCREItemVoteSummary(const CMsgCREItemVoteSummary& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgCREItemVoteSummary::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgCREItemVoteSummary::~CMsgCREItemVoteSummary() {
  SharedDtor();
}

void CMsgCREItemVoteSummary::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgCREItemVoteSummary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgCREItemVoteSummary& CMsgCREItemVoteSummary::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgCREItemVoteSummary* CMsgCREItemVoteSummary::default_instance_ = NULL;

CMsgCREItemVoteSummary* CMsgCREItemVoteSummary::New() const {
  return new CMsgCREItemVoteSummary;
}

void CMsgCREItemVoteSummary::Clear() {
  published_file_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgCREItemVoteSummary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Sc.CMsgCREItemVoteSummary.PublishedFileId published_file_ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_published_file_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_published_file_ids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_published_file_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgCREItemVoteSummary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Sc.CMsgCREItemVoteSummary.PublishedFileId published_file_ids = 1;
  for (int i = 0; i < this->published_file_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->published_file_ids(i), output);
  }

}

int CMsgCREItemVoteSummary::ByteSize() const {
  int total_size = 0;

  // repeated .Sc.CMsgCREItemVoteSummary.PublishedFileId published_file_ids = 1;
  total_size += 1 * this->published_file_ids_size();
  for (int i = 0; i < this->published_file_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->published_file_ids(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgCREItemVoteSummary::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgCREItemVoteSummary*>(&from));
}

void CMsgCREItemVoteSummary::MergeFrom(const CMsgCREItemVoteSummary& from) {
  GOOGLE_CHECK_NE(&from, this);
  published_file_ids_.MergeFrom(from.published_file_ids_);
}

void CMsgCREItemVoteSummary::CopyFrom(const CMsgCREItemVoteSummary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCREItemVoteSummary::IsInitialized() const {

  return true;
}

void CMsgCREItemVoteSummary::Swap(CMsgCREItemVoteSummary* other) {
  if (other != this) {
    published_file_ids_.Swap(&other->published_file_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgCREItemVoteSummary::GetTypeName() const {
  return "Sc.CMsgCREItemVoteSummary";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgCREItemVoteSummaryResponse_ItemVoteSummary::kPublishedFileIdFieldNumber;
const int CMsgCREItemVoteSummaryResponse_ItemVoteSummary::kVotesForFieldNumber;
const int CMsgCREItemVoteSummaryResponse_ItemVoteSummary::kVotesAgainstFieldNumber;
const int CMsgCREItemVoteSummaryResponse_ItemVoteSummary::kReportsFieldNumber;
const int CMsgCREItemVoteSummaryResponse_ItemVoteSummary::kScoreFieldNumber;
#endif  // !_MSC_VER

CMsgCREItemVoteSummaryResponse_ItemVoteSummary::CMsgCREItemVoteSummaryResponse_ItemVoteSummary()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgCREItemVoteSummaryResponse_ItemVoteSummary::InitAsDefaultInstance() {
}

CMsgCREItemVoteSummaryResponse_ItemVoteSummary::CMsgCREItemVoteSummaryResponse_ItemVoteSummary(const CMsgCREItemVoteSummaryResponse_ItemVoteSummary& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgCREItemVoteSummaryResponse_ItemVoteSummary::SharedCtor() {
  _cached_size_ = 0;
  published_file_id_ = GOOGLE_ULONGLONG(0);
  votes_for_ = 0;
  votes_against_ = 0;
  reports_ = 0;
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgCREItemVoteSummaryResponse_ItemVoteSummary::~CMsgCREItemVoteSummaryResponse_ItemVoteSummary() {
  SharedDtor();
}

void CMsgCREItemVoteSummaryResponse_ItemVoteSummary::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgCREItemVoteSummaryResponse_ItemVoteSummary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgCREItemVoteSummaryResponse_ItemVoteSummary& CMsgCREItemVoteSummaryResponse_ItemVoteSummary::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgCREItemVoteSummaryResponse_ItemVoteSummary* CMsgCREItemVoteSummaryResponse_ItemVoteSummary::default_instance_ = NULL;

CMsgCREItemVoteSummaryResponse_ItemVoteSummary* CMsgCREItemVoteSummaryResponse_ItemVoteSummary::New() const {
  return new CMsgCREItemVoteSummaryResponse_ItemVoteSummary;
}

void CMsgCREItemVoteSummaryResponse_ItemVoteSummary::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    published_file_id_ = GOOGLE_ULONGLONG(0);
    votes_for_ = 0;
    votes_against_ = 0;
    reports_ = 0;
    score_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgCREItemVoteSummaryResponse_ItemVoteSummary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 published_file_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &published_file_id_)));
          set_has_published_file_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_votes_for;
        break;
      }

      // optional int32 votes_for = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_votes_for:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &votes_for_)));
          set_has_votes_for();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_votes_against;
        break;
      }

      // optional int32 votes_against = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_votes_against:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &votes_against_)));
          set_has_votes_against();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_reports;
        break;
      }

      // optional int32 reports = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reports:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reports_)));
          set_has_reports();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_score;
        break;
      }

      // optional float score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgCREItemVoteSummaryResponse_ItemVoteSummary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 published_file_id = 1;
  if (has_published_file_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->published_file_id(), output);
  }

  // optional int32 votes_for = 2;
  if (has_votes_for()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->votes_for(), output);
  }

  // optional int32 votes_against = 3;
  if (has_votes_against()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->votes_against(), output);
  }

  // optional int32 reports = 4;
  if (has_reports()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->reports(), output);
  }

  // optional float score = 5;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->score(), output);
  }

}

int CMsgCREItemVoteSummaryResponse_ItemVoteSummary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 published_file_id = 1;
    if (has_published_file_id()) {
      total_size += 1 + 8;
    }

    // optional int32 votes_for = 2;
    if (has_votes_for()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->votes_for());
    }

    // optional int32 votes_against = 3;
    if (has_votes_against()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->votes_against());
    }

    // optional int32 reports = 4;
    if (has_reports()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reports());
    }

    // optional float score = 5;
    if (has_score()) {
      total_size += 1 + 4;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgCREItemVoteSummaryResponse_ItemVoteSummary::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgCREItemVoteSummaryResponse_ItemVoteSummary*>(&from));
}

void CMsgCREItemVoteSummaryResponse_ItemVoteSummary::MergeFrom(const CMsgCREItemVoteSummaryResponse_ItemVoteSummary& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_published_file_id()) {
      set_published_file_id(from.published_file_id());
    }
    if (from.has_votes_for()) {
      set_votes_for(from.votes_for());
    }
    if (from.has_votes_against()) {
      set_votes_against(from.votes_against());
    }
    if (from.has_reports()) {
      set_reports(from.reports());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
}

void CMsgCREItemVoteSummaryResponse_ItemVoteSummary::CopyFrom(const CMsgCREItemVoteSummaryResponse_ItemVoteSummary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCREItemVoteSummaryResponse_ItemVoteSummary::IsInitialized() const {

  return true;
}

void CMsgCREItemVoteSummaryResponse_ItemVoteSummary::Swap(CMsgCREItemVoteSummaryResponse_ItemVoteSummary* other) {
  if (other != this) {
    std::swap(published_file_id_, other->published_file_id_);
    std::swap(votes_for_, other->votes_for_);
    std::swap(votes_against_, other->votes_against_);
    std::swap(reports_, other->reports_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgCREItemVoteSummaryResponse_ItemVoteSummary::GetTypeName() const {
  return "Sc.CMsgCREItemVoteSummaryResponse.ItemVoteSummary";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgCREItemVoteSummaryResponse::kEresultFieldNumber;
const int CMsgCREItemVoteSummaryResponse::kItemVoteSummariesFieldNumber;
#endif  // !_MSC_VER

CMsgCREItemVoteSummaryResponse::CMsgCREItemVoteSummaryResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgCREItemVoteSummaryResponse::InitAsDefaultInstance() {
}

CMsgCREItemVoteSummaryResponse::CMsgCREItemVoteSummaryResponse(const CMsgCREItemVoteSummaryResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgCREItemVoteSummaryResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgCREItemVoteSummaryResponse::~CMsgCREItemVoteSummaryResponse() {
  SharedDtor();
}

void CMsgCREItemVoteSummaryResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgCREItemVoteSummaryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgCREItemVoteSummaryResponse& CMsgCREItemVoteSummaryResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgCREItemVoteSummaryResponse* CMsgCREItemVoteSummaryResponse::default_instance_ = NULL;

CMsgCREItemVoteSummaryResponse* CMsgCREItemVoteSummaryResponse::New() const {
  return new CMsgCREItemVoteSummaryResponse;
}

void CMsgCREItemVoteSummaryResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
  }
  item_vote_summaries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgCREItemVoteSummaryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_vote_summaries;
        break;
      }

      // repeated .Sc.CMsgCREItemVoteSummaryResponse.ItemVoteSummary item_vote_summaries = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_vote_summaries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_vote_summaries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_vote_summaries;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgCREItemVoteSummaryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // repeated .Sc.CMsgCREItemVoteSummaryResponse.ItemVoteSummary item_vote_summaries = 2;
  for (int i = 0; i < this->item_vote_summaries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->item_vote_summaries(i), output);
  }

}

int CMsgCREItemVoteSummaryResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  // repeated .Sc.CMsgCREItemVoteSummaryResponse.ItemVoteSummary item_vote_summaries = 2;
  total_size += 1 * this->item_vote_summaries_size();
  for (int i = 0; i < this->item_vote_summaries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_vote_summaries(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgCREItemVoteSummaryResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgCREItemVoteSummaryResponse*>(&from));
}

void CMsgCREItemVoteSummaryResponse::MergeFrom(const CMsgCREItemVoteSummaryResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_vote_summaries_.MergeFrom(from.item_vote_summaries_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
  }
}

void CMsgCREItemVoteSummaryResponse::CopyFrom(const CMsgCREItemVoteSummaryResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCREItemVoteSummaryResponse::IsInitialized() const {

  return true;
}

void CMsgCREItemVoteSummaryResponse::Swap(CMsgCREItemVoteSummaryResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    item_vote_summaries_.Swap(&other->item_vote_summaries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgCREItemVoteSummaryResponse::GetTypeName() const {
  return "Sc.CMsgCREItemVoteSummaryResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgCREUpdateUserPublishedItemVote::kPublishedFileIdFieldNumber;
const int CMsgCREUpdateUserPublishedItemVote::kVoteUpFieldNumber;
#endif  // !_MSC_VER

CMsgCREUpdateUserPublishedItemVote::CMsgCREUpdateUserPublishedItemVote()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgCREUpdateUserPublishedItemVote::InitAsDefaultInstance() {
}

CMsgCREUpdateUserPublishedItemVote::CMsgCREUpdateUserPublishedItemVote(const CMsgCREUpdateUserPublishedItemVote& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgCREUpdateUserPublishedItemVote::SharedCtor() {
  _cached_size_ = 0;
  published_file_id_ = GOOGLE_ULONGLONG(0);
  vote_up_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgCREUpdateUserPublishedItemVote::~CMsgCREUpdateUserPublishedItemVote() {
  SharedDtor();
}

void CMsgCREUpdateUserPublishedItemVote::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgCREUpdateUserPublishedItemVote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgCREUpdateUserPublishedItemVote& CMsgCREUpdateUserPublishedItemVote::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgCREUpdateUserPublishedItemVote* CMsgCREUpdateUserPublishedItemVote::default_instance_ = NULL;

CMsgCREUpdateUserPublishedItemVote* CMsgCREUpdateUserPublishedItemVote::New() const {
  return new CMsgCREUpdateUserPublishedItemVote;
}

void CMsgCREUpdateUserPublishedItemVote::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    published_file_id_ = GOOGLE_ULONGLONG(0);
    vote_up_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgCREUpdateUserPublishedItemVote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 published_file_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &published_file_id_)));
          set_has_published_file_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_vote_up;
        break;
      }

      // optional bool vote_up = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vote_up:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vote_up_)));
          set_has_vote_up();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgCREUpdateUserPublishedItemVote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 published_file_id = 1;
  if (has_published_file_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->published_file_id(), output);
  }

  // optional bool vote_up = 2;
  if (has_vote_up()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->vote_up(), output);
  }

}

int CMsgCREUpdateUserPublishedItemVote::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 published_file_id = 1;
    if (has_published_file_id()) {
      total_size += 1 + 8;
    }

    // optional bool vote_up = 2;
    if (has_vote_up()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgCREUpdateUserPublishedItemVote::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgCREUpdateUserPublishedItemVote*>(&from));
}

void CMsgCREUpdateUserPublishedItemVote::MergeFrom(const CMsgCREUpdateUserPublishedItemVote& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_published_file_id()) {
      set_published_file_id(from.published_file_id());
    }
    if (from.has_vote_up()) {
      set_vote_up(from.vote_up());
    }
  }
}

void CMsgCREUpdateUserPublishedItemVote::CopyFrom(const CMsgCREUpdateUserPublishedItemVote& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCREUpdateUserPublishedItemVote::IsInitialized() const {

  return true;
}

void CMsgCREUpdateUserPublishedItemVote::Swap(CMsgCREUpdateUserPublishedItemVote* other) {
  if (other != this) {
    std::swap(published_file_id_, other->published_file_id_);
    std::swap(vote_up_, other->vote_up_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgCREUpdateUserPublishedItemVote::GetTypeName() const {
  return "Sc.CMsgCREUpdateUserPublishedItemVote";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgCREUpdateUserPublishedItemVoteResponse::kEresultFieldNumber;
#endif  // !_MSC_VER

CMsgCREUpdateUserPublishedItemVoteResponse::CMsgCREUpdateUserPublishedItemVoteResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgCREUpdateUserPublishedItemVoteResponse::InitAsDefaultInstance() {
}

CMsgCREUpdateUserPublishedItemVoteResponse::CMsgCREUpdateUserPublishedItemVoteResponse(const CMsgCREUpdateUserPublishedItemVoteResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgCREUpdateUserPublishedItemVoteResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgCREUpdateUserPublishedItemVoteResponse::~CMsgCREUpdateUserPublishedItemVoteResponse() {
  SharedDtor();
}

void CMsgCREUpdateUserPublishedItemVoteResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgCREUpdateUserPublishedItemVoteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgCREUpdateUserPublishedItemVoteResponse& CMsgCREUpdateUserPublishedItemVoteResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgCREUpdateUserPublishedItemVoteResponse* CMsgCREUpdateUserPublishedItemVoteResponse::default_instance_ = NULL;

CMsgCREUpdateUserPublishedItemVoteResponse* CMsgCREUpdateUserPublishedItemVoteResponse::New() const {
  return new CMsgCREUpdateUserPublishedItemVoteResponse;
}

void CMsgCREUpdateUserPublishedItemVoteResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgCREUpdateUserPublishedItemVoteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgCREUpdateUserPublishedItemVoteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

}

int CMsgCREUpdateUserPublishedItemVoteResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgCREUpdateUserPublishedItemVoteResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgCREUpdateUserPublishedItemVoteResponse*>(&from));
}

void CMsgCREUpdateUserPublishedItemVoteResponse::MergeFrom(const CMsgCREUpdateUserPublishedItemVoteResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
  }
}

void CMsgCREUpdateUserPublishedItemVoteResponse::CopyFrom(const CMsgCREUpdateUserPublishedItemVoteResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCREUpdateUserPublishedItemVoteResponse::IsInitialized() const {

  return true;
}

void CMsgCREUpdateUserPublishedItemVoteResponse::Swap(CMsgCREUpdateUserPublishedItemVoteResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgCREUpdateUserPublishedItemVoteResponse::GetTypeName() const {
  return "Sc.CMsgCREUpdateUserPublishedItemVoteResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::kPublishedFileIdFieldNumber;
#endif  // !_MSC_VER

CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::InitAsDefaultInstance() {
}

CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId(const CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::SharedCtor() {
  _cached_size_ = 0;
  published_file_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::~CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId() {
  SharedDtor();
}

void CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId& CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId* CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::default_instance_ = NULL;

CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId* CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::New() const {
  return new CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId;
}

void CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    published_file_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 published_file_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &published_file_id_)));
          set_has_published_file_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 published_file_id = 1;
  if (has_published_file_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->published_file_id(), output);
  }

}

int CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 published_file_id = 1;
    if (has_published_file_id()) {
      total_size += 1 + 8;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId*>(&from));
}

void CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::MergeFrom(const CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_published_file_id()) {
      set_published_file_id(from.published_file_id());
    }
  }
}

void CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::CopyFrom(const CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::IsInitialized() const {

  return true;
}

void CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::Swap(CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId* other) {
  if (other != this) {
    std::swap(published_file_id_, other->published_file_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId::GetTypeName() const {
  return "Sc.CMsgCREGetUserPublishedItemVoteDetails.PublishedFileId";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgCREGetUserPublishedItemVoteDetails::kPublishedFileIdsFieldNumber;
#endif  // !_MSC_VER

CMsgCREGetUserPublishedItemVoteDetails::CMsgCREGetUserPublishedItemVoteDetails()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgCREGetUserPublishedItemVoteDetails::InitAsDefaultInstance() {
}

CMsgCREGetUserPublishedItemVoteDetails::CMsgCREGetUserPublishedItemVoteDetails(const CMsgCREGetUserPublishedItemVoteDetails& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgCREGetUserPublishedItemVoteDetails::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgCREGetUserPublishedItemVoteDetails::~CMsgCREGetUserPublishedItemVoteDetails() {
  SharedDtor();
}

void CMsgCREGetUserPublishedItemVoteDetails::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgCREGetUserPublishedItemVoteDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgCREGetUserPublishedItemVoteDetails& CMsgCREGetUserPublishedItemVoteDetails::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgCREGetUserPublishedItemVoteDetails* CMsgCREGetUserPublishedItemVoteDetails::default_instance_ = NULL;

CMsgCREGetUserPublishedItemVoteDetails* CMsgCREGetUserPublishedItemVoteDetails::New() const {
  return new CMsgCREGetUserPublishedItemVoteDetails;
}

void CMsgCREGetUserPublishedItemVoteDetails::Clear() {
  published_file_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgCREGetUserPublishedItemVoteDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Sc.CMsgCREGetUserPublishedItemVoteDetails.PublishedFileId published_file_ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_published_file_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_published_file_ids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_published_file_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgCREGetUserPublishedItemVoteDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Sc.CMsgCREGetUserPublishedItemVoteDetails.PublishedFileId published_file_ids = 1;
  for (int i = 0; i < this->published_file_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->published_file_ids(i), output);
  }

}

int CMsgCREGetUserPublishedItemVoteDetails::ByteSize() const {
  int total_size = 0;

  // repeated .Sc.CMsgCREGetUserPublishedItemVoteDetails.PublishedFileId published_file_ids = 1;
  total_size += 1 * this->published_file_ids_size();
  for (int i = 0; i < this->published_file_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->published_file_ids(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgCREGetUserPublishedItemVoteDetails::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgCREGetUserPublishedItemVoteDetails*>(&from));
}

void CMsgCREGetUserPublishedItemVoteDetails::MergeFrom(const CMsgCREGetUserPublishedItemVoteDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  published_file_ids_.MergeFrom(from.published_file_ids_);
}

void CMsgCREGetUserPublishedItemVoteDetails::CopyFrom(const CMsgCREGetUserPublishedItemVoteDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCREGetUserPublishedItemVoteDetails::IsInitialized() const {

  return true;
}

void CMsgCREGetUserPublishedItemVoteDetails::Swap(CMsgCREGetUserPublishedItemVoteDetails* other) {
  if (other != this) {
    published_file_ids_.Swap(&other->published_file_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgCREGetUserPublishedItemVoteDetails::GetTypeName() const {
  return "Sc.CMsgCREGetUserPublishedItemVoteDetails";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::kPublishedFileIdFieldNumber;
const int CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::kVoteFieldNumber;
#endif  // !_MSC_VER

CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::InitAsDefaultInstance() {
}

CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail(const CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::SharedCtor() {
  _cached_size_ = 0;
  published_file_id_ = GOOGLE_ULONGLONG(0);
  vote_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::~CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail() {
  SharedDtor();
}

void CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail& CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail* CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::default_instance_ = NULL;

CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail* CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::New() const {
  return new CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail;
}

void CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    published_file_id_ = GOOGLE_ULONGLONG(0);
    vote_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 published_file_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &published_file_id_)));
          set_has_published_file_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_vote;
        break;
      }

      // optional int32 vote = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vote:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vote_)));
          set_has_vote();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 published_file_id = 1;
  if (has_published_file_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->published_file_id(), output);
  }

  // optional int32 vote = 2 [default = 0];
  if (has_vote()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->vote(), output);
  }

}

int CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 published_file_id = 1;
    if (has_published_file_id()) {
      total_size += 1 + 8;
    }

    // optional int32 vote = 2 [default = 0];
    if (has_vote()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vote());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail*>(&from));
}

void CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::MergeFrom(const CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_published_file_id()) {
      set_published_file_id(from.published_file_id());
    }
    if (from.has_vote()) {
      set_vote(from.vote());
    }
  }
}

void CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::CopyFrom(const CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::IsInitialized() const {

  return true;
}

void CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::Swap(CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail* other) {
  if (other != this) {
    std::swap(published_file_id_, other->published_file_id_);
    std::swap(vote_, other->vote_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail::GetTypeName() const {
  return "Sc.CMsgCREGetUserPublishedItemVoteDetailsResponse.UserItemVoteDetail";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgCREGetUserPublishedItemVoteDetailsResponse::kEresultFieldNumber;
const int CMsgCREGetUserPublishedItemVoteDetailsResponse::kUserItemVoteDetailsFieldNumber;
#endif  // !_MSC_VER

CMsgCREGetUserPublishedItemVoteDetailsResponse::CMsgCREGetUserPublishedItemVoteDetailsResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgCREGetUserPublishedItemVoteDetailsResponse::InitAsDefaultInstance() {
}

CMsgCREGetUserPublishedItemVoteDetailsResponse::CMsgCREGetUserPublishedItemVoteDetailsResponse(const CMsgCREGetUserPublishedItemVoteDetailsResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgCREGetUserPublishedItemVoteDetailsResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgCREGetUserPublishedItemVoteDetailsResponse::~CMsgCREGetUserPublishedItemVoteDetailsResponse() {
  SharedDtor();
}

void CMsgCREGetUserPublishedItemVoteDetailsResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgCREGetUserPublishedItemVoteDetailsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgCREGetUserPublishedItemVoteDetailsResponse& CMsgCREGetUserPublishedItemVoteDetailsResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgCREGetUserPublishedItemVoteDetailsResponse* CMsgCREGetUserPublishedItemVoteDetailsResponse::default_instance_ = NULL;

CMsgCREGetUserPublishedItemVoteDetailsResponse* CMsgCREGetUserPublishedItemVoteDetailsResponse::New() const {
  return new CMsgCREGetUserPublishedItemVoteDetailsResponse;
}

void CMsgCREGetUserPublishedItemVoteDetailsResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
  }
  user_item_vote_details_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgCREGetUserPublishedItemVoteDetailsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_item_vote_details;
        break;
      }

      // repeated .Sc.CMsgCREGetUserPublishedItemVoteDetailsResponse.UserItemVoteDetail user_item_vote_details = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_item_vote_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_item_vote_details()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_item_vote_details;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgCREGetUserPublishedItemVoteDetailsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // repeated .Sc.CMsgCREGetUserPublishedItemVoteDetailsResponse.UserItemVoteDetail user_item_vote_details = 2;
  for (int i = 0; i < this->user_item_vote_details_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->user_item_vote_details(i), output);
  }

}

int CMsgCREGetUserPublishedItemVoteDetailsResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  // repeated .Sc.CMsgCREGetUserPublishedItemVoteDetailsResponse.UserItemVoteDetail user_item_vote_details = 2;
  total_size += 1 * this->user_item_vote_details_size();
  for (int i = 0; i < this->user_item_vote_details_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_item_vote_details(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgCREGetUserPublishedItemVoteDetailsResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgCREGetUserPublishedItemVoteDetailsResponse*>(&from));
}

void CMsgCREGetUserPublishedItemVoteDetailsResponse::MergeFrom(const CMsgCREGetUserPublishedItemVoteDetailsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_item_vote_details_.MergeFrom(from.user_item_vote_details_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
  }
}

void CMsgCREGetUserPublishedItemVoteDetailsResponse::CopyFrom(const CMsgCREGetUserPublishedItemVoteDetailsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCREGetUserPublishedItemVoteDetailsResponse::IsInitialized() const {

  return true;
}

void CMsgCREGetUserPublishedItemVoteDetailsResponse::Swap(CMsgCREGetUserPublishedItemVoteDetailsResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    user_item_vote_details_.Swap(&other->user_item_vote_details_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgCREGetUserPublishedItemVoteDetailsResponse::GetTypeName() const {
  return "Sc.CMsgCREGetUserPublishedItemVoteDetailsResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgGameServerPingSample_Sample::kIpFieldNumber;
const int CMsgGameServerPingSample_Sample::kAvgPingMsFieldNumber;
const int CMsgGameServerPingSample_Sample::kStddevPingMsX10FieldNumber;
#endif  // !_MSC_VER

CMsgGameServerPingSample_Sample::CMsgGameServerPingSample_Sample()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgGameServerPingSample_Sample::InitAsDefaultInstance() {
}

CMsgGameServerPingSample_Sample::CMsgGameServerPingSample_Sample(const CMsgGameServerPingSample_Sample& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGameServerPingSample_Sample::SharedCtor() {
  _cached_size_ = 0;
  ip_ = 0u;
  avg_ping_ms_ = 0u;
  stddev_ping_ms_x10_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGameServerPingSample_Sample::~CMsgGameServerPingSample_Sample() {
  SharedDtor();
}

void CMsgGameServerPingSample_Sample::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgGameServerPingSample_Sample::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgGameServerPingSample_Sample& CMsgGameServerPingSample_Sample::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgGameServerPingSample_Sample* CMsgGameServerPingSample_Sample::default_instance_ = NULL;

CMsgGameServerPingSample_Sample* CMsgGameServerPingSample_Sample::New() const {
  return new CMsgGameServerPingSample_Sample;
}

void CMsgGameServerPingSample_Sample::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ip_ = 0u;
    avg_ping_ms_ = 0u;
    stddev_ping_ms_x10_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgGameServerPingSample_Sample::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_avg_ping_ms;
        break;
      }

      // optional uint32 avg_ping_ms = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avg_ping_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avg_ping_ms_)));
          set_has_avg_ping_ms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_stddev_ping_ms_x10;
        break;
      }

      // optional uint32 stddev_ping_ms_x10 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stddev_ping_ms_x10:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stddev_ping_ms_x10_)));
          set_has_stddev_ping_ms_x10();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGameServerPingSample_Sample::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->ip(), output);
  }

  // optional uint32 avg_ping_ms = 2;
  if (has_avg_ping_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->avg_ping_ms(), output);
  }

  // optional uint32 stddev_ping_ms_x10 = 3;
  if (has_stddev_ping_ms_x10()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stddev_ping_ms_x10(), output);
  }

}

int CMsgGameServerPingSample_Sample::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 ip = 1;
    if (has_ip()) {
      total_size += 1 + 4;
    }

    // optional uint32 avg_ping_ms = 2;
    if (has_avg_ping_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avg_ping_ms());
    }

    // optional uint32 stddev_ping_ms_x10 = 3;
    if (has_stddev_ping_ms_x10()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stddev_ping_ms_x10());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameServerPingSample_Sample::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgGameServerPingSample_Sample*>(&from));
}

void CMsgGameServerPingSample_Sample::MergeFrom(const CMsgGameServerPingSample_Sample& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_avg_ping_ms()) {
      set_avg_ping_ms(from.avg_ping_ms());
    }
    if (from.has_stddev_ping_ms_x10()) {
      set_stddev_ping_ms_x10(from.stddev_ping_ms_x10());
    }
  }
}

void CMsgGameServerPingSample_Sample::CopyFrom(const CMsgGameServerPingSample_Sample& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerPingSample_Sample::IsInitialized() const {

  return true;
}

void CMsgGameServerPingSample_Sample::Swap(CMsgGameServerPingSample_Sample* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(avg_ping_ms_, other->avg_ping_ms_);
    std::swap(stddev_ping_ms_x10_, other->stddev_ping_ms_x10_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgGameServerPingSample_Sample::GetTypeName() const {
  return "Sc.CMsgGameServerPingSample.Sample";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CMsgGameServerPingSample::kMyIpFieldNumber;
const int CMsgGameServerPingSample::kGsAppIdFieldNumber;
const int CMsgGameServerPingSample::kGsSamplesFieldNumber;
#endif  // !_MSC_VER

CMsgGameServerPingSample::CMsgGameServerPingSample()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgGameServerPingSample::InitAsDefaultInstance() {
}

CMsgGameServerPingSample::CMsgGameServerPingSample(const CMsgGameServerPingSample& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgGameServerPingSample::SharedCtor() {
  _cached_size_ = 0;
  my_ip_ = 0u;
  gs_app_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgGameServerPingSample::~CMsgGameServerPingSample() {
  SharedDtor();
}

void CMsgGameServerPingSample::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgGameServerPingSample::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgGameServerPingSample& CMsgGameServerPingSample::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgGameServerPingSample* CMsgGameServerPingSample::default_instance_ = NULL;

CMsgGameServerPingSample* CMsgGameServerPingSample::New() const {
  return new CMsgGameServerPingSample;
}

void CMsgGameServerPingSample::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    my_ip_ = 0u;
    gs_app_id_ = 0;
  }
  gs_samples_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgGameServerPingSample::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 my_ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &my_ip_)));
          set_has_my_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gs_app_id;
        break;
      }

      // optional int32 gs_app_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gs_app_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gs_app_id_)));
          set_has_gs_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_gs_samples;
        break;
      }

      // repeated .Sc.CMsgGameServerPingSample.Sample gs_samples = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gs_samples:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gs_samples()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_gs_samples;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgGameServerPingSample::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 my_ip = 1;
  if (has_my_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->my_ip(), output);
  }

  // optional int32 gs_app_id = 2;
  if (has_gs_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gs_app_id(), output);
  }

  // repeated .Sc.CMsgGameServerPingSample.Sample gs_samples = 3;
  for (int i = 0; i < this->gs_samples_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->gs_samples(i), output);
  }

}

int CMsgGameServerPingSample::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 my_ip = 1;
    if (has_my_ip()) {
      total_size += 1 + 4;
    }

    // optional int32 gs_app_id = 2;
    if (has_gs_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gs_app_id());
    }

  }
  // repeated .Sc.CMsgGameServerPingSample.Sample gs_samples = 3;
  total_size += 1 * this->gs_samples_size();
  for (int i = 0; i < this->gs_samples_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gs_samples(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGameServerPingSample::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgGameServerPingSample*>(&from));
}

void CMsgGameServerPingSample::MergeFrom(const CMsgGameServerPingSample& from) {
  GOOGLE_CHECK_NE(&from, this);
  gs_samples_.MergeFrom(from.gs_samples_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_my_ip()) {
      set_my_ip(from.my_ip());
    }
    if (from.has_gs_app_id()) {
      set_gs_app_id(from.gs_app_id());
    }
  }
}

void CMsgGameServerPingSample::CopyFrom(const CMsgGameServerPingSample& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerPingSample::IsInitialized() const {

  return true;
}

void CMsgGameServerPingSample::Swap(CMsgGameServerPingSample* other) {
  if (other != this) {
    std::swap(my_ip_, other->my_ip_);
    std::swap(gs_app_id_, other->gs_app_id_);
    gs_samples_.Swap(&other->gs_samples_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgGameServerPingSample::GetTypeName() const {
  return "Sc.CMsgGameServerPingSample";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgFSGetFollowerCount::kSteamIdFieldNumber;
#endif  // !_MSC_VER

CMsgFSGetFollowerCount::CMsgFSGetFollowerCount()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgFSGetFollowerCount::InitAsDefaultInstance() {
}

CMsgFSGetFollowerCount::CMsgFSGetFollowerCount(const CMsgFSGetFollowerCount& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgFSGetFollowerCount::SharedCtor() {
  _cached_size_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgFSGetFollowerCount::~CMsgFSGetFollowerCount() {
  SharedDtor();
}

void CMsgFSGetFollowerCount::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgFSGetFollowerCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgFSGetFollowerCount& CMsgFSGetFollowerCount::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgFSGetFollowerCount* CMsgFSGetFollowerCount::default_instance_ = NULL;

CMsgFSGetFollowerCount* CMsgFSGetFollowerCount::New() const {
  return new CMsgFSGetFollowerCount;
}

void CMsgFSGetFollowerCount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgFSGetFollowerCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          set_has_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgFSGetFollowerCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

}

int CMsgFSGetFollowerCount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgFSGetFollowerCount::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgFSGetFollowerCount*>(&from));
}

void CMsgFSGetFollowerCount::MergeFrom(const CMsgFSGetFollowerCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
  }
}

void CMsgFSGetFollowerCount::CopyFrom(const CMsgFSGetFollowerCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFSGetFollowerCount::IsInitialized() const {

  return true;
}

void CMsgFSGetFollowerCount::Swap(CMsgFSGetFollowerCount* other) {
  if (other != this) {
    std::swap(steam_id_, other->steam_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgFSGetFollowerCount::GetTypeName() const {
  return "Sc.CMsgFSGetFollowerCount";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgFSGetFollowerCountResponse::kEresultFieldNumber;
const int CMsgFSGetFollowerCountResponse::kCountFieldNumber;
#endif  // !_MSC_VER

CMsgFSGetFollowerCountResponse::CMsgFSGetFollowerCountResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgFSGetFollowerCountResponse::InitAsDefaultInstance() {
}

CMsgFSGetFollowerCountResponse::CMsgFSGetFollowerCountResponse(const CMsgFSGetFollowerCountResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgFSGetFollowerCountResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgFSGetFollowerCountResponse::~CMsgFSGetFollowerCountResponse() {
  SharedDtor();
}

void CMsgFSGetFollowerCountResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgFSGetFollowerCountResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgFSGetFollowerCountResponse& CMsgFSGetFollowerCountResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgFSGetFollowerCountResponse* CMsgFSGetFollowerCountResponse::default_instance_ = NULL;

CMsgFSGetFollowerCountResponse* CMsgFSGetFollowerCountResponse::New() const {
  return new CMsgFSGetFollowerCountResponse;
}

void CMsgFSGetFollowerCountResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgFSGetFollowerCountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional int32 count = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgFSGetFollowerCountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional int32 count = 2 [default = 0];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

}

int CMsgFSGetFollowerCountResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional int32 count = 2 [default = 0];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgFSGetFollowerCountResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgFSGetFollowerCountResponse*>(&from));
}

void CMsgFSGetFollowerCountResponse::MergeFrom(const CMsgFSGetFollowerCountResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
}

void CMsgFSGetFollowerCountResponse::CopyFrom(const CMsgFSGetFollowerCountResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFSGetFollowerCountResponse::IsInitialized() const {

  return true;
}

void CMsgFSGetFollowerCountResponse::Swap(CMsgFSGetFollowerCountResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgFSGetFollowerCountResponse::GetTypeName() const {
  return "Sc.CMsgFSGetFollowerCountResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgFSGetIsFollowing::kSteamIdFieldNumber;
#endif  // !_MSC_VER

CMsgFSGetIsFollowing::CMsgFSGetIsFollowing()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgFSGetIsFollowing::InitAsDefaultInstance() {
}

CMsgFSGetIsFollowing::CMsgFSGetIsFollowing(const CMsgFSGetIsFollowing& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgFSGetIsFollowing::SharedCtor() {
  _cached_size_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgFSGetIsFollowing::~CMsgFSGetIsFollowing() {
  SharedDtor();
}

void CMsgFSGetIsFollowing::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgFSGetIsFollowing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgFSGetIsFollowing& CMsgFSGetIsFollowing::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgFSGetIsFollowing* CMsgFSGetIsFollowing::default_instance_ = NULL;

CMsgFSGetIsFollowing* CMsgFSGetIsFollowing::New() const {
  return new CMsgFSGetIsFollowing;
}

void CMsgFSGetIsFollowing::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    steam_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgFSGetIsFollowing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          set_has_steam_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgFSGetIsFollowing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

}

int CMsgFSGetIsFollowing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgFSGetIsFollowing::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgFSGetIsFollowing*>(&from));
}

void CMsgFSGetIsFollowing::MergeFrom(const CMsgFSGetIsFollowing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_steam_id()) {
      set_steam_id(from.steam_id());
    }
  }
}

void CMsgFSGetIsFollowing::CopyFrom(const CMsgFSGetIsFollowing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFSGetIsFollowing::IsInitialized() const {

  return true;
}

void CMsgFSGetIsFollowing::Swap(CMsgFSGetIsFollowing* other) {
  if (other != this) {
    std::swap(steam_id_, other->steam_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgFSGetIsFollowing::GetTypeName() const {
  return "Sc.CMsgFSGetIsFollowing";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgFSGetIsFollowingResponse::kEresultFieldNumber;
const int CMsgFSGetIsFollowingResponse::kIsFollowingFieldNumber;
#endif  // !_MSC_VER

CMsgFSGetIsFollowingResponse::CMsgFSGetIsFollowingResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgFSGetIsFollowingResponse::InitAsDefaultInstance() {
}

CMsgFSGetIsFollowingResponse::CMsgFSGetIsFollowingResponse(const CMsgFSGetIsFollowingResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgFSGetIsFollowingResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  is_following_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgFSGetIsFollowingResponse::~CMsgFSGetIsFollowingResponse() {
  SharedDtor();
}

void CMsgFSGetIsFollowingResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgFSGetIsFollowingResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgFSGetIsFollowingResponse& CMsgFSGetIsFollowingResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgFSGetIsFollowingResponse* CMsgFSGetIsFollowingResponse::default_instance_ = NULL;

CMsgFSGetIsFollowingResponse* CMsgFSGetIsFollowingResponse::New() const {
  return new CMsgFSGetIsFollowingResponse;
}

void CMsgFSGetIsFollowingResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    is_following_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgFSGetIsFollowingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_following;
        break;
      }

      // optional bool is_following = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_following:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_following_)));
          set_has_is_following();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgFSGetIsFollowingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional bool is_following = 2 [default = false];
  if (has_is_following()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_following(), output);
  }

}

int CMsgFSGetIsFollowingResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional bool is_following = 2 [default = false];
    if (has_is_following()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgFSGetIsFollowingResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgFSGetIsFollowingResponse*>(&from));
}

void CMsgFSGetIsFollowingResponse::MergeFrom(const CMsgFSGetIsFollowingResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_is_following()) {
      set_is_following(from.is_following());
    }
  }
}

void CMsgFSGetIsFollowingResponse::CopyFrom(const CMsgFSGetIsFollowingResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFSGetIsFollowingResponse::IsInitialized() const {

  return true;
}

void CMsgFSGetIsFollowingResponse::Swap(CMsgFSGetIsFollowingResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(is_following_, other->is_following_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgFSGetIsFollowingResponse::GetTypeName() const {
  return "Sc.CMsgFSGetIsFollowingResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgFSEnumerateFollowingList::kStartIndexFieldNumber;
#endif  // !_MSC_VER

CMsgFSEnumerateFollowingList::CMsgFSEnumerateFollowingList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgFSEnumerateFollowingList::InitAsDefaultInstance() {
}

CMsgFSEnumerateFollowingList::CMsgFSEnumerateFollowingList(const CMsgFSEnumerateFollowingList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgFSEnumerateFollowingList::SharedCtor() {
  _cached_size_ = 0;
  start_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgFSEnumerateFollowingList::~CMsgFSEnumerateFollowingList() {
  SharedDtor();
}

void CMsgFSEnumerateFollowingList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgFSEnumerateFollowingList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgFSEnumerateFollowingList& CMsgFSEnumerateFollowingList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgFSEnumerateFollowingList* CMsgFSEnumerateFollowingList::default_instance_ = NULL;

CMsgFSEnumerateFollowingList* CMsgFSEnumerateFollowingList::New() const {
  return new CMsgFSEnumerateFollowingList;
}

void CMsgFSEnumerateFollowingList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    start_index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgFSEnumerateFollowingList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 start_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_index_)));
          set_has_start_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgFSEnumerateFollowingList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 start_index = 1;
  if (has_start_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->start_index(), output);
  }

}

int CMsgFSEnumerateFollowingList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 start_index = 1;
    if (has_start_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_index());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgFSEnumerateFollowingList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgFSEnumerateFollowingList*>(&from));
}

void CMsgFSEnumerateFollowingList::MergeFrom(const CMsgFSEnumerateFollowingList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_index()) {
      set_start_index(from.start_index());
    }
  }
}

void CMsgFSEnumerateFollowingList::CopyFrom(const CMsgFSEnumerateFollowingList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFSEnumerateFollowingList::IsInitialized() const {

  return true;
}

void CMsgFSEnumerateFollowingList::Swap(CMsgFSEnumerateFollowingList* other) {
  if (other != this) {
    std::swap(start_index_, other->start_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgFSEnumerateFollowingList::GetTypeName() const {
  return "Sc.CMsgFSEnumerateFollowingList";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgFSEnumerateFollowingListResponse::kEresultFieldNumber;
const int CMsgFSEnumerateFollowingListResponse::kTotalResultsFieldNumber;
const int CMsgFSEnumerateFollowingListResponse::kSteamIdsFieldNumber;
#endif  // !_MSC_VER

CMsgFSEnumerateFollowingListResponse::CMsgFSEnumerateFollowingListResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgFSEnumerateFollowingListResponse::InitAsDefaultInstance() {
}

CMsgFSEnumerateFollowingListResponse::CMsgFSEnumerateFollowingListResponse(const CMsgFSEnumerateFollowingListResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgFSEnumerateFollowingListResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  total_results_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgFSEnumerateFollowingListResponse::~CMsgFSEnumerateFollowingListResponse() {
  SharedDtor();
}

void CMsgFSEnumerateFollowingListResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgFSEnumerateFollowingListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgFSEnumerateFollowingListResponse& CMsgFSEnumerateFollowingListResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgFSEnumerateFollowingListResponse* CMsgFSEnumerateFollowingListResponse::default_instance_ = NULL;

CMsgFSEnumerateFollowingListResponse* CMsgFSEnumerateFollowingListResponse::New() const {
  return new CMsgFSEnumerateFollowingListResponse;
}

void CMsgFSEnumerateFollowingListResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    total_results_ = 0;
  }
  steam_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgFSEnumerateFollowingListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_total_results;
        break;
      }

      // optional int32 total_results = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_results:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_results_)));
          set_has_total_results();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_steam_ids;
        break;
      }

      // repeated fixed64 steam_ids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steam_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 25, input, this->mutable_steam_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_steam_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_steam_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgFSEnumerateFollowingListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional int32 total_results = 2;
  if (has_total_results()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_results(), output);
  }

  // repeated fixed64 steam_ids = 3;
  for (int i = 0; i < this->steam_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      3, this->steam_ids(i), output);
  }

}

int CMsgFSEnumerateFollowingListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional int32 total_results = 2;
    if (has_total_results()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_results());
    }

  }
  // repeated fixed64 steam_ids = 3;
  {
    int data_size = 0;
    data_size = 8 * this->steam_ids_size();
    total_size += 1 * this->steam_ids_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgFSEnumerateFollowingListResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgFSEnumerateFollowingListResponse*>(&from));
}

void CMsgFSEnumerateFollowingListResponse::MergeFrom(const CMsgFSEnumerateFollowingListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  steam_ids_.MergeFrom(from.steam_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_total_results()) {
      set_total_results(from.total_results());
    }
  }
}

void CMsgFSEnumerateFollowingListResponse::CopyFrom(const CMsgFSEnumerateFollowingListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFSEnumerateFollowingListResponse::IsInitialized() const {

  return true;
}

void CMsgFSEnumerateFollowingListResponse::Swap(CMsgFSEnumerateFollowingListResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(total_results_, other->total_results_);
    steam_ids_.Swap(&other->steam_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgFSEnumerateFollowingListResponse::GetTypeName() const {
  return "Sc.CMsgFSEnumerateFollowingListResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDPGetNumberOfCurrentPlayers::kAppidFieldNumber;
#endif  // !_MSC_VER

CMsgDPGetNumberOfCurrentPlayers::CMsgDPGetNumberOfCurrentPlayers()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgDPGetNumberOfCurrentPlayers::InitAsDefaultInstance() {
}

CMsgDPGetNumberOfCurrentPlayers::CMsgDPGetNumberOfCurrentPlayers(const CMsgDPGetNumberOfCurrentPlayers& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgDPGetNumberOfCurrentPlayers::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDPGetNumberOfCurrentPlayers::~CMsgDPGetNumberOfCurrentPlayers() {
  SharedDtor();
}

void CMsgDPGetNumberOfCurrentPlayers::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgDPGetNumberOfCurrentPlayers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgDPGetNumberOfCurrentPlayers& CMsgDPGetNumberOfCurrentPlayers::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgDPGetNumberOfCurrentPlayers* CMsgDPGetNumberOfCurrentPlayers::default_instance_ = NULL;

CMsgDPGetNumberOfCurrentPlayers* CMsgDPGetNumberOfCurrentPlayers::New() const {
  return new CMsgDPGetNumberOfCurrentPlayers;
}

void CMsgDPGetNumberOfCurrentPlayers::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    appid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgDPGetNumberOfCurrentPlayers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgDPGetNumberOfCurrentPlayers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 appid = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

}

int CMsgDPGetNumberOfCurrentPlayers::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDPGetNumberOfCurrentPlayers::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgDPGetNumberOfCurrentPlayers*>(&from));
}

void CMsgDPGetNumberOfCurrentPlayers::MergeFrom(const CMsgDPGetNumberOfCurrentPlayers& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
  }
}

void CMsgDPGetNumberOfCurrentPlayers::CopyFrom(const CMsgDPGetNumberOfCurrentPlayers& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDPGetNumberOfCurrentPlayers::IsInitialized() const {

  return true;
}

void CMsgDPGetNumberOfCurrentPlayers::Swap(CMsgDPGetNumberOfCurrentPlayers* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgDPGetNumberOfCurrentPlayers::GetTypeName() const {
  return "Sc.CMsgDPGetNumberOfCurrentPlayers";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgDPGetNumberOfCurrentPlayersResponse::kEresultFieldNumber;
const int CMsgDPGetNumberOfCurrentPlayersResponse::kPlayerCountFieldNumber;
#endif  // !_MSC_VER

CMsgDPGetNumberOfCurrentPlayersResponse::CMsgDPGetNumberOfCurrentPlayersResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgDPGetNumberOfCurrentPlayersResponse::InitAsDefaultInstance() {
}

CMsgDPGetNumberOfCurrentPlayersResponse::CMsgDPGetNumberOfCurrentPlayersResponse(const CMsgDPGetNumberOfCurrentPlayersResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgDPGetNumberOfCurrentPlayersResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
  player_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgDPGetNumberOfCurrentPlayersResponse::~CMsgDPGetNumberOfCurrentPlayersResponse() {
  SharedDtor();
}

void CMsgDPGetNumberOfCurrentPlayersResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgDPGetNumberOfCurrentPlayersResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgDPGetNumberOfCurrentPlayersResponse& CMsgDPGetNumberOfCurrentPlayersResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgDPGetNumberOfCurrentPlayersResponse* CMsgDPGetNumberOfCurrentPlayersResponse::default_instance_ = NULL;

CMsgDPGetNumberOfCurrentPlayersResponse* CMsgDPGetNumberOfCurrentPlayersResponse::New() const {
  return new CMsgDPGetNumberOfCurrentPlayersResponse;
}

void CMsgDPGetNumberOfCurrentPlayersResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eresult_ = 2;
    player_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgDPGetNumberOfCurrentPlayersResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
          set_has_eresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_count;
        break;
      }

      // optional int32 player_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_count_)));
          set_has_player_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgDPGetNumberOfCurrentPlayersResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional int32 player_count = 2;
  if (has_player_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_count(), output);
  }

}

int CMsgDPGetNumberOfCurrentPlayersResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional int32 player_count = 2;
    if (has_player_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_count());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDPGetNumberOfCurrentPlayersResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgDPGetNumberOfCurrentPlayersResponse*>(&from));
}

void CMsgDPGetNumberOfCurrentPlayersResponse::MergeFrom(const CMsgDPGetNumberOfCurrentPlayersResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eresult()) {
      set_eresult(from.eresult());
    }
    if (from.has_player_count()) {
      set_player_count(from.player_count());
    }
  }
}

void CMsgDPGetNumberOfCurrentPlayersResponse::CopyFrom(const CMsgDPGetNumberOfCurrentPlayersResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDPGetNumberOfCurrentPlayersResponse::IsInitialized() const {

  return true;
}

void CMsgDPGetNumberOfCurrentPlayersResponse::Swap(CMsgDPGetNumberOfCurrentPlayersResponse* other) {
  if (other != this) {
    std::swap(eresult_, other->eresult_);
    std::swap(player_count_, other->player_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgDPGetNumberOfCurrentPlayersResponse::GetTypeName() const {
  return "Sc.CMsgDPGetNumberOfCurrentPlayersResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientFriendUserStatusPublished::kFriendSteamidFieldNumber;
const int CMsgClientFriendUserStatusPublished::kAppidFieldNumber;
const int CMsgClientFriendUserStatusPublished::kStatusTextFieldNumber;
#endif  // !_MSC_VER

CMsgClientFriendUserStatusPublished::CMsgClientFriendUserStatusPublished()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientFriendUserStatusPublished::InitAsDefaultInstance() {
}

CMsgClientFriendUserStatusPublished::CMsgClientFriendUserStatusPublished(const CMsgClientFriendUserStatusPublished& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientFriendUserStatusPublished::SharedCtor() {
  _cached_size_ = 0;
  friend_steamid_ = GOOGLE_ULONGLONG(0);
  appid_ = 0u;
  status_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientFriendUserStatusPublished::~CMsgClientFriendUserStatusPublished() {
  SharedDtor();
}

void CMsgClientFriendUserStatusPublished::SharedDtor() {
  if (status_text_ != &::google::protobuf::internal::kEmptyString) {
    delete status_text_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientFriendUserStatusPublished::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientFriendUserStatusPublished& CMsgClientFriendUserStatusPublished::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientFriendUserStatusPublished* CMsgClientFriendUserStatusPublished::default_instance_ = NULL;

CMsgClientFriendUserStatusPublished* CMsgClientFriendUserStatusPublished::New() const {
  return new CMsgClientFriendUserStatusPublished;
}

void CMsgClientFriendUserStatusPublished::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    friend_steamid_ = GOOGLE_ULONGLONG(0);
    appid_ = 0u;
    if (has_status_text()) {
      if (status_text_ != &::google::protobuf::internal::kEmptyString) {
        status_text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientFriendUserStatusPublished::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 friend_steamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &friend_steamid_)));
          set_has_friend_steamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_appid;
        break;
      }

      // optional uint32 appid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_status_text;
        break;
      }

      // optional string status_text = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientFriendUserStatusPublished::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 friend_steamid = 1;
  if (has_friend_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->friend_steamid(), output);
  }

  // optional uint32 appid = 2;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->appid(), output);
  }

  // optional string status_text = 3;
  if (has_status_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->status_text(), output);
  }

}

int CMsgClientFriendUserStatusPublished::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 friend_steamid = 1;
    if (has_friend_steamid()) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 2;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional string status_text = 3;
    if (has_status_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->status_text());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientFriendUserStatusPublished::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientFriendUserStatusPublished*>(&from));
}

void CMsgClientFriendUserStatusPublished::MergeFrom(const CMsgClientFriendUserStatusPublished& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friend_steamid()) {
      set_friend_steamid(from.friend_steamid());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_status_text()) {
      set_status_text(from.status_text());
    }
  }
}

void CMsgClientFriendUserStatusPublished::CopyFrom(const CMsgClientFriendUserStatusPublished& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientFriendUserStatusPublished::IsInitialized() const {

  return true;
}

void CMsgClientFriendUserStatusPublished::Swap(CMsgClientFriendUserStatusPublished* other) {
  if (other != this) {
    std::swap(friend_steamid_, other->friend_steamid_);
    std::swap(appid_, other->appid_);
    std::swap(status_text_, other->status_text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientFriendUserStatusPublished::GetTypeName() const {
  return "Sc.CMsgClientFriendUserStatusPublished";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientServiceMethod::kMethodNameFieldNumber;
const int CMsgClientServiceMethod::kSerializedMethodFieldNumber;
const int CMsgClientServiceMethod::kIsNotificationFieldNumber;
#endif  // !_MSC_VER

CMsgClientServiceMethod::CMsgClientServiceMethod()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientServiceMethod::InitAsDefaultInstance() {
}

CMsgClientServiceMethod::CMsgClientServiceMethod(const CMsgClientServiceMethod& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientServiceMethod::SharedCtor() {
  _cached_size_ = 0;
  method_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serialized_method_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_notification_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientServiceMethod::~CMsgClientServiceMethod() {
  SharedDtor();
}

void CMsgClientServiceMethod::SharedDtor() {
  if (method_name_ != &::google::protobuf::internal::kEmptyString) {
    delete method_name_;
  }
  if (serialized_method_ != &::google::protobuf::internal::kEmptyString) {
    delete serialized_method_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientServiceMethod::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientServiceMethod& CMsgClientServiceMethod::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientServiceMethod* CMsgClientServiceMethod::default_instance_ = NULL;

CMsgClientServiceMethod* CMsgClientServiceMethod::New() const {
  return new CMsgClientServiceMethod;
}

void CMsgClientServiceMethod::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_method_name()) {
      if (method_name_ != &::google::protobuf::internal::kEmptyString) {
        method_name_->clear();
      }
    }
    if (has_serialized_method()) {
      if (serialized_method_ != &::google::protobuf::internal::kEmptyString) {
        serialized_method_->clear();
      }
    }
    is_notification_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientServiceMethod::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string method_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_serialized_method;
        break;
      }

      // optional string serialized_method = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serialized_method:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serialized_method()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_notification;
        break;
      }

      // optional bool is_notification = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_notification:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_notification_)));
          set_has_is_notification();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientServiceMethod::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string method_name = 1;
  if (has_method_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->method_name(), output);
  }

  // optional string serialized_method = 2;
  if (has_serialized_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->serialized_method(), output);
  }

  // optional bool is_notification = 3;
  if (has_is_notification()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_notification(), output);
  }

}

int CMsgClientServiceMethod::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string method_name = 1;
    if (has_method_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->method_name());
    }

    // optional string serialized_method = 2;
    if (has_serialized_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serialized_method());
    }

    // optional bool is_notification = 3;
    if (has_is_notification()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientServiceMethod::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientServiceMethod*>(&from));
}

void CMsgClientServiceMethod::MergeFrom(const CMsgClientServiceMethod& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_method_name()) {
      set_method_name(from.method_name());
    }
    if (from.has_serialized_method()) {
      set_serialized_method(from.serialized_method());
    }
    if (from.has_is_notification()) {
      set_is_notification(from.is_notification());
    }
  }
}

void CMsgClientServiceMethod::CopyFrom(const CMsgClientServiceMethod& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientServiceMethod::IsInitialized() const {

  return true;
}

void CMsgClientServiceMethod::Swap(CMsgClientServiceMethod* other) {
  if (other != this) {
    std::swap(method_name_, other->method_name_);
    std::swap(serialized_method_, other->serialized_method_);
    std::swap(is_notification_, other->is_notification_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientServiceMethod::GetTypeName() const {
  return "Sc.CMsgClientServiceMethod";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientServiceMethodResponse::kMethodNameFieldNumber;
const int CMsgClientServiceMethodResponse::kSerializedMethodResponseFieldNumber;
#endif  // !_MSC_VER

CMsgClientServiceMethodResponse::CMsgClientServiceMethodResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientServiceMethodResponse::InitAsDefaultInstance() {
}

CMsgClientServiceMethodResponse::CMsgClientServiceMethodResponse(const CMsgClientServiceMethodResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientServiceMethodResponse::SharedCtor() {
  _cached_size_ = 0;
  method_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serialized_method_response_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientServiceMethodResponse::~CMsgClientServiceMethodResponse() {
  SharedDtor();
}

void CMsgClientServiceMethodResponse::SharedDtor() {
  if (method_name_ != &::google::protobuf::internal::kEmptyString) {
    delete method_name_;
  }
  if (serialized_method_response_ != &::google::protobuf::internal::kEmptyString) {
    delete serialized_method_response_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientServiceMethodResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientServiceMethodResponse& CMsgClientServiceMethodResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientServiceMethodResponse* CMsgClientServiceMethodResponse::default_instance_ = NULL;

CMsgClientServiceMethodResponse* CMsgClientServiceMethodResponse::New() const {
  return new CMsgClientServiceMethodResponse;
}

void CMsgClientServiceMethodResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_method_name()) {
      if (method_name_ != &::google::protobuf::internal::kEmptyString) {
        method_name_->clear();
      }
    }
    if (has_serialized_method_response()) {
      if (serialized_method_response_ != &::google::protobuf::internal::kEmptyString) {
        serialized_method_response_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientServiceMethodResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string method_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_serialized_method_response;
        break;
      }

      // optional string serialized_method_response = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serialized_method_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serialized_method_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientServiceMethodResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string method_name = 1;
  if (has_method_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->method_name(), output);
  }

  // optional string serialized_method_response = 2;
  if (has_serialized_method_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->serialized_method_response(), output);
  }

}

int CMsgClientServiceMethodResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string method_name = 1;
    if (has_method_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->method_name());
    }

    // optional string serialized_method_response = 2;
    if (has_serialized_method_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serialized_method_response());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientServiceMethodResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientServiceMethodResponse*>(&from));
}

void CMsgClientServiceMethodResponse::MergeFrom(const CMsgClientServiceMethodResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_method_name()) {
      set_method_name(from.method_name());
    }
    if (from.has_serialized_method_response()) {
      set_serialized_method_response(from.serialized_method_response());
    }
  }
}

void CMsgClientServiceMethodResponse::CopyFrom(const CMsgClientServiceMethodResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientServiceMethodResponse::IsInitialized() const {

  return true;
}

void CMsgClientServiceMethodResponse::Swap(CMsgClientServiceMethodResponse* other) {
  if (other != this) {
    std::swap(method_name_, other->method_name_);
    std::swap(serialized_method_response_, other->serialized_method_response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientServiceMethodResponse::GetTypeName() const {
  return "Sc.CMsgClientServiceMethodResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientUIMode::kUimodeFieldNumber;
#endif  // !_MSC_VER

CMsgClientUIMode::CMsgClientUIMode()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMsgClientUIMode::InitAsDefaultInstance() {
}

CMsgClientUIMode::CMsgClientUIMode(const CMsgClientUIMode& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientUIMode::SharedCtor() {
  _cached_size_ = 0;
  uimode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientUIMode::~CMsgClientUIMode() {
  SharedDtor();
}

void CMsgClientUIMode::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMsgClientUIMode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMsgClientUIMode& CMsgClientUIMode::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fclientserver_2eproto();
#endif
  return *default_instance_;
}

CMsgClientUIMode* CMsgClientUIMode::default_instance_ = NULL;

CMsgClientUIMode* CMsgClientUIMode::New() const {
  return new CMsgClientUIMode;
}

void CMsgClientUIMode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uimode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMsgClientUIMode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uimode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uimode_)));
          set_has_uimode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientUIMode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uimode = 1;
  if (has_uimode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uimode(), output);
  }

}

int CMsgClientUIMode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uimode = 1;
    if (has_uimode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uimode());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientUIMode::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMsgClientUIMode*>(&from));
}

void CMsgClientUIMode::MergeFrom(const CMsgClientUIMode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uimode()) {
      set_uimode(from.uimode());
    }
  }
}

void CMsgClientUIMode::CopyFrom(const CMsgClientUIMode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientUIMode::IsInitialized() const {

  return true;
}

void CMsgClientUIMode::Swap(CMsgClientUIMode* other) {
  if (other != this) {
    std::swap(uimode_, other->uimode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMsgClientUIMode::GetTypeName() const {
  return "Sc.CMsgClientUIMode";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Sc

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: encrypted_app_ticket.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "encrypted_app_ticket.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace Sc {

void protobuf_ShutdownFile_encrypted_5fapp_5fticket_2eproto() {
  delete EncryptedAppTicket::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_encrypted_5fapp_5fticket_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_encrypted_5fapp_5fticket_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  EncryptedAppTicket::default_instance_ = new EncryptedAppTicket();
  EncryptedAppTicket::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_encrypted_5fapp_5fticket_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_encrypted_5fapp_5fticket_2eproto_once_);
void protobuf_AddDesc_encrypted_5fapp_5fticket_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_encrypted_5fapp_5fticket_2eproto_once_,
                 &protobuf_AddDesc_encrypted_5fapp_5fticket_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_encrypted_5fapp_5fticket_2eproto {
  StaticDescriptorInitializer_encrypted_5fapp_5fticket_2eproto() {
    protobuf_AddDesc_encrypted_5fapp_5fticket_2eproto();
  }
} static_descriptor_initializer_encrypted_5fapp_5fticket_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int EncryptedAppTicket::kTicketVersionNoFieldNumber;
const int EncryptedAppTicket::kCrcEncryptedticketFieldNumber;
const int EncryptedAppTicket::kCbEncrypteduserdataFieldNumber;
const int EncryptedAppTicket::kCbEncryptedAppownershipticketFieldNumber;
const int EncryptedAppTicket::kEncryptedTicketFieldNumber;
#endif  // !_MSC_VER

EncryptedAppTicket::EncryptedAppTicket()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void EncryptedAppTicket::InitAsDefaultInstance() {
}

EncryptedAppTicket::EncryptedAppTicket(const EncryptedAppTicket& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void EncryptedAppTicket::SharedCtor() {
  _cached_size_ = 0;
  ticket_version_no_ = 0u;
  crc_encryptedticket_ = 0u;
  cb_encrypteduserdata_ = 0u;
  cb_encrypted_appownershipticket_ = 0u;
  encrypted_ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EncryptedAppTicket::~EncryptedAppTicket() {
  SharedDtor();
}

void EncryptedAppTicket::SharedDtor() {
  if (encrypted_ticket_ != &::google::protobuf::internal::kEmptyString) {
    delete encrypted_ticket_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EncryptedAppTicket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EncryptedAppTicket& EncryptedAppTicket::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_encrypted_5fapp_5fticket_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_encrypted_5fapp_5fticket_2eproto();
#endif
  return *default_instance_;
}

EncryptedAppTicket* EncryptedAppTicket::default_instance_ = NULL;

EncryptedAppTicket* EncryptedAppTicket::New() const {
  return new EncryptedAppTicket;
}

void EncryptedAppTicket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ticket_version_no_ = 0u;
    crc_encryptedticket_ = 0u;
    cb_encrypteduserdata_ = 0u;
    cb_encrypted_appownershipticket_ = 0u;
    if (has_encrypted_ticket()) {
      if (encrypted_ticket_ != &::google::protobuf::internal::kEmptyString) {
        encrypted_ticket_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool EncryptedAppTicket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ticket_version_no = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ticket_version_no_)));
          set_has_ticket_version_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_crc_encryptedticket;
        break;
      }

      // optional uint32 crc_encryptedticket = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crc_encryptedticket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crc_encryptedticket_)));
          set_has_crc_encryptedticket();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cb_encrypteduserdata;
        break;
      }

      // optional uint32 cb_encrypteduserdata = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cb_encrypteduserdata:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cb_encrypteduserdata_)));
          set_has_cb_encrypteduserdata();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cb_encrypted_appownershipticket;
        break;
      }

      // optional uint32 cb_encrypted_appownershipticket = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cb_encrypted_appownershipticket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cb_encrypted_appownershipticket_)));
          set_has_cb_encrypted_appownershipticket();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_encrypted_ticket;
        break;
      }

      // optional bytes encrypted_ticket = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_encrypted_ticket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encrypted_ticket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EncryptedAppTicket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ticket_version_no = 1;
  if (has_ticket_version_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ticket_version_no(), output);
  }

  // optional uint32 crc_encryptedticket = 2;
  if (has_crc_encryptedticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->crc_encryptedticket(), output);
  }

  // optional uint32 cb_encrypteduserdata = 3;
  if (has_cb_encrypteduserdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cb_encrypteduserdata(), output);
  }

  // optional uint32 cb_encrypted_appownershipticket = 4;
  if (has_cb_encrypted_appownershipticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cb_encrypted_appownershipticket(), output);
  }

  // optional bytes encrypted_ticket = 5;
  if (has_encrypted_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->encrypted_ticket(), output);
  }

}

int EncryptedAppTicket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ticket_version_no = 1;
    if (has_ticket_version_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ticket_version_no());
    }

    // optional uint32 crc_encryptedticket = 2;
    if (has_crc_encryptedticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crc_encryptedticket());
    }

    // optional uint32 cb_encrypteduserdata = 3;
    if (has_cb_encrypteduserdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cb_encrypteduserdata());
    }

    // optional uint32 cb_encrypted_appownershipticket = 4;
    if (has_cb_encrypted_appownershipticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cb_encrypted_appownershipticket());
    }

    // optional bytes encrypted_ticket = 5;
    if (has_encrypted_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encrypted_ticket());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EncryptedAppTicket::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EncryptedAppTicket*>(&from));
}

void EncryptedAppTicket::MergeFrom(const EncryptedAppTicket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ticket_version_no()) {
      set_ticket_version_no(from.ticket_version_no());
    }
    if (from.has_crc_encryptedticket()) {
      set_crc_encryptedticket(from.crc_encryptedticket());
    }
    if (from.has_cb_encrypteduserdata()) {
      set_cb_encrypteduserdata(from.cb_encrypteduserdata());
    }
    if (from.has_cb_encrypted_appownershipticket()) {
      set_cb_encrypted_appownershipticket(from.cb_encrypted_appownershipticket());
    }
    if (from.has_encrypted_ticket()) {
      set_encrypted_ticket(from.encrypted_ticket());
    }
  }
}

void EncryptedAppTicket::CopyFrom(const EncryptedAppTicket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncryptedAppTicket::IsInitialized() const {

  return true;
}

void EncryptedAppTicket::Swap(EncryptedAppTicket* other) {
  if (other != this) {
    std::swap(ticket_version_no_, other->ticket_version_no_);
    std::swap(crc_encryptedticket_, other->crc_encryptedticket_);
    std::swap(cb_encrypteduserdata_, other->cb_encrypteduserdata_);
    std::swap(cb_encrypted_appownershipticket_, other->cb_encrypted_appownershipticket_);
    std::swap(encrypted_ticket_, other->encrypted_ticket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EncryptedAppTicket::GetTypeName() const {
  return "Sc.EncryptedAppTicket";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Sc

// @@protoc_insertion_point(global_scope)

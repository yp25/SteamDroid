// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: content_manifest.proto

#ifndef PROTOBUF_content_5fmanifest_2eproto__INCLUDED
#define PROTOBUF_content_5fmanifest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace Sc {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_content_5fmanifest_2eproto();
void protobuf_AssignDesc_content_5fmanifest_2eproto();
void protobuf_ShutdownFile_content_5fmanifest_2eproto();

class ContentManifestPayload;
class ContentManifestPayload_FileMapping;
class ContentManifestPayload_FileMapping_ChunkData;
class ContentManifestMetadata;
class ContentManifestSignature;

// ===================================================================

class ContentManifestPayload_FileMapping_ChunkData : public ::google::protobuf::MessageLite {
 public:
  ContentManifestPayload_FileMapping_ChunkData();
  virtual ~ContentManifestPayload_FileMapping_ChunkData();

  ContentManifestPayload_FileMapping_ChunkData(const ContentManifestPayload_FileMapping_ChunkData& from);

  inline ContentManifestPayload_FileMapping_ChunkData& operator=(const ContentManifestPayload_FileMapping_ChunkData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ContentManifestPayload_FileMapping_ChunkData& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ContentManifestPayload_FileMapping_ChunkData* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ContentManifestPayload_FileMapping_ChunkData* other);

  // implements Message ----------------------------------------------

  ContentManifestPayload_FileMapping_ChunkData* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ContentManifestPayload_FileMapping_ChunkData& from);
  void MergeFrom(const ContentManifestPayload_FileMapping_ChunkData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes sha = 1;
  inline bool has_sha() const;
  inline void clear_sha();
  static const int kShaFieldNumber = 1;
  inline const ::std::string& sha() const;
  inline void set_sha(const ::std::string& value);
  inline void set_sha(const char* value);
  inline void set_sha(const void* value, size_t size);
  inline ::std::string* mutable_sha();
  inline ::std::string* release_sha();
  inline void set_allocated_sha(::std::string* sha);

  // optional fixed32 crc = 2;
  inline bool has_crc() const;
  inline void clear_crc();
  static const int kCrcFieldNumber = 2;
  inline ::google::protobuf::uint32 crc() const;
  inline void set_crc(::google::protobuf::uint32 value);

  // optional uint64 offset = 3;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 3;
  inline ::google::protobuf::uint64 offset() const;
  inline void set_offset(::google::protobuf::uint64 value);

  // optional uint32 cb_original = 4;
  inline bool has_cb_original() const;
  inline void clear_cb_original();
  static const int kCbOriginalFieldNumber = 4;
  inline ::google::protobuf::uint32 cb_original() const;
  inline void set_cb_original(::google::protobuf::uint32 value);

  // optional uint32 cb_compressed = 5;
  inline bool has_cb_compressed() const;
  inline void clear_cb_compressed();
  static const int kCbCompressedFieldNumber = 5;
  inline ::google::protobuf::uint32 cb_compressed() const;
  inline void set_cb_compressed(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Sc.ContentManifestPayload.FileMapping.ChunkData)
 private:
  inline void set_has_sha();
  inline void clear_has_sha();
  inline void set_has_crc();
  inline void clear_has_crc();
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_cb_original();
  inline void clear_has_cb_original();
  inline void set_has_cb_compressed();
  inline void clear_has_cb_compressed();

  ::std::string* sha_;
  ::google::protobuf::uint64 offset_;
  ::google::protobuf::uint32 crc_;
  ::google::protobuf::uint32 cb_original_;
  ::google::protobuf::uint32 cb_compressed_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_content_5fmanifest_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_content_5fmanifest_2eproto();
  #endif
  friend void protobuf_AssignDesc_content_5fmanifest_2eproto();
  friend void protobuf_ShutdownFile_content_5fmanifest_2eproto();

  void InitAsDefaultInstance();
  static ContentManifestPayload_FileMapping_ChunkData* default_instance_;
};
// -------------------------------------------------------------------

class ContentManifestPayload_FileMapping : public ::google::protobuf::MessageLite {
 public:
  ContentManifestPayload_FileMapping();
  virtual ~ContentManifestPayload_FileMapping();

  ContentManifestPayload_FileMapping(const ContentManifestPayload_FileMapping& from);

  inline ContentManifestPayload_FileMapping& operator=(const ContentManifestPayload_FileMapping& from) {
    CopyFrom(from);
    return *this;
  }

  static const ContentManifestPayload_FileMapping& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ContentManifestPayload_FileMapping* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ContentManifestPayload_FileMapping* other);

  // implements Message ----------------------------------------------

  ContentManifestPayload_FileMapping* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ContentManifestPayload_FileMapping& from);
  void MergeFrom(const ContentManifestPayload_FileMapping& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef ContentManifestPayload_FileMapping_ChunkData ChunkData;

  // accessors -------------------------------------------------------

  // optional string filename = 1;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFilenameFieldNumber = 1;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // optional uint64 size = 2;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 2;
  inline ::google::protobuf::uint64 size() const;
  inline void set_size(::google::protobuf::uint64 value);

  // optional uint32 flags = 3;
  inline bool has_flags() const;
  inline void clear_flags();
  static const int kFlagsFieldNumber = 3;
  inline ::google::protobuf::uint32 flags() const;
  inline void set_flags(::google::protobuf::uint32 value);

  // optional bytes sha_filename = 4;
  inline bool has_sha_filename() const;
  inline void clear_sha_filename();
  static const int kShaFilenameFieldNumber = 4;
  inline const ::std::string& sha_filename() const;
  inline void set_sha_filename(const ::std::string& value);
  inline void set_sha_filename(const char* value);
  inline void set_sha_filename(const void* value, size_t size);
  inline ::std::string* mutable_sha_filename();
  inline ::std::string* release_sha_filename();
  inline void set_allocated_sha_filename(::std::string* sha_filename);

  // optional bytes sha_content = 5;
  inline bool has_sha_content() const;
  inline void clear_sha_content();
  static const int kShaContentFieldNumber = 5;
  inline const ::std::string& sha_content() const;
  inline void set_sha_content(const ::std::string& value);
  inline void set_sha_content(const char* value);
  inline void set_sha_content(const void* value, size_t size);
  inline ::std::string* mutable_sha_content();
  inline ::std::string* release_sha_content();
  inline void set_allocated_sha_content(::std::string* sha_content);

  // repeated .Sc.ContentManifestPayload.FileMapping.ChunkData chunks = 6;
  inline int chunks_size() const;
  inline void clear_chunks();
  static const int kChunksFieldNumber = 6;
  inline const ::Sc::ContentManifestPayload_FileMapping_ChunkData& chunks(int index) const;
  inline ::Sc::ContentManifestPayload_FileMapping_ChunkData* mutable_chunks(int index);
  inline ::Sc::ContentManifestPayload_FileMapping_ChunkData* add_chunks();
  inline const ::google::protobuf::RepeatedPtrField< ::Sc::ContentManifestPayload_FileMapping_ChunkData >&
      chunks() const;
  inline ::google::protobuf::RepeatedPtrField< ::Sc::ContentManifestPayload_FileMapping_ChunkData >*
      mutable_chunks();

  // @@protoc_insertion_point(class_scope:Sc.ContentManifestPayload.FileMapping)
 private:
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_flags();
  inline void clear_has_flags();
  inline void set_has_sha_filename();
  inline void clear_has_sha_filename();
  inline void set_has_sha_content();
  inline void clear_has_sha_content();

  ::std::string* filename_;
  ::google::protobuf::uint64 size_;
  ::std::string* sha_filename_;
  ::std::string* sha_content_;
  ::google::protobuf::RepeatedPtrField< ::Sc::ContentManifestPayload_FileMapping_ChunkData > chunks_;
  ::google::protobuf::uint32 flags_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_content_5fmanifest_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_content_5fmanifest_2eproto();
  #endif
  friend void protobuf_AssignDesc_content_5fmanifest_2eproto();
  friend void protobuf_ShutdownFile_content_5fmanifest_2eproto();

  void InitAsDefaultInstance();
  static ContentManifestPayload_FileMapping* default_instance_;
};
// -------------------------------------------------------------------

class ContentManifestPayload : public ::google::protobuf::MessageLite {
 public:
  ContentManifestPayload();
  virtual ~ContentManifestPayload();

  ContentManifestPayload(const ContentManifestPayload& from);

  inline ContentManifestPayload& operator=(const ContentManifestPayload& from) {
    CopyFrom(from);
    return *this;
  }

  static const ContentManifestPayload& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ContentManifestPayload* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ContentManifestPayload* other);

  // implements Message ----------------------------------------------

  ContentManifestPayload* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ContentManifestPayload& from);
  void MergeFrom(const ContentManifestPayload& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef ContentManifestPayload_FileMapping FileMapping;

  // accessors -------------------------------------------------------

  // repeated .Sc.ContentManifestPayload.FileMapping mappings = 1;
  inline int mappings_size() const;
  inline void clear_mappings();
  static const int kMappingsFieldNumber = 1;
  inline const ::Sc::ContentManifestPayload_FileMapping& mappings(int index) const;
  inline ::Sc::ContentManifestPayload_FileMapping* mutable_mappings(int index);
  inline ::Sc::ContentManifestPayload_FileMapping* add_mappings();
  inline const ::google::protobuf::RepeatedPtrField< ::Sc::ContentManifestPayload_FileMapping >&
      mappings() const;
  inline ::google::protobuf::RepeatedPtrField< ::Sc::ContentManifestPayload_FileMapping >*
      mutable_mappings();

  // @@protoc_insertion_point(class_scope:Sc.ContentManifestPayload)
 private:

  ::google::protobuf::RepeatedPtrField< ::Sc::ContentManifestPayload_FileMapping > mappings_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_content_5fmanifest_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_content_5fmanifest_2eproto();
  #endif
  friend void protobuf_AssignDesc_content_5fmanifest_2eproto();
  friend void protobuf_ShutdownFile_content_5fmanifest_2eproto();

  void InitAsDefaultInstance();
  static ContentManifestPayload* default_instance_;
};
// -------------------------------------------------------------------

class ContentManifestMetadata : public ::google::protobuf::MessageLite {
 public:
  ContentManifestMetadata();
  virtual ~ContentManifestMetadata();

  ContentManifestMetadata(const ContentManifestMetadata& from);

  inline ContentManifestMetadata& operator=(const ContentManifestMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  static const ContentManifestMetadata& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ContentManifestMetadata* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ContentManifestMetadata* other);

  // implements Message ----------------------------------------------

  ContentManifestMetadata* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ContentManifestMetadata& from);
  void MergeFrom(const ContentManifestMetadata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 depot_id = 1;
  inline bool has_depot_id() const;
  inline void clear_depot_id();
  static const int kDepotIdFieldNumber = 1;
  inline ::google::protobuf::uint32 depot_id() const;
  inline void set_depot_id(::google::protobuf::uint32 value);

  // optional uint64 gid_manifest = 2;
  inline bool has_gid_manifest() const;
  inline void clear_gid_manifest();
  static const int kGidManifestFieldNumber = 2;
  inline ::google::protobuf::uint64 gid_manifest() const;
  inline void set_gid_manifest(::google::protobuf::uint64 value);

  // optional uint32 creation_time = 3;
  inline bool has_creation_time() const;
  inline void clear_creation_time();
  static const int kCreationTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 creation_time() const;
  inline void set_creation_time(::google::protobuf::uint32 value);

  // optional bool filenames_encrypted = 4;
  inline bool has_filenames_encrypted() const;
  inline void clear_filenames_encrypted();
  static const int kFilenamesEncryptedFieldNumber = 4;
  inline bool filenames_encrypted() const;
  inline void set_filenames_encrypted(bool value);

  // optional uint64 cb_disk_original = 5;
  inline bool has_cb_disk_original() const;
  inline void clear_cb_disk_original();
  static const int kCbDiskOriginalFieldNumber = 5;
  inline ::google::protobuf::uint64 cb_disk_original() const;
  inline void set_cb_disk_original(::google::protobuf::uint64 value);

  // optional uint64 cb_disk_compressed = 6;
  inline bool has_cb_disk_compressed() const;
  inline void clear_cb_disk_compressed();
  static const int kCbDiskCompressedFieldNumber = 6;
  inline ::google::protobuf::uint64 cb_disk_compressed() const;
  inline void set_cb_disk_compressed(::google::protobuf::uint64 value);

  // optional uint32 unique_chunks = 7;
  inline bool has_unique_chunks() const;
  inline void clear_unique_chunks();
  static const int kUniqueChunksFieldNumber = 7;
  inline ::google::protobuf::uint32 unique_chunks() const;
  inline void set_unique_chunks(::google::protobuf::uint32 value);

  // optional uint32 crc_encrypted = 8;
  inline bool has_crc_encrypted() const;
  inline void clear_crc_encrypted();
  static const int kCrcEncryptedFieldNumber = 8;
  inline ::google::protobuf::uint32 crc_encrypted() const;
  inline void set_crc_encrypted(::google::protobuf::uint32 value);

  // optional uint32 crc_clear = 9;
  inline bool has_crc_clear() const;
  inline void clear_crc_clear();
  static const int kCrcClearFieldNumber = 9;
  inline ::google::protobuf::uint32 crc_clear() const;
  inline void set_crc_clear(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Sc.ContentManifestMetadata)
 private:
  inline void set_has_depot_id();
  inline void clear_has_depot_id();
  inline void set_has_gid_manifest();
  inline void clear_has_gid_manifest();
  inline void set_has_creation_time();
  inline void clear_has_creation_time();
  inline void set_has_filenames_encrypted();
  inline void clear_has_filenames_encrypted();
  inline void set_has_cb_disk_original();
  inline void clear_has_cb_disk_original();
  inline void set_has_cb_disk_compressed();
  inline void clear_has_cb_disk_compressed();
  inline void set_has_unique_chunks();
  inline void clear_has_unique_chunks();
  inline void set_has_crc_encrypted();
  inline void clear_has_crc_encrypted();
  inline void set_has_crc_clear();
  inline void clear_has_crc_clear();

  ::google::protobuf::uint64 gid_manifest_;
  ::google::protobuf::uint32 depot_id_;
  ::google::protobuf::uint32 creation_time_;
  ::google::protobuf::uint64 cb_disk_original_;
  bool filenames_encrypted_;
  ::google::protobuf::uint32 unique_chunks_;
  ::google::protobuf::uint64 cb_disk_compressed_;
  ::google::protobuf::uint32 crc_encrypted_;
  ::google::protobuf::uint32 crc_clear_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_content_5fmanifest_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_content_5fmanifest_2eproto();
  #endif
  friend void protobuf_AssignDesc_content_5fmanifest_2eproto();
  friend void protobuf_ShutdownFile_content_5fmanifest_2eproto();

  void InitAsDefaultInstance();
  static ContentManifestMetadata* default_instance_;
};
// -------------------------------------------------------------------

class ContentManifestSignature : public ::google::protobuf::MessageLite {
 public:
  ContentManifestSignature();
  virtual ~ContentManifestSignature();

  ContentManifestSignature(const ContentManifestSignature& from);

  inline ContentManifestSignature& operator=(const ContentManifestSignature& from) {
    CopyFrom(from);
    return *this;
  }

  static const ContentManifestSignature& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ContentManifestSignature* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ContentManifestSignature* other);

  // implements Message ----------------------------------------------

  ContentManifestSignature* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ContentManifestSignature& from);
  void MergeFrom(const ContentManifestSignature& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes signature = 1;
  inline bool has_signature() const;
  inline void clear_signature();
  static const int kSignatureFieldNumber = 1;
  inline const ::std::string& signature() const;
  inline void set_signature(const ::std::string& value);
  inline void set_signature(const char* value);
  inline void set_signature(const void* value, size_t size);
  inline ::std::string* mutable_signature();
  inline ::std::string* release_signature();
  inline void set_allocated_signature(::std::string* signature);

  // @@protoc_insertion_point(class_scope:Sc.ContentManifestSignature)
 private:
  inline void set_has_signature();
  inline void clear_has_signature();

  ::std::string* signature_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_content_5fmanifest_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_content_5fmanifest_2eproto();
  #endif
  friend void protobuf_AssignDesc_content_5fmanifest_2eproto();
  friend void protobuf_ShutdownFile_content_5fmanifest_2eproto();

  void InitAsDefaultInstance();
  static ContentManifestSignature* default_instance_;
};
// ===================================================================


// ===================================================================

// ContentManifestPayload_FileMapping_ChunkData

// optional bytes sha = 1;
inline bool ContentManifestPayload_FileMapping_ChunkData::has_sha() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContentManifestPayload_FileMapping_ChunkData::set_has_sha() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContentManifestPayload_FileMapping_ChunkData::clear_has_sha() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContentManifestPayload_FileMapping_ChunkData::clear_sha() {
  if (sha_ != &::google::protobuf::internal::kEmptyString) {
    sha_->clear();
  }
  clear_has_sha();
}
inline const ::std::string& ContentManifestPayload_FileMapping_ChunkData::sha() const {
  return *sha_;
}
inline void ContentManifestPayload_FileMapping_ChunkData::set_sha(const ::std::string& value) {
  set_has_sha();
  if (sha_ == &::google::protobuf::internal::kEmptyString) {
    sha_ = new ::std::string;
  }
  sha_->assign(value);
}
inline void ContentManifestPayload_FileMapping_ChunkData::set_sha(const char* value) {
  set_has_sha();
  if (sha_ == &::google::protobuf::internal::kEmptyString) {
    sha_ = new ::std::string;
  }
  sha_->assign(value);
}
inline void ContentManifestPayload_FileMapping_ChunkData::set_sha(const void* value, size_t size) {
  set_has_sha();
  if (sha_ == &::google::protobuf::internal::kEmptyString) {
    sha_ = new ::std::string;
  }
  sha_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ContentManifestPayload_FileMapping_ChunkData::mutable_sha() {
  set_has_sha();
  if (sha_ == &::google::protobuf::internal::kEmptyString) {
    sha_ = new ::std::string;
  }
  return sha_;
}
inline ::std::string* ContentManifestPayload_FileMapping_ChunkData::release_sha() {
  clear_has_sha();
  if (sha_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sha_;
    sha_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ContentManifestPayload_FileMapping_ChunkData::set_allocated_sha(::std::string* sha) {
  if (sha_ != &::google::protobuf::internal::kEmptyString) {
    delete sha_;
  }
  if (sha) {
    set_has_sha();
    sha_ = sha;
  } else {
    clear_has_sha();
    sha_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional fixed32 crc = 2;
inline bool ContentManifestPayload_FileMapping_ChunkData::has_crc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContentManifestPayload_FileMapping_ChunkData::set_has_crc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ContentManifestPayload_FileMapping_ChunkData::clear_has_crc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ContentManifestPayload_FileMapping_ChunkData::clear_crc() {
  crc_ = 0u;
  clear_has_crc();
}
inline ::google::protobuf::uint32 ContentManifestPayload_FileMapping_ChunkData::crc() const {
  return crc_;
}
inline void ContentManifestPayload_FileMapping_ChunkData::set_crc(::google::protobuf::uint32 value) {
  set_has_crc();
  crc_ = value;
}

// optional uint64 offset = 3;
inline bool ContentManifestPayload_FileMapping_ChunkData::has_offset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ContentManifestPayload_FileMapping_ChunkData::set_has_offset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ContentManifestPayload_FileMapping_ChunkData::clear_has_offset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ContentManifestPayload_FileMapping_ChunkData::clear_offset() {
  offset_ = GOOGLE_ULONGLONG(0);
  clear_has_offset();
}
inline ::google::protobuf::uint64 ContentManifestPayload_FileMapping_ChunkData::offset() const {
  return offset_;
}
inline void ContentManifestPayload_FileMapping_ChunkData::set_offset(::google::protobuf::uint64 value) {
  set_has_offset();
  offset_ = value;
}

// optional uint32 cb_original = 4;
inline bool ContentManifestPayload_FileMapping_ChunkData::has_cb_original() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ContentManifestPayload_FileMapping_ChunkData::set_has_cb_original() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ContentManifestPayload_FileMapping_ChunkData::clear_has_cb_original() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ContentManifestPayload_FileMapping_ChunkData::clear_cb_original() {
  cb_original_ = 0u;
  clear_has_cb_original();
}
inline ::google::protobuf::uint32 ContentManifestPayload_FileMapping_ChunkData::cb_original() const {
  return cb_original_;
}
inline void ContentManifestPayload_FileMapping_ChunkData::set_cb_original(::google::protobuf::uint32 value) {
  set_has_cb_original();
  cb_original_ = value;
}

// optional uint32 cb_compressed = 5;
inline bool ContentManifestPayload_FileMapping_ChunkData::has_cb_compressed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ContentManifestPayload_FileMapping_ChunkData::set_has_cb_compressed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ContentManifestPayload_FileMapping_ChunkData::clear_has_cb_compressed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ContentManifestPayload_FileMapping_ChunkData::clear_cb_compressed() {
  cb_compressed_ = 0u;
  clear_has_cb_compressed();
}
inline ::google::protobuf::uint32 ContentManifestPayload_FileMapping_ChunkData::cb_compressed() const {
  return cb_compressed_;
}
inline void ContentManifestPayload_FileMapping_ChunkData::set_cb_compressed(::google::protobuf::uint32 value) {
  set_has_cb_compressed();
  cb_compressed_ = value;
}

// -------------------------------------------------------------------

// ContentManifestPayload_FileMapping

// optional string filename = 1;
inline bool ContentManifestPayload_FileMapping::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContentManifestPayload_FileMapping::set_has_filename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContentManifestPayload_FileMapping::clear_has_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContentManifestPayload_FileMapping::clear_filename() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& ContentManifestPayload_FileMapping::filename() const {
  return *filename_;
}
inline void ContentManifestPayload_FileMapping::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void ContentManifestPayload_FileMapping::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void ContentManifestPayload_FileMapping::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ContentManifestPayload_FileMapping::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  return filename_;
}
inline ::std::string* ContentManifestPayload_FileMapping::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ContentManifestPayload_FileMapping::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 size = 2;
inline bool ContentManifestPayload_FileMapping::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContentManifestPayload_FileMapping::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ContentManifestPayload_FileMapping::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ContentManifestPayload_FileMapping::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
  clear_has_size();
}
inline ::google::protobuf::uint64 ContentManifestPayload_FileMapping::size() const {
  return size_;
}
inline void ContentManifestPayload_FileMapping::set_size(::google::protobuf::uint64 value) {
  set_has_size();
  size_ = value;
}

// optional uint32 flags = 3;
inline bool ContentManifestPayload_FileMapping::has_flags() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ContentManifestPayload_FileMapping::set_has_flags() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ContentManifestPayload_FileMapping::clear_has_flags() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ContentManifestPayload_FileMapping::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
inline ::google::protobuf::uint32 ContentManifestPayload_FileMapping::flags() const {
  return flags_;
}
inline void ContentManifestPayload_FileMapping::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
}

// optional bytes sha_filename = 4;
inline bool ContentManifestPayload_FileMapping::has_sha_filename() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ContentManifestPayload_FileMapping::set_has_sha_filename() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ContentManifestPayload_FileMapping::clear_has_sha_filename() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ContentManifestPayload_FileMapping::clear_sha_filename() {
  if (sha_filename_ != &::google::protobuf::internal::kEmptyString) {
    sha_filename_->clear();
  }
  clear_has_sha_filename();
}
inline const ::std::string& ContentManifestPayload_FileMapping::sha_filename() const {
  return *sha_filename_;
}
inline void ContentManifestPayload_FileMapping::set_sha_filename(const ::std::string& value) {
  set_has_sha_filename();
  if (sha_filename_ == &::google::protobuf::internal::kEmptyString) {
    sha_filename_ = new ::std::string;
  }
  sha_filename_->assign(value);
}
inline void ContentManifestPayload_FileMapping::set_sha_filename(const char* value) {
  set_has_sha_filename();
  if (sha_filename_ == &::google::protobuf::internal::kEmptyString) {
    sha_filename_ = new ::std::string;
  }
  sha_filename_->assign(value);
}
inline void ContentManifestPayload_FileMapping::set_sha_filename(const void* value, size_t size) {
  set_has_sha_filename();
  if (sha_filename_ == &::google::protobuf::internal::kEmptyString) {
    sha_filename_ = new ::std::string;
  }
  sha_filename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ContentManifestPayload_FileMapping::mutable_sha_filename() {
  set_has_sha_filename();
  if (sha_filename_ == &::google::protobuf::internal::kEmptyString) {
    sha_filename_ = new ::std::string;
  }
  return sha_filename_;
}
inline ::std::string* ContentManifestPayload_FileMapping::release_sha_filename() {
  clear_has_sha_filename();
  if (sha_filename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sha_filename_;
    sha_filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ContentManifestPayload_FileMapping::set_allocated_sha_filename(::std::string* sha_filename) {
  if (sha_filename_ != &::google::protobuf::internal::kEmptyString) {
    delete sha_filename_;
  }
  if (sha_filename) {
    set_has_sha_filename();
    sha_filename_ = sha_filename;
  } else {
    clear_has_sha_filename();
    sha_filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes sha_content = 5;
inline bool ContentManifestPayload_FileMapping::has_sha_content() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ContentManifestPayload_FileMapping::set_has_sha_content() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ContentManifestPayload_FileMapping::clear_has_sha_content() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ContentManifestPayload_FileMapping::clear_sha_content() {
  if (sha_content_ != &::google::protobuf::internal::kEmptyString) {
    sha_content_->clear();
  }
  clear_has_sha_content();
}
inline const ::std::string& ContentManifestPayload_FileMapping::sha_content() const {
  return *sha_content_;
}
inline void ContentManifestPayload_FileMapping::set_sha_content(const ::std::string& value) {
  set_has_sha_content();
  if (sha_content_ == &::google::protobuf::internal::kEmptyString) {
    sha_content_ = new ::std::string;
  }
  sha_content_->assign(value);
}
inline void ContentManifestPayload_FileMapping::set_sha_content(const char* value) {
  set_has_sha_content();
  if (sha_content_ == &::google::protobuf::internal::kEmptyString) {
    sha_content_ = new ::std::string;
  }
  sha_content_->assign(value);
}
inline void ContentManifestPayload_FileMapping::set_sha_content(const void* value, size_t size) {
  set_has_sha_content();
  if (sha_content_ == &::google::protobuf::internal::kEmptyString) {
    sha_content_ = new ::std::string;
  }
  sha_content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ContentManifestPayload_FileMapping::mutable_sha_content() {
  set_has_sha_content();
  if (sha_content_ == &::google::protobuf::internal::kEmptyString) {
    sha_content_ = new ::std::string;
  }
  return sha_content_;
}
inline ::std::string* ContentManifestPayload_FileMapping::release_sha_content() {
  clear_has_sha_content();
  if (sha_content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sha_content_;
    sha_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ContentManifestPayload_FileMapping::set_allocated_sha_content(::std::string* sha_content) {
  if (sha_content_ != &::google::protobuf::internal::kEmptyString) {
    delete sha_content_;
  }
  if (sha_content) {
    set_has_sha_content();
    sha_content_ = sha_content;
  } else {
    clear_has_sha_content();
    sha_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .Sc.ContentManifestPayload.FileMapping.ChunkData chunks = 6;
inline int ContentManifestPayload_FileMapping::chunks_size() const {
  return chunks_.size();
}
inline void ContentManifestPayload_FileMapping::clear_chunks() {
  chunks_.Clear();
}
inline const ::Sc::ContentManifestPayload_FileMapping_ChunkData& ContentManifestPayload_FileMapping::chunks(int index) const {
  return chunks_.Get(index);
}
inline ::Sc::ContentManifestPayload_FileMapping_ChunkData* ContentManifestPayload_FileMapping::mutable_chunks(int index) {
  return chunks_.Mutable(index);
}
inline ::Sc::ContentManifestPayload_FileMapping_ChunkData* ContentManifestPayload_FileMapping::add_chunks() {
  return chunks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Sc::ContentManifestPayload_FileMapping_ChunkData >&
ContentManifestPayload_FileMapping::chunks() const {
  return chunks_;
}
inline ::google::protobuf::RepeatedPtrField< ::Sc::ContentManifestPayload_FileMapping_ChunkData >*
ContentManifestPayload_FileMapping::mutable_chunks() {
  return &chunks_;
}

// -------------------------------------------------------------------

// ContentManifestPayload

// repeated .Sc.ContentManifestPayload.FileMapping mappings = 1;
inline int ContentManifestPayload::mappings_size() const {
  return mappings_.size();
}
inline void ContentManifestPayload::clear_mappings() {
  mappings_.Clear();
}
inline const ::Sc::ContentManifestPayload_FileMapping& ContentManifestPayload::mappings(int index) const {
  return mappings_.Get(index);
}
inline ::Sc::ContentManifestPayload_FileMapping* ContentManifestPayload::mutable_mappings(int index) {
  return mappings_.Mutable(index);
}
inline ::Sc::ContentManifestPayload_FileMapping* ContentManifestPayload::add_mappings() {
  return mappings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Sc::ContentManifestPayload_FileMapping >&
ContentManifestPayload::mappings() const {
  return mappings_;
}
inline ::google::protobuf::RepeatedPtrField< ::Sc::ContentManifestPayload_FileMapping >*
ContentManifestPayload::mutable_mappings() {
  return &mappings_;
}

// -------------------------------------------------------------------

// ContentManifestMetadata

// optional uint32 depot_id = 1;
inline bool ContentManifestMetadata::has_depot_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContentManifestMetadata::set_has_depot_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContentManifestMetadata::clear_has_depot_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContentManifestMetadata::clear_depot_id() {
  depot_id_ = 0u;
  clear_has_depot_id();
}
inline ::google::protobuf::uint32 ContentManifestMetadata::depot_id() const {
  return depot_id_;
}
inline void ContentManifestMetadata::set_depot_id(::google::protobuf::uint32 value) {
  set_has_depot_id();
  depot_id_ = value;
}

// optional uint64 gid_manifest = 2;
inline bool ContentManifestMetadata::has_gid_manifest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContentManifestMetadata::set_has_gid_manifest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ContentManifestMetadata::clear_has_gid_manifest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ContentManifestMetadata::clear_gid_manifest() {
  gid_manifest_ = GOOGLE_ULONGLONG(0);
  clear_has_gid_manifest();
}
inline ::google::protobuf::uint64 ContentManifestMetadata::gid_manifest() const {
  return gid_manifest_;
}
inline void ContentManifestMetadata::set_gid_manifest(::google::protobuf::uint64 value) {
  set_has_gid_manifest();
  gid_manifest_ = value;
}

// optional uint32 creation_time = 3;
inline bool ContentManifestMetadata::has_creation_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ContentManifestMetadata::set_has_creation_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ContentManifestMetadata::clear_has_creation_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ContentManifestMetadata::clear_creation_time() {
  creation_time_ = 0u;
  clear_has_creation_time();
}
inline ::google::protobuf::uint32 ContentManifestMetadata::creation_time() const {
  return creation_time_;
}
inline void ContentManifestMetadata::set_creation_time(::google::protobuf::uint32 value) {
  set_has_creation_time();
  creation_time_ = value;
}

// optional bool filenames_encrypted = 4;
inline bool ContentManifestMetadata::has_filenames_encrypted() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ContentManifestMetadata::set_has_filenames_encrypted() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ContentManifestMetadata::clear_has_filenames_encrypted() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ContentManifestMetadata::clear_filenames_encrypted() {
  filenames_encrypted_ = false;
  clear_has_filenames_encrypted();
}
inline bool ContentManifestMetadata::filenames_encrypted() const {
  return filenames_encrypted_;
}
inline void ContentManifestMetadata::set_filenames_encrypted(bool value) {
  set_has_filenames_encrypted();
  filenames_encrypted_ = value;
}

// optional uint64 cb_disk_original = 5;
inline bool ContentManifestMetadata::has_cb_disk_original() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ContentManifestMetadata::set_has_cb_disk_original() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ContentManifestMetadata::clear_has_cb_disk_original() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ContentManifestMetadata::clear_cb_disk_original() {
  cb_disk_original_ = GOOGLE_ULONGLONG(0);
  clear_has_cb_disk_original();
}
inline ::google::protobuf::uint64 ContentManifestMetadata::cb_disk_original() const {
  return cb_disk_original_;
}
inline void ContentManifestMetadata::set_cb_disk_original(::google::protobuf::uint64 value) {
  set_has_cb_disk_original();
  cb_disk_original_ = value;
}

// optional uint64 cb_disk_compressed = 6;
inline bool ContentManifestMetadata::has_cb_disk_compressed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ContentManifestMetadata::set_has_cb_disk_compressed() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ContentManifestMetadata::clear_has_cb_disk_compressed() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ContentManifestMetadata::clear_cb_disk_compressed() {
  cb_disk_compressed_ = GOOGLE_ULONGLONG(0);
  clear_has_cb_disk_compressed();
}
inline ::google::protobuf::uint64 ContentManifestMetadata::cb_disk_compressed() const {
  return cb_disk_compressed_;
}
inline void ContentManifestMetadata::set_cb_disk_compressed(::google::protobuf::uint64 value) {
  set_has_cb_disk_compressed();
  cb_disk_compressed_ = value;
}

// optional uint32 unique_chunks = 7;
inline bool ContentManifestMetadata::has_unique_chunks() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ContentManifestMetadata::set_has_unique_chunks() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ContentManifestMetadata::clear_has_unique_chunks() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ContentManifestMetadata::clear_unique_chunks() {
  unique_chunks_ = 0u;
  clear_has_unique_chunks();
}
inline ::google::protobuf::uint32 ContentManifestMetadata::unique_chunks() const {
  return unique_chunks_;
}
inline void ContentManifestMetadata::set_unique_chunks(::google::protobuf::uint32 value) {
  set_has_unique_chunks();
  unique_chunks_ = value;
}

// optional uint32 crc_encrypted = 8;
inline bool ContentManifestMetadata::has_crc_encrypted() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ContentManifestMetadata::set_has_crc_encrypted() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ContentManifestMetadata::clear_has_crc_encrypted() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ContentManifestMetadata::clear_crc_encrypted() {
  crc_encrypted_ = 0u;
  clear_has_crc_encrypted();
}
inline ::google::protobuf::uint32 ContentManifestMetadata::crc_encrypted() const {
  return crc_encrypted_;
}
inline void ContentManifestMetadata::set_crc_encrypted(::google::protobuf::uint32 value) {
  set_has_crc_encrypted();
  crc_encrypted_ = value;
}

// optional uint32 crc_clear = 9;
inline bool ContentManifestMetadata::has_crc_clear() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ContentManifestMetadata::set_has_crc_clear() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ContentManifestMetadata::clear_has_crc_clear() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ContentManifestMetadata::clear_crc_clear() {
  crc_clear_ = 0u;
  clear_has_crc_clear();
}
inline ::google::protobuf::uint32 ContentManifestMetadata::crc_clear() const {
  return crc_clear_;
}
inline void ContentManifestMetadata::set_crc_clear(::google::protobuf::uint32 value) {
  set_has_crc_clear();
  crc_clear_ = value;
}

// -------------------------------------------------------------------

// ContentManifestSignature

// optional bytes signature = 1;
inline bool ContentManifestSignature::has_signature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContentManifestSignature::set_has_signature() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContentManifestSignature::clear_has_signature() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContentManifestSignature::clear_signature() {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    signature_->clear();
  }
  clear_has_signature();
}
inline const ::std::string& ContentManifestSignature::signature() const {
  return *signature_;
}
inline void ContentManifestSignature::set_signature(const ::std::string& value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void ContentManifestSignature::set_signature(const char* value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void ContentManifestSignature::set_signature(const void* value, size_t size) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ContentManifestSignature::mutable_signature() {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  return signature_;
}
inline ::std::string* ContentManifestSignature::release_signature() {
  clear_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = signature_;
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ContentManifestSignature::set_allocated_signature(::std::string* signature) {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (signature) {
    set_has_signature();
    signature_ = signature;
  } else {
    clear_has_signature();
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Sc

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_content_5fmanifest_2eproto__INCLUDED

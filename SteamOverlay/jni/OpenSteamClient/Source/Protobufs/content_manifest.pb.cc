// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: content_manifest.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "content_manifest.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace Sc {

void protobuf_ShutdownFile_content_5fmanifest_2eproto() {
  delete ContentManifestPayload::default_instance_;
  delete ContentManifestPayload_FileMapping::default_instance_;
  delete ContentManifestPayload_FileMapping_ChunkData::default_instance_;
  delete ContentManifestMetadata::default_instance_;
  delete ContentManifestSignature::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_content_5fmanifest_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_content_5fmanifest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ContentManifestPayload::default_instance_ = new ContentManifestPayload();
  ContentManifestPayload_FileMapping::default_instance_ = new ContentManifestPayload_FileMapping();
  ContentManifestPayload_FileMapping_ChunkData::default_instance_ = new ContentManifestPayload_FileMapping_ChunkData();
  ContentManifestMetadata::default_instance_ = new ContentManifestMetadata();
  ContentManifestSignature::default_instance_ = new ContentManifestSignature();
  ContentManifestPayload::default_instance_->InitAsDefaultInstance();
  ContentManifestPayload_FileMapping::default_instance_->InitAsDefaultInstance();
  ContentManifestPayload_FileMapping_ChunkData::default_instance_->InitAsDefaultInstance();
  ContentManifestMetadata::default_instance_->InitAsDefaultInstance();
  ContentManifestSignature::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_content_5fmanifest_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_content_5fmanifest_2eproto_once_);
void protobuf_AddDesc_content_5fmanifest_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_content_5fmanifest_2eproto_once_,
                 &protobuf_AddDesc_content_5fmanifest_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_content_5fmanifest_2eproto {
  StaticDescriptorInitializer_content_5fmanifest_2eproto() {
    protobuf_AddDesc_content_5fmanifest_2eproto();
  }
} static_descriptor_initializer_content_5fmanifest_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int ContentManifestPayload_FileMapping_ChunkData::kShaFieldNumber;
const int ContentManifestPayload_FileMapping_ChunkData::kCrcFieldNumber;
const int ContentManifestPayload_FileMapping_ChunkData::kOffsetFieldNumber;
const int ContentManifestPayload_FileMapping_ChunkData::kCbOriginalFieldNumber;
const int ContentManifestPayload_FileMapping_ChunkData::kCbCompressedFieldNumber;
#endif  // !_MSC_VER

ContentManifestPayload_FileMapping_ChunkData::ContentManifestPayload_FileMapping_ChunkData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ContentManifestPayload_FileMapping_ChunkData::InitAsDefaultInstance() {
}

ContentManifestPayload_FileMapping_ChunkData::ContentManifestPayload_FileMapping_ChunkData(const ContentManifestPayload_FileMapping_ChunkData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ContentManifestPayload_FileMapping_ChunkData::SharedCtor() {
  _cached_size_ = 0;
  sha_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  crc_ = 0u;
  offset_ = GOOGLE_ULONGLONG(0);
  cb_original_ = 0u;
  cb_compressed_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContentManifestPayload_FileMapping_ChunkData::~ContentManifestPayload_FileMapping_ChunkData() {
  SharedDtor();
}

void ContentManifestPayload_FileMapping_ChunkData::SharedDtor() {
  if (sha_ != &::google::protobuf::internal::kEmptyString) {
    delete sha_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ContentManifestPayload_FileMapping_ChunkData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ContentManifestPayload_FileMapping_ChunkData& ContentManifestPayload_FileMapping_ChunkData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_content_5fmanifest_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_content_5fmanifest_2eproto();
#endif
  return *default_instance_;
}

ContentManifestPayload_FileMapping_ChunkData* ContentManifestPayload_FileMapping_ChunkData::default_instance_ = NULL;

ContentManifestPayload_FileMapping_ChunkData* ContentManifestPayload_FileMapping_ChunkData::New() const {
  return new ContentManifestPayload_FileMapping_ChunkData;
}

void ContentManifestPayload_FileMapping_ChunkData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sha()) {
      if (sha_ != &::google::protobuf::internal::kEmptyString) {
        sha_->clear();
      }
    }
    crc_ = 0u;
    offset_ = GOOGLE_ULONGLONG(0);
    cb_original_ = 0u;
    cb_compressed_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ContentManifestPayload_FileMapping_ChunkData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes sha = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_crc;
        break;
      }

      // optional fixed32 crc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_crc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &crc_)));
          set_has_crc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_offset;
        break;
      }

      // optional uint64 offset = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cb_original;
        break;
      }

      // optional uint32 cb_original = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cb_original:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cb_original_)));
          set_has_cb_original();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cb_compressed;
        break;
      }

      // optional uint32 cb_compressed = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cb_compressed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cb_compressed_)));
          set_has_cb_compressed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContentManifestPayload_FileMapping_ChunkData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes sha = 1;
  if (has_sha()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->sha(), output);
  }

  // optional fixed32 crc = 2;
  if (has_crc()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->crc(), output);
  }

  // optional uint64 offset = 3;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->offset(), output);
  }

  // optional uint32 cb_original = 4;
  if (has_cb_original()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cb_original(), output);
  }

  // optional uint32 cb_compressed = 5;
  if (has_cb_compressed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cb_compressed(), output);
  }

}

int ContentManifestPayload_FileMapping_ChunkData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes sha = 1;
    if (has_sha()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha());
    }

    // optional fixed32 crc = 2;
    if (has_crc()) {
      total_size += 1 + 4;
    }

    // optional uint64 offset = 3;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->offset());
    }

    // optional uint32 cb_original = 4;
    if (has_cb_original()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cb_original());
    }

    // optional uint32 cb_compressed = 5;
    if (has_cb_compressed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cb_compressed());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContentManifestPayload_FileMapping_ChunkData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ContentManifestPayload_FileMapping_ChunkData*>(&from));
}

void ContentManifestPayload_FileMapping_ChunkData::MergeFrom(const ContentManifestPayload_FileMapping_ChunkData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sha()) {
      set_sha(from.sha());
    }
    if (from.has_crc()) {
      set_crc(from.crc());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_cb_original()) {
      set_cb_original(from.cb_original());
    }
    if (from.has_cb_compressed()) {
      set_cb_compressed(from.cb_compressed());
    }
  }
}

void ContentManifestPayload_FileMapping_ChunkData::CopyFrom(const ContentManifestPayload_FileMapping_ChunkData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentManifestPayload_FileMapping_ChunkData::IsInitialized() const {

  return true;
}

void ContentManifestPayload_FileMapping_ChunkData::Swap(ContentManifestPayload_FileMapping_ChunkData* other) {
  if (other != this) {
    std::swap(sha_, other->sha_);
    std::swap(crc_, other->crc_);
    std::swap(offset_, other->offset_);
    std::swap(cb_original_, other->cb_original_);
    std::swap(cb_compressed_, other->cb_compressed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ContentManifestPayload_FileMapping_ChunkData::GetTypeName() const {
  return "Sc.ContentManifestPayload.FileMapping.ChunkData";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ContentManifestPayload_FileMapping::kFilenameFieldNumber;
const int ContentManifestPayload_FileMapping::kSizeFieldNumber;
const int ContentManifestPayload_FileMapping::kFlagsFieldNumber;
const int ContentManifestPayload_FileMapping::kShaFilenameFieldNumber;
const int ContentManifestPayload_FileMapping::kShaContentFieldNumber;
const int ContentManifestPayload_FileMapping::kChunksFieldNumber;
#endif  // !_MSC_VER

ContentManifestPayload_FileMapping::ContentManifestPayload_FileMapping()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ContentManifestPayload_FileMapping::InitAsDefaultInstance() {
}

ContentManifestPayload_FileMapping::ContentManifestPayload_FileMapping(const ContentManifestPayload_FileMapping& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ContentManifestPayload_FileMapping::SharedCtor() {
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  size_ = GOOGLE_ULONGLONG(0);
  flags_ = 0u;
  sha_filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sha_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContentManifestPayload_FileMapping::~ContentManifestPayload_FileMapping() {
  SharedDtor();
}

void ContentManifestPayload_FileMapping::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (sha_filename_ != &::google::protobuf::internal::kEmptyString) {
    delete sha_filename_;
  }
  if (sha_content_ != &::google::protobuf::internal::kEmptyString) {
    delete sha_content_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ContentManifestPayload_FileMapping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ContentManifestPayload_FileMapping& ContentManifestPayload_FileMapping::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_content_5fmanifest_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_content_5fmanifest_2eproto();
#endif
  return *default_instance_;
}

ContentManifestPayload_FileMapping* ContentManifestPayload_FileMapping::default_instance_ = NULL;

ContentManifestPayload_FileMapping* ContentManifestPayload_FileMapping::New() const {
  return new ContentManifestPayload_FileMapping;
}

void ContentManifestPayload_FileMapping::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    size_ = GOOGLE_ULONGLONG(0);
    flags_ = 0u;
    if (has_sha_filename()) {
      if (sha_filename_ != &::google::protobuf::internal::kEmptyString) {
        sha_filename_->clear();
      }
    }
    if (has_sha_content()) {
      if (sha_content_ != &::google::protobuf::internal::kEmptyString) {
        sha_content_->clear();
      }
    }
  }
  chunks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ContentManifestPayload_FileMapping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string filename = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // optional uint64 size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_flags;
        break;
      }

      // optional uint32 flags = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sha_filename;
        break;
      }

      // optional bytes sha_filename = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sha_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha_filename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_sha_content;
        break;
      }

      // optional bytes sha_content = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sha_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_chunks;
        break;
      }

      // repeated .Sc.ContentManifestPayload.FileMapping.ChunkData chunks = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chunks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chunks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_chunks;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContentManifestPayload_FileMapping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->filename(), output);
  }

  // optional uint64 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->size(), output);
  }

  // optional uint32 flags = 3;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flags(), output);
  }

  // optional bytes sha_filename = 4;
  if (has_sha_filename()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->sha_filename(), output);
  }

  // optional bytes sha_content = 5;
  if (has_sha_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->sha_content(), output);
  }

  // repeated .Sc.ContentManifestPayload.FileMapping.ChunkData chunks = 6;
  for (int i = 0; i < this->chunks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->chunks(i), output);
  }

}

int ContentManifestPayload_FileMapping::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string filename = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional uint64 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size());
    }

    // optional uint32 flags = 3;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional bytes sha_filename = 4;
    if (has_sha_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha_filename());
    }

    // optional bytes sha_content = 5;
    if (has_sha_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha_content());
    }

  }
  // repeated .Sc.ContentManifestPayload.FileMapping.ChunkData chunks = 6;
  total_size += 1 * this->chunks_size();
  for (int i = 0; i < this->chunks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chunks(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContentManifestPayload_FileMapping::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ContentManifestPayload_FileMapping*>(&from));
}

void ContentManifestPayload_FileMapping::MergeFrom(const ContentManifestPayload_FileMapping& from) {
  GOOGLE_CHECK_NE(&from, this);
  chunks_.MergeFrom(from.chunks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_sha_filename()) {
      set_sha_filename(from.sha_filename());
    }
    if (from.has_sha_content()) {
      set_sha_content(from.sha_content());
    }
  }
}

void ContentManifestPayload_FileMapping::CopyFrom(const ContentManifestPayload_FileMapping& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentManifestPayload_FileMapping::IsInitialized() const {

  return true;
}

void ContentManifestPayload_FileMapping::Swap(ContentManifestPayload_FileMapping* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(size_, other->size_);
    std::swap(flags_, other->flags_);
    std::swap(sha_filename_, other->sha_filename_);
    std::swap(sha_content_, other->sha_content_);
    chunks_.Swap(&other->chunks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ContentManifestPayload_FileMapping::GetTypeName() const {
  return "Sc.ContentManifestPayload.FileMapping";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ContentManifestPayload::kMappingsFieldNumber;
#endif  // !_MSC_VER

ContentManifestPayload::ContentManifestPayload()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ContentManifestPayload::InitAsDefaultInstance() {
}

ContentManifestPayload::ContentManifestPayload(const ContentManifestPayload& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ContentManifestPayload::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContentManifestPayload::~ContentManifestPayload() {
  SharedDtor();
}

void ContentManifestPayload::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ContentManifestPayload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ContentManifestPayload& ContentManifestPayload::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_content_5fmanifest_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_content_5fmanifest_2eproto();
#endif
  return *default_instance_;
}

ContentManifestPayload* ContentManifestPayload::default_instance_ = NULL;

ContentManifestPayload* ContentManifestPayload::New() const {
  return new ContentManifestPayload;
}

void ContentManifestPayload::Clear() {
  mappings_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ContentManifestPayload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Sc.ContentManifestPayload.FileMapping mappings = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mappings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mappings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mappings;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContentManifestPayload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Sc.ContentManifestPayload.FileMapping mappings = 1;
  for (int i = 0; i < this->mappings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->mappings(i), output);
  }

}

int ContentManifestPayload::ByteSize() const {
  int total_size = 0;

  // repeated .Sc.ContentManifestPayload.FileMapping mappings = 1;
  total_size += 1 * this->mappings_size();
  for (int i = 0; i < this->mappings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mappings(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContentManifestPayload::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ContentManifestPayload*>(&from));
}

void ContentManifestPayload::MergeFrom(const ContentManifestPayload& from) {
  GOOGLE_CHECK_NE(&from, this);
  mappings_.MergeFrom(from.mappings_);
}

void ContentManifestPayload::CopyFrom(const ContentManifestPayload& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentManifestPayload::IsInitialized() const {

  return true;
}

void ContentManifestPayload::Swap(ContentManifestPayload* other) {
  if (other != this) {
    mappings_.Swap(&other->mappings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ContentManifestPayload::GetTypeName() const {
  return "Sc.ContentManifestPayload";
}


// ===================================================================

#ifndef _MSC_VER
const int ContentManifestMetadata::kDepotIdFieldNumber;
const int ContentManifestMetadata::kGidManifestFieldNumber;
const int ContentManifestMetadata::kCreationTimeFieldNumber;
const int ContentManifestMetadata::kFilenamesEncryptedFieldNumber;
const int ContentManifestMetadata::kCbDiskOriginalFieldNumber;
const int ContentManifestMetadata::kCbDiskCompressedFieldNumber;
const int ContentManifestMetadata::kUniqueChunksFieldNumber;
const int ContentManifestMetadata::kCrcEncryptedFieldNumber;
const int ContentManifestMetadata::kCrcClearFieldNumber;
#endif  // !_MSC_VER

ContentManifestMetadata::ContentManifestMetadata()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ContentManifestMetadata::InitAsDefaultInstance() {
}

ContentManifestMetadata::ContentManifestMetadata(const ContentManifestMetadata& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ContentManifestMetadata::SharedCtor() {
  _cached_size_ = 0;
  depot_id_ = 0u;
  gid_manifest_ = GOOGLE_ULONGLONG(0);
  creation_time_ = 0u;
  filenames_encrypted_ = false;
  cb_disk_original_ = GOOGLE_ULONGLONG(0);
  cb_disk_compressed_ = GOOGLE_ULONGLONG(0);
  unique_chunks_ = 0u;
  crc_encrypted_ = 0u;
  crc_clear_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContentManifestMetadata::~ContentManifestMetadata() {
  SharedDtor();
}

void ContentManifestMetadata::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ContentManifestMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ContentManifestMetadata& ContentManifestMetadata::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_content_5fmanifest_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_content_5fmanifest_2eproto();
#endif
  return *default_instance_;
}

ContentManifestMetadata* ContentManifestMetadata::default_instance_ = NULL;

ContentManifestMetadata* ContentManifestMetadata::New() const {
  return new ContentManifestMetadata;
}

void ContentManifestMetadata::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    depot_id_ = 0u;
    gid_manifest_ = GOOGLE_ULONGLONG(0);
    creation_time_ = 0u;
    filenames_encrypted_ = false;
    cb_disk_original_ = GOOGLE_ULONGLONG(0);
    cb_disk_compressed_ = GOOGLE_ULONGLONG(0);
    unique_chunks_ = 0u;
    crc_encrypted_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    crc_clear_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ContentManifestMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 depot_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &depot_id_)));
          set_has_depot_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gid_manifest;
        break;
      }

      // optional uint64 gid_manifest = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gid_manifest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gid_manifest_)));
          set_has_gid_manifest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_creation_time;
        break;
      }

      // optional uint32 creation_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_creation_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creation_time_)));
          set_has_creation_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_filenames_encrypted;
        break;
      }

      // optional bool filenames_encrypted = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filenames_encrypted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &filenames_encrypted_)));
          set_has_filenames_encrypted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cb_disk_original;
        break;
      }

      // optional uint64 cb_disk_original = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cb_disk_original:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cb_disk_original_)));
          set_has_cb_disk_original();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cb_disk_compressed;
        break;
      }

      // optional uint64 cb_disk_compressed = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cb_disk_compressed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cb_disk_compressed_)));
          set_has_cb_disk_compressed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_unique_chunks;
        break;
      }

      // optional uint32 unique_chunks = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unique_chunks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unique_chunks_)));
          set_has_unique_chunks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_crc_encrypted;
        break;
      }

      // optional uint32 crc_encrypted = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crc_encrypted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crc_encrypted_)));
          set_has_crc_encrypted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_crc_clear;
        break;
      }

      // optional uint32 crc_clear = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crc_clear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crc_clear_)));
          set_has_crc_clear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContentManifestMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 depot_id = 1;
  if (has_depot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->depot_id(), output);
  }

  // optional uint64 gid_manifest = 2;
  if (has_gid_manifest()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->gid_manifest(), output);
  }

  // optional uint32 creation_time = 3;
  if (has_creation_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->creation_time(), output);
  }

  // optional bool filenames_encrypted = 4;
  if (has_filenames_encrypted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->filenames_encrypted(), output);
  }

  // optional uint64 cb_disk_original = 5;
  if (has_cb_disk_original()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->cb_disk_original(), output);
  }

  // optional uint64 cb_disk_compressed = 6;
  if (has_cb_disk_compressed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->cb_disk_compressed(), output);
  }

  // optional uint32 unique_chunks = 7;
  if (has_unique_chunks()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->unique_chunks(), output);
  }

  // optional uint32 crc_encrypted = 8;
  if (has_crc_encrypted()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->crc_encrypted(), output);
  }

  // optional uint32 crc_clear = 9;
  if (has_crc_clear()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->crc_clear(), output);
  }

}

int ContentManifestMetadata::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 depot_id = 1;
    if (has_depot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->depot_id());
    }

    // optional uint64 gid_manifest = 2;
    if (has_gid_manifest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gid_manifest());
    }

    // optional uint32 creation_time = 3;
    if (has_creation_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creation_time());
    }

    // optional bool filenames_encrypted = 4;
    if (has_filenames_encrypted()) {
      total_size += 1 + 1;
    }

    // optional uint64 cb_disk_original = 5;
    if (has_cb_disk_original()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cb_disk_original());
    }

    // optional uint64 cb_disk_compressed = 6;
    if (has_cb_disk_compressed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cb_disk_compressed());
    }

    // optional uint32 unique_chunks = 7;
    if (has_unique_chunks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unique_chunks());
    }

    // optional uint32 crc_encrypted = 8;
    if (has_crc_encrypted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crc_encrypted());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 crc_clear = 9;
    if (has_crc_clear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crc_clear());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContentManifestMetadata::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ContentManifestMetadata*>(&from));
}

void ContentManifestMetadata::MergeFrom(const ContentManifestMetadata& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_depot_id()) {
      set_depot_id(from.depot_id());
    }
    if (from.has_gid_manifest()) {
      set_gid_manifest(from.gid_manifest());
    }
    if (from.has_creation_time()) {
      set_creation_time(from.creation_time());
    }
    if (from.has_filenames_encrypted()) {
      set_filenames_encrypted(from.filenames_encrypted());
    }
    if (from.has_cb_disk_original()) {
      set_cb_disk_original(from.cb_disk_original());
    }
    if (from.has_cb_disk_compressed()) {
      set_cb_disk_compressed(from.cb_disk_compressed());
    }
    if (from.has_unique_chunks()) {
      set_unique_chunks(from.unique_chunks());
    }
    if (from.has_crc_encrypted()) {
      set_crc_encrypted(from.crc_encrypted());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_crc_clear()) {
      set_crc_clear(from.crc_clear());
    }
  }
}

void ContentManifestMetadata::CopyFrom(const ContentManifestMetadata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentManifestMetadata::IsInitialized() const {

  return true;
}

void ContentManifestMetadata::Swap(ContentManifestMetadata* other) {
  if (other != this) {
    std::swap(depot_id_, other->depot_id_);
    std::swap(gid_manifest_, other->gid_manifest_);
    std::swap(creation_time_, other->creation_time_);
    std::swap(filenames_encrypted_, other->filenames_encrypted_);
    std::swap(cb_disk_original_, other->cb_disk_original_);
    std::swap(cb_disk_compressed_, other->cb_disk_compressed_);
    std::swap(unique_chunks_, other->unique_chunks_);
    std::swap(crc_encrypted_, other->crc_encrypted_);
    std::swap(crc_clear_, other->crc_clear_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ContentManifestMetadata::GetTypeName() const {
  return "Sc.ContentManifestMetadata";
}


// ===================================================================

#ifndef _MSC_VER
const int ContentManifestSignature::kSignatureFieldNumber;
#endif  // !_MSC_VER

ContentManifestSignature::ContentManifestSignature()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ContentManifestSignature::InitAsDefaultInstance() {
}

ContentManifestSignature::ContentManifestSignature(const ContentManifestSignature& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ContentManifestSignature::SharedCtor() {
  _cached_size_ = 0;
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContentManifestSignature::~ContentManifestSignature() {
  SharedDtor();
}

void ContentManifestSignature::SharedDtor() {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ContentManifestSignature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ContentManifestSignature& ContentManifestSignature::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_content_5fmanifest_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_content_5fmanifest_2eproto();
#endif
  return *default_instance_;
}

ContentManifestSignature* ContentManifestSignature::default_instance_ = NULL;

ContentManifestSignature* ContentManifestSignature::New() const {
  return new ContentManifestSignature;
}

void ContentManifestSignature::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::kEmptyString) {
        signature_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ContentManifestSignature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes signature = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContentManifestSignature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes signature = 1;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->signature(), output);
  }

}

int ContentManifestSignature::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes signature = 1;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContentManifestSignature::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ContentManifestSignature*>(&from));
}

void ContentManifestSignature::MergeFrom(const ContentManifestSignature& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signature()) {
      set_signature(from.signature());
    }
  }
}

void ContentManifestSignature::CopyFrom(const ContentManifestSignature& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentManifestSignature::IsInitialized() const {

  return true;
}

void ContentManifestSignature::Swap(ContentManifestSignature* other) {
  if (other != this) {
    std::swap(signature_, other->signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ContentManifestSignature::GetTypeName() const {
  return "Sc.ContentManifestSignature";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Sc

// @@protoc_insertion_point(global_scope)
